structure Vecteur3D {
	x : n32;
	y : n32;
	z : n32;
}

#!si faux
fonction racine_carré(x : n32) : n32
{
	soit variable res = 0;

	# Le second bit est mis en place
	# n8  : 1 << 6
	# n16 : 1 << 14
	# n32 : 1 << 30
	# n64 : 1 << 62
	soit variable bit = 1 << 30;

	boucle (bit > x) {
		bit = bit >> 2;
	}

	boucle (bit != 0) {
		if (x >= res + bit) {
			num = num - (res + bit);
			res = res + (bit << 1);
		}

		res = res >> 1;
		bit = bit >> 2;
	}

	retourne res;
}

fonction carré(x : n32) : n32
{
	retourne x * x;
}

fonction longueur_vecteur(v : Vecteur3D) : n32
{
	retourne 0;
}

fonction longueur(x : n32, y : n32, z : n32) : n32
{
	retourne racine_carré(carré(x) + carré(y) + carré(z));
}

fonction principale(compte : n32, arguments : []*c8) : n32
{
	retourne longueur(compte, compte, compte);
}

fonction foo(compte : [2][2]n32) : n32
{
	soit a = compte[0][0];
	soit b = @compte;
	retourne 1;
}
#!finsi

#!si faux
fonction principale1()
{
	soit t0 = 5 + 2;
	soit t1 = 5 - 2;
	soit t2 = 5 * 2;
	soit t3 = 5 / 2;
	soit t4 = 5 % 2;
	soit t5 = 5 >> 2;
	soit t6 = 5 << 2;
	soit t7 = 5 & 2;
	soit t8 = 5 | 2;
	soit t9 = 5 ^ t0;
}

fonction principale2()
{
	soit t0 = 5.0 == 2.0;
	soit t1 = 5.0 != 2.0;
	soit t2 = 5.0 <= 2.0;
	soit t3 = 5.0 >= 2.0;
	soit t4 = 5.0 < 2.0;
	soit t5 = 5.0 > 2.0;
}

fonction principale3()
{
	soit t4 = (5.0 == 5.0) && (6.0 == 6.0);
	soit t5 = vrai != vrai;
	soit t6 = faux == faux;
}
#!finsi
