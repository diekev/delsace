/*
 * ***** BEGIN GPL LICENSE BLOCK *****
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software  Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * The Original Code is Copyright (C) 2018 KÃ©vin Dietrich.
 * All rights reserved.
 *
 * ***** END GPL LICENSE BLOCK *****
 *
 */

#include "morceaux.h"

const char *chaine_identifiant(int identifiant)
{
	switch (identifiant) {
		case IDENTIFIANT_ARRETE:
			return "IDENTIFIANT_ARRETE";
		case IDENTIFIANT_ASSOCIE:
			return "IDENTIFIANT_ASSOCIE";
		case IDENTIFIANT_BOOLEEN:
			return "IDENTIFIANT_BOOLEEN";
		case IDENTIFIANT_BOUCLE:
			return "IDENTIFIANT_BOUCLE";
		case IDENTIFIANT_CHAINE:
			return "IDENTIFIANT_CHAINE";
		case IDENTIFIANT_CLASSE:
			return "IDENTIFIANT_CLASSE";
		case IDENTIFIANT_CONSTANT:
			return "IDENTIFIANT_CONSTANT";
		case IDENTIFIANT_CONSTRUCTEUR:
			return "IDENTIFIANT_CONSTRUCTEUR";
		case IDENTIFIANT_DE:
			return "IDENTIFIANT_DE";
		case IDENTIFIANT_DESTRUCTEUR:
			return "IDENTIFIANT_DESTRUCTEUR";
		case IDENTIFIANT_DECIMAL32:
			return "IDENTIFIANT_DECIMAL32";
		case IDENTIFIANT_DECIMAL64:
			return "IDENTIFIANT_DECIMAL64";
		case IDENTIFIANT_DEFAUT:
			return "IDENTIFIANT_DEFAUT";
		case IDENTIFIANT_ENTIER16:
			return "IDENTIFIANT_ENTIER16";
		case IDENTIFIANT_ENTIER16NS:
			return "IDENTIFIANT_ENTIER16NS";
		case IDENTIFIANT_ENTIER32:
			return "IDENTIFIANT_ENTIER32";
		case IDENTIFIANT_ENTIER32NS:
			return "IDENTIFIANT_ENTIER32NS";
		case IDENTIFIANT_ENTIER64:
			return "IDENTIFIANT_ENTIER64";
		case IDENTIFIANT_ENTIER64NS:
			return "IDENTIFIANT_ENTIER64NS";
		case IDENTIFIANT_ENTIER8:
			return "IDENTIFIANT_ENTIER8";
		case IDENTIFIANT_ENTIER8NS:
			return "IDENTIFIANT_ENTIER8NS";
		case IDENTIFIANT_ENUM:
			return "IDENTIFIANT_ENUM";
		case IDENTIFIANT_EXPRIME:
			return "IDENTIFIANT_EXPRIME";
		case IDENTIFIANT_FAUX:
			return "IDENTIFIANT_FAUX";
		case IDENTIFIANT_FONCTION:
			return "IDENTIFIANT_FONCTION";
		case IDENTIFIANT_GABARIT:
			return "IDENTIFIANT_GABARIT";
		case IDENTIFIANT_IMPORTE:
			return "IDENTIFIANT_IMPORTE";
		case IDENTIFIANT_IMPRIME:
			return "IDENTIFIANT_IMPRIME";
		case IDENTIFIANT_INDEX:
			return "IDENTIFIANT_INDEX";
		case IDENTIFIANT_OPERATEUR:
			return "IDENTIFIANT_OPERATEUR";
		case IDENTIFIANT_RETOURNE:
			return "IDENTIFIANT_RETOURNE";
		case IDENTIFIANT_SI:
			return "IDENTIFIANT_SI";
		case IDENTIFIANT_SINON:
			return "IDENTIFIANT_SINON";
		case IDENTIFIANT_SOIT:
			return "IDENTIFIANT_SOIT";
		case IDENTIFIANT_SORTIE:
			return "IDENTIFIANT_SORTIE";
		case IDENTIFIANT_VRAI:
			return "IDENTIFIANT_VRAI";
		case IDENTIFIANT_ECHEC:
			return "IDENTIFIANT_ECHEC";
		case IDENTIFIANT_DIFFERENCE:
			return "IDENTIFIANT_DIFFERENCE";
		case IDENTIFIANT_ESP_ESP:
			return "IDENTIFIANT_ESP_ESP";
		case IDENTIFIANT_ET_EGAL:
			return "IDENTIFIANT_ET_EGAL";
		case IDENTIFIANT_FOIS_EGAL:
			return "IDENTIFIANT_FOIS_EGAL";
		case IDENTIFIANT_PLUS_PLUS:
			return "IDENTIFIANT_PLUS_PLUS";
		case IDENTIFIANT_PLUS_EGAL:
			return "IDENTIFIANT_PLUS_EGAL";
		case IDENTIFIANT_MOINS_MOINS:
			return "IDENTIFIANT_MOINS_MOINS";
		case IDENTIFIANT_MOINS_EGAL:
			return "IDENTIFIANT_MOINS_EGAL";
		case IDENTIFIANT_FLECHE:
			return "IDENTIFIANT_FLECHE";
		case IDENTIFIANT_TROIS_POINT:
			return "IDENTIFIANT_TROIS_POINT";
		case IDENTIFIANT_DIVISE_EGAL:
			return "IDENTIFIANT_DIVISE_EGAL";
		case IDENTIFIANT_DECALAGE_GAUCHE:
			return "IDENTIFIANT_DECALAGE_GAUCHE";
		case IDENTIFIANT_INFERIEUR_EGAL:
			return "IDENTIFIANT_INFERIEUR_EGAL";
		case IDENTIFIANT_EGALITE:
			return "IDENTIFIANT_EGALITE";
		case IDENTIFIANT_SUPERIEUR_EGAL:
			return "IDENTIFIANT_SUPERIEUR_EGAL";
		case IDENTIFIANT_DECALAGE_DROITE:
			return "IDENTIFIANT_DECALAGE_DROITE";
		case IDENTIFIANT_OUX_EGAL:
			return "IDENTIFIANT_OUX_EGAL";
		case IDENTIFIANT_OU_EGAL:
			return "IDENTIFIANT_OU_EGAL";
		case IDENTIFIANT_BARE_BARRE:
			return "IDENTIFIANT_BARE_BARRE";
		case IDENTIFIANT_EXCLAMATION:
			return "IDENTIFIANT_EXCLAMATION";
		case IDENTIFIANT_GUILLEMET:
			return "IDENTIFIANT_GUILLEMET";
		case IDENTIFIANT_DIESE:
			return "IDENTIFIANT_DIESE";
		case IDENTIFIANT_POURCENT:
			return "IDENTIFIANT_POURCENT";
		case IDENTIFIANT_ESPERLUETTE:
			return "IDENTIFIANT_ESPERLUETTE";
		case IDENTIFIANT_APOSTROPHE:
			return "IDENTIFIANT_APOSTROPHE";
		case IDENTIFIANT_PARENTHESE_OUVRANTE:
			return "IDENTIFIANT_PARENTHESE_OUVRANTE";
		case IDENTIFIANT_PARENTHESE_FERMANTE:
			return "IDENTIFIANT_PARENTHESE_FERMANTE";
		case IDENTIFIANT_FOIS:
			return "IDENTIFIANT_FOIS";
		case IDENTIFIANT_PLUS:
			return "IDENTIFIANT_PLUS";
		case IDENTIFIANT_MOINS:
			return "IDENTIFIANT_MOINS";
		case IDENTIFIANT_POINT:
			return "IDENTIFIANT_POINT";
		case IDENTIFIANT_DIVISE:
			return "IDENTIFIANT_DIVISE";
		case IDENTIFIANT_DOUBLE_POINT:
			return "IDENTIFIANT_DOUBLE_POINT";
		case IDENTIFIANT_POINT_VIRGULE:
			return "IDENTIFIANT_POINT_VIRGULE";
		case IDENTIFIANT_INFERIEUR:
			return "IDENTIFIANT_INFERIEUR";
		case IDENTIFIANT_EGAL:
			return "IDENTIFIANT_EGAL";
		case IDENTIFIANT_SUPERIEUR:
			return "IDENTIFIANT_SUPERIEUR";
		case IDENTIFIANT_CROCHET_OUVRANT:
			return "IDENTIFIANT_CROCHET_OUVRANT";
		case IDENTIFIANT_CROCHET_FERMANT:
			return "IDENTIFIANT_CROCHET_FERMANT";
		case IDENTIFIANT_CHAPEAU:
			return "IDENTIFIANT_CHAPEAU";
		case IDENTIFIANT_ACCOLADE_OUVRANTE:
			return "IDENTIFIANT_ACCOLADE_OUVRANTE";
		case IDENTIFIANT_BARRE:
			return "IDENTIFIANT_BARRE";
		case IDENTIFIANT_ACCOLADE_FERMANTE:
			return "IDENTIFIANT_ACCOLADE_FERMANTE";
		case IDENTIFIANT_CHAINE_CARACTERE:
			return "IDENTIFIANT_CHAINE_CARACTERE";
		case IDENTIFIANT_CHAINE_LITTERALE:
			return "IDENTIFIANT_CHAINE_LITTERALE";
		case IDENTIFIANT_CARACTERE:
			return "IDENTIFIANT_CARACTERE";
		case IDENTIFIANT_NOMBRE:
			return "IDENTIFIANT_NOMBRE";
		case IDENTIFIANT_DECIMAL:
			return "IDENTIFIANT_DECIMAL";
		case IDENTIFIANT_NUL:
			return "IDENTIFIANT_NUL";
	}
	return "NULL";
}
