# Bibliothèque de flux, d'impression dans stdout.

# Valeur des descripteurs fichiers pour les flux standards.
soit std_out = 0;
soit std_err = 1;
soit std_log = 2;

fonction externe printf(fmt : *z8, args : ...) : z32;
fonction externe sprintf(tmp : *z8, fmt : *z8, args : ...) : z32;
fonction externe open(chemin : *z8, oflag : z32) : z32;
fonction externe close(filedes : z32) : z32;
fonction externe read(filedes : z32, tpn : *z8, nbyte : z64) : z32;
fonction externe write(filedes : z32, tpn : *z8, nbyte : z64) : z32;

fonction imprime_valeur(
    flux_std : z32,
	pointeur : *z8,
	info : *InfoType,
	echappe_chn : bool) : rien
{
    dyn tmp : [128]z8;
    dyn ptr_tmp = @tmp[0];

    dyn ecrie = 0;

    associe id de info {
	    ENTIER de id_info
		{
		    soit info_arg = transtype(info : *InfoTypeEntier);

            si est_signe de info_arg {
			    si taille_en_octet de info_arg == 8 {
				    soit x = mémoire(transtype(pointeur : *z8));
					ecrie = sprintf(ptr_tmp, "%c", x);
				}
				sinon si taille_en_octet de info_arg == 16 {
				    soit x = mémoire(transtype(pointeur : *z16));
					ecrie = sprintf(ptr_tmp, "%d", x);
				}
				sinon si taille_en_octet de info_arg == 32 {
				    soit x = mémoire(transtype(pointeur : *z32));
					ecrie = sprintf(ptr_tmp, "%d", x);
				}
				sinon si taille_en_octet de info_arg == 64 {
				    soit x = mémoire(transtype(pointeur : *z64));
					ecrie = sprintf(ptr_tmp, "%ld", x);
				}
			}
			sinon {
			    si taille_en_octet de info_arg == 8 {
				    soit x = mémoire(transtype(pointeur : *n8));
					ecrie = sprintf(ptr_tmp, "%c", x);
				}
				sinon si taille_en_octet de info_arg == 16 {
				    soit x = mémoire(transtype(pointeur : *n16));
					ecrie = sprintf(ptr_tmp, "%d", x);
				}
				sinon si taille_en_octet de info_arg == 32 {
				    soit x = mémoire(transtype(pointeur : *n32));
					ecrie = sprintf(ptr_tmp, "%d", x);
				}
				sinon si taille_en_octet de info_arg == 64 {
				    soit x = mémoire(transtype(pointeur : *n64));
					ecrie = sprintf(ptr_tmp, "%ld", x);
				}
			}
		}
		REEL de id_info
		{
			soit info_arg = transtype(info : *InfoTypeReel);

            # À FAIRE : type R16
            si taille_en_octet de info_arg == 16 {
			    soit x = mémoire(transtype(pointeur : *r16));
				ecrie = sprintf(ptr_tmp, "%f", x);
			}
			sinon si taille_en_octet de info_arg == 32 {
			    soit x = mémoire(transtype(pointeur : *r32));
				ecrie = sprintf(ptr_tmp, "%f", x);
			}
			sinon si taille_en_octet de info_arg == 64 {
			    soit x = mémoire(transtype(pointeur : *r64));
				ecrie = sprintf(ptr_tmp, "%f", x);
			}
		}
		BOOLEEN de id_info
		{
		    soit x = mémoire(transtype(pointeur : *bool));
			dyn chn : chaine;

            si x {
			    chn = "vrai";
			}
			sinon {
			    chn = "faux";
			}

            write(flux_std, pointeur de chn, taille de chn);
		}
		CHAINE de id_info
		{
		    soit x = mémoire(transtype(pointeur : *chaine));
			soit apostrophe = '"';

            si echappe_chn {
			    write(flux_std, @apostrophe, 1);
			}

            write(flux_std, pointeur de x, taille de x);

            si echappe_chn {
			    write(flux_std, @apostrophe, 1);
			}
		}
		STRUCTURE de id_info
		{
		    soit info_arg = transtype(info : *InfoTypeStructure);

            ecrie = sprintf(ptr_tmp, "%s {", pointeur de nom de info_arg);
			write(flux_std, ptr_tmp, transtype(ecrie : z64));

            dyn virgule = '\0';

            pour membre dans membres de info_arg {
			    soit ptr_nom = pointeur de nom de membre;
				soit decalage = decalage de membre;
				soit id = id de membre;

                ecrie = sprintf(ptr_tmp, "%c", virgule);
				write(flux_std, ptr_tmp, transtype(ecrie : z64));

                ecrie = sprintf(ptr_tmp, " %s = ", ptr_nom);
				write(flux_std, ptr_tmp, transtype(ecrie : z64));

                imprime_valeur(flux_std, pointeur + decalage, id, vrai);
				virgule = ',';
			}

            ecrie = sprintf(ptr_tmp, " %c", '}');
			write(flux_std, ptr_tmp, transtype(ecrie : z64));
			ecrie = 0;
		}
		POINTEUR de id_info
		{
		    # Ne pas oublier qu'il y a un niveau d'indirection.
			soit x = transtype(pointeur : **z8);
			soit x0 = mémoire(x);
			ecrie = sprintf(ptr_tmp, "%p", x0);
		}
		FONCTION de id_info
		{
		    # À FAIRE : types paramètres
			soit x = "fonction()";
			write(flux_std, pointeur de x, taille de x);
		}
		EINI de id_info
		{
		    soit x = mémoire(transtype(pointeur : *eini));
			ecrie = sprintf(ptr_tmp, "eini { ptr = %p, info = %d }", pointeur de x, info de x);
		}
		RIEN de id_info
		{
		    soit x = "rien";
			write(flux_std, pointeur de x, taille de x);
		}
		TABLEAU de id_info
		{
		    soit x = mémoire(transtype(pointeur : *[]z8));
			ecrie = sprintf(ptr_tmp, "tableau { ptr = %p, taille = %d }", pointeur de x, taille de x);
		}
		ENUM de id_info
		{
		    soit info_arg = transtype(info : *InfoTypeEnum);
			# À FAIRE : typage selon énum
			soit valeur = mémoire(transtype(pointeur : *z32));
			soit noms = noms de info_arg;

			pour v, i dans valeurs de info_arg {
			    si v == valeur {
				    soit n = noms[i];
					write(flux_std, pointeur de n, taille de n);
					arrête;
				}
			}
		}
	}

    si ecrie != 0 {
	    write(flux_std, ptr_tmp, transtype(ecrie : z64));
	}
}

fonction imprime(args : ...eini) : rien
{
    pour arg dans args {
	    imprime_valeur(std_out, pointeur de arg, info de arg, faux);
    }
}

fonction imprime_err(args : ...eini) : rien
{
    pour arg dans args {
	    imprime_valeur(std_err, pointeur de arg, info de arg, faux);
	}
}
