# Bibliothèque de manipulation d'uri.

importe "chaine"

# URI = scheme:[//authority]path[?query][#fragment]
# authority = [userinfo@]host[:port]
structure URI {
    uri : chaine;
	schema : chaine;
	autorite : chaine;
	chemin : chaine;
	requete : chaine;
	fragment : chaine;
	userinfo : chaine;
	hote : chaine;
	port : chaine;
}

fonction est_valide(uri : *URI) : bool
{
	si chaine_est_vide(schema de uri) {
		retourne faux;
	}

	si !chaine_est_vide(autorite de uri) {
		si chaine_est_vide(hote de uri) {
		    retourne faux;
		}
	}

	retourne vrai;
}

fonction construit_uri(chn : chaine) : URI
{
    dyn uri : URI;
    uri de uri = chn;
       
	# le schéma se trouve entre le début et ':'
	dyn pos = trouve_caractere_chaine(chn, ':', 0);

	si pos != -1 {
		schema de uri = construit_chaine(@chn[0], pos);
		pos += 1;
	}
	sinon {
		pos = 0;
	}

	si (chn[pos] == '/' && chn[pos + 1] == '/') {
		pos = pos + 2;
		dyn fin_autorite = trouve_caractere_chaine(chn, '/', pos);

		si (fin_autorite == -1) {
			fin_autorite = taille de chn;
		}

		autorite de uri = construit_chaine(@chn[pos - 2], fin_autorite - pos + 2);

		dyn fin_user_info = trouve_caractere_chaine(chn, '@', pos);

		# il est possible d'avoir un mot de passe : username:motdepasse
		si (fin_user_info != -1) {
			userinfo de uri = construit_chaine(@chn[pos], fin_user_info - (pos));

			pos = fin_user_info + 1;
		}

		# il est possible d'avoir des addresse IPv6 entre []

		si (chn[pos] == '[') {
			dyn fin_adresse = trouve_caractere_chaine(chn, ']', 0);
			hote de uri = construit_chaine(@chn[pos], fin_adresse - pos + 1);

			si (chn[fin_adresse + 1] == ':') {
				port de uri = construit_chaine(@chn[fin_adresse + 2], fin_autorite - fin_adresse - 2);
			}
		}
		sinon {
			dyn debut_port = trouve_caractere_chaine(chn, ':', pos);

			si (debut_port != -1) {
				port de uri = construit_chaine(@chn[debut_port + 1], fin_autorite - debut_port - 1);
				hote de uri = construit_chaine(@chn[pos], debut_port - pos);
			}
			sinon {
				hote de uri = construit_chaine(@chn[pos], fin_autorite - pos);
			}
		}

		pos = fin_autorite;
	}

	dyn pos_requete = trouve_caractere_chaine(chn, '?', 0);
	dyn pos_fragment = trouve_caractere_chaine(chn, '#', 0);
	dyn pos_fin_chemin = taille de chn;

	si (pos_requete != -1) {
		pos_fin_chemin = pos_requete;
	}
	sinon si (pos_fragment != -1) {
		pos_fin_chemin = pos_requete;
	}

	chemin de uri = construit_chaine(@chn[pos], pos_fin_chemin - pos);

	si (pos_requete != -1) {
		si (pos_fragment == -1) {
			pos_fragment = taille de chn;
		}

		requete de uri = construit_chaine(@chn[pos_requete], pos_fragment - pos_requete);
	}

	si (pos_fragment != -1) {
		fragment de uri = construit_chaine(@chn[pos_fragment], taille de chn - pos_fragment);
	}
	
	retourne uri;
}
