# Grammaire (surrannée)
-----------

programme:
	fonction | enum | classe | importation

fonction:
	id_fonction chaine ( liste_parametre ) { expressions }

enum:
	enum { chaine [= valeur[,]] ... };

classe:
	id_classe chaine { expressions | fonction }

chaine:

liste_parametre:
	parametre [, liste_parametre]

parametre:
	id_type chaine

expressions:
	declaration | assignement | appel

declaration:
	id_type chaine = expression_d;

assignement:
	chaine = expression_d;

appel:
	chaine(liste_param);


# Programme
-----------

Un programme Kuri peut-être consitutué de plusieurs fichiers, s'incluant les uns les autres. Toutefois, tous les fichiers doivent être encodé en UTF-8.

La résolution des chemins de fichiers et des fichiers à inclure pour compiler un programme Kuri se fait par le compileur quand celui-ci est invoqué.


# Caractères spéciaux
---------------------

Un programme Kuri peut contenir toutes sortes de caractère Unicode encodé selon la norme UTF-8. Il existe plusieurs caractères spéciaux définissant qui ne peuvent être utilisés dans les noms de fonctions ou variables. Ces caractères servent en outre à définir les limites des instructions d'un programme Kuri.

Ces caractères et leurs significations sont les suivants :
--   : espace pour séparer les mots-clés et les mots définis par le programme (nom de fonction ou de variable)
-- ( : démarre une liste de paramètres
-- ) : termine une liste de paramètres
-- { : démarre une portée
-- } : termine une portée
-- [ : démarre un tableau
-- ] : termine un tableau
-- : : démarre la déclaration d'un type
-- # : démarre un commentaire
-- = : démarre l'assignation d'une variable
-- ' : démarre la déclaration d'un caractère ASCII
-- " : démarre la déclaration d'une chaîne littérale
-- ; : termine une expression
-- , : sépare les éléments d'une liste
-- + : opérateur d'addition
-- - : opérateur de soustraction
-- * : opérateur de multiplication, spécification ou déréférencement d'un pointeur, selon le contexte
-- / : opérateur de division
-- % : opérateur de reste de division ou modulo
-- ! : opérateur 'non' booléen
-- < : opérateur de comparaison strictement inférieure
-- > : opérateur de comparaison strictement supérieure
-- @ : opérateur d'obtention de l'adresse d'une variable
-- ~ : opérateur 'non' binaire, inverse les bits des octets de l'opérande
-- & : opérateur 'et' binaire, ou spécification d'une référence, selon le contexte
-- ^ : opérateur 'ou exclusif' binaire
-- | : opérateur 'ou' binaire

En outre, certains caractères se composent pour faire des "caractères doubles" :
-- == : opérateur d'égalité
-- != : opérateur de différence
-- >= : opérateur de comparaison supérieure ou égale
-- <= : opérateur de comparaison inférieure ou égale
-- && : opérateur 'et' booléen
-- || : opérateur 'ou' booléen
-- << : opérateur de décalage de bits vers la gauche
-- >> : opérateur de décalage de bits vers la droite


# Mots spéciaux
---------------

En sus des caractères spéciaux, il existe une suite de mots réservés. Ces mots servent à instruire le compileur à faire certaines choses. Ces mots réservés sont les suivants :

types :
-- e8  : représente un nombre entier représenté sur 8-bit (1 octet) dont les valeurs vont de -128 à 127
-- e16 : représente un nombre entier représenté sur 16-bit (2 octets) dont les valeurs vont de -2^15 à 2^15 - 1
-- e32 : représente un nombre entier représenté sur 32-bit (4 octets) dont les valeurs vont de -2^31 à 2^31 - 1
-- e64 : représente un nombre entier représenté sur 64-bit (8 octets) dont les valeurs vont de -2^63 à 2^32 - 1
-- e8ns  : représente un nombre entier représenté sur 8-bit (1 octet) dont les valeurs vont de 0 à 255
-- e16ns : représente un nombre entier représenté sur 16-bit (2 octets) dont les valeurs vont de 0 à 65536
-- e32ns : représente un nombre entier représenté sur 32-bit (4 octets) dont les valeurs vont de 0 à 2^32
-- e64ns : représente un nombre entier représenté sur 64-bit (8 octets) dont les valeurs vont de 0 à 2^64
-- r16 : représente un nombre réel à virgule flottante représenté sur 16-bit (2 octets)
-- r32 : représente un nombre réel à virgule flottante représenté sur 32-bit (4 octets)
-- r64 : représente un nombre réel à virgule flottante représenté sur 64-bit (8 octets)
-- rien : représente l'absence de valeur (pour une fonction qui ne retourne rien)
-- bool : représente une valeur qui ne peux prendre que deux valeurs

instructions :
-- soit      : instruit la déclaration d'une variable
-- constante : instruit que la variable est une constante que personne ne peut changer
-- variable  : instruit que le paramètre peut changer
-- fonction  : instruit la déclaration d'une fonction
-- boucle    : instruit la création d'une boucle
-- pour      : instruit la création d'une boucle
-- dans      : instruit la définition d'une plage pour une boucle
-- arrête    : instruit l'arrêt une boucle
-- continue  : instruit la continuation une boucle
-- associe   : instruit la comparaison de d'une valeur avec plusieurs autres
-- si        : instruit la création d'un contrôle de flux
-- sinon     : instruit la continuation d'un contrôle de flux
-- énum      : instruit la déclaration d'une suite d'énumération
-- structure : instruit la déclaration d'une structure de données
-- gabarit   : instruit que la fonction ou la structure est un gabarit
-- de        : instruit que l'on recherche une propriété d'une structure de données
-- retourne  : instruit que l'on retourne d'une fonction
-- défère    : instruit que l'expression suivante doit être exécuté à la fin de la portée
-- transtype : instruit que l'on modifie le type d'une variable

valeurs :
-- vrai : représente l'état d'un bool
-- faux : représente l'état d'un bool

autres :
-- ... : représente une plage

ancien :
-- classe
-- constant
-- constructeur
-- destructeur
-- défaut
-- exprime
-- échec
-- imprime
-- importe
-- opérateur
-- sortie

considération :
-- employant : instruit une sorte d'héritage par anomymisation (Jai)
-- type : instruit la déclaration d'un type dans un gabarit
-- phrase : déclaration d'un type de chaîne de caractère
-- chaîne : déclaration d'un type de chaîne de caractère
-- retiens : instruit de sortie temporaire d'une fonction génératrice
-- comme : boucle expr comme nom {}
-- public/protégé/privé
-- implément : héritage


# Fonction
----------

La fonction est la composante principale d'un programme Kuri. Aucune logique ne peut se faire en dehors d'une fonction.

appel fonction :
chaine(expr...);

appel fonction gabarit :
soit c = ajoute(e16)(a, b);

déclaration fonction :
fonction chaine ( paramètres... )                   { ... }
fonction chaine ( paramètres... ) point_double type { ... }

déclation paramètres fonction :
chaine :   type
chaine : * type

Il est possible de nommer les arguments de l'appel d'une fonction. Si l'on commence à nommer les arguments, tous les arguments doivent être nommés.


# Expression
------------

Une expression est un ensemble de mot et symboles retournant une valeur.

Par exemple 2 + 3 retourne la valeur 5, mais a = 2 n'est pas une expression car elle ne retourne aucune valeur.

Expression arithmétique :
une expression arithmétique est une expression qui retourne un nombre. Par exemple : 6 + 7.

Expression booléenne :
une expression booléenne est une expression qui retourne soit vrai, soit faux. Par exemple : 6 < 7.

Expression structurante :
une expression structurante est une expression que retourne une structure de données via une fonction : soit arbre = crée_arbre();


# Variables
-----------

Une variable est un stockage temporaire d'une valeur.

La déclaration d'une variable peut se faire d'une des manières suivantes :
soit          chaine                        = expr ;
soit          chaine :                 type = expr ;
soit          chaine : spécifieur_type type = expr ;
soit variable chaine                        = expr ;
soit variable chaine :                 type = expr ;
soit variable chaine : spécifieur_type type = expr ;

Par exemple :
soit          p        = 0;   # valeur de type e32
soit          p :  e32 = 0;   # valeur de type e32
soit          p : *e32 = nul; # pointeur constant vers un e32
soit variable p        = 0;   # valeur variable de type e32
soit variable p :  e32 = 0;   # valeur variable de type e32
soit variable p : *e32 = nul; # pointeur variable vers un entier

assignation variable :
chaine egale expr ;

p = 1;


déclaration pointeur     : *type
déréférencement pointeur : *chaine
recherche addresse       : @chaine

déclaration référence : &type

déclaration tableau : [N]type
déréférencement tableau : chaine[n]
recherche addresse : @chaine

conversion de type :

transtype<type>(chaine);


# Controle de flux
------------------

On peut contrôler le flux du programme via des contrôles selon des expressions booléennes.

si vrai {
    # exécute ce code
}
sinon {
    # sinon exécute ce code
}

associe [expr] {
    [expr] : { ... };
    sinon : { ... };
}


# Boucle
--------

Les boucles sont utiles pour répéter un processus plusieurs fois.

Il existe deux manières de faire des boucles en Kuri :

-- pour (decl) dans (expr) { }
-- boucle [expr] {}

Si une boucle est terminé par un appel à arrête, et qu'elle est suivie du controle sinon, le code à l'intérieur du block sinon sera exécuté.

boucle {
    si x < 10 {
        arrête;
    }
}
sinon {
    # Ce code sera exécuté si x est inférieur à 10
}

pour x dans 0...9 {
    si x*x > 10 {
        arrête;
    }
}
sinon {
    # Ce code sera exécuté quand le carré de x sera supérieur à 10
}


# Constantes
------------

Les constantes sont des valeurs que personnes ne peut modifier dans le programmes et qui doivent être déclarées à la racine des fichiers.

Les constantes peuvent par exemple être des constantes mathématiques comme PI, ou tout autre valeur constante dans votre programme.

soit constante PI : r64 = 3.14159;
soit constante SERVEUR : *c8 = "serveur.fr";

Comme tout autre déclaration, une constante ne peut être utilisée qu'après avoir été déclarée, donc on ne peut appelé une constante qu'après avoir inclus son fichier dans le nôtre.

# Énumérations
--------------

Une énumération est un ensemble de valeur constante nommée.

énum {
    LUMIÈRE_DISTANTE = 0,
    LUMIÈRE_POINT    = 1,
    LUMIÈRE_AIRE     = 2,
    LUMIÈRE_SPOT     = 3,
}


# Structures
------------

Une structure est un ensemble de données logiquement apparenté. Une structure peut servir pour représenter un objet réel, ou en ensemble de paramètres d'une fonction.

déclaration structure :

structure chaine { déclaration variable }

structure Vecteur3D {
    x : r64;
    y : r64;
    z : r64;
}

structure Paramètres {
    inverse : bool;
    nombre : e32;
}

structure Image {
	données      : *rien;
	hauteur      : e64;
	largeur      : e64;
	composant    : e8;
	type_données : e8;
}
