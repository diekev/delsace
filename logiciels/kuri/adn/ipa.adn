// ADN pour les fonctions d'interface de la Compilatrice.

fonction ajoute_chaine_à_la_compilation(EspaceDeTravail * espace, chaine_statique c) -> void

fonction ajoute_fichier_à_la_compilation(EspaceDeTravail * espace, chaine_statique c) -> void

fonction ajoute_chaine_au_module(EspaceDeTravail * espace, Module * module, chaine_statique c)

/* --------------------------------------------------------------------------
 * Accès aux données d'installation de Kuri.
 */

/* Retourne le chemin racine de l'installation de Kuri. */
fonction compilatrice_racine_installation_kuri() -> chaine_statique

/* --------------------------------------------------------------------------
 * Accès aux modules.
 */

/* Retourne le module où se trouve l'appel à cette fonction. */
fonction compilatrice_module_courant() -> Module *

/* Retourne le module racine de la compilation. */
fonction compilatrice_module_racine_compilation() -> Module *

/* Retourne le module ayant défini le code, ou nul si aucun ne l'a défini. */
fonction compilatrice_module_pour_code(NoeudCode * code) -> Module *

/* Retourne le module ayant défini le type, ou nul si aucun ne l'a défini
 * (par exemple pour les types de bases comme z32). */
fonction compilatrice_module_pour_type(InfoType * type) -> Module *

/* Retourne le nom du module (à savoir le nom du dossier), ou une chaine vide si le module
 * est le module racine de la compilation (celui contenant le fichier principal de compilation). */
fonction compilatrice_nom_module(Module * module) -> chaine_statique

/* Retourne le chemin complet du module. */
fonction compilatrice_chemin_module(Module * module) -> chaine_statique

fonction compilatrice_obtiens_options() -> OptionsDeCompilation *

fonction compilatrice_ajourne_options(OptionsDeCompilation * options) -> void

fonction compilatrice_attend_message() -> Message *

/* Indique à la compilatrice que le message fut reçu. */
fonction compilatrice_message_reçu(Message *message) -> void

fonction compilatrice_commence_interception(EspaceDeTravail * espace)

fonction compilatrice_termine_interception(EspaceDeTravail * espace)

fonction compilatrice_rapporte_erreur(EspaceDeTravail * espace, chaine_statique fichier, int ligne, chaine_statique message)

fonction compilatrice_rapporte_avertissement(EspaceDeTravail * espace, chaine_statique fichier, int ligne, chaine_statique message)

/* Lèxe le fichier d'entrée et retourne un tableau de léxèmes, le tableau devra être délogé par le programme */
fonction compilatrice_lèxe_fichier(chaine_statique fichier) -> Lexème []

/* Retourne l'espace de travail dans lequel le métaprogramme appelant la fonction est exécuté. */
fonction compilatrice_espace_courant() -> EspaceDeTravail *

fonction démarre_un_espace_de_travail(chaine_statique nom, OptionsDeCompilation * options) -> EspaceDeTravail *

fonction espace_défaut_compilation() -> EspaceDeTravail *

fonction compilatrice_possède_erreur(EspaceDeTravail * espace) -> bool

fonction compilatrice_fonctions_parsées() -> NoeudCodeEntêteFonction * []
