// ---------------------------
// Cas : La plage d'une boucle 'pour' doit avoir des types identiques

foo :: fonc () -> rien
{
	pour x dans 0...10.0 {
	}
}

// ---------------------------
// Cas : La plage d'une boucle 'pour' ne peut être de type booléen

foo :: fonc () -> rien
{
	pour x dans vrai...faux {
	}
}

// ------------------------------
// Cas : La plage d'une boucle 'pour' ne peut avoir des types définis par l'utilisateur

Demo :: struct {
	demo : z32;
}

foo :: fonc () -> rien
{
	debut : Demo;
	fin   : Demo;

	pour x dans debut...fin {
	}
}

// ------------------------------
// Cas : Une boucle 'boucle' ne peut avoir une variable associée au contrôle 'arrête' ou 'continue'

foo :: fonc () -> rien
{
	boucle {
		continue a
	}
}

// ------------------------------
// Cas : La variable d'un contrôle 'arrête' ou 'continue' doit être connue

foo :: fonc () -> rien
{
	pour i dans 0 ... 10 {
		arrête j
	}
}

// ------------------------------
// Cas : La variable d'un contrôle 'arrête' ou 'continue' doit être celle d'une boucle

foo :: fonc () -> rien
{
	a := 5

	pour i dans 0 ... 10 {
		arrête a
	}
}

// ------------------------------
// Cas : Le mot clé 'continue' ne peut apparaître hors d'une boucle

foo :: fonc () -> rien
{
	continue
}

// ------------------------------
// Cas : Le mot clé 'arrête' ne peut apparaître hors d'une boucle

foo :: fonc () -> rien
{
	arrête
}

