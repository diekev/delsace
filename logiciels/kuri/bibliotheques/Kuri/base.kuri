charge "infos_types"

# Ce fichier est utiliser pour définir des variables et fonctions de
# bases (« connus par le compilateur ») que tous les modules doivent importer.
# Ceci nous évite d'avoir à manuellement spécifier ces choses dans le
# code du compilateur.
# Par contre, ce fichier ne devrait pas pouvoir être modifié par les
# utilisateurs du langage.

# Tenant trace de la mémoire utilisée par le programme, cette variable est
# augmentée par le compilateur à chaque instruction « loge » ou « reloge »,
# et diminuée à chaque « déloge ».
externe __VG_memoire_utilisee__ : z64

# Contient trace de la quantité maximale de mémoire consomée.
externe __VG_memoire_consommee__ : z64

# Contient le nombre de fois que « loge » et « reloge » ont été appelés.
externe __VG_nombre_allocations__ : z64

# Contient le nombre de fois que « reloge » a été appelé.
externe __VG_nombre_reallocations__ : z64

# Contient le nombre de fois que « déloge » a été appelé.
externe __VG_nombre_deallocations__ : z64

énum ModeAllocatrice : z32 {
    ALLOUE
    RÉALLOUE
    DÉSALLOUE
}

fonc externe malloc(taille : z64) -> *rien
fonc externe realloc(ptr : *rien, taille : z64) -> *rien
fonc externe free(ptr : *rien) -> rien

#!nulctx fonc allocatrice_défaut(
    mode : ModeAllocatrice,
    nouvelle_taille : z64,
    ancienne_taille : z64,
    ancien_pointeur : *rien,
    données : *rien,
    info : *InfoType) -> *rien
{
    discr mode {
        ALLOUE {
            retourne malloc(nouvelle_taille)
        }
        RÉALLOUE {
            retourne realloc(ancien_pointeur, nouvelle_taille)
        }
        DÉSALLOUE {
            free(ancien_pointeur)
            retourne nul
        }
    }

    retourne nul
}

# Structure passée implicitement à toutes les fonctions non marquées par #!nulctx.
# À FAIRE : permettre aux utilisateurs du langage d'ajouter des variables dans
# cette structure.
struct ContexteProgramme {
    allocatrice := allocatrice_défaut
    données_allocatrice : *rien = nul
}

# Fonction pour accéder à la variable __VG_memoire_utilisee__.
fonc mémoire_utilisée() -> z64
{
    retourne __VG_memoire_utilisee__
}

# Fonction pour accéder à la variable __VG_memoire_utilisee__.
fonc mémoire_consommée() -> z64
{
    retourne __VG_memoire_consommee__
}

# Fonction pour accéder à la variable __VG_nombre_allocations__.
fonc nombre_allocations() -> z64
{
    retourne __VG_nombre_allocations__
}

# Fonction pour accéder à la variable __VG_nombre_reallocations__.
fonc nombre_réallocations() -> z64
{
    retourne __VG_nombre_reallocations__
}

# Fonction pour accéder à la variable __VG_nombre_deallocations__.
fonc nombre_déallocations() -> z64
{
    retourne __VG_nombre_deallocations__
}

# Fonctions de bases pour les opérateurs de comparaisons de chaines
fonc sont_chaines_égales(chn1: chaine, chn2: chaine) -> bool
{
    si chn1.taille != chn2.taille {
		retourne faux
    }

	taille := chn1.taille
	début : z64 = 0

    pour i dans début...(taille - 1) {
        si chn1[i] != chn2[i] {
			retourne faux
        }
    }

	retourne vrai
}

fonc sont_chaines_inégales(chn1: chaine, chn2: chaine) -> bool
{
    retourne !sont_chaines_égales(chn1, chn2)
}
