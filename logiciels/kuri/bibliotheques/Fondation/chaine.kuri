// Fonctions de manipulation de chaines.

charge "memoire"

// Retourne la taille d'une chaine C, c'est à dire nul-terminé.
#nulctx taille_chaine_c :: fonc(ch : *z8) -> z64
{
	dyn index : z64 := 0

    tantque ch[index] != '\0' {
		index += 1
    }

	retourne index
}

#nulctx construit_chaine :: fonc(ptr : *z8, taille : z64) -> chaine
{
	dyn ret : chaine
	ret.pointeur = ptr
	ret.taille = taille
	retourne ret
}

// Converti une chaine C, c'est à dire nul-terminé, en une chaine native.
#nulctx converti_chaine_c :: fonc(chaine_c : *z8) -> chaine
{
	retourne construit_chaine(chaine_c, taille_chaine_c(chaine_c))
}

// Copie le contenue de la chn native dans un tampon afin de pouvoir la terminer
// par un '\0' et l'utiliser dans les fonctions C.
copie_chaine_c_tampon :: fonc(dyn tampon : []z8, chn : chaine) -> *z8
{
    si tampon.taille == 0 {
		retourne nul
	}

    si tampon.taille < chn.taille + 1 {
		tampon[0] = '\0'
		retourne @tampon[0]
	}

	taille := chn.taille

    copie_mem_nonsur(
	    src=chn.pointeur,
		dst=@tampon[0],
		taille=taille)

	tampon[taille] = '\0'

	retourne @tampon[0]
}

// execute une fonction pour chaque ligne du texte d'entrée
pour_chaque_ligne :: fonc(texte : chaine, donnees : eini, rappel : fonc(chaine, eini)rien) -> rien
{
	dyn taille_chaine : z64 = 0
	dyn début_chaine : z64 = 0

    pour c, i dans texte {
		taille_chaine += 1

        si c == '\n' {
			ligne := construit_chaine(@texte[début_chaine], taille_chaine)
			rappel(ligne, donnees)

			début_chaine = transtype(i + 1 : z64)
			taille_chaine = 0
		}
	}

    // La dernière ligne n'a pas de retour...
	si taille_chaine != 0 {
		ligne := construit_chaine(@texte[début_chaine], taille_chaine)
		rappel(ligne, donnees)
	}
}

est_vide :: fonc(chn : chaine) -> bool
{
	retourne chn.taille == 0
}

trouve_caractère :: fonc(chn : chaine, carac : z8, pos : z64) -> z64
{
	début := pos
	fin   := chn.taille

    pour i dans début ... fin - 1 {
	    si chn[i] == carac {
			retourne i
		}
	}

	retourne transtype(-1 : z64)
}

découpe :: corout(texte : chaine, sep : z8) -> chaine
{
	dyn taille_mot : z64 = 0
	dyn début_mot : z64 = 0
	dyn mot : chaine

    pour c, i dans texte {
	    si c == sep {
			retiens construit_chaine(@texte[début_mot], taille_mot)

			début_mot = transtype(i + 1 : z64)
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		retiens construit_chaine(@texte[début_mot], taille_mot)
	}
}

// Converti une chaine, par exemple "5005", en un nombre entier
// La fonction présume que la chaine est entièrement composée de caractères numériques
extrait_nombre_entier :: fonc(chn : chaine) -> z64
{
    dyn résultat : z64 := 0

	pour c dans chn {
        résultat = résultat * 10 + transtype(c - '0' : z64)
    }

	retourne résultat
}

// Converti une chaine, par exemple "500.5", en un nombre réel
// La fonction présume que la chaine est entièrement composée de caractères numériques et d'un point
extrait_nombre_réel :: fonc(chn : chaine) -> r64
{
    dyn résultat := 0.0
	dyn mult := 1.0
	dyn point_trouvé := faux

	pour c dans chn {
		si c == '.' {
			point_trouvé = vrai
			continue
		}

		si point_trouvé {
			mult *= 0.1
        	résultat += transtype(c - '0' : r64) * mult
		}
		sinon {
        	résultat = résultat * 10.0 + transtype(c - '0' : r64)
		}
    }

	retourne résultat
}

est_espace_blanc :: fonc(c : z8) -> bool
{
    retourne c == ' ' || c == '\n' || c == '\t' || c == '\v' || c == '\r' || c == '\f'
}

est_nombre_binaire :: fonc(c : z8) -> bool
{
    retourne c == '0' || c == '1'
}

est_nombre_décimal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '9'
}

est_nombre_octal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '7'
}

est_nombre_hexadécimal :: fonc(c : z8) -> bool
{
    retourne ('0' <= c <= '9') || ('a' <= c <= 'f') || ('A' <= c <= 'F')
}

en_majuscule :: fonc(c: z8) -> z8
{
	si 'a' <= c <= 'z' {
		retourne c - 'a' + 'A'
	}

	retourne c
}

en_minuscule :: fonc(c: z8) -> z8
{
	si 'A' <= c <= 'Z' {
		retourne c - 'A' + 'a'
	}

	retourne c
}

en_majuscule :: fonc(dyn chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

en_minuscule :: fonc(dyn chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

//###############################################################################

Enchaineuse :: struct {
    résultat : chaine
    taille : z64
}

crée_enchaineuse :: fonc() -> Enchaineuse
{
    dyn enchaineuse : Enchaineuse
    retourne enchaineuse
}

détruit :: fonc(dyn enchaineuse : &Enchaineuse) -> rien
{
	déloge enchaineuse.résultat
	enchaineuse.taille = 0
}

réserve :: fonc(dyn enchaineuse : &Enchaineuse, taille : z64) -> rien
{
	si taille < 0 {
		// Erreur ?
		retourne
	}

	si taille <= enchaineuse.résultat.taille {
		retourne
	}

	reloge enchaineuse.résultat : chaine(taille)
}

appends :: fonc(dyn enchaineuse : &Enchaineuse, chn : chaine) -> rien
{
	src := chn.pointeur
	dst := @enchaineuse.résultat[enchaineuse.taille]
	taille := chn.taille

    copie_mem_nonsur(src=src, dst=dst, taille=taille)
    enchaineuse.taille += taille
}

pousse :: fonc(dyn enchaineuse : &Enchaineuse, lettre : z8) -> rien
{
	ancienne_taille := enchaineuse.résultat.taille
	nouvelle_taille := ancienne_taille + 1
	enchaineuse.réserve(nouvelle_taille)
	enchaineuse.résultat[enchaineuse.taille] = lettre
	enchaineuse.taille += 1
}

pousse :: fonc(dyn enchaineuse : &Enchaineuse, chn : chaine) -> rien
{
	si chn.taille == 0 {
		retourne
	}

	nouvelle_taille := enchaineuse.résultat.taille + chn.taille
	enchaineuse.réserve(nouvelle_taille)
	enchaineuse.appends(chn)
}

pousse :: fonc(dyn enchaineuse : &Enchaineuse, chns : ...chaine) -> rien
{
	dyn taille : z64

	pour chn dans chns {
		taille += chn.taille
	}

	enchaineuse.réserve(taille)

	pour chn dans chns {
		enchaineuse.appends(chn)
	}
}

// Retourne une chaine correspondant à l'enchainement de toutes les chaines
// spécifiées. La chaine retournée a été logé et doit être délogée par
// l'appelante.
enchaine :: fonc(chns : ...chaine) -> chaine
{
	dyn enchaineuse : Enchaineuse
	dyn taille : z64

	// À FAIRE : trouve comment passer des arguments variadiques à
	// d'autres fonctions
	pour chn dans chns {
		taille += chn.taille
	}

	enchaineuse.réserve(taille)

	pour chn dans chns {
		enchaineuse.appends(chn)
	}

	retourne enchaineuse.résultat
}
