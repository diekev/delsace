# Bibliothèque contenant des outils pour les boucles et autres itérations.

# Itérateurs infinis.

# À FAIRE : cycle avec des tableaux

# Itère sur les caractères de la chaine précisé, et recommence une fois fini.
corout cycle(chn : chaine) -> z8
{
    boucle {
	    pour c dans chn {
			retiens c
		}
	}
}

# Itère sur une plage allant de 'début' à 'fin' selon le 'pas', et recommence
# une fois fini.
corout cycle(début : z32, fin : z32, pas : z32) -> z32
{
    boucle {
	    pour i dans début ... fin {
			retiens i
		}
	}
}

# Compte à partir de 'début' selon le 'pas' donné. Le pas peut-être positif ou
# négatif.
corout compte(début : z32, pas : z32) -> z32
{
	dyn val := début
	boucle {
		retiens val
		val += pas
	}
}

# Répète la 'valeur' précisée indéfiniment.
corout réitère(valeur : z32) -> z32
{
    boucle {
		retiens valeur
	}
}

# Itérateurs finis.

# Répète la 'valeur' précisée selon le 'nombre' défini de fois.
corout réitère(valeur : z32, nombre : z32) -> z32
{
    pour i dans 0 ... nombre - 1 {
		retiens valeur
	}
}

# Accumule les valeurs du tableau et retiens le résultat à chaque itération.
# Par exemple accumule([1, 2, 3, 4, 5]) donne la séquence 1, 3, 6, 10, 15
corout accumule(tabl : []z32) -> z32
{
	dyn val := 0

    pour i dans tabl {
		val += i
		retiens val
	}
}

# Génére les index d'une plage allant de 'début' à 'fin' avec le 'pas' donné.
corout plage(debut : z32, fin : z32, pas : z32) -> z32
{
	taille := (fin - debut) / pas
	dyn x := debut

    pour i dans 0 ... taille {
		retiens x
		x += pas
    }
}
