// Bibliothèque de structures de données.
// Les structures utilisent des pointeurs vers 'rien', et la taille des données
// en octet pour avoir un semblant de généricité.

charge "memoire"

//################################################################

// Une pile où les premiers éléments ajoutés sont les derniers retirés.

pile :: struct {
	taille_elem : z64
	taille : z64
	capacité : z64
	tampon : []octet
}

crée_pile :: fonc(taille_elem : z64) -> *pile
{
	dyn p := loge pile
	p.taille_elem = taille_elem
	retourne p
}

decrée_pile :: fonc(dyn p : *pile) -> rien
{
	p.taille_elem = 0
	p.taille = 0
	p.capacité = 0
	déloge p.tampon
	déloge p
}

empile :: fonc(dyn p : *pile, d : *rien) -> rien
{
    si p.taille == p.capacité {
		reloge p.tampon : [(p.taille + 1) * p.taille_elem]octet
		p.capacité += 1
    }

	ptr := @p.tampon[p.taille * p.taille_elem]
	copie_mem_nonsur(d, ptr, p.taille_elem)

	p.taille += 1
}

est_vide :: fonc(p : *pile) -> bool
{
	retourne p.taille == 0
}

dépile :: fonc(dyn p : *pile, d : *rien) -> rien
{
    si est_vide(p) {
		retourne
    }

    si d != nul {
		ptr := @p.tampon[(p.taille - 1) * p.taille_elem]
		copie_mem_nonsur(ptr, d, p.taille_elem)
    }

	p.taille -= 1
}

//################################################################

// Une file où les premiers éléments ajoutés sont les premiers retirés.

file :: struct {
	taille_elem : z64
	taille : z64
	capacité : z64
	tampon : []octet
}

crée_file :: fonc(taille_elem : z64) -> *file
{
	dyn q := loge file
	q.taille_elem = taille_elem
	retourne q
}

decrée_file :: fonc(dyn q : *file) -> rien
{
	q.taille_elem = 0
	q.taille = 0
	q.capacité = 0
	déloge q.tampon
	déloge q
}

enfile :: fonc(dyn q : *file, d : *rien) -> rien
{
    si q.taille == q.capacité {
		reloge q.tampon : [(q.taille + 1) * q.taille_elem]octet
		q.capacité += 1
    }

	ptr := @q.tampon[q.taille * q.taille_elem]
	copie_mem_nonsur(d, ptr, q.taille_elem)

	q.taille += 1
}

est_vide :: fonc(q : *file) -> bool
{
	retourne q.taille == 0
}

défile :: fonc(dyn q : *file, d : *rien) -> rien
{
    si est_vide(q) {
		retourne
    }

    si d != nul {
		ptr := @q.tampon[0]
		copie_mem_nonsur(ptr, d, q.taille_elem)
    }

    // réajuste la file en décalant les données

    si q.taille > 1 {
		ptr_dst := @q.tampon[0]
		ptr_src := @q.tampon[q.taille_elem]
		copie_mem_nonsur(ptr_src, ptr_dst, q.taille_elem * (q.taille - 1))
    }

	q.taille -= 1
}
