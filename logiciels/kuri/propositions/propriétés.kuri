# L'idée pour les "propriétés" est d'émuler un système possible sous C++
# en utilisant les constructeurs/destructeurs pour créer quelque chose et
# le détruire automatiquement. Ceci peut se faire via un objet temporaire
# qui est construit quand on appel une fonction et détruit à la fin de
# l'appel.
# Par exemple pour un chronomètre calculant la durée d'exécution des méthodes d'un objet :
# 	auto xc = ptr_chrono<X>(&x);
# 	xc->foo(); // ceci chronomètrerait la fonction foo()
# 
# Un autre cas d'usage est celui de la synchronisation, on l'on acquiers
# un mutex dans le constructeur et le relâche dans le destructeur.
# 	auto xc = ptr_syncro<X>(&x);
# 	xc->foo(); // ceci syncroniserait l'appel de foo()
# 
# Ceci propose un système de propriété pour attacher des actions à des
# fonctions à faire avant et après leurs qu'elles sont appelées.
# 
# Il faudrait veiller à ce que les mutex soient réentrants.
# Certains des problèmes que cela viendrait à résoudre possiblement
# pourraient être résolus via 'diffère' ou un système de macro

propriété Chronomètre(temps : r64) {
	avant {
		temps = maintenant();
	}

	après {
		temps = temps - maintenant();
	}
}

propriété ExclusionMutuelle(mutex : Mutex) {
	avant {
		vérouille(mutex);
	}

	après {
		dévérouille(mutex);
	}
}

fonc chronomètrée(temps : r64)
{
propriété:
	Chronomètre(temps);
}

structure GestionnaireImage {
	mutex_image : Mutex;

	fonc charge_image()
	{

	}

	fonc ecris_image()
	{

	}

	propriété : ExclusionMutuelle(mutex_image);
}

fonc protégé(kuri : Kuri)
{
	propriété: ExclusionMutuelle(mutex de kuri);
}

fonc foo() : rien
{
	dyn kuri : Kuri
	protégé(kuri) # prend et relâche automatiquement le mutex
}
