Mode interactif

- pouvoir détecter les changements dans les fichiers
- pourvoir recompiler partiellement le code
    -- ne recompiler que les fichiers qui ont été modifiés
    -- ne recompiler que les fonctions avec erreurs
        -- demander à l'utilisateur la correction du code
        -- il faut savoir le lieu exacte dans le fichier où modifier ceci et ne recompiler que cette fonction
    -- il faut pouvoir supprimer toute la mémoire d'un fichier
        -- quid des pointeurs vers les structures libérées ?
            -- déclaration dans les types
            -- références vers les types
        -- il faut alors pouvoir stoper la compilation des unités dépendantes du fichier
        -- il ne faut afficher qu'une seule erreur par fichier, avoir une liste d'erreurs à afficher



Système d'acteur
-- envoie un message à l'utilisateur
-- envoie un message au métaprogrammes

-- création de message
-- post un message dans une boite au lettre


- Compilatrice a une boite pour les erreurs
- Messagère a une boite pour tous les messages
- Les métaprogrammes ont des boites pour les messages de compilation


messagere->envoie_message_a(this, metaprogramme, message);

metaprogramme->recoie_message(message);


class Acteur {

};

La messagere recoie un message pour un typage de code :

- passe le message au métaprogramme
- attend la réponse du métaprogramme
- envoie le message à l'ordonnanceuse de retyper le code ou de continuer sa course dans la compilation


ordonnanceuse::message_recu()
{
    if (message est pour retypage) {
        envoie vers la conversion de code
        envoie vers le typage, marque comme ayant déjà été traité par le métaprogramme
    }

    if (message est pour continuation) {
        envoie vers la génération de RI, ou autre...
    }
}

metaprogramme::message_recu()
{

}

compilatrice_attend_message ::

metaprogramme->attend_message

if (!metaprogramme->message_recu) {
}


pour le typage :

quand j'attend sur la validation d'un type

    envoie message au gestionnaire de code
    le gestionnaire de code prend note de la dépendance
    dis à l'unité d'envoyer un message quand la compilation est terminé

    gestionnaire->recoie_message_attente_sur_type()
    gestionnaire->recoie_message_type_valide()

    gestionnaire->recoie_message_attente_sur_symbole()
    gestionnaire->recoie_message_symbole_resolu()

    gestionnaire->recoie_message_attente_sur_operateur()
    gestionnaire->recoie_message_operateur_resolu()

    gestionnaire->recoie_message_attente_sur_metaprogramme()
    gestionnaire->recoie_message_metaprogramme_fini()

    gestionnaire->recoie_message_attente_sur_interface_kuri()
    gestionnaire->recoie_message_interface_kuri_resolu()

    gestionnaire->recoie_message_chargement_termine()
    gestionnaire->recoie_message_lexage_termine()
    gestionnaire->recoie_message_presyntaxage_termine()
    gestionnaire->recoie_message_syntaxage_termine()
    gestionnaire->recoie_message_typage_termine()
    gestionnaire->recoie_message_ri_termine()
    gestionnaire->recoie_message_optimisation_termine()
    gestionnaire->recoie_message_code_machine_termine()


Peut-être revoir les unités :


UniteCompilation {
    // l'unite de la quelle elle dérive
    UniteCompilation *parent;

    // les unités dérivées de celle-ci
    UniteCompilation **enfants;

    // l'espace resposable de sa création
    EspaceDeTravail *espace;

    // données pour une unité de chargement
    kuri::chaine chemin

    // données pour une unité de lexage
    DonneesConstantesFichier

    // données pour une unité de syntaxage
    DonneesConstantesFichier ?

    // données pour une unité de typage
    NoeudSyntaxique *noeud;

    // données pour une unité de métaprogramme

    // données pour une unité de message

    // données pour une unité de RI

    // données pour une unité d'optimisation

    // données pour une unité de code machine
}

#define ATTEND_SUR_DECL(decl) \
    if (!decl->possede_drapeau(DECLARATION_FUT_VALIDEE)) { \
        auto message = Message::attend_sur_decl(unite, decl); \
        messagere->envoie_message(ID::gestionnaire_code, message); \
    }

#define ATTEND_SUR_TYPE(type) \
    if (!type->possede_drapeau(DECLARATION_FUT_VALIDEE)) { \
        auto message = Message::attend_sur_decl(unite, decl); \
        messagere->envoie_message(ID::gestionnaire_code, message); \
    }

#define ATTEND_SUR_SYMBOLE(symbole) \
    if (true) { \
        auto message = Message::attend_sur_symbole(unite, symbole); \
        messagere->envoie_message(ID::gestionnaire_code, message); \
    }


/// pour le typage, ou une erreur survient :

    auto message = Message::attend_sur_decl(unite, decl);
    messagere->envoie_message(ID::gestionnaire_code, message);

    auto message = Message::attend_sur_type(unite, type);
    messagere->envoie_message(ID::gestionnaire_code, message);

    auto message = Message::erreur(unite, site, "");
    messagere->envoie_message(ID::compilatrice, message);

    auto message = Message::avertissement(unite, site, "");
    messagere->envoie_message(ID::compilatrice, message);


    messagere->envoie_message(ID::ordonnanceuse, message);
