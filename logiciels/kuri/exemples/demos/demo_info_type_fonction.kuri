importe Fondation

Objet :: struct {
    nom := "objet"
}

execute_noeud :: fonc(obj1 : &Objet, objs : []&Objet) -> z32, *Objet
{
    retourne 0, nul
}

imprime_type :: fonc(info : *InfoType) -> rien
{
    discr info.id {
	    ENTIER {
		    info_arg := info comme *InfoTypeEntier

            si info_arg.est_signé {
			    si info_arg.taille_en_octet == 1 {
				    imprime("z8")
				}
				sinon si info_arg.taille_en_octet == 2 {
				    imprime("z16")
				}
				sinon si info_arg.taille_en_octet == 4 {
				    imprime("z32")
				}
				sinon si info_arg.taille_en_octet == 8 {
				    imprime("z64")
				}
			}
			sinon {
			    si info_arg.taille_en_octet == 1 {
				    imprime("n8")
				}
				sinon si info_arg.taille_en_octet == 2 {
				    imprime("n16")
				}
				sinon si info_arg.taille_en_octet == 4 {
				    imprime("n32")
				}
				sinon si info_arg.taille_en_octet == 8 {
				    imprime("n64")
				}
			}
		}
		RÉEL {
            si info.taille_en_octet == 2 {
			    imprime("r16")
			}
			sinon si info.taille_en_octet == 4 {
			    imprime("r32")
			}
			sinon si info.taille_en_octet == 8 {
			    imprime("r64")
			}
		}
		BOOLÉEN {
			imprime("bool")
		}
		CHAINE {
			imprime("chaine")
		}
		STRUCTURE {
		    info_arg := info comme *InfoTypeStructure
			imprime(info_arg.nom)
		}
		POINTEUR {
		    info_arg := info comme *InfoTypePointeur

		    si info_arg.est_référence {
			    imprime("&")
		    }
		    sinon {
			    imprime("*")
		    }

			imprime_type(info_arg.type_pointé)
		}
		FONCTION {
		    // À FAIRE : types paramètres
			imprime("fonction()")
		}
		EINI {
			imprime("eini")
		}
		RIEN {
			imprime("rien")
		}
		OCTET {
			imprime("octet")
		}
		UNION {
		    info_arg := info comme *InfoTypeStructure
			imprime(info_arg.nom)
		}
		TYPE_DE_DONNÉES {
			// À FAIRE : imprime le type
			imprime("type_de_données")
		}
		TABLEAU {
		    info_arg := info comme *InfoTypeTableau
			imprime("[]")
			imprime_type(info_arg.type_pointé)
		}
		ÉNUM {
		    info_arg := info comme *InfoTypeÉnum
			imprime(info_arg.nom)
		}
	}
}

enregistre_noeud :: fonc(fonc_exec : eini) -> rien
{
    info := fonc_exec.info

    si info.id != id_info.FONCTION {
        imprime("Obtenu autre chose qu'une fonction !\n")
        retourne
    }

    info_fonc := info comme *InfoTypeFonction

    imprime("Les types d'entrée sont : \n")

    pour type dans info_fonc.types_entrée {
        imprime("Type = ")
        imprime_type(type)
        imprime("\n")
    }

    imprime("Les types de sortie sont : \n")

    pour type dans info_fonc.types_sortie {
        imprime("Type = ")
        imprime_type(type)
        imprime("\n")
    }
}

principale :: fonc () -> z32
{
    enregistre_noeud(execute_noeud)
    retourne 0
}
