importe "flux"

est_premier :: fonc(n : z32) -> bool
{
     si n <= 3 {
        retourne n > 1
     }

     si (n % 2 == 0) || (n % 3 == 0) {
        retourne faux
     }

     i := 5

     tantque i * i <= n {
        si (n % i == 0) || (n % (i + 2) == 0) {
            retourne faux
        }

        i += 6
     }

     retourne vrai
}

genere_premiers :: corout(n : z32) -> z32
{
    nombre := 0
    dernier := 0

    tantque nombre < n {
        boucle {
            si est_premier(dernier) {
                retiens dernier

                dernier += 1
                arrÃªte
            }

            dernier += 1
        }

        nombre += 1
    }
}

principale :: fonc () -> z32
{
    pour i, j dans genere_premiers(100) {
        imprime_sans_format(j, " : ", i, '\n')
    }

    retourne 0
}
