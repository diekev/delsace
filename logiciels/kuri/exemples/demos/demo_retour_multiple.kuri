importe Fondation
// Problème : les fonctions chainées via '.' vont colésées avec les multiples types retours.

/* ------------------------------------------------------------------------- */

ret_simple :: fonc () -> z32
{
    si vrai {
        retourne 12987
    }
    sinon {
        retourne 129
    }
}

indirection_simple :: fonc () -> z32
{
    retourne ret_simple()
}

test_fonction_ret_simple :: fonc () -> rien
{
    imprime("---------------------------\n")
    imprime("fonc ret simple\n")

    a := indirection_simple()

    imprime("a = %\n", a)
}

test_ptr_fonction_ret_simple :: fonc () -> rien
{
    imprime("---------------------------\n")
    imprime("pointeur ret fonc simple\n")

    ptr := indirection_simple

    a := ptr()

    imprime("a = %\n", a)
}

/* ------------------------------------------------------------------------- */

ret_multiple :: fonc () -> (z32, bool)
{
    retourne 1237, faux
}

indirection :: fonc () -> (z32, bool)
{
    retourne ret_multiple()
}

test_fonction_ret_moult :: fonc () -> rien
{
    imprime("---------------------------\n")
    imprime("fonc ret multiple\n")

    a, b := indirection()

    imprime("a = %, b = %\n", a, b)

    // ignore un paramètre

    // c = indirection();

    // imprime("c = ", c, '\n');
}

appel_ptr_moult_ret :: fonc () -> (z32, bool)
{
    ptr := indirection

    retourne ptr()
}

test___ :: fonc (x: fonc (a: z32) -> z32 @inutilisée, y: fonc (a: z32) -> z32 @inutilisée, z: fonc (a: z32) -> (z32, z32) @inutilisée, w: z32 @inutilisée) -> rien
{
}

test_ptr_fonction_ret_moult :: fonc () -> rien
{
    imprime("---------------------------\n")
    imprime("pointeur fonc ret multiple\n")

    // À FAIRE(langage) : erreur pour x : fonc (a: z32) -> z32 = nul
    x : fonc(z32)(z32) = nul
    y : fonc(z32)(z32) = nul
    z : fonc(z32)(z32, z32) = nul

    test___(x, y, z, 90)

    a, b := appel_ptr_moult_ret()

    imprime("a = %, b = %\n", a, b)
}

/* ------------------------------------------------------------------------- */

principale :: fonc ()
{
    test_fonction_ret_simple()
    test_ptr_fonction_ret_simple()

    test_fonction_ret_moult()
    test_ptr_fonction_ret_moult()
}
