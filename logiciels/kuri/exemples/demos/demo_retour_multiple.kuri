importe Fondation
// Problème : les fonctions chainées via '.' vont colésées avec les multiples types retours.

ext_indirection1 :: fonc () -> z32 #externe

//##############################################################################

ret_simple :: fonc() -> z32
{
    si vrai {
        retourne 12987
    }
    sinon {
        retourne 129
    }
}

indirection_simple :: fonc() -> z32
{
    retourne ret_simple()
}

test_fonction_ret_simple :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("fonc ret simple\n")

    a := indirection_simple()

    imprime("a = %\n", a)
}

test_ptr_fonction_ret_simple :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("pointeur ret fonc simple\n")

    ptr := indirection_simple

    a := ptr()

    imprime("a = %\n", a)
}

coro_simple :: corout() -> z32
{
    pour i dans 0...10 {
        retiens i
    }
}

test_coro_simple :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("coro simple\n")

    pour a dans coro_simple() {
        imprime("a = %\n", a)
    }
}

//##############################################################################

ret_multiple :: fonc() -> z32, bool
{
    retourne 1237, faux
}

indirection :: fonc() -> z32, bool
{
    retourne ret_multiple()
}

test_fonction_ret_moult :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("fonc ret multiple\n")

    a, b := indirection()

    imprime("a = %, b = %\n", a, b)

    // ignore un paramètre

    // c = indirection();

    // imprime("c = ", c, '\n');
}

appel_ptr_moult_ret :: fonc() -> z32, bool
{
    ptr = indirection

    retourne ptr()
}

test___ :: fonc(x : fonc(z32)(z32), y : fonc(z32)(z32),z : fonc(z32)(z32,z32), w : z32) -> rien
{
}

test_ptr_fonction_ret_moult :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("pointeur fonc ret multiple\n")

    x : fonc(z32)(z32) = nul
    y : fonc(z32)(z32) = nul
    z : fonc(z32)(z32,z32) = nul

    test___(x, y, z, 90)

    a, b := appel_ptr_moult_ret()

    imprime("a = %, b = %\n", a, b)
}

//##############################################################################

coro_multiple :: corout() -> z32, bool
{
    pour i dans 0 ... 10 {
        retiens i * 3, (i % 3) == 0
    }
}

// À FAIRE : possibilité de retourner une coroutine
//corout coro_indirection() : z32, bool
//{
//    retourne coro_multiple();
//}

test_coro_ret_moult :: fonc() -> rien
{
    imprime("---------------------------\n")
    imprime("coro ret multiple\n")

    pour a, b, i dans coro_multiple() {
        imprime("a = %, b = %, i = %\n", a, b; i)
    }

    // ignore un paramètre

    // c = indirection();

    // imprime("c = ", c, '\n');
}

//##############################################################################

principale :: fonc () -> z32
{
    test_fonction_ret_simple()
    test_ptr_fonction_ret_simple()
    test_coro_simple()

    test_fonction_ret_moult()
    test_ptr_fonction_ret_moult()
    test_coro_ret_moult()

    retourne 0
}
