importe "flux"
importe "chaine"
importe "iter"

struct Noeud {
    suiv : *Noeud
    val = 0
}

corout iter_liste_noeud(noeud : *Noeud) : *Noeud
{
    dyn nloc = noeud
    
    tantque nloc != nul {
        retiens nloc
        nloc = suiv de nloc
    }
}

corout iter_liste_noeud(noeud : *r32) : *r32
{
    dyn nloc = noeud
    
    tantque nloc != nul {
        retiens nloc
        nloc += 1
    }
}

fonc principale(args : []*z8) : z32
{
    pour j, i dans découpe("Texte d'exemple où les mots sont coupés", ' ') {
        imprime("Mot (", i, ") : ", j, '\n')
    }

    pour j, i dans plage(0, 11, 1) {
        imprime("Valeur (", i, ") : ", j, '\n')
    }

    dyn n3 = Noeud{ suiv = nul, val = 789 }
    dyn n2 = Noeud{ suiv = @n3, val = 456 }
    dyn n1 = Noeud{ suiv = @n2, val = 123 }
    
    pour n, i dans iter_liste_noeud(@n1) {
        imprime("Valeur (", i, ") : ", val de n, '\n')
    }
    
    pour c, i dans accumule([1, 2, 3, 4, 5, 6, 7, 8]) {
        si i == 24 {
            arrête
        }

        imprime("Itération ", i, ", valeur = ", c, '\n')
    }

    retourne 0
}

