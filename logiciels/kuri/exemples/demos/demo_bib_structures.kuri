importe "flux"
importe "chaine"
importe "structures"

//################################################################

test_pile :: fonc() -> rien
{
    imprime_sans_format("==========================================\n")

	dyn p := crée_pile(transtype(taille_de(z32) : z64))
    diffère {
        decrée_pile(p)
        imprime_sans_format("pile décréée !\n")
    }

    imprime(" ----------- remplissage de la pile\n")

    pour i dans 0...9 {
        v := i * 2
        empile(p, @v)
        imprime_sans_format("empile : ", v, " -> ", mémoire(p), '\n')
    }

    imprime(" ----------- vidage de la pile\n")

    tantque !est_vide(p) {
        dyn v : z32
        dépile(p, @v)
        imprime_sans_format("dépile : ", v, " -> ", mémoire(p), '\n')
    }
}

test_file :: fonc() -> rien
{
    imprime_sans_format("==========================================\n")

	dyn p := crée_file(transtype(taille_de(z32) : z64))
    diffère {
        decrée_file(p)
        imprime_sans_format("file décréée !\n")
    }

    imprime(" ----------- remplissage de la file\n")

    pour i dans 0...9 {
        v := i * 2
        enfile(p, @v)  // À FAIRE : transtypage automatique
        imprime_sans_format("enfile : ", v, " -> ", mémoire(p), '\n')
    }

    imprime(" ----------- vidage de la file\n")

    tantque !est_vide(p) {
        dyn v : z32
        défile(p, @v)
        imprime_sans_format("défile : ", v, " -> ", mémoire(p), '\n')
    }
}

principale :: fonc () -> z32
{
    imprime_sans_format("Il y a ", args.taille, " arguments :\n")

    pour arg dans args {
        chn := converti_chaine_c(arg)
        imprime_sans_format('\t', chn, '\n')
    }

    test_pile()
    test_file()
    retourne 0
}
