importe "flux"
importe "chaine"
importe "structures"

//################################################################

test_pile :: fonc() -> rien
{
    imprime("==========================================\n")

	p := crée_pile(taille_de(z32) comme z64)
    diffère {
        decrée_pile(p)
        imprime("pile décréée !\n")
    }

    imprime(" ----------- remplissage de la pile\n")

    pour i dans 0...9 {
        v := i * 2
        empile(p, @v)
        imprime("empile : % -> %\n", v, mémoire(p))
    }

    imprime(" ----------- vidage de la pile\n")

    tantque !est_vide(p) {
        v : z32
        dépile(p, @v)
        imprime("dépile : % -> %\n", v, mémoire(p))
    }
}

test_file :: fonc() -> rien
{
    imprime("==========================================\n")

	p := crée_file(taille_de(z32) comme z64)
    diffère {
        decrée_file(p)
        imprime("file décréée !\n")
    }

    imprime(" ----------- remplissage de la file\n")

    pour i dans 0...9 {
        v := i * 2
        enfile(p, @v)  // À FAIRE : transtypage automatique
        imprime("enfile : % -> %\n", v, mémoire(p))
    }

    imprime(" ----------- vidage de la file\n")

    tantque !est_vide(p) {
        v : z32
        défile(p, @v)
        imprime("défile : % -> %\n", v, mémoire(p))
    }
}

principale :: fonc () -> z32
{
    imprime("Il y a % arguments :\n", args.taille)

    pour arg dans args {
        chn := converti_chaine_c(arg)
        imprime("\t%\n", chn)
    }

    test_pile()
    test_file()
    retourne 0
}
