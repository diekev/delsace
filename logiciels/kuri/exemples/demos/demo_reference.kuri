importe Fondation

/* Cas assignation :
 *  +--------+-----------+-----------+------------------------------+
 *  | status | gauche    | droite    | action                       |
 *  +--------+-----------+-----------+------------------------------+
 *  | ok     | référence | valeur    | déréférence gauche           |
 *  | ok     | référence | référence | déréférence gauche et droite |
 *  | ok     | valeur    | référence | déréférence droite           |
 *  +--------+-----------+-----------+------------------------------+
 *
 * Cas déclaration :
 *  +--------+-----------+-----------+------------------------------------------+
 *  | status | gauche    | droite    | action                                   |
 *  +--------+-----------+-----------+------------------------------------------+
 *  | ok     | référence | valeur    | prend référence                          |
 *  | ok     | référence | référence | assigne référence (réfère au même objet) |
 *  | ok     | valeur    | référence | déréférence droite                       |
 *  +--------+-----------+-----------+------------------------------------------+
 *
 * Cas paramètre :
 *  +--------+-----------+-----------+------------------------------------------+
 *  | status | gauche    | droite    | action                                   |
 *  +--------+-----------+-----------+------------------------------------------+
 *  | ok     | référence | valeur    | prend référence                          |
 *  | ok     | référence | référence | assigne référence (réfère au même objet) |
 *  | ok     | valeur    | référence | déréférence droite                       |
 *  +--------+-----------+-----------+------------------------------------------+
 */

FOO :: struct {
    a := 123
}

assigne_membre_de_référence :: fonc (f: &FOO) -> rien
{
    f.a = 987
}

assigne_valeur_à_référence :: fonc (a: &z32) -> rien
{
    a = 7
}

assigne_référence_à_référence :: fonc (a: &z32, b: &z32) -> rien
{
    tmp := a
    a = b
    b = tmp
}

principale :: fonc ()
{
    a := 5
    imprime("a = %\n", a)

    assigne_valeur_à_référence(a)
    imprime("a = %\n", a)

    /* ------------------------------------------------------------------------- */

    foo: FOO

    imprime("%\n", foo)

    assigne_membre_de_référence(foo)
    imprime("%\n", foo)

    /* ------------------------------------------------------------------------- */

    x := 123
    y := 456
    imprime("x = %, y = %\n", x, y)

    assigne_référence_à_référence(x, y)
    imprime("x = %, y = %\n", x, y)

    /* ------------------------------------------------------------------------- */

    z := 5
    imprime("z = %\n", z)

    w : &z32 = z
    w = 10
    imprime("z = %\n", z)

    /* ------------------------------------------------------------------------- */
}

// références :
// si assignation :
//    si dest est référence et src est référence -> assigne
//    si dest est référence et src n'est pas référence -> prend référence
//    si dest n'est pas référence et src est référence -> déréférence source
// si déclaration :
//    si dest est référence -> force la présence d'une expression
//    si dest est référence et src est référence -> assigne
//    si dest est référence et src n'est pas référence -> prend référence
//    si dest n'est pas référence et src est référence -> déréférence source
//    si dest n'a pas de type -> le type devient le type déréférencé
// si argument :
//    si dest est référence et src est référence -> assigne
//    si dest est référence et src n'est pas référence -> prend référence
//    si dest n'est pas référence et src est référence -> déréférence source
