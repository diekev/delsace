importe "flux"

N := 5

XYZ :: struct {
    a := 128.0
    b : type_de(a)
}

copie_vNvN :: fonc(dyn a : [3]z32, b : type_de(a)) -> rien
{
    pour v, i dans b {
        a[i] = v
    }
}

// tag fonction comme étant un gabarit
// - rassemble les types gabarit
// lors de l'appel :
// - détermine les types
// - validation sémantique avec contexte des types si non validée pour ces types
// - tag pour génération avec types
// lors de la génération
ajoute :: fonc(a : $T, b : $T) -> $T
{
    retourne a + b
}

principale :: fonc () -> type_de(N)
{
    x := 5.0
    dyn y : type_de(x)

    infos := info_de(y)

    imprime_sans_format(mémoire(infos), '\n')

    imprime_sans_format("N = ", N, '\n')

    z := faux

    w : type_de(z) = vrai

    a := 0

    b := transtype(a : type_de(w))

    retourne 0
}
