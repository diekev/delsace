#si faux
NoeudMatrice :: struct ($T: type_de_données) {
	colonne := 0
	valeur : T := 0.0
	suivant : *NoeudMatrice := nul
}

crée_noeud :: fonc(colonne : z32, valeur : $T) -> *NoeudMatrice(T)
{
	noeud := loge(NoeudMatrice)
	noeud.colonne = colonne
	noeud.valeur = valeur
	retourne noeud
}

Vecteur :: struct ($T: type_de_données, $N : z32) {
	données : [N]T
}

copie :: fonc (a : [N]$T, b : [N]T, $N: z64) -> rien
{
	pour & va, i dans a {
		va = b[i]
	}
}

MatriceÉparse :: struct ($T: type_de_données) {
	lignes := []*NoeudMatrice(T)
}

construit_matrice_éparse :: fonc(nombre_lignes : z32) -> MatriceÉparse(T)
{
	matrice : MatriceÉparse
	matrice.lignes = loge_tableau(*NoeudMatrice(T), lignes)
	retourne matrice
}

insère :: fonc(matrice : &MatriceÉparse($T), idx_ligne : z32, idx_colonne : z32, valeur : T) -> rien
{
	noeud := matrice.lignes[idx_ligne]

	si noeud == nul {
		matrice.lignes[idx_ligne] = crée_noeud(idx_colonne, valeur)
		retourne
	}

	tantque noeud.suivant != nul {
		noeud = noeud.suivant
	}

	noeud.suivant = crée_noeud(idx_colonne, valeur)
}
#finsi
