importe Fondation

libx11 :: #bibliothèque "X11"

/* ------------------------------------------------------------------------- */
/** \nom Types.
 * \{ */

XPointer :: *z8
XID :: n64
Mask :: n64
Atom :: n64
VisualID :: n64
Time :: n64
Window :: XID
Drawable :: XID
Font :: XID
Pixmap :: XID
Cursor :: XID
Colormap :: XID
GContext :: XID
KeySym :: XID
KeyCode :: n8

_XGC :: struct #externe
GC :: *_XGC

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Extensions.
 * \{ */

/*
 * Extensions need a way to hang private data on some structures.
 */
_XExtData :: struct #externe {
    number: z32        /* number returned by XRegisterExtension */
    next: *_XExtData    /* next item on list of data for structure */
    free_private: fonc (*_XExtData)(z32)    /* called to free private storage */
    private_data: XPointer    /* data private to this extension. */
}

XExtData :: _XExtData

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Screen
 * Information about the screen.  The contents of this structure are
 * implementation dependent.  A Screen should be treated as opaque
 * by application code.
 * \{ */

_XDisplay :: struct #externe
Display :: _XDisplay

Screen :: struct #externe {
    ext_data: *XExtData /* hook for extension to hang data */
    display: *_XDisplay /* back pointer to display structure */
    root: Window /* Root window id. */
    width: z32 /* width and height of screen */
    height: z32
    mwidth: z32 /* width and height of  in millimeters */
    mheight: z32
    ndepths: z32        /* number of depths possible */
    depths: *Depth /* list of allowable depths on the screen */
    root_depth: z32        /* bits per pixel */
    root_visual: *Visual    /* root visual */
    default_gc: GC        /* GC for the root root visual */
    cmap: Colormap        /* default color map */
    white_pixel: n64
    black_pixel: n64    /* White and Black pixel values */
    max_maps: z32 /* max and min color maps */
    min_maps: z32
    backing_store: z32    /* Never, WhenMapped, Always */
    save_unders: z32
    root_input_mask: z64    /* initial root input mask */
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Visual
 * Contains information about colormapping possible
 * \{ */

Visual :: struct #externe {
    ext_data: XExtData    /* hook for extension to hang data */
    visualid: VisualID    /* visual id of this visual */
    class: z32        /* class of screen (monochrome, etc.) */
    red_mask: n64    /* mask values */
    green_mask: n64
    blue_mask: n64
    bits_per_rgb: z32    /* log base 2 of distinct color values */
    map_entries: z32    /* color map entries */
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Depth
 * Contains information for each possible depth.
 * \{ */

Depth :: struct #externe {
    depth: z32        /* this depth (Z) of the depth */
    nvisuals: z32        /* number of Visual types at this depth */
    visuals: *Visual    /* list of visuals possible at this depth */
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom XEvent À FAIRE
 * \{ */

_XEvent :: union nonsûr #externe {
    type : z32
    tampon: [192]octet
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom IPA
 * \{ */

XOpenDisplay :: fonc (ptr: *rien) -> *Display #externe libx11
XCloseDisplay :: fonc (ptr: *Display) -> rien #externe libx11
XDefaultScreen :: fonc (display: *Display) -> z32 #externe libx11
XScreenOfDisplay :: fonc (ptr: *Display, screen_number: z32) -> *Screen #externe libx11

XCreateSimpleWindow :: fonc (
    display: *Display,
    parent: n64,
    x: z32,
    y: z32,
    largeur: n32,
    hauteur: n32,
    largeur_bordure: n32,
    bordure: n64,
    arrière_plan: n64) -> n64 #externe libx11

XSelectInput :: fonc (ptr: *Display, w: n64, a: z64) -> z32 #externe libx11
XMapWindow :: fonc (ptr: *Display, w: n64) -> z32 #externe libx11
XNextEvent :: fonc (display: *Display, event: *_XEvent) -> z32 #externe libx11

XDrawString :: fonc (
    display: *Display,
    d: n64,
    gc: *_XGC,
    x: z32,
    y: z32,
    string: *z8,
    longueur: z32) -> z32 #externe libx11

XFillRectangle :: fonc (
    display: *Display,
    d: n64,
    gc: *_XGC,
    x: z32,
    y: z32,
    largeur: z32,
    hauteur: z32) -> z32 #externe libx11

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Macros définis par Xlib.h
 * \{ */

RootWindow :: fonc (display: *Display, parent: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, parent).root
}

BlackPixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).black_pixel
}

WhitePixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).white_pixel
}

DefaultGC :: fonc (display: *Display, s: z32) -> *_XGC #enligne
{
    retourne XScreenOfDisplay(display, s).default_gc
}

DefaultScreen :: fonc (display: *Display) -> z32 #enligne
{
    retourne XDefaultScreen(display)
}

/** } */

// ----------------------------------------------------------------------------

principale :: fonc () -> z32
{
    diffère {
        imprime("Fin du programme, mémoire utilisée : %o\n", mémoire_utilisée())
    }

    _ExposureMask := 1 << 15
    _KeyPressMask := 1 << 0

    _KeyPress := 2
    _Expose := 12

    msg := "Hello, World!";

    d := XOpenDisplay(nul);

    si d == nul {
        imprime("Impossible d'ouvrir un display !\n")
        retourne 1
    }
    diffère XCloseDisplay(d)

    hauteur : n32 = 640
    largeur : n32 = 480
    largeur_bordure : n32 = 1

    s := DefaultScreen(d);
    w := XCreateSimpleWindow(d, RootWindow(d, s), 10, 10, hauteur, largeur, largeur_bordure,
                           BlackPixel(d, s), WhitePixel(d, s));

    _ := XSelectInput(d, w, _ExposureMask | _KeyPressMask);
    _ := XMapWindow(d, w);

    gc_défaut := DefaultGC(d, s)

    boucle {
        e : _XEvent
        _ := XNextEvent(d, *e)

        si e.type == _Expose {
            _ := XFillRectangle(d, w, gc_défaut, 20, 20, 10, 10);
            _ := XDrawString(d, w, gc_défaut, 10, 50, msg.pointeur, msg.taille comme z32);
        }

        si e.type == _KeyPress {
            arrête
        }
    }

    retourne 0
}
