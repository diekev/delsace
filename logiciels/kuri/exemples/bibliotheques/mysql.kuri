importe Fondation
importe MySQL

/*
class iterateur_ligne {
	MYSQL_RES *m_resultat = nullptr;
	MYSQL_ROW m_ligne = nullptr;

public:
	iterateur_ligne()
		: m_resultat(nullptr)
		, m_ligne(nullptr)
	{}

	explicit iterateur_ligne(MYSQL_RES *res)
		: m_resultat(res)
		, m_ligne(mysql_fetch_row(m_resultat))
	{}

	iterateur_ligne &operator++()
	{
		m_ligne = mysql_fetch_row(m_resultat);
		return *this;
	}

	MYSQL_ROW ligne() const
	{
		return m_ligne;
	}

	MYSQL_RES *resultat() const
	{
		return m_resultat;
	}
};

class ligne_resultat {
	MYSQL_ROW m_ligne = nullptr;
	unsigned long *m_longueurs = nullptr;

	ligne_resultat(MYSQL_ROW ligne, MYSQL_RES *resultat)
		: m_ligne(ligne)
		, m_longueurs(mysql_fetch_lengths(resultat))
	{}

public:
	explicit ligne_resultat(iterateur_ligne iter_ligne)
		: ligne_resultat(iter_ligne.ligne(), iter_ligne.resultat())
	{}

	dls::vue_chaine operator[](long i)
	{
		return dls::vue_chaine(m_ligne[i], static_cast<long>(m_longueurs[i]));
	}
};
*/

principale :: fonc () : z32
{
	mysql : MYSQL;
	mysql_init(@mysql);

	mysql_options(@mysql, mysql_option.MYSQL_READ_DEFAULT_GROUP,"option".pointeur);

	hôte := ""
	utilisateur := ""
	mot_de_passe := ""
	base_de_données := ""

	connexion := mysql_real_connect(@mysql, hôte.pointeur, utilisateur.pointeur, mot_de_passe.pointeur, base_de_données.pointeur, 0, nul, 0);

	si (connexion == nul) {
		e := mysql_error(@mysql)
		chn := converti_chaine_c(e)
		imprime("Une erreur s'est produite lors de la connexion à la BDD : % !\n", chn);
		retourne 1
	}

	imprime("Connexion réussie à la BDD!");

/*
	mysql_query(&mysql, "SELECT * FROM profil;");

	auto resultat = mysql_store_result(&mysql);
	auto nombre_resultat = mysql_num_rows(resultat);

	std::cout << "Il y a " << nombre_resultat << " résultats\n";

	auto nombre_champs = mysql_num_fields(resultat);

	auto iter_ligne = iterateur_ligne(resultat);

	while (iter_ligne.ligne() != nullptr) {
		auto ligne = ligne_resultat(iter_ligne);

		for (auto i = 0u; i < nombre_champs; ++i) {
			std::cout << "[" << ligne[i] << "] ";
		}

		++iter_ligne;

		std::cout << '\n';
	}

	mysql_free_result(resultat);
*/

	mysql_close(@mysql);

	retourne 0
}
