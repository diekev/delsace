struct Vecteur3D {
	x : n32;
	y : n32;
	z : n32;
}

#!si faux
fonc racine_carré(x : n32) -> n32
{
#!si vrai
	dyn num := x;
	dyn res := 0;

	# Le second bit est mis en place
	# n8  : 1 << 6
	# n16 : 1 << 14
	# n32 : 1 << 30
	# n64 : 1 << 62
	dyn bit := 1 << 30;

	boucle {
		si bit <= num {
			arrête;
		}

		bit = bit >> 2;
	}

	boucle {
		si bit == 0 {
			arrête;
		}

		si num >= (res + bit) {
			num = num - (res + bit);
			res = res + (bit << 1);
		}

		res = res >> 1;
		bit = bit >> 2;
	}

	retourne res;
#!sinon
	si (x == 0) || (x == 1) {
		retourne x;
	}

	dyn i := 1;
	dyn res := 1;

	boucle {
		si res > x {
			arrête;
		}

		i = i + 1;
		res = i * i;
	}

	retourne i - 1;
#!finsi
}

fonc carré(x : n32) -> n32
{
	retourne x * x;
}

fonc longueur_vecteur(v : Vecteur3D) -> n32
{
	retourne 0;
}

fonc longueur(x : n32, y : n32, z : n32) -> n32
{
	retourne racine_carré(carré(x) + carré(y) + carré(z));
}

fonc principale(compte : n32, arguments : []*c8) -> n32
{
	retourne longueur(compte, compte, compte);
}

fonc foo(compte : [2][2]n32) -> n32
{
	a := compte[0][0];
	b := @compte;
	retourne 1;
}
#!finsi

#!si faux
fonc principale1()
{
	t0 := 5 + 2;
	t1 := 5 - 2;
	t2 := 5 * 2;
	t3 := 5 / 2;
	t4 := 5 % 2;
	t5 := 5 >> 2;
	t6 := 5 << 2;
	t7 := 5 & 2;
	t8 := 5 | 2;
	t9 := 5 ^ t0;
}

fonc principale2()
{
	t0 := 5.0 == 2.0;
	t1 := 5.0 != 2.0;
	t2 := 5.0 <= 2.0;
	t3 := 5.0 >= 2.0;
	t4 := 5.0 < 2.0;
	t5 := 5.0 > 2.0;
}

fonc principale3()
{
	t4 := (5.0 == 5.0) && (6.0 == 6.0);
	t5 := vrai != vrai;
	t6 := faux == faux;
}
#!finsi
