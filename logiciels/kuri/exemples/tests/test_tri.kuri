
partition :: fonc(tableau : []z32, premier : z32, dernier : z32, pivot : z32) -> z32
{
	échange(@tableau[premier], @tableau[dernier]);

	variable j := premier;

	pour i dans premier...dernier - 1 {
		si tableau[i] <= tableau[dernier] {
			échange(@tableau[i], @tableau[j]);
		}
	}

	échange(@tableau[dernier], @tableau[j]);

	retourne j;
}

tri_rapide :: fonc(tableau : []z32, premier : z32, dernier : z32) -> rien
{
	si premier < dernier {
		pivot := choix_pivot(tableau, premier, dernier);
		pivot = partition(tableau, premier, dernier, pivot);

		tri_rapide(tableau, premier, pivot - 1);
		tri_rapide(tableau, pivot + 1, dernier);
	}
}

Plage :: struct {
	premier : *z32;
	dernier : *z32;
}

choix_pivot :: fonc(plage : *Plage) -> *z32
{
	retourne avance(plage.premier, distance(plage) / 2);
}

tri_rapide :: fonc(plage : *Plage) -> rien
{
	si plage.premier < plage.dernier {
		pivot := choix_pivot(plage);
		pivot = partition(plage, pivot);

		plage1;
		plage1.premier = plage.premier;
		plage1.dernier = pivot - taille_de(z32);

		plage2;
		plage2.premier = pivot + taille_de(z32);
		plage2.dernier = plage.dernier;

		tri_rapide(plage1);
		tri_rapide(plage2);
	}
}

GNASimple :: struct {
	z : z32;
	w : z32;
}

construit_gna :: fonc(graine : z32) -> GNASimple
{
	gna_simple : GNASimple;
	gna_simple.z = graine;
	gna_simple.w = graine + 1;
	retourne gna_simple;
}

nombre_aléatoire :: fonc(variable gna_simple : *GNASimple) -> z32
{
	gna_simple.z = 36969 * (gna_simple.z & 655535) + (gna_simple.z >> 16);
	gna_simple.w = 36969 * (gna_simple.w & 655535) + (gna_simple.w >> 16);
	retourne (gna_simple.z << 16) + gna_simple.w;
}

principale :: fonc(compte : z32, arguments : **z8) -> z32
{
	tableau : [1024]z32;

	gna_simple := construit_gna(5);

	pour i dans 0...1023 {
		tableau[i] = nombre_aléatoire(@gna_simple);
	}

	plage : Plage;
	plage.premier = @tableau[0];
	plage.dernier = @tableau[1023];

	tri_rapide(@plage);

	retourne 0;
}
