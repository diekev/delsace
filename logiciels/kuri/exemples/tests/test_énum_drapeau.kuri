importe Fondation

// À FAIRE(langage) : opérations sur les énums drapeaux
// x.DRAPEAU | bool (|=)
// x.DRAPEAU & bool (&=)
// x.DRAPEAU ^ bool (^=)
// permet l'utilisation d'expressions booléennes non littérales (voir opérateur ternaire)
// opérateur + -> opérateur |
// opérateur - -> opérateur & ~
// opérateur || -> x.DRAPEAU1 || x.DRAPEAU2 -> (x & (DRAPEAU1 | DRAPEAU2)) != 0
// opérateur && -> x.DRAPEAU1 && x.DRAPEAU2 -> (x & (DRAPEAU1 | DRAPEAU2)) == (DRAPEAU1 | DRAPEAU2)

Drapeau :: énum_drapeau n32 {
    FA
    FB
    FC
    FD
    FE
}

Normal :: énum z32 {
    FA
    FB
    FC
    FD
    FE
}

test_expressions_booléennes :: fonc ()
{
    a := Drapeau.FA

    si a.FA {
        imprime("OK: a.FA !\n")
    }
    sinon {
        imprime("PAS OK: a.FA !\n")
    }

    si !a.FA {
        imprime("PAS OK: a.FA !\n")
    }
    sinon {
        imprime("OK: a.FA !\n")
    }

    si a.FA == vrai {
        imprime("OK: a.FA !\n")
    }
    sinon {
        imprime("PAS OK: a.FA !\n")
    }

    si a.FA == faux {
        imprime("PAS OK: a.FA !\n")
    }
    sinon {
        imprime("OK: a.FA !\n")
    }

    si vrai == a.FA {
        imprime("OK: a.FA !\n")
    }
    sinon {
        imprime("PAS OK: a.FA !\n")
    }

    si faux == a.FA {
        imprime("PAS OK: a.FA !\n")
    }
    sinon {
        imprime("OK: a.FA !\n")
    }
}

test_expressions_booléennes_tableau :: fonc ()
{
    a := [Drapeau.FA]

    si a[0].FA {
        imprime("OK: a[0].FA !\n")
    }
    sinon {
        imprime("PAS OK: a[0].FA !\n")
    }

    si !a[0].FA {
        imprime("PAS OK: a[0].FA !\n")
    }
    sinon {
        imprime("OK: a[0].FA !\n")
    }

    si a[0].FA == vrai {
        imprime("OK: a[0].FA !\n")
    }
    sinon {
        imprime("PAS OK: a[0].FA !\n")
    }

    si a[0].FA == faux {
        imprime("PAS OK: a[0].FA !\n")
    }
    sinon {
        imprime("OK: a[0].FA !\n")
    }

    si vrai == a[0].FA {
        imprime("OK: a[0].FA !\n")
    }
    sinon {
        imprime("PAS OK: a[0].FA !\n")
    }

    si faux == a[0].FA {
        imprime("PAS OK: a[0].FA !\n")
    }
    sinon {
        imprime("OK: a[0].FA !\n")
    }
}

test_raccourcis_assignation_énumération_drapeau :: fonc ()
{
    {
        a : Drapeau
        a.FA = vrai

        saufsi a.FA {
            imprime("PAS OK: a.FA est faux !\n")
            retourne
        }

        a.FA = faux
        si a.FA {
            imprime("PAS OK: a.FA est vrai !\n")
            retourne
        }
    }
    {
        a : [1]Drapeau
        a[0].FA = vrai

        saufsi a[0].FA {
            imprime("PAS OK: a.FA est faux !\n")
            retourne
        }

        a[0].FA = faux
        si a[0].FA {
            imprime("PAS OK: a.FA est vrai !\n")
            retourne
        }
    }

    imprime("SUCCÈS de test_raccourcis_assignation_énumération_drapeau !\n")
}

tests_activations_drapeaux :: fonc ()
{
    drapeau : Drapeau

    imprime("drapeau = %\n", drapeau)

    drapeau |= Drapeau.FA

    imprime("drapeau = % (%)\n", drapeau, drapeau comme n32)

    drapeau |= Drapeau.FB

    imprime("drapeau = % (%)\n", drapeau, drapeau comme n32)

    drapeau |= Drapeau.FE
    drapeau |= Drapeau.FD

    imprime("drapeau = % (%)\n", drapeau, drapeau comme n32)
}

test_conjonction_énum_simple :: fonc ()
{
    normal : Normal

    imprime("normal = %\n", normal)

    normal = Normal.FA

    imprime("normal = %\n", normal)

    // À définir si ceci est possible ou non
    normal |= Normal.FB
    normal |= Normal.FC

    imprime("normal = %\n", normal)
}

principale :: fonc () -> z32
{
    test_expressions_booléennes()
    test_expressions_booléennes_tableau()
    test_raccourcis_assignation_énumération_drapeau()
    tests_activations_drapeaux()
    test_conjonction_énum_simple()
    retourne 0
}
