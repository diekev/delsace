importe Fondation

CouleurTerminal :: énum {
    BLANC
    BLEU
    CYAN
    GRIS
    JAUNE
    MAGENTA
    ROUGE
    VERT
}

StyleTexte :: énum {
    RÉINIT
    GRAS
    FONCÉ
    ITALIC
    SOUSLIGNÉ
    CLIGNOTE
    INVERSE
    CACHE
    CROISÉ
}

chaine_style_texte :: fonc (style: StyleTexte) -> chaine
{
    discr style {
        RÉINIT    { retourne "\033[00m" }
        GRAS      { retourne "\033[1m" }
        FONCÉ     { retourne "\033[2m" }
        ITALIC    { retourne "\033[3m" }
        SOUSLIGNÉ { retourne "\033[4m" }
        CLIGNOTE  { retourne "\033[5m" }
        INVERSE   { retourne "\033[7m" }
        CACHE     { retourne "\033[8m" }
        CROISÉ    { retourne "\033[9m" }
    }

    retourne ""
}

chaine_pour_avant_plan :: fonc (couleur: CouleurTerminal) -> chaine
{
    discr couleur {
        GRIS    { retourne "\033[30m" }
        ROUGE   { retourne "\033[31m" }
        VERT    { retourne "\033[32m" }
        JAUNE   { retourne "\033[33m" }
        BLEU    { retourne "\033[34m" }
        MAGENTA { retourne "\033[35m" }
        CYAN    { retourne "\033[36m" }
        BLANC   { retourne "\033[37m" }
    }

    retourne ""
}

chaine_pour_arrière_plan :: fonc (couleur: CouleurTerminal) -> chaine
{
    discr couleur {
        GRIS    { retourne "\033[40m" }
        ROUGE   { retourne "\033[41m" }
        VERT    { retourne "\033[42m" }
        JAUNE   { retourne "\033[43m" }
        BLEU    { retourne "\033[44m" }
        MAGENTA { retourne "\033[45m" }
        CYAN    { retourne "\033[46m" }
        BLANC   { retourne "\033[47m" }
    }

    retourne ""
}

Couleur :: énum {
    BLANC
    BLEU
    CYAN
    GRIS
    JAUNE
    MAGENTA
    ROUGE
    VERT
}

Alignement :: énum {
    GAUCHE
    DROIT
    CENTRE
}

ChaineOptionnelle :: union {
    chn : chaine
    aucun : z32
}

CouleurOptionnelle :: union {
    couleur : Couleur
    aucun : z32
}

AlignementOptionnel :: union {
    alignement : Alignement
    aucun : z32
}

Format :: struct {
    couleur_avant_plan : Couleur = Couleur.BLANC
    couleur_arrière_plan : Couleur = Couleur.BLANC
    couleur_bordure : Couleur = Couleur.BLANC
    couleur_bordure_gauche : Couleur = Couleur.BLANC
    couleur_bordure_droite : Couleur = Couleur.BLANC
    couleur_bordure_haut : Couleur = Couleur.BLANC
    couleur_bordure_bas : Couleur = Couleur.BLANC

    alignement : Alignement = Alignement.GAUCHE

    // À FAIRE : ces chaines sont possiblement de simples caractère UTF-8
    caractère_coin_haut_gauche : chaine = "+"
    caractère_coin_haut_droit  : chaine = "+"
    caractère_coin_bas_gauche  : chaine = "+"
    caractère_coin_bas_droit   : chaine = "+"
    caractère_coin : chaine = "+"
}

Cellule :: struct {
    parente : *Ligne
    format : Format

    données : chaine
}

Ligne :: struct {
    parent : *Table
    cellules : []Cellule

    format : Format
}

Table :: struct {
    lignes : []Ligne
    format : Format
}

détruit_table :: fonc (table: *Table) -> rien
{
    déloge table.lignes
}

principale :: fonc () -> z32
{
    imprime("\033[3msur cyan\n")
    retourne 0
}

