importe Fondation

Fragment :: struct {
    début := 0
    taille := 0
}

fragmente_texte :: fonc (texte: chaine) -> []Fragment
{
    fragments : []Fragment

    début_mot := 0
    dernier_fut_espace := faux

    pour c, i dans texte {
        si c == ' ' {
            fragment : Fragment
            fragment.début = début_mot
            fragment.taille = transtype(i: z32) - début_mot

            tableau_ajoute(@fragments, fragment)

            début_mot = transtype(i: z32)
            dernier_fut_espace = vrai
        }
        sinon si dernier_fut_espace {
            fragment : Fragment
            fragment.début = début_mot
            fragment.taille = transtype(i: z32) - début_mot

            tableau_ajoute(@fragments, fragment)

            début_mot = transtype(i: z32)
            dernier_fut_espace = faux
        }
    }

    fragment : Fragment
    fragment.début = début_mot
    fragment.taille = transtype(texte.taille: z32) - début_mot

    tableau_ajoute(@fragments, fragment)

    retourne fragments
}

Ligne :: struct {
    fragments : []Fragment

    taille : z32
}

Document :: struct {
    lignes : []Ligne
    texte : chaine

    taille_ligne : z32 = 80
}

détruit_document :: fonc (document: *Document) -> rien
{
    pour ligne dans document.lignes {
        déloge ligne.fragments
    }

    déloge document.lignes
}

crée_document_depuis_texte :: fonc (texte: chaine) -> Document
{
    document : Document
    document.texte = texte

    fragments := fragmente_texte(texte)
    diffère { déloge fragments; }

    ligne_courante : Ligne

    pour fragment dans fragments {
        si ligne_courante.taille + fragment.taille > document.taille_ligne {
            tableau_ajoute(@document.lignes, ligne_courante)

            ligne_courante = Ligne{}
        }

        tableau_ajoute(@ligne_courante.fragments, fragment)
        ligne_courante.taille += fragment.taille
    }

    si ligne_courante.fragments.taille != 0 {
        tableau_ajoute(@document.lignes, ligne_courante)
    }

    retourne document
}

// @note : considération des espaces en fin de ligne, ou suppression des espaces avec ajout dans l'impression quand nécessaire
principale :: fonc () -> z32
{
    diffère { imprime("\nFin du programme, mémoire utilisée : %o\n", mémoire_utilisée()) }

    texte := "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."

    document := crée_document_depuis_texte(texte)
    diffère { détruit_document(@document) }

    imprime("Texte avec alignement gauche :\n\n")

    pour ligne dans document.lignes {
        imprime("|")

        taille_restante := document.taille_ligne - ligne.taille

        pour fragment dans ligne.fragments {
            chn := construit_chaine(document.texte.pointeur + fragment.début, fragment.taille)
            imprime("%", chn)
        }

        pour i dans 0 ... taille_restante - 1 {
            imprime(" ")
        }

        imprime("|\n")
    }

    imprime("\n")

    imprime("Texte avec alignement droit :\n\n")

    pour ligne dans document.lignes {
        imprime("|")

        taille_restante := document.taille_ligne - ligne.taille

        pour i dans 0 ... taille_restante - 1 {
            imprime(" ")
        }

        pour fragment dans ligne.fragments {
            chn := construit_chaine(document.texte.pointeur + fragment.début, fragment.taille)
            imprime("%", chn)
        }

        imprime("|\n")
    }

    imprime("\n")

    imprime("Texte avec alignement centré :\n\n")

    pour ligne dans document.lignes {
        imprime("|")

        taille_restante := document.taille_ligne - ligne.taille

        est_impair := taille_restante % 2 != 0

        pour i dans 0 ... taille_restante / 2 {
            imprime(" ")
        }

        pour fragment dans ligne.fragments {
            chn := construit_chaine(document.texte.pointeur + fragment.début, fragment.taille)
            imprime("%", chn)
        }

        pour i dans 0 ... taille_restante / 2 + transtype(est_impair: z32) {
            imprime(" ")
        }

        imprime("|\n")
    }

    imprime("\n")

    retourne 0
}
