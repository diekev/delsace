importe "flux"

imprime_tableau :: fonc(tabl : []r64) -> rien
{
    imprime_sans_format("imprime_tableau...\n");
    imprime_sans_format("tabl.taille = ", tabl.taille, "\n");
    imprime_sans_format("tabl.pointeur = ", tabl.pointeur, "\n");

    dyn index = 0;
    pour v dans tabl {
        // À FAIRE : besoin_dérèf
        x := v;
        imprime_sans_format("tabl[", index, "] = ", x, "\n");
        index = index + 1;
    }
}

Vecteur :: struct {
    x : r64;
    y : r64;
    z : r64;
}

test :: fonc() -> rien
{
    imprime_sans_format("=========================================\n");
    imprime_sans_format("                 tableau                 \n");

    dyn tabl := [1.0, 2.0, 4.0, 8.0, 16.0];

    imprime_tableau(tabl);

    imprime_sans_format("=========================================\n");
    imprime_sans_format("                 tailles                 \n");

    imprime_sans_format("taille_de(z32) = ", taille_de(z32), "\n");
    imprime_sans_format("taille_de([]z32) = ", taille_de([]z32), "\n");
    imprime_sans_format("taille_de([]r64) = ", taille_de([]r64), "\n");
    imprime_sans_format("taille_de(eini) = ", taille_de(eini), "\n");

    imprime_sans_format("=========================================\n");
    imprime_sans_format("                 vecteur                 \n");

    dyn vec2 : Vecteur;
    vec1 := Vecteur{x = 1.0, y = 4.0, z = 16.0};

    imprime("Vecteur initiliasé : ", vec1, '\n');
    imprime("Vecteur non-initiliasé : ", vec2, '\n');

    // À FAIRE : appel foncs ne foncne pas s'il faut transformer les arguments
    dyn nom := "x";

    dyn ok := possede_membre(vec1, nom);

    si ok {
        imprime_sans_format("Le vecteur possède le membre 'x' !\n");
    }
    sinon {
        imprime_sans_format("Le vecteur ne possède pas le membre 'x' !\n");
    }

    // À FAIRE : réassignement
    dyn nom1 := "non";
    ok = possede_membre(vec1, nom1);

    si ok {
        imprime_sans_format("Le vecteur possède le membre 'non' !\n");
    }
    sinon {
        imprime_sans_format("Le vecteur ne possède pas le membre 'non' !\n");
    }
}

logement_tableau :: fonc() -> rien
{
    imprime_sans_format("=========================================\n");
    imprime_sans_format("            logements tableau            \n");

    dyn tabl := loge [32]r64;

    imprime_sans_format("Tableau logé à l'addresse : ", tabl.pointeur, '\n');
    imprime_sans_format("Taille tableau : ", tabl.taille, '\n');

    dyn debut := 1.0;

    pour v dans tabl {
        v = debut;
        debut *= 3.0;
    }

    imprime_tableau(tabl);

    déloge tabl;

    imprime("Tableau délogé : ", tabl.pointeur, '\n');
    imprime("Taille tableau : ", tabl.taille, '\n');

    imprime_tableau(tabl);
}


logement_chaine :: fonc() -> rien
{
    imprime_sans_format("=========================================\n");
    imprime_sans_format("            logements chaine             \n");

    chn1 := "Kévin";
    chn2 := "Dietrich";

    dyn chnr = concatene(chn1, chn2);

    imprime_sans_format("Résultat : ", chnr, '\n');

    déloge chnr;

    imprime_sans_format("Chaîne délogée : ", chnr.pointeur, '\n');
    imprime_sans_format("Taille chaîne  : ", chnr.taille, '\n');
}

test_fichier :: fonc() -> rien
{
    imprime_sans_format("=========================================\n");
    imprime_sans_format("                 fichier                 \n");

    chemin := "/home/kevin/test.kuri";

    nonsûr {
        dyn res := open(chemin, 0);

        si res == -1 {
            imprime_sans_format("Erreur lors de l'ouverture du fichier !\n");
            retourne;
        }

        dyn tpn : [1024]z8;
        dyn nread = read(res, @tpn[0], 1024);

        imprime("Lu ", nread, " octets\n");

        dyn chn : chaîne;
        chn.pointeur = @tpn[0]; // À FAIRE : prend pointeur automatiquement
        chn.taille = transtype(nread : z64);

        imprime(chn, '\n');

        res = close(res);

        si res == -1 {
            imprime_sans_format("Erreur lors de la fermeture du fichier !\n");
            retourne;
        }
    }
}

principale :: fonc(args : []*z8) -> z32
{
    imprime_sans_format("=========================================\n");
    imprime_sans_format("                arguments                \n");

    str := "nombre d'arguments = ";
    imprime_sans_format(str, argc, "\n");

    dyn i := 0;
    pour arg dans args {
        nom_arg := converti_chaine_c(arg);
        imprime_sans_format("argument ", i,": ", nom_arg, "\n");
        i += 1;
    }

    logement_tableau();
    logement_chaine();
    //test_fichier();
    test();

    retourne 0;
}
