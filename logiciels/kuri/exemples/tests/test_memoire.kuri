importe Fondation

test_echange_memoire :: fonc () -> rien
{
    // test superposition

    chn := "0123456789"

    a: []octet
    b: []octet

    echange_mem(a, b)
}

test_bouge_memoire :: fonc () -> rien
{
    // test superposition

    chn := "0123456789"

    a: []octet
    b: []octet

    bouge_mem(a, b, 0)
}

copie_mem2 :: fonc (src: []octet, dst: []octet, taille: z64) -> rien
{
    si src.taille < taille {
        retourne
    }

    si dst.taille < taille {
        retourne
    }

    // vérifie si superposition

    ptr_deb_src := *src[0]
    ptr_fin_src := *src[src.taille - 1]
    ptr_deb_dst := *dst[0]

    // src |---------------|
    // dst       |---------------|
    si ptr_deb_src <= ptr_deb_dst <= ptr_fin_src {
        pour i dans 0 ... taille - 1 {
            idx := taille - i - 1
            dst[idx] = src[idx]
        }
    }
    sinon {
        pour i dans 0 ... taille - 1 {
            dst[i] = src[i]
        }
    }
}

test_copie_mem :: fonc () -> rien
{
    // test superposition
    // 0123456789
    // 0120123456

    // 0123456789
    // 3456789789

    // Les chaines statiques ne peuvent être modifiées.
    chn_stat := "0123456789"
    chn := loge_chaine(chn_stat.taille)
    diffère déloge(chn)

    pour c, i dans chn_stat {
        chn[i] = c
    }

    imprime("Chaine : ", chn, '\n')

    a: []octet
    a.pointeur = *chn[3]
    a.taille = 7
    b: []octet
    b.pointeur = *chn[0]
    b.taille = 10

    copie_mem(a, b, 7)

    imprime("Chaine : ", chn, '\n')
}

principale :: fonc () -> z32
{
    test_copie_mem()
    retourne 0
}
