importe Compilatrice
importe Fondation
importe GlibC

// ----------------------------------------------------------------------------

test_retour_simple :: fonc () -> z32
{
    retourne 256
}

#assert test_retour_simple() == 256

// ----------------------------------------------------------------------------
// Test pointeurs de fonctions

fonction_pointée :: fonc () -> z32
{
    retourne 30101991
}

appel_pointeur_fonction_interne :: fonc () -> z32
{
    ptr := fonction_pointée
    retourne ptr()
}

#assert appel_pointeur_fonction_interne() == 30101991

appel_pointeur_fonction_externe :: fonc () -> bool
{
    ptr := compilatrice_obtiens_options
    options := ptr()
    retourne options.niveau_optimisation == NiveauOptimisation.AUCUN
}

#assert appel_pointeur_fonction_externe()

// ----------------------------------------------------------------------------
// Tests expression mémoire()

test_expressions_mémoire :: fonc () -> bool
{
    a := 5
    b := mémoire(*a)

    si b != 5 {
        retourne faux
    }

    mémoire(*a) = 10

    si a != 10 {
        retourne faux
    }

    S :: struct {
        x : z32
    }

    s : S

    mémoire(*s.x) = 5

    si s.x != 5 {
        retourne faux
    }

    s.x = 10

    b = mémoire(*s.x)

    si b != 10 {
        retourne faux
    }

    retourne vrai
}

#assert test_expressions_mémoire()

// ----------------------------------------------------------------------------
// Tests chaines

test_taille_chaine :: fonc () -> z64
{
    chn := "0123456789"
    retourne chn.taille
}

#assert test_taille_chaine() == 10

test_taille_chaine_littérale :: fonc () -> z64
{
    retourne "0123456789".taille
}

#assert test_taille_chaine_littérale() == 10

test_indexage_chaine :: fonc (index : z64) -> z64
{
    chn := "0123456789"
    retourne chn[index]
}

#assert test_indexage_chaine(0) == '0'
#assert test_indexage_chaine(1) == '1'
#assert test_indexage_chaine(2) == '2'
#assert test_indexage_chaine(3) == '3'
#assert test_indexage_chaine(4) == '4'
#assert test_indexage_chaine(5) == '5'
#assert test_indexage_chaine(6) == '6'
#assert test_indexage_chaine(7) == '7'
#assert test_indexage_chaine(8) == '8'
#assert test_indexage_chaine(9) == '9'

test_indexage_chaine_littérale :: fonc (index: z64) -> z64
{
    retourne "0123456789abcdef"[index]
}

#assert test_indexage_chaine_littérale(10) == 'a'
#assert test_indexage_chaine_littérale(11) == 'b'
#assert test_indexage_chaine_littérale(12) == 'c'
#assert test_indexage_chaine_littérale(13) == 'd'
#assert test_indexage_chaine_littérale(14) == 'e'
#assert test_indexage_chaine_littérale(15) == 'f'

nombre_itérations_chaine :: fonc (chn: chaine) -> z64
{
    i : z64 = 0

    pour chn {
        i = index_it
    }

    retourne i + 1
}

#assert nombre_itérations_chaine("0123456789") == 10

nombre_itérations_chaine_littérale :: fonc () -> z64
{
    i : z64 = 0

    pour "0123456789abcdef" {
        i = index_it
    }

    retourne i + 1
}

#assert nombre_itérations_chaine_littérale() == 16

// ----------------------------------------------------------------------------
// Tests indexage

test_indexage_pointeur :: fonc () -> z32
{
    a : z32
    ptr := *a
    ptr[0] = 7
    retourne ptr[0]
}

#assert test_indexage_pointeur() == 7

test_indexage_tableau_fixe :: fonc () -> z32
{
    x : [3]z32
    x[0] = 1
    x[x[0]] = 5
    x[x[0] + x[0]] = 27 + x[1]

    retourne x[2]
}

#assert test_indexage_tableau_fixe() == 32

test_indexage_tableau_dynamique :: fonc () -> z32
{
    // À FAIRE
    retourne 0
}

// #assert test_indexage_tableau_dynamique() == 0

test_copie_mem :: fonc () -> z32
{
    a : z32
    b := 27

    copie_mem_nonsur(src = *b, dst = *a, taille = 4)

    retourne a
}

#assert test_copie_mem() == 27

// ----------------------------------------------------------------------------
// Tests des boucles

nombre_itérations_boucle :: fonc (n: z32) -> z32
{
    i := 0

    boucle {
        i += 1

        si i == n {
            arrête
        }
    }

    retourne i
}

#assert nombre_itérations_boucle(10) == 10

nombre_itérations_répète :: fonc (n: z32) -> z32
{
    i := 0

    répète {
        i += 1
    } tantque i != n

    retourne i
}

#assert nombre_itérations_répète(10) == 10

nombre_itérations_tantque :: fonc (n: z32) -> z32
{
    i := 0

    tantque i != n {
        i += 1
    }

    retourne i
}

#assert nombre_itérations_tantque(10) == 10

nombre_itérations_plage :: fonc (début: z32, fin: z32) -> z32
{
    i := 0

    pour début ... fin {
        i = index_it
    }

    retourne i
}

#assert nombre_itérations_plage(0, 10) == 10
#assert nombre_itérations_plage(5, 10) == 5
#assert nombre_itérations_plage(20, 10) == 0

// ----------------------------------------------------------------------------
// Tests fonctions externes

test_fonction_externe :: fonc ()
{
    chn := "\x1b[34mFR\x1b[mAN\x1b[31mCE\x1b[m\n"
    taille := write(1, chn.pointeur, chn.taille)

    chn = "\x1b[32mIT\x1b[mAL\x1b[31mIE\x1b[m\n"
    taille = write(1, chn.pointeur, chn.taille)
}

#exécute test_fonction_externe()

// ----------------------------------------------------------------------------
// Tests des expressions logiques

test_retour_logique_ou :: fonc (a: bool, b: bool) -> bool
{
    retourne a || b
}

test_retour_logique_et :: fonc (a: bool, b: bool) -> bool
{
    retourne a && b
}

#assert test_retour_logique_ou(vrai, vrai) == vrai
#assert test_retour_logique_ou(vrai, faux) == vrai
#assert test_retour_logique_ou(faux, vrai) == vrai
#assert test_retour_logique_ou(faux, faux) == faux

#assert test_retour_logique_et(vrai, vrai) == vrai
#assert test_retour_logique_et(vrai, faux) == faux
#assert test_retour_logique_et(faux, vrai) == faux
#assert test_retour_logique_et(faux, faux) == faux

test_assignation_logique_ou :: fonc (a: bool, b: bool) -> bool
{
    c := a || b
    retourne c
}

test_assignation_logique_et :: fonc (a: bool, b: bool) -> bool
{
    c := a && b
    retourne c
}

#assert test_assignation_logique_ou(vrai, vrai) == vrai
#assert test_assignation_logique_ou(vrai, faux) == vrai
#assert test_assignation_logique_ou(faux, vrai) == vrai
#assert test_assignation_logique_ou(faux, faux) == faux

#assert test_assignation_logique_et(vrai, vrai) == vrai
#assert test_assignation_logique_et(vrai, faux) == faux
#assert test_assignation_logique_et(faux, vrai) == faux
#assert test_assignation_logique_et(faux, faux) == faux

test_réassignation_logique_ou :: fonc (a: bool, b: bool) -> bool
{
    c := faux
    c = a || b
    retourne c
}

test_réassignation_logique_et :: fonc (a: bool, b: bool) -> bool
{
    c := faux
    c = a && b
    retourne c
}

#assert test_réassignation_logique_ou(vrai, vrai) == vrai
#assert test_réassignation_logique_ou(vrai, faux) == vrai
#assert test_réassignation_logique_ou(faux, vrai) == vrai
#assert test_réassignation_logique_ou(faux, faux) == faux

#assert test_réassignation_logique_et(vrai, vrai) == vrai
#assert test_réassignation_logique_et(vrai, faux) == faux
#assert test_réassignation_logique_et(faux, vrai) == faux
#assert test_réassignation_logique_et(faux, faux) == faux

test_argument_logique :: fonc (b: bool) -> bool
{
    retourne b
}

#assert test_argument_logique(vrai && vrai) == vrai
#assert test_argument_logique(vrai && faux) == faux
#assert test_argument_logique(faux && vrai) == faux
#assert test_argument_logique(faux && faux) == faux

#assert test_argument_logique(vrai || vrai) == vrai
#assert test_argument_logique(vrai || faux) == vrai
#assert test_argument_logique(faux || vrai) == vrai
#assert test_argument_logique(faux || faux) == faux

// ----------------------------------------------------------------------------
// Tests des expressions de comparaisons chainées

sont_dans_l_ordre :: fonc (a: z32, b: z32, c: z32, d: z32) -> bool
{
    retourne a <= b <= c <= d
}

#assert sont_dans_l_ordre(0, 10, 15, 20) == vrai
#assert sont_dans_l_ordre(0, 10, 15, 10) == faux

sont_dans_le_désordre :: fonc (a: z32, b: z32, c: z32, d: z32) -> bool
{
    retourne !(a <= b <= c <= d)
}

#assert sont_dans_le_désordre(0, 10, 15, 20) == faux
#assert sont_dans_le_désordre(0, 10, 15, 10) == vrai

// ----------------------------------------------------------------------------
// Test des conditions booléennes

test_conditions :: fonc () -> z32
{
    // nombre entier
    a := 5

    si !a {
        retourne 1
    }

    saufsi a {
        retourne 2
    }

    a = 0

    si a {
        retourne 3
    }

    // chaine
    chn := ""

    si chn {
        retourne 4
    }

    chn = "0"

    si !chn {
        retourne 5
    }

    saufsi chn {
        retourne 6
    }

    // littérales booléennes
    si !vrai {
        retourne 7
    }

    si faux {
        retourne 8
    }

    saufsi vrai {
        retourne 9
    }

    si vrai && faux {
        retourne 10
    }

    si faux || faux {
        retourne 11
    }

    // pointeur
    ptr : *z32 = nul

    si ptr {
        retourne 12
    }

    ptr = *a

    si !ptr {
        retourne 13
    }

    saufsi ptr {
        retourne 14
    }

    // À FAIRE : tableau

    retourne 0
}

#assert test_conditions() == 0

// ----------------------------------------------------------------------------
// Tests des structures

Vecteur :: struct {
    x := 0
    y := 1
    z := 2
}

produit_scalaire :: fonc (v1: Vecteur, v2: Vecteur) -> z32
{
    retourne v1.x * v2.x + v1.y * v2.y + v1.z * v2.z
}

test_structure :: fonc ()
{
    // initialisation via fonction implicite
    {
        v : Vecteur
    }

    // initialisation manuelle
    {
        v : Vecteur = ---
        v.x = 1
        v.y = 2
        v.z = 4
    }

    // initialisation via une construction de structure
    {
        v := Vecteur(x = 2, y = 4, z = 8)
    }
}

test_fonction_init :: fonc () -> z32
{
    v : Vecteur = ---
    init_de(Vecteur)(*v)

    retourne v.z
}

#assert test_fonction_init() == 2

// ----------------------------------------------------------------------------
// Tests des unions
// À FAIRE : appels : paramètres, retours

EOuR :: union nonsûr {
    e : z32 = 127
    f : r32
}

test_union_nonsûr :: fonc () -> bool
{
    // allocation et modification
    e : EOuR

    si e.e != 127 {
        retourne faux
    }

    // assignation d'un type, sans accès membre
    e = 5

    si e != 5 comme z32 {
        retourne faux
    }

    e = 6.0

    si e != 6.0 {
        retourne faux
    }

    // assignation d'un type, ave accès membre
    e.e = 5

    si e.e != 5 {
        retourne faux
    }

    e.f = 6.0

    si e.f != 6.0 {
        retourne faux
    }

    // transtypage
    f := e comme z32

    si f != 0b0_10000001_10000000000000000000000 {
        retourne faux
    }

    g := e comme r32

    si g != 6.0 {
        retourne faux
    }

    retourne vrai
}

#assert test_union_nonsûr()

EOuRS :: union {
    e : z32 = 127
    f : r32
}

test_union_sûr :: fonc () -> bool
{
    // allocation et modification
    e : EOuRS

    si e != 127 comme z32 {
        retourne faux
    }

    // assignation d'un type, sans accès membre
    e = 5

    si e != 5 comme z32 {
        retourne faux
    }

    e = 6.0

    si e != 6.0 {
        retourne faux
    }

    // assignation d'un type, avec accès membre
    e.e = 5

    si e.e != 5 {
        retourne faux
    }

    e.f = 6.0

    si e.f != 6.0 {
        retourne faux
    }

    // transtypage
    // À FAIRE entier_constant échoue ici
    e = 30101991 comme z32
    f := e comme z32

    si f != 30101991 {
        retourne faux
    }

    e = 138.0
    g := e comme r32

    si g != 138.0 {
        retourne faux
    }

    retourne vrai
}

#assert test_union_sûr()

test_union_sûr_anonyme :: fonc () -> bool
{
    // allocation et modification
    e : z32 | r32

    si e != 0 comme z32 {
        retourne faux
    }

    // // assignation d'un type, sans accès membre
    e = 5

    si e != 5 comme z32 {
        retourne faux
    }

    e = 6.0

    si e != 6.0 {
        retourne faux
    }

    // assignation d'un type, ave accès membre
    // À FAIRE
    // e.0 = 5

    // si e.0 != 5 {
    //     retourne faux
    // }

    // e.1 = 6.0

    // si e.1 != 6.0 {
    //     retourne faux
    // }

    // transtypage
    // À FAIRE entier_constant échoue ici
    e = 30101991 comme z32
    f := e comme z32

    si f != 30101991 {
        retourne faux
    }

    e = 138.0
    g := e comme r32

    si g != 138.0 {
        retourne faux
    }

    retourne vrai
}

#assert test_union_sûr_anonyme()

// ----------------------------------------------------------------------------
// Tests des discriminations

test_discrimination_entier :: fonc (v: z32) -> bool
{
    discr v {
        1, 2, 3 {
            retourne vrai
        }
        8, 9, 10 {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }

    retourne faux
}

#assert test_discrimination_entier(1) == vrai
#assert test_discrimination_entier(5) == faux
#assert test_discrimination_entier(8) == vrai

test_discrimination_réel :: fonc (v: r32) -> bool
{
    discr v {
        1.0, 2.0, 3.0 {
            retourne vrai
        }
        8.0, 9.0, 10.0 {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }

    retourne faux
}

#assert test_discrimination_réel(1.0) == vrai
#assert test_discrimination_réel(5.0) == faux
#assert test_discrimination_réel(8.0) == vrai

test_discrimination_chaine :: fonc (v: chaine) -> bool
{
    discr v {
        "kuri" {
            retourne vrai
        }
        "langage" {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }

    retourne faux
}

#assert test_discrimination_chaine("kuri") == vrai
#assert test_discrimination_chaine("programmation") == faux
#assert test_discrimination_chaine("langage") == vrai

// ----------------------------------------------------------------------------
// Tests des fonctions variadiques

nombre_arguments_variadique_interne :: fonc (args: ...z32) -> z64
{
    retourne args.taille
}

#assert nombre_arguments_variadique_interne() == 0
#assert nombre_arguments_variadique_interne(1, 2, 3, 4, 5) == 5
#assert nombre_arguments_variadique_interne(3, 4, 5, 6, 7, 8, 9) == 7

fonction_test_variadique_externe :: fonc (sentinel: z32, args: ...) -> z32 #compilatrice

#assert fonction_test_variadique_externe(0, 1, 2, 3, 0) == 3

// ----------------------------------------------------------------------------
// Tests erreur

ErreurTest :: erreur {
    UneErreurEstSurvenue
    UneAutreErreurEstSurvenue
}

appel_fonction_avec_erreur_union :: fonc () -> z32 | ErreurTest
{
    retourne ErreurTest.UneErreurEstSurvenue
}

appel_fonction_avec_erreur_seule :: fonc () -> ErreurTest
{
    retourne ErreurTest.UneErreurEstSurvenue
}

retourne_erreur_depuis_union :: fonc () -> bool
{
    r := tente appel_fonction_avec_erreur_union() piège err {
        retourne vrai
    }

    retourne faux
}

#assert retourne_erreur_depuis_union()

retourne_erreur_seule :: fonc () -> bool
{
    tente appel_fonction_avec_erreur_seule() piège err {
        retourne vrai
    }

    retourne faux
}

#assert retourne_erreur_seule()

test_erreur_retournée :: fonc (v: ErreurTest) -> bool
{
    tente appel_fonction_avec_erreur_seule() piège err {
        retourne err == v
    }

    retourne faux
}

#assert test_erreur_retournée(ErreurTest.UneErreurEstSurvenue) == vrai
#assert test_erreur_retournée(ErreurTest.UneAutreErreurEstSurvenue) == faux

// ----------------------------------------------------------------------------
// Tests types

test_valeur_types :: fonc () -> bool
{
    si z32 == r32 {
        retourne faux
    }

    si z32 == z64 {
        retourne faux
    }

    retourne z32 == z32
}

#assert test_valeur_types()

// ----------------------------------------------------------------------------
// Tests tableau octet

taille_tableau_octet :: fonc (tableau: []octet) -> z64
{
    retourne tableau.taille
}

#assert taille_tableau_octet(4) == 4
#assert taille_tableau_octet(6.0 comme r64) == 8
#assert taille_tableau_octet("kuri") == 4
#assert taille_tableau_octet([0, 1, 2, 3]) == 16

// À FAIRE : contenu du tableau, conversion depuis d'autres types (tableaux dynamiques)

// ----------------------------------------------------------------------------
// Tests tableaux fixes

test_construction_tableau_fixe :: fonc (index: z64) -> z32
{
    t := [0, 1, 2]
    retourne t[index]
}

#assert test_construction_tableau_fixe(0) == 0
#assert test_construction_tableau_fixe(1) == 1
#assert test_construction_tableau_fixe(2) == 2

passe_tableau_fixe :: fonc (t: [3]z32, index: z64) -> z32
{
    retourne t[index]
}

test_passe_tableau_fixe :: fonc (index: z64) -> z32
{
    t := [0, 1, 2]
    retourne passe_tableau_fixe(t, index)
}

#assert test_passe_tableau_fixe(0) == 0
#assert test_passe_tableau_fixe(1) == 1
#assert test_passe_tableau_fixe(2) == 2

passe_tableau_dynamique :: fonc (t: []z32, index: z64) -> z32
{
    retourne t[index]
}

test_conversion_tableau_dynamique :: fonc (index: z64) -> z32
{
    t := [0, 1, 2]
    retourne passe_tableau_dynamique(t, index)
}

#assert test_conversion_tableau_dynamique(0) == 0
#assert test_conversion_tableau_dynamique(1) == 1
#assert test_conversion_tableau_dynamique(2) == 2

test_modification_tableau_boucle :: fonc () -> bool
{
    t := [0, 1, 2]

    pour t {
        it += 1
    }

    retourne t[0] == 1 && t[1] == 2 && t[2] == 3
}

#assert test_modification_tableau_boucle()

// ----------------------------------------------------------------------------
// Test des globales

GLOBALE := 10

modifie_globale :: fonc (valeur: z32) -> z32
{
    GLOBALE = valeur
    retourne GLOBALE
}

#assert modifie_globale(27) == 27

// les constructeurs doivent être appelés/générés avant notre métaprogramme
GLOBALE2 := 10
test_appels_constructeurs_globales :: fonc () -> z32
{
    retourne GLOBALE2
}

#assert test_appels_constructeurs_globales() == 10

// ----------------------------------------------------------------------------
// Test infos types

test_info_de_z32 :: fonc () -> bool
{
    infos := info_de(z32)

    si infos.id != id_info.ENTIER {
        retourne faux
    }

    si infos.taille_en_octet != 4 {
        retourne faux
    }

    si !infos.est_signé {
        retourne faux
    }

    retourne vrai
}

test_info_de_r32 :: fonc () -> bool
{
    infos := info_de(r32)

    si infos.id != id_info.RÉEL {
        retourne faux
    }

    si infos.taille_en_octet != 4 {
        retourne faux
    }

    retourne vrai
}

test_info_de_structure :: fonc () -> bool
{
    infos := info_de(Vecteur)

    si infos.id != id_info.STRUCTURE {
        retourne faux
    }

    si infos.taille_en_octet != 12 {
        retourne faux
    }

    si infos.nom.taille != 7 {
        retourne faux
    }

    si infos.nom != "Vecteur" {
        retourne faux
    }

    si infos.membres.taille != 3 {
        retourne faux
    }

    infos_entier := info_de(z32)

    pour infos.membres {
        si it.id != infos_entier {
            retourne faux
        }

        si it.id.id != id_info.ENTIER {
            retourne faux
        }
    }

    retourne vrai
}

#assert test_info_de_z32()
#assert test_info_de_r32()
#assert test_info_de_structure()

// ----------------------------------------------------------------------------
//
