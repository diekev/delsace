importe Fondation
importe Réseau

vérifie_égalité :: fonc(chaine1 : chaine, chaine2 : chaine, position := PositionCodeSource()) -> rien
{
    si chaine1 == chaine2 {
        retourne
    }

    imprime("(%:%) Les chaines ne sont pas égales '%' et '%'\n", position.fichier, position.ligne, chaine1, chaine2)
}

vérifie_égalité :: fonc(a : bool, b : bool) -> rien
{
    si a == b {
        retourne
    }

    imprime("Les valeurs ne sont pas égales '%' et '%'\n", a, b)
}

principale :: fonc () -> z32
{
	{
		uri := tente parse_uri_standard("https://john.doe@www.example.com:123/forum/questions/?tag=networking&order=newest#top") piège nonatteignable

		vérifie_égalité(uri.schéma, "https")
		vérifie_égalité(uri.autorité, "//john.doe@www.example.com:123")
		vérifie_égalité(uri.nom_utilisateur, "john.doe")
		vérifie_égalité(uri.hôte, "www.example.com")
		vérifie_égalité(uri.port, "123")
		vérifie_égalité(uri.chemin, "/forum/questions/")
		vérifie_égalité(uri.requête, "tag=networking&order=newest")
		vérifie_égalité(uri.fragment, "top")
	}
	{
		uri := tente parse_uri_standard("ldap://[2001:db8::7]/c=GB?objectClass?one") piège nonatteignable

		vérifie_égalité(uri.schéma, "ldap")
		vérifie_égalité(uri.autorité, "//[2001:db8::7]")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "[2001:db8::7]")
		vérifie_égalité(uri.port, "")
		vérifie_égalité(uri.chemin, "/c=GB")
		vérifie_égalité(uri.requête, "objectClass?one")
		vérifie_égalité(uri.fragment, "")
	}
	{
		uri := tente parse_uri_standard("mailto:John.Doe@example.com") piège nonatteignable

		vérifie_égalité(uri.schéma, "mailto")
		vérifie_égalité(uri.autorité, "")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "")
		vérifie_égalité(uri.port, "")
		vérifie_égalité(uri.chemin, "John.Doe@example.com")
		vérifie_égalité(uri.requête, "")
		vérifie_égalité(uri.fragment, "")
	}
	{
		uri := tente parse_uri_standard("news:comp.infosystems.www.servers.unix") piège nonatteignable

		vérifie_égalité(uri.schéma, "news")
		vérifie_égalité(uri.autorité, "")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "")
		vérifie_égalité(uri.port, "")
		vérifie_égalité(uri.chemin, "comp.infosystems.www.servers.unix")
		vérifie_égalité(uri.requête, "")
		vérifie_égalité(uri.fragment, "")
	}
	{
		uri := tente parse_uri_standard("tel:+1-816-555-1212") piège nonatteignable

		vérifie_égalité(uri.schéma, "tel")
		vérifie_égalité(uri.autorité, "")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "")
		vérifie_égalité(uri.port, "")
		vérifie_égalité(uri.chemin, "+1-816-555-1212")
		vérifie_égalité(uri.requête, "")
		vérifie_égalité(uri.fragment, "")
	}
	{
		uri := tente parse_uri_standard("telnet://192.0.2.16:80/") piège nonatteignable

		vérifie_égalité(uri.schéma, "telnet")
		vérifie_égalité(uri.autorité, "//192.0.2.16:80")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "192.0.2.16")
		vérifie_égalité(uri.port, "80")
		vérifie_égalité(uri.chemin, "/")
		vérifie_égalité(uri.requête, "")
		vérifie_égalité(uri.fragment, "")
	}
	{
		uri := tente parse_uri_standard("urn:oasis:names:specification:docbook:dtd:xml:4.1.2") piège nonatteignable

		vérifie_égalité(uri.schéma, "urn")
		vérifie_égalité(uri.autorité, "")
		vérifie_égalité(uri.nom_utilisateur, "")
		vérifie_égalité(uri.hôte, "")
		vérifie_égalité(uri.port, "")
		vérifie_égalité(uri.chemin, "oasis:names:specification:docbook:dtd:xml:4.1.2")
		vérifie_égalité(uri.requête, "")
		vérifie_égalité(uri.fragment, "")
	}

    retourne 0
}
