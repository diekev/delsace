// À FAIRE : permet de préciser le ctx pour les fonctions avec contexte appelée dans des fonctions sans

// https://franckh.developpez.com/tutoriels/posix/pthreads/

importe Fondation
importe GlibC
importe PThread

//#####################################################################################

rand :: fonc externe () -> r64

sleep :: fonc externe (temps : z32) -> rien

strerror :: fonc externe (args : z32) -> *z8

//#####################################################################################

// Structure stockant les informations des threads clients et du magasin.
store_t :: struct {
   stock := 20

   thread_store : n64
   thread_clients : [5]n64

   mutex : pthread_mutex_t
   cond_clients : pthread_cond_t
   cond_store : pthread_cond_t
}

// Fonction pour tirer un nombre au sort entre 0 et max.
get_random :: fonc(max : z32) -> z32 #nulctx
{
	val : r64
	val = max comme r64 * rand()
	val = val / (2147483647.0 + 1.0)

	retourne (val comme z32)
}

// Fonction pour le thread du magasin.
fn_store :: fonc(p_data : *rien) -> *rien #nulctx
{
    store := p_data comme *store_t

	boucle {
        pthread_mutex_lock(@store.mutex)
        pthread_cond_wait(@store.cond_store, @store.mutex)

		store.stock = 20
		printf("Remplissage du stock de %d articles !\n".pointeur, store.stock)

        pthread_cond_signal(@store.cond_clients)
        pthread_mutex_unlock(@store.mutex)
	}

	retourne nul
}

donnée_client_t :: struct {
    store : *store_t
    index : z32
}

// Fonction pour les threads des clients.
fn_clients :: fonc(p_data : *rien) -> *rien #nulctx
{
    donnée_client := p_data comme *donnée_client_t
    store := donnée_client.store
	nb : z32 = donnée_client.index

	boucle {
		val : z32 = get_random(6)
		sleep((get_random(3)))

        pthread_mutex_lock(@store.mutex)

        si val > store.stock {
            pthread_cond_signal(@store.cond_store)
            pthread_cond_wait(@store.cond_clients, @store.mutex)
        }

		store.stock = store.stock - val

		printf("Client %d prend %d du stock, reste %d en stock !\n".pointeur, nb, val, store.stock)
        //printf("-- pthread_self() : %d\n".pointeur, pthread_getthreadid_np())

        pthread_mutex_unlock(@store.mutex)
	}

	retourne nul
}

ValeurSysConf :: énum z32 {
    _SC_NPROCESSORS_ONLN :: 84
}

sysconf :: fonc externe (nom: ValeurSysConf) -> z64

nombre_threads_système :: fonc () -> z64
{
    retourne sysconf(ValeurSysConf._SC_NPROCESSORS_ONLN)
}

Tâche :: struct {
    id_tâche : pthread_t

    rappel : fonc(*rien)(rien)
    données_rappel : *rien

    id : z32
}

#fonc_tâche lance_tâche :: fonc (tâche: *Tâche) -> rien
{
    // contexte.id_tâche = tâche.id
    tâche.rappel(tâche.données_rappel)
}

// comment passer le contexte ?
// création d'un contexte par le programme ?
crée_tâche :: fonc (rappel: fonc(*rien)(rien), données_rappel: *rien) -> Tâche
{
    tâche := loge Tâche
    tâche.données_rappel = données_rappel
    tâche.rappel = rappel
    tâche.id = 0

    ret := pthread_create(@tâche.id_tâche, nul, lance_tâche, tâche)

    si ret != 0 {
		printf("erreur : %s".pointeur, strerror(ret))
        déloge tâche
    }

    retourne tâche
}

SystèmeTâche :: struct {
    tâches : []Tâche
}

principale :: fonc () -> z32
{
    imprime("Il y a sur le système % threads\n", nombre_threads_système());

    //retourne 0

    store := store_t( stock = 20 )
	ret : z32 = 0

	printf("Creation du thread du magasin !\n".pointeur)
	ret = pthread_create(@store.thread_store, nul, fn_store, @store)

	si ret == 0 {
        printf("Creation des threads clients !\n".pointeur)

        pour fil_client, idx dans store.thread_clients {
            donnée_client : donnée_client_t
            donnée_client.store = @store
            donnée_client.index = idx
            ret = pthread_create(@fil_client, nul, fn_clients, @donnée_client)

            si ret != 0 {
                printf("erreur : %s".pointeur, strerror(ret))
            }
        }
	}
	sinon {
		printf("erreur : %s".pointeur, strerror(ret))
	}

    pour fil_client dans store.thread_clients {
		pthread_join(fil_client, nul)
	}

	pthread_join(store.thread_store, nul)

	retourne 0
}

