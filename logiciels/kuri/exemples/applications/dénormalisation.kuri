importe Fondation

taille_symbole :: fonc (symbole: *chaine) -> z32
{
    s := mémoire(symbole)
    diffère mémoire(symbole) = s

    si s[0] == '0' {
        s = avance(s, 1)
        retourne 0
    }

    taille := 0

    tantque '0' <= s[0] <= '9' {
        taille *= 10
        taille += (s[0] - '0') comme z32
        s = avance(s, 1)
    }

    retourne taille
}

dénormalise_fonction :: fonc (symbole: chaine) -> rien
{
    symbole = avance(symbole, 3)

    // module
    taille_nom_module := taille_symbole(*symbole)
    nom_module := construit_chaine(symbole.pointeur, taille_nom_module)
    symbole = avance(symbole, taille_nom_module)

    // nom
    taille := taille_symbole(*symbole)
    nom_fonction := construit_chaine(symbole.pointeur, taille)
    symbole = avance(symbole, taille)

    // entrées _EN_
    symbole = avance(symbole, 1)
    symbole = avance(symbole, 1)
    nombre_entrées := taille_symbole(*symbole)
    symbole = avance(symbole, 1)

    entrée := ""

    pour i dans 0 ... nombre_entrées - 1 {
        // nom du paramètre
        taille = taille_symbole(*symbole)
        entrée = construit_chaine(symbole.pointeur + 2, taille - 2)
        symbole = avance(symbole, taille)

        // type du paramètre
        taille = taille_symbole(*symbole)
        entrée = construit_chaine(symbole.pointeur + 2, taille - 2)
        symbole = avance(symbole, taille)
    }

    // sorties _SN_
    symbole = avance(symbole, 1)
    symbole = avance(symbole, 1)
    nombre_sorties := taille_symbole(*symbole)
    symbole = avance(symbole, 1)

    sortie := ""

    pour i dans 0 ... nombre_sorties - 1 {
        taille = taille_symbole(*symbole)
        sortie = construit_chaine(symbole.pointeur + 2, taille - 2)
        symbole = avance(symbole, taille)
    }

    imprime("%.%(%) -> %\n", nom_module, nom_fonction, entrée, sortie)
}

principale :: fonc ()
{
    symbole := "_KF9Fondation24imprime_nombre_rxC3xA9el_E2_11enchaineuse15KPKsEnchaineuse6format17KsFormatRxC3xA9el_S1_6Ksrien"

    si symbole.commence_par("_KF") {
        dénormalise_fonction(symbole)
    }
}
