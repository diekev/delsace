importe Fondation
importe Tori // pour imprime_json
importe JSON

// -----------------------------------

test_json_tori :: fonc () -> rien
{
    diffère { imprime("mémoire utilisée : %o\n", mémoire_utilisée()) }

    chn := "{ \"nom\" : \"dietrich\", \"prénom\" : \"kévin\", \"âge\": 28, \"taille\": 1.73 }"

    imprime("script :\n\n", chn, "\n\n")

    // -----------------------------------
    // Lexage du script

    lexeuse := construit_lexeuse(chn)
    diffère { détruit_lexeuse(lexeuse); }

    lexeuse.performe_lexage()

    imprime("lexèmes :\n\n")

    pour données dans lexeuse.lexèmes {
        imprime("%\n", données.lexème)
    }

    imprime("\n")

    // -----------------------------------
    // Syntaxage du script, création de l'objet

	syntaxeuse : SyntaxeuseJSON
	syntaxeuse.lexèmes = lexeuse.lexèmes
    diffère { détruit(syntaxeuse); }

	syntaxeuse.lance_analyse()

	imprime("JSON :\n\n")

    si syntaxeuse.assembleuse.pile.est_vide() {
        imprime("La pile est vide...\n")
    }
    sinon {
        racine := syntaxeuse.assembleuse.pile.haut()
        imprime_json(racine, 0)
    }

	imprime("\n")
}

// -----------------------------------

// À FAIRE : comment déterminer si une valeur est manquante ?
InformationConnexion :: struct {
    email := "une_première_addresse@courriel.fr"
    mot_de_passe := "L3Dfs_BaJRufF5!P"
    age := 56
}

InformationInscription :: struct {
    nom := ""
    prénom := ""
    email := ""
    mot_de_passe := ""
}

Repas :: struct {
    nom : chaine
    ingrédients : []Ingrédient
    ingrédient_principal : Ingrédient
}

Ingrédient :: struct {
    nom: chaine
    quantité: z64
}

principale :: fonc () -> z32
{
    chaine_repas := «
        {
            "nom" : "riz fri oeufs",
            "ingrédients" : [
                {
                    "nom": "riz",
                    "quantité": 100
                },
                {
                    "nom": "oeufs",
                    "quantité": 1
                },
                {
                    "nom": "sauce soja",
                    "quantité": 1
                },
                {
                    "nom": "aji no moto",
                    "quantité": 1
                },
                {
                    "nom": "galangal",
                    "quantité": 1
                },
                {
                    "nom": "sambal",
                    "quantité": 1
                },
                {
                    "nom": "rendang",
                    "quantité": 1
                }
            ],
            "ingrédient_principal":
            {
                "nom": "riz",
                "quantité": 100
            }
        }
    »

    succès, repas := parse_struct_depuis_chaine_json(chaine_repas, Repas)

    saufsi succès {
        imprime("impossible de parser la chaine JSON\n")
        retourne 1
    }

    imprime("repas :\n%\n", repas)

    /*
    info : InformationConnexion

    chn := chaine_json_depuis_struct(info)
    diffère { déloge(chn); }

    imprime("JSON : %\n", chn)

    info.email = "une_autre_addresse@courriel.fr"
    info.mot_de_passe = "LkD34qdIFa0S"
    info.age = 78

    imprime("%\n", info)

    succès, info_ := parse_struct_depuis_chaine_json(chn, info)

    //chaine_json_depuis_objet_tori()
    //objet_tori_depuis_json()

    imprime("%\n", info_)
    */
    retourne 0
}
