importe Fondation
importe Math
importe SysFichier

Maillage :: struct {
    tris : []Triangle
}

crée_maillage_cube :: fonc () -> *Maillage
{
    maillage := loge(Maillage)
    maillage.tris.taille = 0
    maillage.tris.pointeur = nul

    // SUD
    tri := crée_triangle(crée_vec3r(0.0, 0.0, 0.0), crée_vec3r(0.0, 1.0, 0.0), crée_vec3r(1.0, 1.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(0.0, 0.0, 0.0), crée_vec3r(1.0, 1.0, 0.0), crée_vec3r(1.0, 0.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    // EST
    tri = crée_triangle(crée_vec3r(1.0, 0.0, 0.0), crée_vec3r(1.0, 1.0, 0.0), crée_vec3r(1.0, 1.0, 1.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(1.0, 0.0, 0.0), crée_vec3r(1.0, 1.0, 1.0), crée_vec3r(1.0, 0.0, 1.0))
    tableau_ajoute(*maillage.tris, tri)

    // NORD
    tri = crée_triangle(crée_vec3r(1.0, 0.0, 1.0), crée_vec3r(1.0, 1.0, 1.0), crée_vec3r(0.0, 1.0, 1.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(1.0, 0.0, 1.0), crée_vec3r(0.0, 1.0, 1.0), crée_vec3r(0.0, 0.0, 1.0))
    tableau_ajoute(*maillage.tris, tri)

    // OUEST
    tri = crée_triangle(crée_vec3r(0.0, 0.0, 1.0), crée_vec3r(0.0, 1.0, 1.0), crée_vec3r(0.0, 1.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(0.0, 0.0, 1.0), crée_vec3r(0.0, 1.0, 0.0), crée_vec3r(0.0, 0.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    // HAUT
    tri = crée_triangle(crée_vec3r(0.0, 1.0, 0.0), crée_vec3r(0.0, 1.0, 1.0), crée_vec3r(1.0, 1.0, 1.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(0.0, 1.0, 0.0), crée_vec3r(1.0, 1.0, 1.0), crée_vec3r(1.0, 1.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    // BAS
    tri = crée_triangle(crée_vec3r(1.0, 0.0, 1.0), crée_vec3r(0.0, 0.0, 1.0), crée_vec3r(0.0, 0.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    tri = crée_triangle(crée_vec3r(1.0, 0.0, 1.0), crée_vec3r(0.0, 0.0, 0.0), crée_vec3r(1.0, 0.0, 0.0))
    tableau_ajoute(*maillage.tris, tri)

    retourne maillage
}

détruit_maillage :: fonc (maillage : *Maillage) -> rien
{
    déloge(maillage.tris)
    déloge(maillage)
}

DonnéesObj :: struct {
    vecteurs : []Vec3
    maillage : *Maillage
}

parse_ligne_obj :: fonc (ligne: chaine, données_obj: *DonnéesObj) -> rien
{
    nouveau_contexte := contexte()
    nouveau_contexte.allocatrice = __stockage_temporaire

    marque := obtiens_marque_stockage_temporaire()
    diffère { set_marque_stockage_temporaire(marque); }

    // supprime le caractère de nouvelle ligne
    ligne = recule(ligne, 1)

    si ligne.taille > 0 && ligne[ligne.taille - 1] == '\r' {
        ligne = recule(ligne, 1)
    }

    maillage := données_obj.maillage

    si ligne.commence_par("f ") {
        tmp := avance(ligne, 2)

        tri0 : Triangle
        tri1 : Triangle
        est_quad := faux

        pousse_contexte nouveau_contexte {
            mots := divise(tmp, ' ')

            est_quad = mots.taille == 4

            // À FAIRE: uvs, normaux
            indices0 := divise(mots[0], '/')
            idx0 := extrait_nombre_entier(indices0[0])

            indices1 := divise(mots[1], '/')
            idx1 := extrait_nombre_entier(indices1[0])

            indices2 := divise(mots[2], '/')
            idx2 := extrait_nombre_entier(indices2[0])

            tri0.p0 = données_obj.vecteurs[idx0 - 1]
            tri0.p1 = données_obj.vecteurs[idx1 - 1]
            tri0.p2 = données_obj.vecteurs[idx2 - 1]

            si est_quad {
                indices3 := divise(mots[3], '/')
                idx3 := extrait_nombre_entier(indices3[0])

                tri1.p0 = données_obj.vecteurs[idx0 - 1]
                tri1.p1 = données_obj.vecteurs[idx2 - 1]
                tri1.p2 = données_obj.vecteurs[idx3 - 1]
            }
        }

        tableau_ajoute(*maillage.tris, tri0)
        si est_quad {
            tableau_ajoute(*maillage.tris, tri1)
        }
    }
    sinon si ligne.commence_par("v ") {
        tmp := avance(ligne, 2)

        vec : Vec3

        pousse_contexte nouveau_contexte {
            mots := divise(tmp, ' ')

            vec.x = extrait_nombre_réel(mots[0]) comme r32
            vec.y = extrait_nombre_réel(mots[1]) comme r32
            vec.z = extrait_nombre_réel(mots[2]) comme r32
        }

        tableau_ajoute(*données_obj.vecteurs, vec)
    }
}

charge_maillage_depuis_obj :: fonc (chemin: chaine) -> *Maillage
{
    chm := construit_chemin(chemin)

    contenu := contenu_fichier_texte(chm)
    diffère { déloge(contenu); }

    maillage := loge(Maillage)
    maillage.tris.taille = 0
    maillage.tris.pointeur = nul

    données : DonnéesObj
    données.maillage = maillage

    pour_chaque_ligne(contenu, *données, parse_ligne_obj)
    déloge(données.vecteurs)

    retourne maillage
}
