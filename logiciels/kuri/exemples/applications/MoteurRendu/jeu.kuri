

// ----------------------------------------------------------------------------

Jeu :: struct {
    est_en_exécution := faux
    fenêtre : *SDL_Window = nul
    contexte : *rien = nul
}

initialise_jeu :: fonc (
    jeu: *Jeu,
    titre: chaine,
    pos_x: z32,
    pos_y: z32,
    hauteur: z32,
    largeur: z32,
    plein_écran: bool) -> bool
{
    si SDL_Init(DrapeauxInit.SDL_INIT_EVERYTHING) != 0 {
        imprime("Impossible d'intialiser SDL !\n")
        retourne faux
    }

    _ := SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, 1)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 4)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 0)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_STENCIL_SIZE, 8)

    drapeaux := SDL_WindowFlags.SDL_WINDOW_OPENGL

    si plein_écran {
        drapeaux |= SDL_WindowFlags.SDL_WINDOW_FULLSCREEN
    }

    jeu.fenêtre = SDL_CreateWindow(titre.pointeur, pos_x, pos_y, largeur, hauteur, drapeaux)

    si jeu.fenêtre == nul {
        imprime("Impossible de créer la fenêtre !\n")
        retourne faux
    }

    jeu.contexte = SDL_GL_CreateContext(jeu.fenêtre)

    si jeu.contexte == nul {
        imprime("Impossible de créer le contexte OpenGL !\n")
        retourne faux
    }

    si !initialise_opengl() {
        imprime("Erreur lors de l'initilisation de GLEW !\n")
        retourne faux
    }

    jeu.est_en_exécution = vrai

    retourne vrai
}

détruit_jeu :: fonc (jeu: *Jeu) -> rien
{
    si jeu.contexte != nul {
        SDL_GL_DeleteContext(jeu.contexte)
    }

    si jeu.fenêtre != nul {
        SDL_DestroyWindow(jeu.fenêtre)
    }

    SDL_Quit()
}

gère_évènement :: fonc (jeu: *Jeu) -> rien
{
    évènement : SDL_Event;

    tantque SDL_PollEvent(*évènement) != 0 {
        si évènement.type == SDL_EventType.SDL_QUIT {
            jeu.est_en_exécution = faux
        }
    }
}

ajourne_objets :: fonc (jeu: *Jeu) -> rien
{
}

rends_scène :: fonc (jeu: *Jeu) -> rien
{
    glClear(0x00004000)

    //glClearColor(0.5, 0.5, 1.0, 1.0)

    rendeuse_texte := crée_rendeuse_texte(640, 480)

    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glEnable(GL_BLEND);

    dessine_texte(rendeuse_texte, "test de dessin de texte")
    dessine_texte(rendeuse_texte, "test de dessin de texte, ligne 2")

    glDisable(GL_BLEND);

    détruit_rendeuse_texte(rendeuse_texte)

    SDL_GL_SwapWindow(jeu.fenêtre)
}

principale :: fonc () -> z32
{
    ips : n32 = 30
    débit_image_min : n32 = 1000 / ips

    jeu : Jeu
    diffère { détruit_jeu(*jeu) }

    si !initialise_jeu(*jeu, "Jeu", 100, 100, 480, 640, faux) {
        retourne 1
    }

    tantque jeu.est_en_exécution {
        temps_image := SDL_GetTicks()

        gère_évènement(*jeu)
        ajourne_objets(*jeu)
        rends_scène(*jeu)

        si (SDL_GetTicks() - temps_image) < débit_image_min {
            durée := débit_image_min - (SDL_GetTicks() - temps_image)
            SDL_Delay(durée)
        }
    }

    retourne 0
}
