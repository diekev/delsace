importe Couleur
importe FTGL
importe Fondation
importe Math
importe OpenGL

charge "programme"

RendeuseTexte :: struct {
    hauteur := 0
    largeur := 0
    décalage := 0.0
    taille_police := 0.0

    tampon : *rien

    atlas : *texture_atlas_t
    font : *texture_font_t

    programme : n32

    id_tampon_vertex : n32
    id_tampon_index : n32
    id_tableau_vertex : n32

    id_tampon_couleur : n32
    id_tampon_tex_coord : n32
}

crée_rendeuse_texte :: fonc (largeur: z32, hauteur: z32) -> *RendeuseTexte
{
    rendeuse := loge RendeuseTexte
    rendeuse.largeur = largeur
    rendeuse.hauteur = hauteur
    rendeuse.décalage = 1.0
    rendeuse.taille_police = 14.0
    rendeuse.tampon = nul

    retourne rendeuse
}

détruit_rendeuse_texte :: fonc (rendeuse: *RendeuseTexte) -> rien
{
    texture_atlas_delete(rendeuse.atlas)
    texture_font_delete(rendeuse.font)

    glDeleteVertexArrays(1, @rendeuse.id_tableau_vertex)
    glDeleteBuffers(1, @rendeuse.id_tampon_vertex)
    glDeleteBuffers(1, @rendeuse.id_tampon_index)
    glDeleteBuffers(1, @rendeuse.id_tampon_couleur)
    glDeleteBuffers(1, @rendeuse.id_tampon_tex_coord)

    glDeleteProgram(rendeuse.programme)

    déloge rendeuse
}

crée_tampon :: fonc (rendeuse: *RendeuseTexte) -> rien
{
    source_vertex_texte := "
		#version 330 core
		layout(location = 0) in vec2 vertex;
		layout(location = 1) in vec2 tex_coord;
		layout(location = 2) in vec4 color;
		smooth out vec2 UV;
		smooth out vec4 couleur;
		void main()
		{
			gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);
			UV = tex_coord;
		   couleur = color;
		}
    "

    source_fragment_texte := "
		#version 330 core
		layout (location = 0) out vec4 fragment_color;
		uniform sampler2D atlas;
		smooth in vec4 couleur;
		smooth in vec2 UV;
		void main()
		{
			float a = texture2D(atlas, UV).r;
			fragment_color = vec4(couleur.xyz, couleur.a*a);
            //fragment_color = vec4(1.0, 0.0, 1.0, 1.0);
		}
    "

    id_programme := charge_programme(source_vertex_texte, source_fragment_texte)

    rendeuse.programme = id_programme
}

dessine_texte :: fonc (rendeuse: *RendeuseTexte, texte: chaine) -> rien
{
    chemin_fonte := "/usr/share/fonts/truetype/freefont/FreeSans.ttf"

    // À FAIRE : passe la couleur
    blanc := vec4( x = 1.0, y = 1.0, z = 1.0, w = 1.0 )
    noir  := vec4( x = 0.0, y = 0.0, z = 0.0, w = 1.0 )
    none := blanc

    markup : markup_t
	markup.family  = chemin_fonte.pointeur
	markup.size    = rendeuse.taille_police
	markup.bold    = 0
	markup.italic  = 0
	markup.spacing = 0.0
	markup.gamma   = 1.5
	markup.foreground_color    = blanc
	markup.background_color    = none
	markup.underline           = 0
	markup.underline_color     = blanc
	markup.overline            = 0
	markup.overline_color      = blanc
	markup.strikethrough       = 0
	markup.strikethrough_color = blanc

    si rendeuse.tampon == nul {
		crée_tampon(rendeuse)
		rendeuse.atlas = texture_atlas_new(512, 512, 1)
		rendeuse.font = texture_font_new_from_file(rendeuse.atlas, markup.size, markup.family)
	}

	markup.font = rendeuse.font

	pos := Vec2r( x = 8.0, y = 8.0 + rendeuse.décalage )
	taille := Vec2r( x = rendeuse.largeur comme r32, y = rendeuse.hauteur comme r32 )

	markup.foreground_color = noir
	markup.font.rendermode = rendermode_t.RENDER_OUTLINE_EDGE
	markup.font.outline_thickness = 0.2

	dessine_lettres(rendeuse, rendeuse.tampon, texte, rendeuse.atlas, @markup, pos, taille)

	markup.foreground_color = blanc
	markup.font.rendermode = rendermode_t.RENDER_NORMAL

	dessine_lettres(rendeuse, rendeuse.tampon, texte, rendeuse.atlas, @markup, pos, taille)

	rendeuse.décalage += rendeuse.taille_police
}

dessine_lettres :: fonc (rendeuse: *RendeuseTexte, tampon: *rien, texte: chaine, atlas: *texture_atlas_t, markup: *markup_t, pos: Vec2r, taille: Vec2r) -> rien
{
    pen := vec2( x = pos.x, y = taille.y - pos.y - rendeuse.taille_police )

	sommets : []Vec2r
	uvs : []Vec2r
	couleurs : []Couleur
	indices : []z32

    diffère {
        déloge sommets
        déloge uvs
        déloge couleurs
        déloge indices
    }

    couleur := Couleur(
        r = markup.foreground_color.x,
        v = markup.foreground_color.y,
        b = markup.foreground_color.z,
        a = markup.foreground_color.w)

	inv_taille := Vec2r( x = 1.0 / taille.x, y = 1.0 / taille.y )

    dernier_caractère : *z8 = nul

    pour c dans texte {
		glyph := texture_font_get_glyph(markup.font, @c)

		si glyph == nul {
			continue
		}

		kerning := 0.0

		si dernier_caractère != nul {
			kerning = texture_glyph_get_kerning(glyph, dernier_caractère)
		}

		pen.x += kerning
		x0 := (pen.x + glyph.offset_x comme r32) * inv_taille.x
		y0 := (pen.y + glyph.offset_y comme r32) * inv_taille.y
		x1 := x0 + glyph.width comme r32 * inv_taille.x
		y1 := y0 - glyph.height comme r32 * inv_taille.y
		s0 := glyph.s0;
		t0 := glyph.t0;
		s1 := glyph.s1;
		t1 := glyph.t1;

		decalage_index := sommets.taille comme z32
		tableau_ajoute(@indices, 0 + decalage_index)
		tableau_ajoute(@indices, 1 + decalage_index)
		tableau_ajoute(@indices, 2 + decalage_index)
		tableau_ajoute(@indices, 0 + decalage_index)
		tableau_ajoute(@indices, 2 + decalage_index)
		tableau_ajoute(@indices, 3 + decalage_index)

		tableau_ajoute(@sommets, Vec2r( x = x0, y = y0 ))
		tableau_ajoute(@sommets, Vec2r( x = x0, y = y1 ))
		tableau_ajoute(@sommets, Vec2r( x = x1, y = y1 ))
		tableau_ajoute(@sommets, Vec2r( x = x1, y = y0 ))

		tableau_ajoute(@uvs, Vec2r( x = s0, y = t0 ))
		tableau_ajoute(@uvs, Vec2r( x = s0, y = t1 ))
		tableau_ajoute(@uvs, Vec2r( x = s1, y = t1 ))
		tableau_ajoute(@uvs, Vec2r( x = s1, y = t0 ))

        tableau_ajoute(@couleurs, couleur)
        tableau_ajoute(@couleurs, couleur)
        tableau_ajoute(@couleurs, couleur)
        tableau_ajoute(@couleurs, couleur)

		pen.x += glyph.advance_x

        dernier_caractère = @c
	}

    // --------------------------------------

    glGenVertexArrays(1, @rendeuse.id_tableau_vertex)
    glGenBuffers(1, @rendeuse.id_tampon_index)
    glGenBuffers(1, @rendeuse.id_tampon_vertex)
    glGenBuffers(1, @rendeuse.id_tampon_couleur)
    glGenBuffers(1, @rendeuse.id_tampon_tex_coord)

    glBindVertexArray(rendeuse.id_tableau_vertex)

    // --------------------------------------

    glBindBuffer(OGL.ARRAY_BUFFER, rendeuse.id_tampon_vertex);
	glBufferData(OGL.ARRAY_BUFFER, sommets.taille comme n64 * taille_de(Vec2r), @sommets[0], OGL.STATIC_DRAW);

	glBindBuffer(OGL.ELEMENT_ARRAY_BUFFER, rendeuse.id_tampon_index);
	glBufferData(OGL.ELEMENT_ARRAY_BUFFER, indices.taille comme n64 * taille_de(z32), @indices[0], OGL.STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 2, OGL.FLOAT, OGL.FALSE, 0, nul);

    // --------------------------------------

    glBindBuffer(OGL.ARRAY_BUFFER, rendeuse.id_tampon_tex_coord);
	glBufferData(OGL.ARRAY_BUFFER, uvs.taille comme n64 * taille_de(Vec2r), @uvs[0], OGL.STATIC_DRAW);

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 2, OGL.FLOAT, OGL.FALSE, 0, nul);

    // --------------------------------------

    glBindBuffer(OGL.ARRAY_BUFFER, rendeuse.id_tampon_couleur);
	glBufferData(OGL.ARRAY_BUFFER, couleurs.taille comme n64 * taille_de(Vec4r), @couleurs[0], OGL.STATIC_DRAW);

	glEnableVertexAttribArray(2);
	glVertexAttribPointer(2, 4, OGL.FLOAT, OGL.FALSE, 0, nul);

    // --------------------------------------

    glBindVertexArray(0)

    // --------------------------------------

	si atlas == nul {
		imprime("L'atlas est nul !\n")
	}
	sinon si atlas.data == nul {
		imprime("Les données de l'atlas sont nuls !\n")
	}

	glGenTextures(1, @atlas.id )
	glBindTexture(_GL_TEXTURE_2D, atlas.id)
	glTexParameteri(_GL_TEXTURE_2D, _GL_TEXTURE_WRAP_S, _GL_CLAMP_TO_EDGE );
	glTexParameteri(_GL_TEXTURE_2D, _GL_TEXTURE_WRAP_T, _GL_CLAMP_TO_EDGE );
	glTexParameteri(_GL_TEXTURE_2D, _GL_TEXTURE_MAG_FILTER, _GL_LINEAR );
	glTexParameteri(_GL_TEXTURE_2D, _GL_TEXTURE_MIN_FILTER, _GL_LINEAR );

    glTexImage2D(_GL_TEXTURE_2D, 0, _GL_RED, atlas.width comme z32, atlas.height comme z32,
				  0, _GL_RED, _GL_UNSIGNED_BYTE, atlas.data )

	{
		glUseProgram(rendeuse.programme)
        glBindVertexArray(rendeuse.id_tableau_vertex)

        loc := glGetUniformLocation(rendeuse.programme, "atlas".pointeur)
	    glUniform1ui(loc, 0);

		glDrawElements(OGL.TRIANGLES, indices.taille comme z32, _GL_UNSIGNED_INT, nul);

        glBindVertexArray(0)
        glUseProgram(0)
	}

	glDeleteTextures(1, @atlas.id)
}
