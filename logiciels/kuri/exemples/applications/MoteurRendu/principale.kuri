importe Couleur
importe Compilatrice
importe Fondation
importe GlibC
importe Image
importe Math
importe OpenGL
importe SDL2

#exécute compile_pour_production()

charge "application"
charge "caméra_3d"
charge "dessin_texte"
charge "dessin_texture"
charge "maillage"
charge "programme"
charge "ratissage"
charge "triangle"

// ratissage basé sur le tutorial :
// https://www.youtube.com/watch?v=HXSuNxpCzdM : 43.33

// recherche sur ZBrush
// https://stackoverflow.com/questions/10414512/low-level-graphics-programming-and-zbrush

// ----------------------------------------------------------------------------

principale :: fonc () -> z32
{
	diffère {
	    imprime("Fin du programme, mémoire utilisée : %o\n", mémoire_utilisée())
	}

   _ := SDL_Init(DrapeauxInit.SDL_INIT_EVERYTHING);
    diffère { SDL_Quit(); }

    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, 1);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 4);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 0);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_STENCIL_SIZE, 8);

    largeur : z32 = 640
    hauteur : z32 = 480

    titre := "Moteur Rendu"

    window := SDL_CreateWindow(titre.pointeur, 100, 100, largeur, hauteur, SDL_WindowFlags.SDL_WINDOW_OPENGL);

    context := SDL_GL_CreateContext(window);
    diffère { SDL_GL_DeleteContext(context); }

    si !initialise_opengl() {
        imprime("Erreur lors de l'initilisation de GLEW !\n")
        retourne 1
    }

    // initialise l'application
    app : Application
    app.hauteur = hauteur
    app.largeur = largeur

    initalise_application(*app)
    diffère { détruit_application(*app); }

    windowEvent : SDL_Event;

    theta := 0.0

    temps_écoulé := 1.0

    boucle {
        début := compte_ticks_ms()

        marque := obtiens_marque_stockage_temporaire()
        diffère { set_marque_stockage_temporaire(marque); }

        si SDL_WaitEvent(*windowEvent) != 0 {
            si windowEvent.type == SDL_EventType.SDL_QUIT {
                arrête
            }

            si windowEvent.type == SDL_EventType.SDL_KEYDOWN {
                /*
                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_UP {
                    app.éditrices[0].caméra.position.y += 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_DOWN {
                    app.éditrices[0].caméra.position.y -= 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_LEFT {
                    app.éditrices[0].caméra.position.x += 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_RIGHT {
                    app.éditrices[0].caméra.position.x -= 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_A {
                    app.éditrices[0].caméra.yaw -= 2.0 * 0.016
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_D {
                    app.éditrices[0].caméra.yaw += 2.0 * 0.016
                }

                temp_dir_avant := multiplie(app.éditrices[0].caméra.direction_vue, 0.8 * temps_écoulé)

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_W {
                    app.éditrices[0].caméra.position = ajoute(app.éditrices[0].caméra.position, temp_dir_avant)
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_S {
                    app.éditrices[0].caméra.position = soustrait(app.éditrices[0].caméra.position, temp_dir_avant)
                }
                */
            }
        }

        //imprime("%\n\n", app)
        //imprime("Mémoire utilisée : %o\n\n", FormatEntier(valeur = mémoire_utilisée(), séparation=3))

        // dessine fenêtre

        glClear(0x00004000)

        //glClearColor(0.5, 0.5, 1.0, 1.0)

        pour éditrice dans app.éditrices {
            dessine(*app, éditrice)
        }

        rendeuse_texte := crée_rendeuse_texte(app.largeur, app.hauteur)

	    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	    glEnable(GL_BLEND);

        dessine_texte(rendeuse_texte, "test de dessin de texte")
        dessine_texte(rendeuse_texte, "test de dessin de texte, ligne 2")

	    glDisable(GL_BLEND);

        détruit_rendeuse_texte(rendeuse_texte)

        SDL_GL_SwapWindow(window);

        theta += 1.0 * 0.016 //temps_écoulé

        delta := compte_ticks_ms() - début
        fps := 1000.0 / delta comme r32

        nouveau_titre := imprime_chaine("Moteur Rendu - % FPS", FormatRéel(valeur = fps, précision = 2))

        chn_c := crée_chaine_c_temp(nouveau_titre)

        SDL_SetWindowTitle(window, chn_c comme *z8)

        déloge(nouveau_titre)
    }

    retourne 0
}
