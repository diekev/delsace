importe Couleur
importe Fondation
importe Image
importe OpenGL
importe Math
importe SDL2

charge "caméra_3d"
charge "dessin_texte"
charge "dessin_texture"
charge "maillage"
charge "programme"
charge "ratissage"
charge "triangle"

// ratissage basé sur le tutorial :
// https://www.youtube.com/watch?v=HXSuNxpCzdM : 43.33

// recherche sur ZBrush
// https://stackoverflow.com/questions/10414512/low-level-graphics-programming-and-zbrush

// ----------------------------------------------------------------------------

TypeÉditrice :: énum z32 {
    INVALIDE
    VUE_3D
}

Éditrice :: struct {
    // position absolue en pixel
    x := 0
    y := 0
    largeur := 0
    hauteur := 0

    // position relative dans la fenêtre
    x_r := 0.0
    y_r := 0.0
    largeur_r := 0.0
    hauteur_r := 0.0

    type := TypeÉditrice.INVALIDE
}

ÉditriceVue3D :: struct {
    empl base: Éditrice

    caméra : *Caméra3D
    tampon_texture : *TamponTexture
    image : Image
    matcap : *Image
}

détruit_éditrice_vue_3d :: fonc (éditrice: *ÉditriceVue3D) -> rien
{
    détruit_tampon_texture(éditrice.tampon_texture)
    détruit_image(*éditrice.image)
    détruit_image(éditrice.matcap)
    déloge(éditrice.matcap)
    déloge(éditrice.caméra)
    déloge(éditrice)
}

détruit_éditrice :: fonc (éditrice: *Éditrice) -> rien
{
    si éditrice.type == TypeÉditrice.VUE_3D {
        éditrice_vue_3d := éditrice comme *ÉditriceVue3D
        détruit_éditrice_vue_3d(éditrice_vue_3d)
    }
    sinon {
        déloge(éditrice)
    }
}

Application :: struct {
    hauteur : z32 = 0
    largeur : z32 = 0

    maillage : *Maillage

    éditrices : []*Éditrice
}

ajoute_éditrice :: fonc (app: *Application) -> rien
{
    éditrice := crée_éditrice_vue_3d(app)

    tableau_ajoute(*app.éditrices, éditrice)
}

crée_éditrice_vue_3d :: fonc (app: *Application) -> *Éditrice
{
    éditrice := loge(ÉditriceVue3D)
    éditrice.x = 0
    éditrice.y = 0
    éditrice.largeur = app.largeur
    éditrice.hauteur = app.hauteur

    éditrice.x_r = 0.0
    éditrice.y_r = 0.0
    éditrice.largeur_r = 1.0
    éditrice.hauteur_r = 1.0

    éditrice.type = TypeÉditrice.VUE_3D

    éditrice.image = crée_image(éditrice.largeur, éditrice.hauteur)

    éditrice.matcap = charge_image_png("/home/kevin/Images/matcap.png")

    éditrice.tampon_texture = crée_tampon_texture()

    caméra := loge(Caméra3D)
    caméra.champs_de_vue = calcul_champs_de_vue_degrés(70.0, 35.0)
    caméra.position = crée_vec3r()
    caméra.direction_vue = crée_vec3r(z = 1.0)
    caméra.yaw = 0.0
    caméra.projection = matrice_projection(
        caméra.champs_de_vue,
        éditrice.largeur comme r32,
        éditrice.hauteur comme r32,
        caméra.plan_proche,
        caméra.plan_éloigné)

    éditrice.caméra = caméra

    retourne éditrice
}

dessine_vue_3d :: fonc (app: *Application, éditrice: *ÉditriceVue3D) -> rien
{
    remplis_image(*éditrice.image, Couleur( r = 0.0, v = 0.0, b = 0.0, a = 1.0 ))

    //ratisse_maillage(@éditrice.caméra, app.maillage, @éditrice.image, éditrice.matcap, theta)
    trace_maillage(éditrice.caméra, app.maillage, *éditrice.image, éditrice.matcap)

    génère_texture(éditrice.tampon_texture, éditrice.image.tampon, éditrice.largeur, éditrice.hauteur)

    dessine_tampon_texture(éditrice.tampon_texture)
}

dessine :: fonc (app: *Application, éditrice: *Éditrice) -> rien
{
    si éditrice.type == TypeÉditrice.VUE_3D {
        éditrice_vue_3d := éditrice comme *ÉditriceVue3D
        dessine_vue_3d(app, éditrice_vue_3d)
    }
    sinon {
    }
}

initalise_application :: fonc (app: *Application) -> rien
{
    maillage := charge_maillage_depuis_obj("/home/kevin/fichiers/objs/suzanne.obj")
    //maillage := crée_maillage_cube()
    app.maillage = maillage

    ajoute_éditrice(app)
}

détruit_application :: fonc (app: *Application) -> rien
{
    pour éditrice dans app.éditrices {
        détruit_éditrice(éditrice)
    }

    déloge(app.éditrices)
    détruit_maillage(app.maillage)
}

// ----------------------------------------------------------------------------

ratisse_maillage :: fonc (
    caméra : *Caméra3D,
    maillage: *Maillage,
    image: *Image,
    matcap: *Image,
    theta: r32) -> rien
{
    marque := obtiens_marque_stockage_temporaire()
    diffère { set_marque_stockage_temporaire(marque) }

    ticks := compte_ticks_ms()

/*
    diffère {
        temps_rendu := compte_ticks_ms() - ticks
        temps_rendu_us := temps_rendu * 1000
        temps_par_pixel := temps_rendu_us / (image.largeur * image.hauteur)
        temps_par_polygone := temps_rendu_us / (maillage.tris.taille)

        imprime(
            "Temps de rendu : %ms (par pixel %us, par polygone %us)\n",
            FormatEntier(valeur = temps_rendu, séparation = 3),
            FormatEntier(valeur = temps_par_pixel, séparation = 3),
            FormatEntier(valeur = temps_par_polygone, séparation = 3))
    }
*/

    contexte_temp := contexte
    contexte_temp.allocatrice = __stockage_temporaire

    mat_trans := matrice_translation(z = 8.0)
    mat_rot_x := matrice_rotation_x(theta * 0.5)
    mat_rot_z := matrice_rotation_z(theta)
    mat_rot := multiplie(mat_trans, mat_rot_z)
    mat_obj := mat_trans // multiplie(mat_rot, mat_rot_x)

    dir_haut := crée_vec3r(y = 1.0)
    dir_cible := crée_vec3r(z = 1.0)
    mat_rot_cam := matrice_rotation_y(caméra.yaw)
    caméra.direction_vue = transforme(mat_rot_cam, dir_cible)
    dir_cible = ajoute(caméra.position, caméra.direction_vue)

    //imprime("cible : %\n", dir_cible)
    matrice_caméra := matrice_de_visé(*caméra.position, *dir_cible, *dir_haut)
    matrice_vue := inverse(*matrice_caméra)

    // élimine les triangles invisibles
    triangles_visible : []Triangle

    pour tri dans maillage.tris {
        tri_transformé := transforme(mat_obj, tri)

        line1 := soustrait(tri_transformé.p1, tri_transformé.p0)
        line2 := soustrait(tri_transformé.p2, tri_transformé.p0)

        nor := calcul_normal(line1, line2)

        // exclus le triangle s'il n'est pas visible
        si nor.z >= 0.0 {
            continue
        }

        dir_caméra := soustrait(tri_transformé.p0, caméra.position)

        cos_angle := produit_scalaire(vec_depuis_nor(nor), dir_caméra)

        si cos_angle >= 0.0 {
            continue
        }

        pousse_contexte contexte_temp {
            tableau_ajoute(*triangles_visible, tri_transformé)
        }
    }

    // tri des triangles pour les ordonner selon la distance à la caméra
    tri_sélection(triangles_visible)

    caméra_vers_rateau := construit_identité_mat4r()
    //caméra_vers_rateau = multiplie(caméra_vers_rateau, matrice_échelle(0.5, 0.5, 0.0))
    //caméra_vers_rateau = multiplie(caméra_vers_rateau, matrice_translation(1.0, 1.0, 0.0))

    caméra_vers_rateau.m[0][0] = 0.5
    caméra_vers_rateau.m[1][1] = 0.5
    caméra_vers_rateau.m[3][0] = 0.5
    caméra_vers_rateau.m[3][1] = 0.5

    pour tri dans triangles_visible {
        line1 := soustrait(tri.p1, tri.p0)
        line2 := soustrait(tri.p2, tri.p0)

        nor := calcul_normal_normalisé(line1, line2)

        dir_lumière := crée_vec3r(z = -1.0)
        // besoin de normalisation ?

        //dp := produit_scalaire(vec_depuis_nor(nor), dir_lumière)

        //couleur := Couleur{ r = dp, v = dp, b = dp, a = 1.0 }

        vnor := vec_depuis_nor(nor)

        uv := calcul_uv_capmat(*caméra.direction_vue, *vnor, faux)

        couleur := échantillonne_prochain(matcap, *uv)

        tri_vue := transforme(matrice_vue, tri)

        tri_projeté := transforme(caméra.projection, tri_vue)

        // puisque le résultat est entre -1.0 et 1.0 nous devons le transformer pous qu'il soit dans les coordonnées de l'image
        tri_projeté = transforme(caméra_vers_rateau, tri_projeté)

        ratisse_triangle(
            image,
            tri_projeté.p0.x,
            tri_projeté.p0.y,
            tri_projeté.p1.x,
            tri_projeté.p1.y
            tri_projeté.p2.x,
            tri_projeté.p2.y,
            couleur);
    }
}

// ----------------------------------------------------------------------------

Rayon :: struct {
    origine : Vec3r
    direction : Vec3r
    direction_inverse : Vec3r
}

// http://docs.pixologic.com/getting-started/basic-concepts/the-pixol/
Pixol :: struct {
    // position sur le cannevas
    x : z32
    y : z32

    // couleur
    r : r32
    v : r32
    b : r32

    // profondeur
    p : r32

    // orientation ? quaternion ? normal ?
    o : Vec3r

    // matériau
    m : z32
}

entresecte_triangle :: fonc (
		vertex0: Vec3r,
		vertex1: Vec3r,
		vertex2: Vec3r,
		rayon: *Rayon,
		distance: *r32,
		r_u : *r32,
		r_v : *r32) -> bool
{
	epsilon := 0.000001

	cote1 := soustrait(vertex1, vertex0)
	cote2 := soustrait(vertex2, vertex0)
	h := produit_vectoriel(*rayon.direction, *cote2)
	angle := produit_scalaire(cote1, h)

	si (angle > -epsilon && angle < epsilon) {
		retourne faux
	}

	f := 1.0 / angle
	s := soustrait(rayon.origine, vertex0)
	angle_u := f * produit_scalaire(s, h)

	si (angle_u < 0.0 || angle_u > 1.0) {
		retourne faux
	}

	q := produit_vectoriel(*s, *cote1);
	angle_v := f * produit_scalaire(rayon.direction, q)

	si (angle_v < 0.0 || angle_u + angle_v > 1.0) {
		retourne faux
	}

	// À cette étape on peut calculer t pour trouver le point d'entresection sur
	// la ligne.
	t := f * produit_scalaire(cote2, q)

	// Entresection avec le rayon.
	si (t > epsilon) {
		mémoire(distance) = t

		si r_u != nul {
			mémoire(r_u) = angle_u
		}

		si r_v != nul {
			mémoire(r_v) = angle_v
		}

		retourne vrai
	}

	// Cela veut dire qu'il y a une entresection avec une ligne, mais pas avec
	// le rayon.
	retourne faux
}

entresection_rapide_min_max :: fonc (
		r: *Rayon,
		min_boite: *Vec3r,
		max_boite: *Vec3r) -> r32
{
	//si est_supérieur_ou_égal(r.origine, mémoire(min_boite)) && est_inférieur_ou_égal(r.origine, mémoire(max_boite)) {
	//	retourne 0.0
	//}

	t1 := (min_boite.x - r.origine.x) * r.direction_inverse.x;
	t2 := (max_boite.x - r.origine.x) * r.direction_inverse.x;

	tmin := min(t1, t2);
	tmax := max(t1, t2);

    t1 = (min_boite.x - r.origine.x) * r.direction_inverse.x;
    t2 = (max_boite.x - r.origine.x) * r.direction_inverse.x;

    tmin = max(tmin, min(t1, t2));
    tmax = min(tmax, max(t1, t2));

    t1 = (min_boite.y - r.origine.y) * r.direction_inverse.y;
    t2 = (max_boite.y - r.origine.y) * r.direction_inverse.y;

    tmin = max(tmin, min(t1, t2));
    tmax = min(tmax, max(t1, t2));

    t1 = (min_boite.z - r.origine.z) * r.direction_inverse.z;
    t2 = (max_boite.z - r.origine.z) * r.direction_inverse.z;

    tmin = max(tmin, min(t1, t2));
    tmax = min(tmax, max(t1, t2));

	/* pour retourner une valeur booléenne : return tmax > max(tmin, 0.0); */

	si (tmax < 0.0 || tmin > tmax) {
		retourne -1.0;
	}

	retourne tmin;
}

min_max :: fonc (v: *Vec3r, min_boite: *Vec3r, max_boite: *Vec3r) -> rien
{
    si v.x < min_boite.x {
        min_boite.x = v.x
    }
    sinon si v.x > max_boite.x {
        max_boite.x = v.x
    }

    si v.y < min_boite.y {
        min_boite.y = v.y
    }
    sinon si v.y > max_boite.y {
        max_boite.y = v.y
    }

    si v.z < min_boite.z {
        min_boite.z = v.z
    }
    sinon si v.z > max_boite.z {
        max_boite.z = v.z
    }
}

// pas de rebond, pas d'anti-aliasing, simplement un traçage direct, pour avoir
// un rendu plus rapide du résultat, le matériau est une capmat
trace_maillage :: fonc (
    caméra : *Caméra3D,
    maillage : *Maillage,
    image: *Image,
    matcap: *Image) -> rien
{
    ticks := compte_ticks_ms()

    diffère {
        temps_rendu := compte_ticks_ms() - ticks
        temps_rendu_us := temps_rendu * 1000
        temps_par_pixel := temps_rendu_us / (image.largeur * image.hauteur)
        temps_par_polygone := temps_rendu_us / (maillage.tris.taille)

        imprime(
            "Temps de rendu : %ms (par pixel %us, par polygone %us)\n",
            FormatEntier(valeur = temps_rendu, séparation = 3),
            FormatEntier(valeur = temps_par_pixel, séparation = 3),
            FormatEntier(valeur = temps_par_polygone, séparation = 3))
    }

    theta := 1.0

    mat_trans := matrice_translation(z = 8.0)
    mat_rot_x := matrice_rotation_x(theta * 0.5)
    mat_rot_z := matrice_rotation_z(theta)
    mat_rot := multiplie(mat_rot_x, mat_rot_z)
    mat_obj := mat_trans // multiplie(mat_rot, mat_trans)

    triangles_visible : []Triangle
    diffère { déloge(triangles_visible); }

    min_boite := crée_vec3r(x =  100000000.0, y =  100000000.0, z =  100000000.0)
    max_boite := crée_vec3r(x = -100000000.0, y = -100000000.0, z = -100000000.0)

    pour tri dans maillage.tris {
        tri_transformé := transforme(mat_obj, tri)
        tableau_ajoute(*triangles_visible, tri_transformé)

        min_max(*tri_transformé.p0, *min_boite, *max_boite)
        min_max(*tri_transformé.p1, *min_boite, *max_boite)
        min_max(*tri_transformé.p2, *min_boite, *max_boite)
    }

    dir_haut := crée_vec3r(y = 1.0)
    dir_cible := crée_vec3r(z = 1.0)
    mat_rot_cam := matrice_rotation_y(caméra.yaw)
    caméra.direction_vue = transforme(mat_rot_cam, dir_cible)
    dir_cible = ajoute(caméra.position, caméra.direction_vue)

    caméra.monde_vers_caméra = matrice_de_visé(*caméra.position, *dir_cible, *dir_haut)
    caméra.monde_vers_caméra = inverse_matrice_sans_échelle(*caméra.monde_vers_caméra)

    caméra_vers_monde := matrice_de_visé(*caméra.position, *dir_cible, *dir_haut)

    caméra.hauteur = image.hauteur
    caméra.largeur = image.largeur

    largeur_inverse := 1.0 / image.largeur comme r32
    hauteur_inverse := 1.0 / image.hauteur comme r32

    aspect := image.largeur comme r32 / image.hauteur comme r32
    échelle := tan(calcul_champs_de_vue(70.0, 35.0) * 0.5) comme r32

    pour j dans 0 ... image.hauteur - 1 {
        pour i dans 0 ... image.largeur - 1 {
            /*
            x := (transtype(i: r32) * largeur_inverse)
            y := (transtype(image.hauteur - j: r32) * hauteur_inverse)

            pos_pixel := Vec2r{ x = x, y = y }

            direction := direction_via_pixel(caméra, @pos_pixel)
            */

            x := (2.0 * (i comme r32 + 0.5) * largeur_inverse - 1.0) * aspect * échelle
            y := (1.0 - 2.0 * (j comme r32 + 0.5) * hauteur_inverse) * échelle

            pos := crée_vec3r(x, y, -1.0)

            direction := transforme(caméra_vers_monde, pos)

            rayon : Rayon
            rayon.origine = caméra.position
            rayon.direction = direction // normalise(@direction)
            rayon.direction_inverse.x = 1.0 / direction.x
            rayon.direction_inverse.y = 1.0 / direction.y
            rayon.direction_inverse.z = 1.0 / direction.z

            d := entresection_rapide_min_max(*rayon, *min_boite, *max_boite)

            si d < -0.5 {
                continue
            }

            distance_min := 1000.0
            idx_triangle := -1

            pour tri, idx dans triangles_visible {
                distance := 0.0
                touché := entresecte_triangle(tri.p0, tri.p1, tri.p2, *rayon, *distance, nul, nul)

                si distance < distance_min {
                    distance_min = distance
                }

                si touché {
                    idx_triangle = idx comme z32
                }
            }

            si idx_triangle != -1 {
                tri := triangles_visible[idx_triangle]

                line1 := soustrait(tri.p1, tri.p0)
                line2 := soustrait(tri.p2, tri.p0)

                nor := calcul_normal_normalisé(line1, line2)
                vnor := vec_depuis_nor(nor)

                uv := calcul_uv_capmat(*caméra.direction_vue, *vnor, faux)

                couleur := échantillonne_prochain(matcap, *uv)
                image.tampon[j * image.largeur + i] = couleur
            }
        }
    }
}

// ----------------------------------------------------------------------------

principale2 :: fonc () -> z32
{
	diffère {
	    imprime("Fin du programme, mémoire utilisée : %o\n", mémoire_utilisée())
	}

   _ := SDL_Init(DrapeauxInit.SDL_INIT_EVERYTHING);
    diffère { SDL_Quit(); }

    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, 1);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 4);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 0);
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_STENCIL_SIZE, 8);

    largeur : z32 = 640
    hauteur : z32 = 480

    titre := "Moteur Rendu"

    window := SDL_CreateWindow(titre.pointeur, 100, 100, largeur, hauteur, SDL_WindowFlags.SDL_WINDOW_OPENGL);

    context := SDL_GL_CreateContext(window);
    diffère { SDL_GL_DeleteContext(context); }

    si !initialise_opengl() {
        imprime("Erreur lors de l'initilisation de GLEW !\n")
        retourne 1
    }

    // initialise l'application
    app : Application
    app.hauteur = hauteur
    app.largeur = largeur

    initalise_application(*app)
    diffère { détruit_application(*app); }

    windowEvent : SDL_Event;

    theta := 0.0

    temps_écoulé := 1.0

    boucle {
        début := compte_ticks_ms()

        marque := obtiens_marque_stockage_temporaire()
        diffère { set_marque_stockage_temporaire(marque); }

        si SDL_WaitEvent(*windowEvent) != 0 {
            si windowEvent.type == SDL_EventType.SDL_QUIT {
                arrête
            }

            si windowEvent.type == SDL_EventType.SDL_KEYDOWN {
                /*
                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_UP {
                    app.éditrices[0].caméra.position.y += 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_DOWN {
                    app.éditrices[0].caméra.position.y -= 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_LEFT {
                    app.éditrices[0].caméra.position.x += 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_RIGHT {
                    app.éditrices[0].caméra.position.x -= 0.8 * temps_écoulé
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_A {
                    app.éditrices[0].caméra.yaw -= 2.0 * 0.016
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_D {
                    app.éditrices[0].caméra.yaw += 2.0 * 0.016
                }

                temp_dir_avant := multiplie(app.éditrices[0].caméra.direction_vue, 0.8 * temps_écoulé)

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_W {
                    app.éditrices[0].caméra.position = ajoute(app.éditrices[0].caméra.position, temp_dir_avant)
                }

                si windowEvent.key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_S {
                    app.éditrices[0].caméra.position = soustrait(app.éditrices[0].caméra.position, temp_dir_avant)
                }
                */
            }
        }

        //imprime("%\n\n", app)
        //imprime("Mémoire utilisée : %o\n\n", FormatEntier(valeur = mémoire_utilisée(), séparation=3))

        // dessine fenêtre

        glClear(0x00004000)

        //glClearColor(0.5, 0.5, 1.0, 1.0)

        pour éditrice dans app.éditrices {
            dessine(*app, éditrice)
        }

        rendeuse_texte := crée_rendeuse_texte(app.largeur, app.hauteur)

	    glBlendFunc(_GL_SRC_ALPHA, _GL_ONE_MINUS_SRC_ALPHA);
	    glEnable(_GL_BLEND);

        dessine_texte(rendeuse_texte, "test de dessin de texte")
        dessine_texte(rendeuse_texte, "test de dessin de texte, ligne 2")

	    glDisable(_GL_BLEND);

        détruit_rendeuse_texte(rendeuse_texte)

        SDL_GL_SwapWindow(window);

        theta += 1.0 * 0.016 //temps_écoulé

        delta := compte_ticks_ms() - début
        fps := 1000.0 / delta comme r32

        nouveau_titre := imprime_chaine("Moteur Rendu - % FPS", FormatRéel(valeur = fps, précision = 2))

        chn_c := chaine_c_temp(nouveau_titre)

        SDL_SetWindowTitle(window, chn_c)

        déloge(nouveau_titre)
    }

    retourne 0
}

// ----------------------------------------------------------------------------

Jeu :: struct {
    est_en_exécution := faux
    fenêtre : *SDL_Window = nul
    contexte : *rien = nul
}

initialise_jeu :: fonc (
    jeu: *Jeu,
    titre: chaine,
    pos_x: z32,
    pos_y: z32,
    hauteur: z32,
    largeur: z32,
    plein_écran: bool) -> bool
{
    si SDL_Init(DrapeauxInit.SDL_INIT_EVERYTHING) != 0 {
        imprime("Impossible d'intialiser SDL !\n")
        retourne faux
    }

    _ := SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, 1)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 4)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 0)
    _ = SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_STENCIL_SIZE, 8)

    drapeaux := SDL_WindowFlags.SDL_WINDOW_OPENGL

    si plein_écran {
        drapeaux |= SDL_WindowFlags.SDL_WINDOW_FULLSCREEN
    }

    jeu.fenêtre = SDL_CreateWindow(titre.pointeur, pos_x, pos_y, largeur, hauteur, drapeaux)

    si jeu.fenêtre == nul {
        imprime("Impossible de créer la fenêtre !\n")
        retourne faux
    }

    jeu.contexte = SDL_GL_CreateContext(jeu.fenêtre)

    si jeu.contexte == nul {
        imprime("Impossible de créer le contexte OpenGL !\n")
        retourne faux
    }

    si !initialise_opengl() {
        imprime("Erreur lors de l'initilisation de GLEW !\n")
        retourne faux
    }

    jeu.est_en_exécution = vrai

    retourne vrai
}

détruit_jeu :: fonc (jeu: *Jeu) -> rien
{
    si jeu.contexte != nul {
        SDL_GL_DeleteContext(jeu.contexte)
    }

    si jeu.fenêtre != nul {
        SDL_DestroyWindow(jeu.fenêtre)
    }

    SDL_Quit()
}

gère_évènement :: fonc (jeu: *Jeu) -> rien
{
    évènement : SDL_Event;

    tantque SDL_PollEvent(*évènement) != 0 {
        si évènement.type == SDL_EventType.SDL_QUIT {
            jeu.est_en_exécution = faux
        }
    }
}

ajourne_objets :: fonc (jeu: *Jeu) -> rien
{
}

rends_scène :: fonc (jeu: *Jeu) -> rien
{
    glClear(0x00004000)

    //glClearColor(0.5, 0.5, 1.0, 1.0)

    rendeuse_texte := crée_rendeuse_texte(640, 480)

    glBlendFunc(_GL_SRC_ALPHA, _GL_ONE_MINUS_SRC_ALPHA);
    glEnable(_GL_BLEND);

    dessine_texte(rendeuse_texte, "test de dessin de texte")
    dessine_texte(rendeuse_texte, "test de dessin de texte, ligne 2")

    glDisable(_GL_BLEND);

    détruit_rendeuse_texte(rendeuse_texte)

    SDL_GL_SwapWindow(jeu.fenêtre)
}

principale :: fonc () -> z32
{
    ips : n32 = 30
    débit_image_min : n32 = 1000 / ips

    jeu : Jeu
    diffère { détruit_jeu(*jeu) }

    si !initialise_jeu(*jeu, "Jeu", 100, 100, 480, 640, faux) {
        retourne 1
    }

    tantque jeu.est_en_exécution {
        temps_image := SDL_GetTicks()

        gère_évènement(*jeu)
        ajourne_objets(*jeu)
        rends_scène(*jeu)

        si (SDL_GetTicks() - temps_image) < débit_image_min {
            durée := débit_image_min - (SDL_GetTicks() - temps_image)
            SDL_Delay(durée)
        }
    }

    retourne 0
}
