// Logique de ratissage de triangles et de lignes sur une image.
// Tiré de :
// // http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html

importe Couleur
importe Image
importe Math

// ceci utilise l'algorithme de Bresenham, on pourrait essayer celui de Wu :
// https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm
dessine_ligne :: fonc(
    image: *Image.Image,
    x1 : z32,
    y1 : z32,
    x2 : z32,
    y2 : z32,
    couleur : Couleur.Couleur) -> rien
{
    dx := (x2 - x1) comme r32;
    dy := (y2 - y1) comme r32;
    pas : r32;

    si abs(dx) >= abs(dy) {
        pas = abs(dx);
    }
    sinon {
        pas = abs(dy);
    }

    dx /= pas;
    dy /= pas;
    x := x1 comme r32;
    y := y1 comme r32;
    i : r32 = 1.0;

    tantque i <= pas {
        xi := x comme z32;
        yi := y comme z32;
        index := xi + yi * image.largeur;
        image.tampon[index] = couleur;

        x += dx;
        y += dy;
        i += 1.0;
    }
}

dessine_triangle :: fonc(
    image: *Image.Image,
    x1 : r32,
    y1 : r32,
    x2 : r32,
    y2 : r32,
    x3 : r32,
    y3 : r32,
    couleur : Couleur.Couleur) -> rien
{
    ld := (image.largeur - 1) comme r32;
    hd := (image.hauteur - 1) comme r32;

    x1i := (ld * x1) comme z32;
    x2i := (ld * x2) comme z32;
    x3i := (ld * x3) comme z32;

    y1i := (hd * y1) comme z32;
    y2i := (hd * y2) comme z32;
    y3i := (hd * y3) comme z32;

    dessine_ligne(image, x1i, y1i, x2i, y2i, couleur);
    dessine_ligne(image, x2i, y2i, x3i, y3i, couleur);
    dessine_ligne(image, x3i, y3i, x1i, y1i, couleur);
}

// Remplis un triangle qui pointe vers le haut avec une base horizontale :
//      /\
//     /  \
//     ----
remplis_triangle_bas_plat :: fonc(
    image: *Image.Image,
    v1 : Vec2r,
    v2 : Vec2r,
    v3 : Vec2r,
    couleur : Couleur.Couleur) -> rien
{
    ld := (image.largeur - 1) comme r32;
    hd := (image.hauteur - 1) comme r32;

    taille_pixel := 1.0 / min(ld, hd);

    cd1_inv := (v2.x - v1.x) / (v2.y - v1.y) * taille_pixel;
    cd2_inv := (v3.x - v1.x) / (v3.y - v1.y) * taille_pixel;

    cur_x1 := v1.x;
    cur_x2 := v1.x;

    y1 := (v1.y * hd) comme z32;
    y2 := (v2.y * hd) comme z32;

    restreint(*y1, 0, image.hauteur - 1);
    restreint(*y2, 0, image.hauteur - 1);

    scanlineY := y1;

    tantque scanlineY <= y2 {
        x1i := (cur_x1 * ld) comme z32;
        x2i := (cur_x2 * ld) comme z32;

        restreint(*x1i, 0, image.largeur - 1);
        restreint(*x2i, 0, image.largeur - 1);

        dessine_ligne(image, x1i, scanlineY, x2i, scanlineY, couleur);

        cur_x1 += cd1_inv;
        cur_x2 += cd2_inv;

        scanlineY += 1;
    }
}

// Remplis un triangle qui pointe vers le bas avec une base horizontale :
//     ----
//     \  /
//      \/
remplis_triangle_haut_plat :: fonc(
    image: *Image.Image,
    v1 : Vec2r,
    v2 : Vec2r,
    v3 : Vec2r,
    couleur : Couleur.Couleur) -> rien
{
    ld := (image.largeur - 1) comme r32;
    hd := (image.hauteur - 1) comme r32;

    taille_pixel := 1.0 / min(ld, hd);

    cd1_inv := (v3.x - v1.x) / (v3.y - v1.y) * taille_pixel;
    cd2_inv := (v3.x - v2.x) / (v3.y - v2.y) * taille_pixel;

    cur_x1 := v3.x;
    cur_x2 := v3.x;

    y1 := (v1.y * hd) comme z32;
    y3 := (v3.y * hd) comme z32;

    restreint(*y1, 0, image.hauteur - 1);
    restreint(*y3, 0, image.hauteur - 1);

    scanlineY := y3;

    tantque scanlineY > y1 {
        x1i := (cur_x1 * ld) comme z32;
        x2i := (cur_x2 * ld) comme z32;

        restreint(*x1i, 0, image.largeur - 1);
        restreint(*x2i, 0, image.largeur - 1);

        dessine_ligne(image, x1i, scanlineY, x2i, scanlineY, couleur);

        cur_x1 -= cd1_inv;
        cur_x2 -= cd2_inv;
        scanlineY -= 1;
    }
}

échange :: fonc(v1 : &Vec2r, v2 : &Vec2r) -> rien
{
    échange(*v1.x, *v2.x);
    échange(*v1.y, *v2.y);
}

// Pour dessiner par ratissage un triangle quelconque, nous le divisons au besoin
// en deux triangles avec bases horizontales dont un pointe vers le haut et
// l'autre le bas :
//
//   /|
//  / |
// /__|
// \  |
//  \ |
//   \|
//
ratisse_triangle :: fonc(
    image: *Image.Image,
    x1 : r32,
    y1 : r32,
    x2 : r32,
    y2 : r32,
    x3 : r32,
    y3 : r32,
    couleur : Couleur.Couleur) -> rien
{
    v1 := Vec2r( x = x1, y = y1 );
    v2 := Vec2r( x = x2, y = y2 );
    v3 := Vec2r( x = x3, y = y3 );

    boucle {
        si (v1.y) <= (v2.y) <= (v3.y) {
            arrête;
        }

        si v2.y < v1.y {
            échange(v1, v2);
        }

        si v3.y < v2.y {
            échange(v2, v3);
        }
    }

    si v2.y == v3.y {
        remplis_triangle_bas_plat(image, v1, v2, v3, couleur);
    }
    sinon si v1.y == v2.y {
        remplis_triangle_haut_plat(image, v1, v2, v3, couleur);
    }
    sinon {
        x4 := v1.x + ((v2.y - v1.y) / (v3.y - v1.y)) * (v3.x - v1.x);
        y4 := v2.y;

        v4 := Vec2r( x = x4, y = y4 );

        remplis_triangle_bas_plat(image, v1, v2, v4, couleur);
        remplis_triangle_haut_plat(image, v2, v4, v3, couleur);
    }
}
