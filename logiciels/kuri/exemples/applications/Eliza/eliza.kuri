importe Fondation
importe GlibC

// https://fr.wikipedia.org/wiki/ELIZA

imprime_prompt_élise :: fonc (message: chaine) -> rien
{
    imprime("Éliza : %\n", message)
}

imprime_prompt_vous :: fonc () -> rien
{
    imprime("Vous  : ")
}

lis_entrée :: fonc () -> chaine
{
    nouveau_contexte := contexte
    nouveau_contexte.allocatrice = __stockage_temporaire

    chn : chaine

    pousse_contexte nouveau_contexte {
        c : z8

        tantque read(0, @c, 1) != 0 {
            si c == '\n' {
                arrête
            }

            pousse(@chn, c)
        }
    }

    retourne chn
}

mot_est_dans_la_famille :: fonc (mot: chaine) -> bool
{
    si mot == "frère" { retourne vrai }
    si mot == "père" { retourne vrai }
    si mot == "mère" { retourne vrai }
    si mot == "soeur" { retourne vrai }
    si mot == "fille" { retourne vrai }
    si mot == "fils" { retourne vrai }
    si mot == "cousin" { retourne vrai }
    si mot == "cousine" { retourne vrai }
    si mot == "tante" { retourne vrai }
    si mot == "oncle" { retourne vrai }
    si mot == "tata" { retourne vrai }
    si mot == "tonton" { retourne vrai }
    si mot == "papa" { retourne vrai }
    si mot == "maman" { retourne vrai }
    si mot == "parrain" { retourne vrai }
    si mot == "marraine" { retourne vrai }

    retourne faux
}

génère_réponse_pour_toujours :: fonc (mots: []chaine, idx: z64) -> chaine
{
    enchaineuse : Enchaineuse
	initialise_enchaineuse(@enchaineuse)
	diffère { détruit_tampons(@enchaineuse); }

    ajoute_au_tampon(@enchaineuse, "Pourquoi êtes-vous toujours ")

    pour i dans idx + 1 ... mots.taille - 1 {
        ajoute_au_tampon(@enchaineuse, mots[i])

        si i < mots.taille {
            ajoute_au_tampon(@enchaineuse, ' ')
        }
    }

    ajoute_au_tampon(@enchaineuse, "?")

    retourne chaine_depuis_enchaineuse(@enchaineuse)
}

génère_réponse_pour_peur :: fonc (mots: []chaine, idx: z64) -> chaine
{
    enchaineuse : Enchaineuse
	initialise_enchaineuse(@enchaineuse)
	diffère { détruit_tampons(@enchaineuse); }

    ajoute_au_tampon(@enchaineuse, "Pourquoi avez-vous peur ")

    pour i dans idx + 1 ... mots.taille - 1 {
        ajoute_au_tampon(@enchaineuse, mots[i])

        si i < mots.taille {
            ajoute_au_tampon(@enchaineuse, ' ')
        }
    }

    ajoute_au_tampon(@enchaineuse, "?")

    retourne chaine_depuis_enchaineuse(@enchaineuse)
}

génère_réponse_pour_message :: fonc (message: chaine) -> chaine
{
    nouveau_contexte := contexte
    nouveau_contexte.allocatrice = __stockage_temporaire

    mots : []chaine

    pousse_contexte nouveau_contexte {
        mots = divise(message, ' ')

        pour mot, idx dans mots {
            si mot_est_dans_la_famille(mot) {
                retourne "Parlez-moi de votre famille"
            }

            si mot == "toujours" {
                retourne génère_réponse_pour_toujours(mots, idx)
            }

            si mot == "peur" {
                retourne génère_réponse_pour_peur(mots, idx)
            }
        }
    }

    retourne "Veuillez élaborer"
}

principale :: fonc () -> z32
{
    imprime("Bienvenue chez \n")
    imprime("\tEEEEEE  LL      IIII  ZZZZZZZ    AAAAA \n")
    imprime("\tEE      LL       II       ZZ    AA   AA\n")
    imprime("\tEEEEEE  LL       II     ZZZ     AAAAAAA\n")
    imprime("\tEE      LL       II    ZZ       AA   AA\n")
    imprime("\tEEEEEE  LLLLLL  IIII  ZZZZZZZ   AA   AA\n")
    imprime("\n")
    imprime("Éliza est une psychothérapeute factice Rogérienne.\n")
    imprime("Le programme originel fut décrit par Joseph Weizenbaum en 1966.\n")
    imprime("\n")
    imprime("\n")

    marque := obtiens_marque_stockage_temporaire()

    message_éliza := "Quelque chose vous trouble ?"

    boucle {
        set_marque_stockage_temporaire(marque);
        marque = obtiens_marque_stockage_temporaire()

        imprime_prompt_élise(message_éliza)
        imprime_prompt_vous()

        message := lis_entrée()

        si message.taille == 0 {
            arrête
        }

        message_éliza = génère_réponse_pour_message(message)
    }

    retourne 0
}
