rout processInput()
{
	# travail les entrées depuis le dernier appel

	pour entrée dans entrées {

	}
}

rout ajourne(entités : &[]entités)
{
	pour entité dans entités {
		ajourne(entité)
	}
}

rout rend(entités : &[]entités)
{
	pour entité dans entités {
		rend(entité)
	}
}

MS_PAR_IMAGE := 16

rout lance_jeu()
{
	entités : []Entité

	dyn temps_précédent := temps_courant()
	dyn lag := 0

	boucle {
		temps_courant := temps_courant()
		temps_passé := temps_courant - temps_précédent
		temps_précédent := temps_courant
		lag += temps_passé

		processInput()

		tantque lag >= MS_PAR_IMAGE {
			ajourne(entités)
			lag -= MS_PAR_IMAGE
		}

		rend(entités)
	}
}

rout principale()
{
	lance_jeu()

	renv 0
}
