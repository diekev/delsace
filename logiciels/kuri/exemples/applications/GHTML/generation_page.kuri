importe Fondation
importe Tori

charge "assemblage_arbre"
charge "lexage"
charge "syntaxage"

// À FAIRE: ajout d'un message aux erreurs
ErreurGénérationPage :: énum : z32 {
    AUCUNE
    OBJET_NON_ITÉRABLE
    OBJET_NON_TROUVÉ
}

génère_page :: fonc(
    noeud: *NoeudSyntaxique,
    dyn gestionnaire: *GestionnaireObjet,
    dyn dico: *ObjetDictionnaire,
    enchaineuse: &Enchaineuse) -> ErreurGénérationPage
{
    discr noeud.type {
        BLOC {
            pour enfant dans noeud.enfants {
                erreur := génère_page(enfant, gestionnaire, dico, enchaineuse)

                si erreur != ErreurGénérationPage.AUCUNE {
                    retourne erreur
                }
            }
        }
        CHAINE_CARACTÈRE {
            enchaineuse.pousse(noeud.données.chn)
        }
        VARIABLE {
            variable := noeud.données.chn
            objet_variable := dico.trouve_objet(variable)

            si objet_variable == nul {
                retourne ErreurGénérationPage.OBJET_NON_TROUVÉ
            }

            discr objet_variable.id {
                NUL {
                    enchaineuse.pousse("nul")
                }
                CHAINE {
                    objet_chaine := transtype(objet_variable : *ObjetChaine)
                    enchaineuse.pousse(objet_chaine.valeur)
                }
                ENTIER {
                    objet_nombre := transtype(objet_variable : *ObjetEntier)
                    enchaineuse.pousse(objet_nombre.valeur)
                }
                RÉEL {
                    objet_nombre := transtype(objet_variable : *ObjetRéel)
                    enchaineuse.pousse(objet_nombre.valeur)
                }
                LISTE,
                DICTIONNAIRE {
                    enchaineuse.pousse("objet à ")
                    enchaineuse.pousse(objet_variable)
                }
            }
        }
        POUR {
            propriete := noeud.enfants[1].données.chn
            objet_iter := dico.trouve_objet(propriete)

            si objet_iter == nul {
                retourne ErreurGénérationPage.OBJET_NON_TROUVÉ
            }

            variable := noeud.enfants[0].données.chn

            discr objet_iter.id {
                NUL {
                    enchaineuse.pousse("Objet nul n'est pas itérable !")
                    retourne ErreurGénérationPage.OBJET_NON_ITÉRABLE
                }
                CHAINE {
                    enchaineuse.pousse("Objet chaine n'est pas itérable !")
                    retourne ErreurGénérationPage.OBJET_NON_ITÉRABLE
                }
                ENTIER {
                    enchaineuse.pousse("Objet nombre entier n'est pas itérable !")
                    retourne ErreurGénérationPage.OBJET_NON_ITÉRABLE
                }
                RÉEL {
                    enchaineuse.pousse("Objet nombre réel n'est pas itérable !")
                    retourne ErreurGénérationPage.OBJET_NON_ITÉRABLE
                }
                LISTE {
                    liste := transtype(objet_iter : *ObjetListe)

                    pour objet dans liste.valeur {
                        dico.insère(variable, objet)
                        erreur := génère_page(noeud.enfants[2], gestionnaire, dico, enchaineuse)

                        si erreur != ErreurGénérationPage.AUCUNE {
                            retourne erreur
                        }
                    }
                }
                DICTIONNAIRE {
                    dictionnaire := transtype(objet_iter : *ObjetDictionnaire)

                    pour nom, idx dans dictionnaire.noms {
                        dyn objet_nom := gestionnaire.crée_chaine()
                        objet_nom.valeur = nom

                        dico.insère(variable, transtype(objet_nom : *Objet))
                        erreur := génère_page(noeud.enfants[2], gestionnaire, dico, enchaineuse)

                        si erreur != ErreurGénérationPage.AUCUNE {
                            retourne erreur
                        }
                    }
                }
            }
        }
        SI {
            variable := noeud.enfants[0].données.chn
            objet_valeur := dico.trouve_objet(variable)

            si objet_valeur != nul {
                erreur := génère_page(noeud.enfants[1], gestionnaire, dico, enchaineuse)

                si erreur != ErreurGénérationPage.AUCUNE {
                    retourne erreur
                }
            }
            sinon si noeud.enfants.taille > 2 {
                erreur := génère_page(noeud.enfants[2], gestionnaire, dico, enchaineuse)

                si erreur != ErreurGénérationPage.AUCUNE {
                    retourne erreur
                }
            }
        }
    }

    retourne ErreurGénérationPage.AUCUNE
}

principale :: fonc(args : []*z8) -> z32
{
    diffère { imprime_sans_format("mémoire utilisée : ", mémoire_utilisée(), "o\n") }

    chn := "{%pour x dans evenements%}<a href='{{lien}}'>{%si variable%}{{variable}} {{x}}{% sinon %}texte{% finsi %}</a>\n{% finpour %}"

    imprime("script :\n\n", chn, "\n\n")

    //######################################################
    // Lexage du script

    dyn lexeuse := construit_lexeuse(chn)
    diffère { détruit_lexeuse(lexeuse) }

    lexeuse.performe_lexage()

    imprime("lexèmes :\n\n")

    pour lexème dans lexeuse.lexèmes {
        imprime_sans_format(lexème.type_lexème, " : ", lexème.chn, "\n")
    }

    imprime("\n")

    //######################################################
    // Syntaxage du script

    dyn syntaxeuse := construit_syntaxeuse(lexeuse.lexèmes)
    diffère { détruit_assembleuse(syntaxeuse.assembleuse) }

    syntaxeuse.performe_syntaxage()

	racine := syntaxeuse.assembleuse.pile.haut()

	imprime("arbre :\n\n")
	imprime_arbre(racine, 0)
	imprime("\n")

    //######################################################
    // Génération de la page

	dyn gestionnaire : GestionnaireObjet
	diffère { détruit(@gestionnaire) }

    dyn dico := crée_dictionnaire(@gestionnaire)

    // À FAIRE: simplifie la création d'objet en passant les paramètres
    dyn liste := crée_liste(@gestionnaire)
    dyn obj1 := crée_entier(@gestionnaire)
    obj1.valeur = 127
    dyn obj2 := crée_réel(@gestionnaire)
    obj2.valeur = 36.0
    dyn obj3 := crée_chaine(@gestionnaire)
    obj3.valeur = "chaine test"

    tableau_ajoute(@liste.valeur, transtype(obj1: *Objet))
    tableau_ajoute(@liste.valeur, transtype(obj2: *Objet))
    tableau_ajoute(@liste.valeur, transtype(obj3: *Objet))

	dico.insère("evenements", transtype(liste: *Objet))

	dyn chaine1 := crée_chaine(@gestionnaire)
    chaine1.valeur = "http://aaa"

    dico.insère("lien", transtype(chaine1: *Objet))

    chaine1 = crée_chaine(@gestionnaire)
    chaine1.valeur = "eh ouais..."

    dico.insère("variable", transtype(chaine1: *Objet))

    dyn enchaineuse : Enchaineuse
    diffère { détruit(enchaineuse) }

    erreur := génère_page(racine, @gestionnaire, dico, enchaineuse)

    si erreur != ErreurGénérationPage.AUCUNE {
        imprime("Erreur lors de la génération de la page : %\n", erreur)
    }
    sinon {
        imprime("Page :\n\n")
        imprime(enchaineuse.résultat, "\n")
    }

    retourne 0
}
