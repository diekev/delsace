importe BoiteFlexible
importe Chaine
importe CréationFenêtre
importe Couleur
importe Fondation
importe Math
importe Numérique
importe PeintureInterface
importe Périphériques
importe SimpleLexage
importe Temps
importe Typographie

charge "commandes"
charge "éditeur"

// À FAIRE : colorisation
// À FAIRE : exécution de commandes
// À FAIRE : cherche/remplace
// À FAIRE : sélection
// À FAIRE : ouverture, navigation dossier
// À FAIRE : souris
// À FAIRE : transformation de texte (majuscule, minuscule, etc.)
// À FAIRE : sauvegarde automatique
// À FAIRE : refait/défait

E: Éditeur
peintre: *Peintre
emboiteuse: Emboiteuse
fonte: *Fonte
lexeuse: SimpleLexeuse

// importe SysFichier

// __ponctuation_kuri := [
//     "+", "-", "[", "]", "(", ")", "{", "}", "/", "*", "=", "&", "|", "^", "%", "!", ":", ";", ",", "?", ".", "~", "<", ">",
//     "+=", "++", "-=", "--", "*=", "/=", "%=", "^=", "|=", "&=", "~=", "==", "!=", "<=", ">=", "||", "&&", "#", "::", "->", "<<", ">>", "<<=", ">>="
// ]

// __commentaires_ligne_singulière_kuri := [ "//" ]
// __commentaires_multi_lignes_kuri := [ ["/*", "*/"] ]

// __mots_clés_kuri := [
//     "retourne", "retiens", "si", "saufsi", "sinon", "boucle", "tantque", "répète", "pour", "dans", "arrête", "continue", "reprends", "discr", "sansarrêt", "diffère", "pousse_contexte", "tente", "piège", "nonatteignable", "struct", "énum", "énum_drapeau", "erreur", "eini_erreur", "importe", "charge", "fonc", "corout", "dyn", "empl", "union", "nonsûr", "externe", "mémoire", "info_de", "init_de", "type_de", "taille_de", "opérateur", "comme"
// ]

__ponctuation_config := ["[", "]", ":"]
__mots_clés_config := ["compilation", "espace", "paramètres", "raccourcis", "thème"]
__commentaires_ligne_singulière_config := ["#"]

Thème :: struct {
    texte: CouleurRVBA
    arrière_plan: CouleurRVBA
    indicateur_ligne: CouleurRVBA
    indicateur_ligne_courante: CouleurRVBA
}

thème: Thème

RaccourciCommande :: struct {
    raccourci: RaccourcisClavier
    commande: fonc(*Éditeur)(rien)
}

donne_raccourci_pour_évènement :: fonc (projet: *Projet, évènement: Évènement) -> *RaccourciCommande
{
    pour * projet.raccourcis {
        si it.raccourci.modificateur == évènement.modificateurs && it.raccourci.clé == évènement.touche {
            retourne it
        }
    }

    retourne nul
}

Projet :: struct {
    /* Espace de travail. */
    chemins: [..]chaine

    /* Commandes de compilation. */
    commandes_de_compilation: [..]InfoCompilation

    raccourcis: [..]RaccourciCommande

    /* Mémoire vive. */
    info_projet: InfoProjet
    fichiers_disponibles: [..]InfoVisiteFichier
}

InfoCompilation :: struct {
    dossier_de_compilation: chaine
    commande: [..]chaine
}

InfoFichier :: struct {
    taille: n64
    modification: z64
}

importe POSIX

donne_info_fichier :: fonc (chemin: chaine) -> InfoFichier
{
    résultat: InfoFichier
    résultat.taille = détermine_taille_fichier(CheminFichier(chemin))

    ptr_chemin := crée_chaine_c(chemin)
    diffère détruit_chaine_c(ptr_chemin)

    st: struct_stat
    ok := stat(ptr_chemin, *st)
    assert(ok == 0)

    résultat.modification = st.st_mtime

    retourne résultat
}

info_fichier_config: InfoFichier
info_config_projet: InfoFichier

parse_config_depuis_fichier :: fonc (chemin: chaine, projet: *Projet)
{
    lexeuse.commentaires_ligne_singulière = __commentaires_ligne_singulière_config
    lexeuse.ponctuations = __ponctuation_config
    lexeuse.mots_clés = __mots_clés_config
    lexeuse.caractères_symboliques = "-/"

    contenu := contenu_fichier_texte(chemin)
    diffère déloge(contenu)

    initialise_lexeuse_pour_texte(*lexeuse, contenu)

    tantque !fini(*lexeuse) {
        consomme_ponctuation(*lexeuse, "[")
        consomme_ponctuation(*lexeuse, "[")

        lexème := donne_lexème_suivant(*lexeuse)

        consomme_ponctuation(*lexeuse, "]")
        consomme_ponctuation(*lexeuse, "]")

        si lexème.est_mot_clé("paramètres") {
            parse_paramètres(*lexeuse)
        }
        sinon si lexème.est_mot_clé("espace") {
            parse_espace_de_travail(*lexeuse, projet)
        }
        sinon si lexème.est_mot_clé("compilation") {
            parse_commandes_compilation(*lexeuse, projet)
        }
        sinon si lexème.est_mot_clé("raccourcis") {
            parse_raccourcis(*lexeuse, projet)
        }
        sinon {
            imprimeln("catégorie inconnue : %", lexème.donne_texte())
            exit(1)
        }
    }
}

parse_paramètres :: fonc (lexeuse: *SimpleLexeuse)
{
    consomme_ponctuation(lexeuse, "[")
    consomme_mot_clé(lexeuse, "thème")
    consomme_ponctuation(lexeuse, "]")

    tantque !fini(lexeuse) {
        lexème := donne_lexème_suivant(lexeuse)
        lexeuse.reprends_depuis_lexème(lexème)
        si lexème.est_ponctuation("[") {
            arrête
        }

        symbole := donne_symbole(lexeuse).donne_texte()
        nombre_couleur := donne_nombre(lexeuse).nombre

        r := (nombre_couleur >> 24 & 0xff) comme r32 / 255.0
        v := (nombre_couleur >> 16 & 0xff) comme r32 / 255.0
        b := (nombre_couleur >> 8 & 0xff) comme r32 / 255.0
        a := (nombre_couleur & 0xff) comme r32 / 255.0

        couleur := CouleurRVBA(r, v, b, a)

        si symbole == "texte" {
            thème.texte = couleur
        }
        sinon si symbole == "arrière-plan" {
            thème.arrière_plan = couleur
        }
        sinon si symbole == "indicateur-ligne" {
            thème.indicateur_ligne = couleur
        }
        sinon si symbole == "indicateur-ligne-courante" {
            thème.indicateur_ligne_courante = couleur
        }
        sinon {
            imprimeln("Symbole inconnu pour les couleurs : %", symbole)
            exit(1)
        }
    }
}

parse_espace_de_travail :: fonc (lexeuse: *SimpleLexeuse, projet: *Projet)
{
    tantque !lexeuse.fini() {
        lexème := donne_lexème_suivant(lexeuse)

        si lexème.est_ponctuation("[") {
            lexeuse.reprends_depuis_lexème(lexème)
            arrête
        }

        tableau_ajoute(*projet.chemins, copie_chaine(lexème.donne_texte()))
    }
}

parse_commandes_compilation :: fonc (lexeuse: *SimpleLexeuse, projet: *Projet)
{
    info_compilation := tableau_ajoute_élément(*projet.commandes_de_compilation)

    tantque !lexeuse.fini() {
        lexème := donne_lexème_suivant(lexeuse)

        si lexème.est_ponctuation("[") {
            lexeuse.reprends_depuis_lexème(lexème)
            arrête
        }

        consomme_ponctuation(lexeuse, ":")

        propriété := lexème.donne_texte()

        si propriété == "dossier_compilat" {
            // @validation
            lexème = donne_lexème_suivant(lexeuse)
            info_compilation.dossier_de_compilation = copie_chaine(lexème.donne_texte())
        }
        sinon si propriété == "commande" {
            // @validation
            texte := lexeuse.donne_texte_jusque_nouvelle_ligne()
            divise(texte, ' ', *info_compilation.commande)
            pour & info_compilation.commande {
                it = copie_chaine(it)
            }
        }
        sinon {
            imprimeln("propriété inconnue pour la compilation : %", propriété)
            exit(1)
        }
    }
}

parse_raccourcis :: fonc (lexeuse: *SimpleLexeuse, projet: *Projet)
{
    tantque !lexeuse.fini() {
        lexème := donne_lexème_suivant(lexeuse)
        si lexème.type == TypeLexème.FinDeFichier {
            arrête
        }

        si lexème.est_ponctuation("[") {
            lexeuse.reprends_depuis_lexème(lexème)
            arrête
        }

        raccourci, succès := donne_raccourci_pour_texte(lexème.donne_texte())
        saufsi succès {
            imprimeln("Impossible de déterminer le raccourci pour '%'", lexème.donne_texte())
            exit(1)
        }

        lexème = donne_lexème_suivant(lexeuse)
        commande := donne_commande_pour_nom(lexème.donne_texte())
        saufsi commande {
            imprimeln("Commande inconnue '%'", lexème.donne_texte())
        }

        raccourci_commande := tableau_ajoute_élément(*projet.raccourcis)
        raccourci_commande.raccourci = raccourci
        raccourci_commande.commande = commande
    }
}

donne_raccourci_pour_texte :: fonc (texte: chaine) -> RaccourcisClavier, bool
{
    résultat: RaccourcisClavier

    boucle {
        si texte.commence_par("Ctrl-") {
            texte = texte.avance("Ctrl-".taille)
            résultat.modificateur.CONTROL = vrai
        }
        sinon si texte.commence_par("Alt-") {
            texte = texte.avance("Alt-".taille)
            résultat.modificateur.ALT = vrai
        }
        sinon si texte.commence_par("Maj-") {
            texte = texte.avance("Maj-".taille)
            résultat.modificateur.MAJUSCULE = vrai
        }
        sinon {
            arrête
        }
    }

    si texte == "FlècheGauche" {
        résultat.clé = ToucheClavier.FLÈCHE_GAUCHE
    }
    sinon si texte == "FlècheDroite" {
        résultat.clé = ToucheClavier.FLÈCHE_DROITE
    }
    sinon si texte == "FlècheHaut" {
        résultat.clé = ToucheClavier.FLÈCHE_HAUT
    }
    sinon si texte == "FlècheBas" {
        résultat.clé = ToucheClavier.FLÈCHE_BAS
    }
    sinon si texte == "Début" {
        résultat.clé = ToucheClavier.DÉBUT
    }
    sinon si texte == "Fin" {
        résultat.clé = ToucheClavier.FIN
    }
    sinon si texte == "PageHaut" {
        résultat.clé = ToucheClavier.PAGE_HAUT
    }
    sinon si texte == "PageBas" {
        résultat.clé = ToucheClavier.PAGE_BAS
    }
    sinon si texte == "Entrée" {
        résultat.clé = ToucheClavier.ENTRÉE
    }
    sinon si texte == "RetourArrière" {
        résultat.clé = ToucheClavier.EFFACE
    }
    sinon si texte == "Suppr" {
        résultat.clé = ToucheClavier.SUPPRIMER
    }
    sinon si texte.taille == 1 {
        caractère := texte[0]

        si 'A' <= caractère <= 'Z' {
            décalage := caractère - 'A'
            résultat.clé = (ToucheClavier.A comme z32 + décalage) comme ToucheClavier
        }
        sinon si 'a' <= caractère <= 'z' {
            décalage := caractère - 'a'
            résultat.clé = (ToucheClavier.A comme z32 + décalage) comme ToucheClavier
        }
        sinon si '0' <= caractère <= '9' {
            décalage := caractère - '0'
            résultat.clé = (ToucheClavier._0 comme z32 + décalage) comme ToucheClavier
        }
        sinon {
            retourne résultat, faux
        }
    }
    sinon {
        valeur, trouvée := donne_valeur_énum_pour_nom(info_de(ToucheClavier), texte)
        saufsi trouvée {
            retourne résultat, faux
        }

        résultat.clé = valeur comme ToucheClavier
    }

    retourne résultat, vrai
}

ajourne_configuration :: fonc (chemin_config_projet: chaine, projet: *Projet)
{
    chemin_config_globale := "globale.config-éditeur"

    info := donne_info_fichier(chemin_config_globale)
    si info.taille != info_fichier_config.taille || info.modification != info_fichier_config.modification {
        parse_config_depuis_fichier(chemin_config_globale, projet)
        info_fichier_config = info
    }

    si chemin_config_projet {
        info = donne_info_fichier(chemin_config_projet)
        si info.taille != info_config_projet.taille || info.modification != info_config_projet.modification {
            parse_config_depuis_fichier(chemin_config_projet, projet)
            info_config_projet = info
        }
    }
}

InfoProjet :: struct {
    nom_court: chaine
    chemin_config: chaine
}

CheminsAnonyme :: struct {
    projets_utilisateur: CheminFichier
}

Anonyme :: struct {
    chemins: CheminsAnonyme
    infos_projets: [..]InfoProjet

    projet_ouvert: *Projet
}

initialise_anonyme :: fonc (anonyme: *Anonyme)
{
    chemin_config_utilisateur := système_chemin_pour_dossier_configuration_utilisateur().Quelque
    chemin_projets := chemin_config_utilisateur / "anonyme/projets"

    anonyme.chemins.projets_utilisateur = chemin_projets
    _ := tente crée_dossiers_pour_chemin(chemin_projets, vrai) piège nonatteignable

    charge_infos_projets :: fonc (info_fichier: InfoVisiteFichier, anonyme: *Anonyme) -> DécisionVisiteFichier
    {
        info_projet := tableau_ajoute_élément(*anonyme.infos_projets)
        info_projet.chemin_config = copie_chaine(info_fichier.chemin)
        info_projet.nom_court = CheminFichier(info_projet.chemin_config).nom_fichier()

        retourne DécisionVisiteFichier.Continue
    }

    visite_fichiers(chemin_projets, faux, anonyme, charge_infos_projets)
}

ouvre_projet :: fonc (anonyme: *Anonyme, nom: chaine) -> bool
{
    // À FAIRE : fermeture du projet courant
    assert(anonyme.projet_ouvert == nul)

    info_projet: InfoProjet
    pour anonyme.infos_projets {
        si nom == it.nom_court {
            info_projet = it
            arrête
        }
    }
    sansarrêt {
        imprimeln("Aucun projet nommé '%'", nom)
        retourne faux
    }

    projet := loge(Projet)

    /* Ajourne les configuration. */
    imprimeln("Ouverture de '%'", info_projet.chemin_config)
    ajourne_configuration(info_projet.chemin_config, projet)

    /* Charge la liste de fichiers du projet. */
    charge_fichiers_projets :: fonc (info_fichier: InfoVisiteFichier, projet: *Projet) -> DécisionVisiteFichier
    {
        // À FAIRE : exclusions de fichiers
        info := tableau_ajoute_élément(*projet.fichiers_disponibles)
        mémoire(info) = info_fichier
        info.nom = copie_chaine(info.nom)
        info.chemin = copie_chaine(info.chemin)
        retourne DécisionVisiteFichier.Continue
    }

    // À FAIRE : protection contre les doublons
    pour projet.chemins {
        imprimeln("%", it)
        visite_fichiers(it, vrai, projet, charge_fichiers_projets)
    }

    projet.info_projet = info_projet

    anonyme.projet_ouvert = projet

    imprimeln("Projet '%' ouvert", info_projet.nom_court)

    retourne vrai
}

principale :: fonc ()
{
    // lexeuse.commentaires_ligne_singulière = __commentaires_ligne_singulière_kuri
    // lexeuse.commentaires_multi_lignes = __commentaires_multi_lignes_kuri
    // lexeuse.ponctuations = __ponctuation_kuri
    // lexeuse.mots_clés = __mots_clés_kuri

    // contenu := contenu_fichier_texte("éditeur.kuri")

    // initialise_lexeuse_pour_texte(*lexeuse, contenu)

    // _ := donne_tous_les_lexèmes(*lexeuse)
    // pour lexèmes {
    //     imprimeln("%", it)
    // }

    anonyme: Anonyme
    initialise_anonyme(*anonyme)

    _ := ouvre_projet(*anonyme, "blender")

    fonte_défaut_mono := "fontes/FiraCode-Regular.ttf"
    fonte = crée_fonte(fonte_défaut_mono, 16)
    fonte.font.kerning = faux

    fenêtre := crée_fenêtre(800, 600, "Éditeur Texte", vrai)

    éditeur_ouvre(*E, copie_chaine("éditeur.kuri"))

    doit_fermer := faux

    tics_fichier: n64 = 0

    tantque !doit_fermer {
        si tics_fichier % 60 == 0 {
            ajourne_configuration(anonyme.projet_ouvert.info_projet.chemin_config, anonyme.projet_ouvert)
        }
        tics_fichier += 1

        évènements := ajourne_évènements_fenêtre()

        largeur, hauteur := donne_taille_fenêtre(fenêtre)

        pour évènements {
            si it.type == TypeÉvènement.Fermeture {
                doit_fermer = vrai
                arrête
            }

            si it.type == TypeÉvènement.Clavier {
                si it.touche_pressée {
                    raccourci_commande := donne_raccourci_pour_évènement(anonyme.projet_ouvert, it)
                    si raccourci_commande {
                        raccourci_commande.commande(*E)
                    }
                    sinon si it.texte != "" {
                        éditeur_insère_texte(*E, it.texte)
                    }
                }
            }
        }

        métriques := donne_métriques_fonte(fonte)
        E.lignes = ((hauteur comme r32) / métriques.donne_hauteur_ligne()) comme z32 - 2

        ajourne_tampon_rendu(*E)
        éditeur_défile(*E)

        dessine_fenêtre(largeur, hauteur)

        permute_tampons_fenêtre(fenêtre)
    }
}

dessine_fenêtre :: fonc (largeur: z32, hauteur: z32)
{
    marque := donne_marque_stockage_temporaire()
    diffère définis_marque_stockage_temporaire(marque)

    taille_cannevas := Taille(largeur = Largeur(largeur), hauteur = Hauteur(hauteur))
    saufsi peintre {
        peintre = crée_peintre_igumi(taille_cannevas)
    }

    peintre.définis_taille_cannevas(taille_cannevas)
    peintre.efface_cible_rendu()

    commandes := crée_interface(largeur, hauteur)
    dessine_commandes(peintre, *commandes)
}

crée_interface :: fonc (largeur: z32, hauteur: z32) -> CommandesDeRendu
{
    commence_disposition(*emboiteuse, largeur, hauteur)

    dispose_rectangle()
    {
        définis_disposition(cotation = Cotation(CROISSANTE(), CROISSANTE()), direction = Direction.Verticale)

        dispose_rectangle()
        {
            définis_arrière_plan(thème.arrière_plan)
            définis_disposition(cotation = Cotation(CROISSANTE(), CROISSANTE()))

            dessine_indicateurs_lignes(hauteur)
            dessine_texte()
        }
        termine_rectangle()

        dessine_barre_status()
        dessine_barre_message()
    }
    termine_rectangle()

    retourne termine_disposition(*emboiteuse)
}

dessine_indicateurs_lignes :: fonc (hauteur: z32)
{
    métriques := donne_métriques_fonte(fonte)
    nombre_de_lignes := ((hauteur comme r32) / métriques.donne_hauteur_ligne()) comme z32 - 2
    nombre_de_colonnes := max(4, magnitude_décimale(E.lignes_texte.taille comme z32) + 2)
    largeur_colonnes := (métriques.largeur_moyenne * nombre_de_colonnes comme r32) comme z32

    dispose_rectangle()
    {
        définis_arrière_plan(thème.arrière_plan)
        définis_disposition(cotation = Cotation(FIXE(largeur_colonnes), CROISSANTE()), alignement_horizontal = AlignementEnfant.Fin, direction = Direction.Verticale)

        pour nombre_de_lignes {
            txt := imprime_chaine_temp(" % ", it + E.décalage_ligne + 1)

            couleur := si index_it == (E.cy - E.décalage_ligne) {
                thème.indicateur_ligne_courante
            }
            sinon {
                thème.indicateur_ligne
            }
            dispose_texte(txt, ConfigurationTexte(fonte, couleur))
        }
    }
    termine_rectangle()
}

dessine_texte :: fonc ()
{
    métriques := donne_métriques_fonte(fonte)
    hauteur_ligne := métriques.donne_hauteur_ligne() comme z32
    largeur_caractère := métriques.largeur_moyenne

    dispose_rectangle()
    {
        définis_arrière_plan(thème.arrière_plan)
        définis_disposition(cotation = Cotation(CROISSANTE(), CROISSANTE()), direction = Direction.Verticale)

        config_texte := ConfigurationTexte(fonte, thème.texte)

        pour E.lignes {
            index_ligne := it + E.décalage_ligne

            si index_ligne >= E.lignes_texte.taille {
                dispose_texte("", config_texte)
            }
            sinon {
                dispose_texte(E.lignes_rendu[index_ligne], config_texte)
            }

            /* Curseur. */
            si E.cy == index_ligne {
                dispose_rectangle()
                {
                    définis_arrière_plan(thème.texte)
                    définis_disposition(cotation = Cotation(FIXE(largeur_caractère comme z32), FIXE(hauteur_ligne)))

                    texte_ligne := E.lignes_rendu[index_ligne]
                    texte_avant_curseur := texte_ligne
                    texte_avant_curseur.points_de_code.taille = E.cx

                    position_curseur := fonte.donne_largeur_texte(texte_avant_curseur)

                    définis_flottance(position_curseur comme r32, (it * hauteur_ligne) comme r32)

                    texte_sous_curseur := avance(texte_ligne, E.cx)
                    si texte_sous_curseur.taille() {
                        texte_sous_curseur.points_de_code.taille = 1
                        dispose_texte(texte_sous_curseur, ConfigurationTexte(fonte, thème.arrière_plan))
                    }
                }
                termine_rectangle()
            }
        }
    }
    termine_rectangle()
}

dessine_barre_status :: fonc ()
{
    métriques := donne_métriques_fonte(fonte)
    hauteur_ligne := métriques.donne_hauteur_ligne() comme z32

    chemin := E.chemin_fichier
    saufsi chemin {
        chemin = "Document sans nom"
    }

    modifié := ""
    si E.modifié {
        modifié = " (modifié)"
    }

    texte := imprime_chaine_temp("%% - % lignes", chemin, modifié, E.lignes_texte.taille)

    dispose_rectangle()
    {
        définis_arrière_plan(thème.texte)
        définis_disposition(cotation = Cotation(CROISSANTE(), FIXE(hauteur_ligne)))

        dispose_texte(texte, ConfigurationTexte(fonte, thème.arrière_plan))
    }
    termine_rectangle()
}

dessine_barre_message :: fonc ()
{
    métriques := donne_métriques_fonte(fonte)
    hauteur_ligne := métriques.donne_hauteur_ligne() comme z32

    dispose_rectangle()
    {
        définis_arrière_plan(thème.arrière_plan)
        définis_disposition(cotation = Cotation(CROISSANTE(), FIXE(hauteur_ligne)))

        si temps_écoulé_secondes(E.temps_message) < 5 {
            dispose_texte(E.message, ConfigurationTexte(fonte, thème.texte))
        }
    }
    termine_rectangle()
}
