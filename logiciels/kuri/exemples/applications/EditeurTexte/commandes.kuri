importe Compilatrice

donne_commande_pour_nom :: fonc (nom: chaine) -> fonc(*Éditeur)(rien)
#corps_texte {
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    lexèmes := compilatrice_lèxe_fichier(#chemin_de_ce_fichier)

    sentinelle_trouvée := faux

    pour lexèmes {
        si it.genre != Compilatrice.GenreLexème.CHAINE_CARACTERE {
            continue
        }

        si it.texte == "donne_commande_pour_nom" {
            sentinelle_trouvée = vrai
            continue
        }

        saufsi sentinelle_trouvée {
            continue
        }

        saufsi it.texte.commence_par("commande_") {
            continue
        }

        nom_commande := it.texte.avance("commande_".taille)

        ajoute_au_tampon(*enchaineuse, "    si nom == \"", nom_commande, "\" { retourne ", it.texte, " }\n")
    }

    ajoute_au_tampon(*enchaineuse, "    retourne nul\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

commande_défilage_bas :: fonc (éditeur: *Éditeur)
{
    éditeur.décalage_ligne += 1
    si éditeur.décalage_ligne >= éditeur.lignes_texte.taille {
        éditeur.décalage_ligne = éditeur.lignes_texte.taille comme z32 - 1
    }
}

commande_déplace_curseur_bas :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.LigneSuivante)
}

commande_défilage_haut :: fonc (éditeur: *Éditeur)
{
    éditeur.décalage_ligne -= 1
    si éditeur.décalage_ligne < 0 {
        éditeur.décalage_ligne = 0
    }
}

commande_déplace_curseur_haut :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.LignePrécédente)
}

commande_va_début_ligne :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.DébutLigne)
}

commande_va_fin_ligne :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.FinLigne)
}

commande_va_page_précédente :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.PagePrécédente)
}

commande_va_page_suivante :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.PageSuivante)
}

commande_va_au_mot_précédent :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.MotPrécédent)
}

commande_va_à_gauche :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.Recule)
}

commande_va_à_droite :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.Avance)
}

commande_va_au_mot_suivant :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.MotSuivant)
}

commande_ajoute_nouvelle_ligne :: fonc (éditeur: *Éditeur)
{
    éditeur_ajoute_nouvelle_ligne(éditeur)
}

commande_supprime_caractère :: fonc (éditeur: *Éditeur)
{
    éditeur_supprime_caractère(éditeur)
}

commande_supprime :: fonc (éditeur: *Éditeur)
{
    éditeur_déplace_curseur(éditeur, Mouvement.Avance)
    éditeur_supprime_caractère(éditeur)
}
