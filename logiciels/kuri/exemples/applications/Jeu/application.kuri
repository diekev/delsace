charge "evenements"
charge "glfw"
charge "dessin_opengl"

importe Fondation
importe OpenGL

// À FAIRE : rendu texte, chargement image

//###############################################################################

// Puisqu'on ne peut pas passer de contexte aux méthodes de « file » via les
// fonctions de rappel, cette structure est spécialisée pour les file d'évènements.
// Cependant elle est limitée à un certain nombre d'événement
NOMBRE_MAXIMUM_ÉVÈNEMET := 32

FileÉvènement :: struct {
	tampon : []Évènement
	taille : z64
}

#nulctx enfile :: fonc(q : *FileÉvènement, évènement : Évènement) -> rien
{
    si q.taille >= NOMBRE_MAXIMUM_ÉVÈNEMET {
        // À FAIRE: erreur?
        retourne
    }

    index := q.taille
    q.tampon[index] = évènement
    q.taille += 1
}

#nulctx est_vide :: fonc(q : *FileÉvènement) -> bool
{
    retourne q.taille == 0
}

#nulctx défile :: fonc(q : *FileÉvènement) -> Évènement
{
    évènement : Évènement

    si est_vide(q) {
        retourne évènement
    }

    évènement = q.tampon[0]

    // réajuste la file en décalant les données

    si q.taille > 1 {
	    ptr_dst := @q.tampon[0]
		ptr_src := @q.tampon[1]
        copie_mem_nonsur(ptr_src, ptr_dst, transtype(taille_de(Évènement): z64) * (q.taille - 1))
    }

    q.taille -= 1

    retourne évènement
}

//###############################################################################

VG_file_évènements : *FileÉvènement = nul

#nulctx rappel_erreur :: fonc(erreur : z32, desc : *z8) -> rien
{
    // À FAIRE : imprime n'a pas de contexte.
    //soit chn = converti_chaine_c(desc);
    //imprime("Erreur ", erreur, " : ", chn, "\n");
}

#nulctx rappel_clavier :: fonc(fenetre : *GLFWwindow, cle : type_cle, scancode : z32, action : z32, mods : type_mod) -> rien
{
    //glfwSetWindowShouldClose(fenetre, 1);
    évènement : Évènement

	si action == 1 {
		évènement.type = type_évènement.CLE_PRESSEE
	}
	sinon si action == 0 {
		évènement.type = type_évènement.CLE_RELACHEE
	}
	sinon si action == 2 {
		évènement.type = type_évènement.CLE_REPETEE
	}

    évènement.mods = mods
    évènement.cle = cle

    enfile(VG_file_évènements, évènement)
}

#nulctx rappel_bouton_souris :: fonc(fenetre : *GLFWwindow, bouton : bouton_souris, action : z32, mods : type_mod) -> rien
{
    évènement : Évènement

    si action == 1 {
		évènement.type = type_évènement.SOURIS_PRESSEE
	}
	sinon si action == 0 {
		évènement.type = type_évènement.SOURIS_RELACHEE
	}

    évènement.mods = mods
    évènement.souris = bouton

    enfile(VG_file_évènements, évènement)
}

#nulctx rappel_position_souris :: fonc(fenetre : *GLFWwindow, pos_x : r64, pos_y : r64) -> rien
{
    évènement : Évènement
    évènement.type = type_évènement.SOURIS_BOUGEE
    évènement.pos_x = transtype(pos_x: r32)
    évènement.pos_y = transtype(pos_y: r32)

    enfile(VG_file_évènements, évènement)
}

#nulctx rappel_roulette :: fonc(fenetre : *GLFWwindow, delta_x : r64, delta_y : r64) -> rien
{
    évènement : Évènement
    évènement.type = type_évènement.SOURIS_ROULETTE
    évènement.delta_x = transtype(delta_x: r32)
    évènement.delta_y = transtype(delta_y: r32)

    enfile(VG_file_évènements, évènement)
}

#nulctx rappel_dimension :: fonc(fenetre : *GLFWwindow, x : z32, y : z32) -> rien
{
	glViewport(0, 0, x, y)

    évènement : Évènement
    évènement.type = type_évènement.REDIMENSION
    évènement.delta_x = transtype(x: r32)
    évènement.delta_y = transtype(y: r32)

    enfile(VG_file_évènements, évènement)
}

//###############################################################################

TAILLE_TUILE := 32
TUILES_X := 20
TUILES_Y := 15

Entite :: struct {
    pos_x := TAILLE_TUILE * 10
    pos_y := TAILLE_TUILE * 7
}

//###############################################################################

Application :: struct {
    fenetre : *GLFWwindow := nul
    hauteur : z32 = 0
    largeur : z32 = 0
    souris_x := 0.0
    souris_y := 0.0
    dernier_évènement : type_évènement = type_évènement.NUL
    temps_double_clic : z64

    personnage : Entite
}

initialise_opengl :: fonc(app : &Application) -> rien
{
    glfwMakeContextCurrent(app.fenetre)

    erreur := glewInit()

    si erreur != 0 {
        imprime_sans_format("Erreur lors de l'initilisation de GLEW !\n")
    }

    initialise_tampon_dessin()

    glfwSwapInterval(1)
}

dessine_fenetre :: fonc(app : &Application) -> rien
{
    glClear(0x00004000)

	glClearColor(0.5, 0.5, 1.0, 1.0)

	l := transtype(app.largeur : r32)
	h := transtype(app.hauteur : r32)

    // dessine l'arrière plan

    // dessine les personnages
	taille_x := transtype(TAILLE_TUILE : r32) / transtype(TAILLE_TUILE * TUILES_X : r32)
	taille_y := transtype(TAILLE_TUILE : r32) / transtype(TAILLE_TUILE * TUILES_Y : r32)
	pos_x := transtype(app.personnage.pos_x : r32) / transtype(TAILLE_TUILE * TUILES_X : r32)
	pos_y := transtype(app.personnage.pos_y : r32) / transtype(TAILLE_TUILE * TUILES_Y : r32)

	couleur := Couleur{r = 1.0, v = 1.0, b = 1.0, a = 1.0 }

	dessine_carré_ex(pos_x, pos_y, taille_x, taille_y, couleur)

	glfwSwapBuffers(app.fenetre)
}

traite_évènement :: fonc(app : &Application, évènement : Évènement) -> rien
{
    //imprime(évènement, "\n");

    si évènement.type == type_évènement.REDIMENSION {
        app.largeur = transtype(évènement.delta_x : z32)
        app.hauteur = transtype(évènement.delta_y : z32)
    }

    si évènement.type == type_évènement.CLE_PRESSEE || évènement.type == type_évènement.CLE_REPETEE {
        si évènement.cle == type_cle.RIGHT {
            app.personnage.pos_x += TAILLE_TUILE

            // vérifie collision
            si app.personnage.pos_x >= app.largeur {
               app.personnage.pos_x = app.largeur - TAILLE_TUILE
            }
        }
        si évènement.cle == type_cle.UP {
            app.personnage.pos_y += TAILLE_TUILE

            // vérifie collision
            si app.personnage.pos_y >= app.hauteur {
               app.personnage.pos_y = app.hauteur - TAILLE_TUILE
            }
        }
        si évènement.cle == type_cle.LEFT {
            app.personnage.pos_x -= TAILLE_TUILE

            // vérifie collision
            si app.personnage.pos_x < 0 {
               app.personnage.pos_x = 0
            }
        }
        si évènement.cle == type_cle.DOWN {
            app.personnage.pos_y -= TAILLE_TUILE

            // vérifie collision
            si app.personnage.pos_y < 0 {
               app.personnage.pos_y = 0
            }
        }
    }
}

TEMPS_DOUBLE_CLIC_MS : z64 = 500

// Maximum, au cas où on laisse les utilisateurs renseigner le temps.
TEMPS_DOUBLE_CLIC_MS_MAX : z64 = 5000

traite_évènements :: fonc(app : &Application) -> rien
{
    tantque !est_vide(VG_file_évènements) {
        évènement := défile(VG_file_évènements)

        // enregistrement de la position de la souris, car ceci n'est donnée
		// que pour les mouvements */
		si évènement.type == type_évènement.SOURIS_BOUGEE {
			app.souris_x = évènement.pos_x
			app.souris_y = évènement.pos_y
		}
		sinon si évènement.type != type_évènement.REDIMENSION {
			évènement.pos_x = app.souris_x
			évènement.pos_y = app.souris_y
		}

        // si souris relachée
		// -- si dernier évènement est souris pressée -> nous avons un clic, ignore
		// -- sinon -> nous avons une souris relachée
		// si souris cliquée
		// -- si dernier clic < TEMPS_DOUBLE_CLIC -> nous avons un double clic
		// Editrice::souris_clic() est toujours appelé quand la souris est cliquée
		// Editrice::double_clic() est appelé si un deuxième clic survient dans l'écart de temps défini
		// Editrice::souris_relachee() est appelé un autre évènement est survenu depuis le dernier clic
		//    par exemple : presse souris, tappe une lettre, relache souris

		si évènement.type == type_évènement.SOURIS_RELACHEE {
			si (app.dernier_évènement == type_évènement.SOURIS_PRESSEE) || (app.dernier_évènement == type_évènement.DOUBLE_CLIC) {
				continue
			}

			// traite l'évènement
		}
		sinon si évènement.type == type_évènement.SOURIS_PRESSEE {
			si (compte_ticks_ms() - app.temps_double_clic) <= TEMPS_DOUBLE_CLIC_MS {
				évènement.type = type_évènement.DOUBLE_CLIC
			}

			app.temps_double_clic = compte_ticks_ms()
		}

		traite_évènement(app, évènement)

		app.dernier_évènement = évènement.type
    }
}

boucle_principale :: fonc(app : &Application) -> rien
{
    tantque glfwWindowShouldClose(app.fenetre) == 0 {
        // À FAIRE : l'impression de chaines contenant des caractères échappés
        // ont un déborderment de tampon car l'échappement est compté comme un
        // caractère en soi.
        imprime_sans_format(app, "\n\n")
        imprime_sans_format("Mémoire utilisée : ", mémoire_utilisée(), "o\n\n")

	    glfwWaitEvents()

		traite_évènements(app)

        dessine_fenetre(app)
    }
}

lance_application :: fonc(app : &Application) -> z32
{
    si glfwInit() == 0 {
        imprime_sans_format("Impossible d'initialiser GLFW !\n")
        retourne 1
    }

    // initialise la file d'évènements
    file_évènement : FileÉvènement
    nonsûr {
        VG_file_évènements = @file_évènement
        VG_file_évènements.tampon = loge [NOMBRE_MAXIMUM_ÉVÈNEMET]Évènement
    }

    largeur : z32 = TAILLE_TUILE * TUILES_X
    hauteur : z32 = TAILLE_TUILE * TUILES_Y

    //donnees_moniteur = transtype(glfwGetVideoMode(glfwGetPrimaryMonitor()) : *DonneesMoniteur);

    //si donnees_moniteur != nul {
    //    largeur = donnees_moniteur.largeur;
    //    hauteur = donnees_moniteur.hauteur;
    //}

    //imprime(mémoire(donnees_moniteur), "\n");

    titre := "Créathèque"

    glfwWindowHint(CONTEXT_GLFW_VERSION_MAJOR, 4)
    glfwWindowHint(CONTEXT_GLFW_VERSION_MINOR, 0)
    fenetre := glfwCreateWindow(largeur, hauteur, titre.pointeur, nul, nul)

    si fenetre == nul {
        imprime_sans_format("Impossible d'initialiser la fenêtre !\n")
        glfwTerminate()
        retourne 1
    }

    glfwSetKeyCallback(fenetre, rappel_clavier)
	glfwSetCursorPosCallback(fenetre, rappel_position_souris)
	glfwSetMouseButtonCallback(fenetre, rappel_bouton_souris)
	glfwSetScrollCallback(fenetre, rappel_roulette)
	// Décommente pour activer le redimensionnement
	//glfwSetWindowSizeCallback(fenetre, rappel_dimension);

    // initialise l'application
    app.fenetre = fenetre
    app.hauteur = hauteur
    app.largeur = largeur

    initialise_opengl(app)

    boucle_principale(app)

    issitialise_tampon_dessin()

    glfwDestroyWindow(fenetre)

    glfwTerminate()

    déloge file_évènement.tampon

    retourne 0
}
