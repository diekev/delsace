importe Fondation
importe SysFichier

TAILLE_PAGE :: 4096
TABLE_MAX_PAGES :: 100

Paginatrice :: struct {
    pages: [100][..]octet
    fichier := fichier_invalide()
    taille_fichier : z64 = 0
    utilise_stockage_disque := faux
}

ouvre_paginatrice :: fonc (chemin: CheminFichier) -> *Paginatrice
{
    fichier := tente ouvre_fichier_crée_si_non_existant(chemin, pour_lecture_écriture, 0o400 | 0o200) piège err {
        panique("Impossible d'ouvrir le fichier\n")
        retourne nul
    }

    paginatrice := loge(Paginatrice)
    paginatrice.utilise_stockage_disque = vrai
    paginatrice.fichier = fichier
    paginatrice.taille_fichier = détermine_taille_fichier(*fichier)
    retourne paginatrice
}

ouvre_paginatrice_mémoire :: fonc () -> *Paginatrice
{
    retourne loge(Paginatrice)
}

trouve_page :: fonc (paginatrice: *Paginatrice, index_page: z32) -> [..]octet
{
    si index_page > TABLE_MAX_PAGES {
        panique("Tentative de prendre une page hors des limites : % > %", index_page, TABLE_MAX_PAGES)
    }

    page := paginatrice.pages[index_page]

    si page.pointeur == nul {
        // Cache miss
        page = loge_tableau(octet, TAILLE_PAGE)

        nombre_de_pages := paginatrice.taille_fichier / TAILLE_PAGE

        // nous avons peut-être une page incomplète à la fin du fichier
        si paginatrice.taille_fichier % TAILLE_PAGE != 0 {
            nombre_de_pages += 1
        }

        si index_page <= nombre_de_pages && paginatrice.utilise_stockage_disque {
            _ := tente positionne_fichier(*paginatrice.fichier, PositionDébut(index_page * TAILLE_PAGE)) piège err {
                panique("Impossible de chercher le point dans le fichier !")
            }

            octets_lus := tente lis(*paginatrice.fichier, page) piège err {
                panique("Erreur lors de la lecture du fichier !")
            }

            si octets_lus != TAILLE_PAGE {
                panique("Erreur lors de la lecture du fichier : nous aurions dû lire % octet, mais en avons lu % !", TAILLE_PAGE, octets_lus)
            }
        }

        paginatrice.pages[index_page] = page
    }

    retourne page
}

// les pages ne sont pas flushées si le programme est interrompu (ctrl + C)
// nous pourrions également éviter d'écrire des pages qui n'ont pas changées
flush_paginatrice :: fonc (paginatrice: *Paginatrice, index_page: z32) -> rien
{
    si paginatrice.pages[index_page].pointeur == nul {
        panique("Tentativer de flusher une page nulle !")
    }

    _ := tente positionne_fichier(*paginatrice.fichier, PositionDébut(index_page * TAILLE_PAGE)) piège err {
        panique("Impossible de chercher le point dans le fichier !")
    }

    octets_écris := tente écris(*paginatrice.fichier, paginatrice.pages[index_page]) piège err {
        panique("Erreur lors de l'écriture !")
    }

    si octets_écris != TAILLE_PAGE {
        panique("Erreur lors de l'écriture : nous aurions écrire % octets, mais en avons écris % !", TAILLE_PAGE, octets_écris)
    }
}
