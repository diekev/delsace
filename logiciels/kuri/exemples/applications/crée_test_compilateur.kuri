importe Fondation
importe SysFichier

// tests pour vérifier la vitesse de compilation de gros blocs de code
// redondant mais simple
// les entrées sont 20 000, 100 000, 500 000, 2 000 000 lignes de
// a = b + c * d
// a, b, c, d sont des nombres entiers initialisés à 1, 2, 3, 4
//
// les tests sont inspirés de
// https://github.com/sal55/langs/blob/master/compilertest.txt

crée_test :: fonc(nombre_de_ligne : z32, chemin_fichier : chaine) -> rien
{
	chaines := [
		"principale :: fonc () -> z32\n",
		"{\n",
		"\ta := 1\n",
		"\tb := 2\n",
		"\tc := 3\n",
		"\td := 4\n",
		"\ta = b + c * d\n",
		"\tretourne 0\n",
		"}\n"
	]

	// calcule l'espace nécessaire
	taille : z64 = 0

	pour chn dans chaines {
		taille += chn.taille
	}

	taille += chaines[6].taille * (nombre_de_ligne - 1)

	// génère le code du test
	enchaineuse : Enchaineuse
	diffère { détruit_tampons(*enchaineuse); }

	pour i dans 0 ... 5 {
		ajoute_au_tampon(*enchaineuse, chaines[i])
	}

	pour i dans 0 ... nombre_de_ligne - 1 {
		ajoute_au_tampon(*enchaineuse, chaines[6])
	}

	ajoute_au_tampon(*enchaineuse, chaines[7])
	ajoute_au_tampon(*enchaineuse, chaines[8])

	// écris le fichier
	chemin := construit_chemin(chemin_fichier)
	fichier := tente ouvre_fichier_crée_si_non_existant(chemin.chn, pour_écriture) piège nonatteignable
    chaine_reponse := chaine_depuis_enchaineuse(*enchaineuse)
	_ := écris(*fichier, chaine_reponse)
	déloge(chaine_reponse)
}

principale :: fonc () -> z32
{
	crée_test(20_000, "/tmp/test_20_000_lignes.kuri")
	crée_test(100_000, "/tmp/test_100_000_lignes.kuri")
	crée_test(500_000, "/tmp/test_500_000_lignes.kuri")
	crée_test(2_000_000, "/tmp/test_2_000_000_lignes.kuri")

	retourne 0
}
