importe Compilatrice
importe Fondation
importe GHTML
importe JSON
importe Routage
importe ServeuseTCP
importe ServeuseHTTP
importe SysFichier

charge "page_accueil"
charge "serveuse"

// ----------------------------

crée_réponse_pour_requête_fichier :: fonc (chm: &CheminFichier) -> RésultatRequête
{
    contenu := contenu_fichier_texte(chm)

    retourne RésultatRequête(
        status = CodeÉtatHTTP.OK,
        type_contenu = "application/javascript"
        contenu = contenu
    )
}

crée_réponse_page_non_trouvée :: fonc (requête: *Requête, serveuse: *Serveuse) -> RésultatRequête
{
    retourne RésultatRequête(
        status = CodeÉtatHTTP.NOT_FOUND,
        type_contenu = "text/html;charset=utf-8",
        // À FAIRE : évite de copier la chaine
        contenu = copie_chaine("<p>La page n'existe pas</p>")
    )
}

crée_réponse_méthode_non_autorisée :: fonc (requête: *Requête, serveuse: *Serveuse) -> RésultatRequête
{
    retourne RésultatRequête(
        status = CodeÉtatHTTP.METHOD_NOT_ALLOWED,
        type_contenu = "text/html;charset=utf-8",
        // À FAIRE : évite de copier la chaine
        contenu = copie_chaine("<p>La méthode n'est pas autorisée !</p>")
    )
}

intergiciel :: fonc (requête: *Requête, serveuse: *Serveuse) -> RésultatRequête
{
    chemin_fichier_potentiel := construit_chemin(requête.uri.chemin)

    si fichier_existe(chemin_fichier_potentiel) {
        retourne crée_réponse_pour_requête_fichier(chemin_fichier_potentiel)
    }

    retourne RésultatRequête(status = CodeÉtatHTTP.OK)
}

// -------------------------------------------------

ConfigurationServeuse :: struct {
    port : n16
}

principale :: fonc () -> z32
{
    diffère { imprime("Fin du programme, mémoire utilisée %o\n", mémoire_utilisée()); }

    args := arguments_ligne_commande()

    si args.taille != 2 {
        imprime("La ligne de commande doit être : % CONFIGURATION\n", args[0])
        retourne 1
    }

    chemin := construit_chemin(args[1])
    script := contenu_fichier_texte(chemin)
    diffère { déloge(script); }

    si script.taille == 0 {
        imprime("Le fichier de configuration est vide !\n")
        retourne 1
    }

    succès, configuration := parse_struct_depuis_chaine_json(script, ConfigurationServeuse)

    si !succès {
        imprime("Impossible de lire le fichier de configuration !\n")
        retourne 1
    }

    si configuration.port == 0 {
        imprime("Le port est invalide !\n")
    }

    contexte.logueur = mon_impression_log

    serveuse : ServeuseHTTP(Serveuse)

    // @erreur
    _ := serveuse.écoute_sur(AdresseTCP(port = configuration.port))

    // pour les gabarits
    ajoute_fichier(*serveuse.données.rendeuse_gabarit.catalogue, "accueil", "accueil.html")

    // pour les fichiers statiques
    ajoute_fichier(*serveuse.données.fichiers_statiques, "test", "test.js")

    serveuse.ajoute_route("/", répond_get_page_accueil, répond_post_page_accueil)

    serveuse.lance()

    détruit_serveuse(*serveuse.données)

    retourne 0
}

mon_impression_log :: fonc (message: chaine, ident: chaine, mode: ModeLogage, données: *rien) -> rien
{
    imprime("%\n", message)
}

configure_compilation :: fonc () -> rien
{
    options := compilatrice_obtiens_options()
    options.niveau_optimisation = NiveauOptimisation.O3
    compilatrice_ajourne_options(options)
}

//#exécute configure_compilation()
