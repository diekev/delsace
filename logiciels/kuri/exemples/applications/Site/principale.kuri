importe Compilatrice
importe Fondation
importe GHTML
importe GlibC
importe JSON
importe Réseau
importe SysFichier
importe Temps

charge "page_accueil"
charge "requête"
charge "serveuse"

// ----------------------------

crée_réponse_pour_requête_fichier :: fonc (chm: &CheminFichier) -> RéponseRequête
{
    contenu := contenu_fichier_texte(chm)

    retourne RéponseRequête(
        code = CodeÉtatHTTP.OK,
        type_contenu = TypeContenu.APPLICATION_JAVASCRIPT,
        contenu = contenu
    )
}

// -------------------------------------------------

ConfigurationServeuse :: struct {
    port : n16
}

principale :: fonc () -> z32
{
    diffère { imprime("Fin du programme, mémoire utilisée %o\n", mémoire_utilisée()); }

    args := arguments_ligne_commande()

    si args.taille != 2 {
        imprime("La ligne de commande doit être : % CONFIGURATION\n", args[0])
        retourne 1
    }

    chemin := construit_chemin(args[1])
    script := contenu_fichier_texte(chemin)
    diffère { déloge(script); }

    si script.taille == 0 {
        imprime("Le fichier de configuration est vide !\n")
        retourne 1
    }

    succès, configuration := parse_struct_depuis_chaine_json(script, ConfigurationServeuse)

    si !succès {
        imprime("Impossible de lire le fichier de configuration !\n")
        retourne 1
    }

    si configuration.port == 0 {
        imprime("Le port est invalide !\n")
    }

    contexte.logueur = mon_impression_log

    signal(SIGINT, rappel_interruption);

    serveuse : Serveuse
    // @erreur
    _ := construit_serveuse(serveuse, configuration.port)

    // pour les gabarits
    ajoute_fichier(*serveuse.rendeuse_gabarit.catalogue, "accueil", "accueil.html")

    // pour les fichiers statiques
    ajoute_fichier(*serveuse.fichiers_statiques, "test", "test.js")

    ajoute_route(*serveuse, "/", répond_get_page_accueil, répond_post_page_accueil)

    démarre(serveuse)

    détruit_serveuse(*serveuse)

    retourne 0
}

mon_impression_log :: fonc (message: chaine, ident: chaine, mode: ModeLogage, données: *rien) -> rien
{
    imprime("%\n", message)
}

configure_compilation :: fonc () -> rien
{
    options := compilatrice_obtiens_options()
    options.niveau_optimisation = NiveauOptimisation.O3
    compilatrice_ajourne_options(options)
}

//#exécute configure_compilation()
