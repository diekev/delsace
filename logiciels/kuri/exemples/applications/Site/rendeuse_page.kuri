importe Fondation
importe GHTML
importe Réseau

charge "catalogue_fichier"
charge "requête"

RendeusePage :: struct {
    catalogue : CatalogueFichier
}

crée_réponse_fichier_gabarit_manquant :: fonc () -> RéponseRequête
{
    retourne RéponseRequête{
        code = CodeÉtatHTTP.INTERNAL_SERVER_ERROR,
        type_contenu = TypeContenu.TEXT_HTML,
        // À FAIRE : évite de copier la chaine
        contenu = copie_chaine("<p>La page du gabarit n'est pas trouvable !</p>")
    }
}

rends_page :: fonc (rendeuse_gabarit: *RendeusePage, nom_court: chaine, données: eini) -> RéponseRequête
{
    fichier := trouve_fichier(@rendeuse_gabarit.catalogue, nom_court)

    si fichier == nul {
        retourne crée_réponse_fichier_gabarit_manquant()
    }

    si fichier.données.taille == 0 {
        commence_fichier(fichier)
    }

    si fichier.succès == faux {
        retourne crée_réponse_fichier_gabarit_manquant()
    }

    // ----------------------------
    // Lexage du script

    lexeuse := construit_lexeuse(fichier.données)
    diffère { détruit_lexeuse(lexeuse) }

    lexeuse.performe_lexage()

    // ----------------------------
    // Syntaxage du script

    syntaxeuse := construit_syntaxeuse(lexeuse.lexèmes)
    diffère { détruit_assembleuse(syntaxeuse.assembleuse) }

    syntaxeuse.performe_syntaxage()

    // ----------------------------
    // Génération de la page
	racine := syntaxeuse.assembleuse.pile.haut()

    données_génération : DonnéesGénération
    données_génération.valeur = données

    enchaineuse : Enchaineuse
	initialise_enchaineuse(@enchaineuse)
    diffère { détruit_tampons(@enchaineuse) }

    erreur := génère_page(@données_génération, racine, @enchaineuse)

    si erreur != ErreurGénérationPage.AUCUNE {
        retourne crée_réponse_fichier_gabarit_manquant()
    }

    retourne RéponseRequête{
        code = CodeÉtatHTTP.OK,
        type_contenu = TypeContenu.TEXT_HTML,
        contenu = chaine_depuis_enchaineuse(@enchaineuse)
    }
}
