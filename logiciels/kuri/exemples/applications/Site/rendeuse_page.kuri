importe Fondation
importe GHTML
importe Réseau

charge "catalogue_fichier"
charge "requête"

RendeusePage :: struct {
    catalogue : CatalogueFichier
    cache_page : []PageGabarit
}

détruit_rendeuse :: fonc (rendeuse_gabarit: *RendeusePage) -> rien
{
    pour page dans rendeuse_gabarit.cache_page {
        détruit_page_gabarit(@page)
    }

    détruit_catalogue(@rendeuse_gabarit.catalogue)

    déloge rendeuse_gabarit.cache_page
}

PageGabarit :: struct {
    fichier : *FichierTexte
    lexeuse : Lexeuse
    syntaxeuse : Syntaxeuse
    racine : *NoeudSyntaxique
}

détruit_page_gabarit :: fonc (page : *PageGabarit) -> rien
{
    détruit_lexeuse(page.lexeuse)
    détruit_assembleuse(page.syntaxeuse.assembleuse)
}

trouve_dans_cache :: fonc (rendeuse_gabarit: *RendeusePage, nom_court: chaine) -> *PageGabarit
{
    pour page dans rendeuse_gabarit.cache_page {
        si page.fichier.nom_court == nom_court {
            retourne @page
        }
    }

    fichier := trouve_fichier(@rendeuse_gabarit.catalogue, nom_court)

    si fichier == nul {
        retourne nul
    }

    si fichier.données.taille == 0 {
        commence_fichier(fichier)
    }

    si fichier.succès == faux {
        retourne nul
    }

    page : PageGabarit
    page.fichier = fichier

    // ----------------------------
    // Lexage du script

    page.lexeuse = construit_lexeuse(fichier.données)
    page.lexeuse.performe_lexage()

    // ----------------------------
    // Syntaxage du script

    page.syntaxeuse = construit_syntaxeuse(page.lexeuse.lexèmes)
    page.syntaxeuse.performe_syntaxage()

    page.racine = page.syntaxeuse.assembleuse.pile.haut()

    tableau_ajoute(@rendeuse_gabarit.cache_page, page)

    retourne @rendeuse_gabarit.cache_page[rendeuse_gabarit.cache_page.taille - 1]
}

crée_réponse_fichier_gabarit_manquant :: fonc () -> RéponseRequête
{
    retourne RéponseRequête(
        code = CodeÉtatHTTP.INTERNAL_SERVER_ERROR,
        type_contenu = TypeContenu.TEXT_HTML,
        // À FAIRE : évite de copier la chaine
        contenu = copie_chaine("<p>La page du gabarit n'est pas trouvable !</p>")
    )
}

rends_page :: fonc (rendeuse_gabarit: *RendeusePage, nom_court: chaine, données: eini) -> RéponseRequête
{
    //temps_présent := compte_ticks_microsecondes()
    //diffère { imprime_log("", "Durée rendu gabarit : %µs", compte_ticks_microsecondes() - temps_présent) }

    page := trouve_dans_cache(rendeuse_gabarit, nom_court)

    si page == nul {
        retourne crée_réponse_fichier_gabarit_manquant()
    }

    données_génération : DonnéesGénération
    données_génération.valeur = données

    enchaineuse : Enchaineuse
	initialise_enchaineuse(@enchaineuse)
    diffère { détruit_tampons(@enchaineuse) }

    erreur_ := génère_page(@données_génération, page.racine, @enchaineuse)

    si erreur_ != ErreurGénérationPage.AUCUNE {
        retourne crée_réponse_fichier_gabarit_manquant()
    }

    retourne RéponseRequête(
        code = CodeÉtatHTTP.OK,
        type_contenu = TypeContenu.TEXT_HTML,
        contenu = chaine_depuis_enchaineuse(@enchaineuse)
    )
}
