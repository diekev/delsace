importe Fondation

TypeDonnées :: énum z32 {
	NOMBRE_ENTIER
	NOMBRE_DÉCIMAL
	DATE
	HEURE
	HEUREDATE
	CHAINE
}

Colonne :: struct {
	nom : chaine
	type : TypeDonnées
	données : []z32
}

redimensionne :: fonc(données : &[]z32) -> rien
{
	reloge données : [données.taille + 1]z32
}

Schéma :: struct {
	nom : chaine
	colonnes : []Colonne
	lignes : z64
}

redimensionne_schéma :: fonc(dyn schéma : &Schéma) -> rien
{
	schéma.lignes += 1

	pour colonne dans schéma.colonnes {
		redimensionne(colonne.données)
	}
}

trouve_colonne :: fonc(dyn schéma : &Schéma, nom : chaine) -> *Colonne
{
	pour colonne dans schéma.colonnes {
		si colonne.nom == nom {
			retourne @colonne
		}
	}

	retourne nul
}

ajoute_colonne :: fonc(dyn schéma : &Schéma, nom : chaine, type : TypeDonnées) -> rien
{
	colonne_existante := schéma.trouve_colonne(nom)

	si colonne_existante != nul {
		retourne
	}

	colonne := Colonne{ nom = nom, type = type }
	tableau_ajoute(@schéma.colonnes, colonne)
}

Noeud :: struct {
	schéma : *Schéma

	id_ligne : z64

	id : z64

	// première relation du noeud
	relation : z64
}

Relation :: struct {
	schéma : *Schéma

	id_ligne : z64

	id : z64
	noeud_de : z64
	noeud_vers : z64

	// relation suivante
	relation_suivante : z64
}

Arachné :: struct {
	schémas : []Schéma
	noeuds : []Noeud
	relations : []Relation
}

TypeErreur :: énum z32 {
	AUCUNE
	SCHÉMA_EXISTANT
	SCHÉMA_INEXISTANT
}

trouve_schéma :: fonc(arachné : &Arachné, nom : chaine) -> *Schéma
{
	pour schéma dans arachné.schémas {
		si schéma.nom == nom {
			retourne @schéma
		}
	}

	retourne nul
}

crée_schéma :: fonc(arachné : &Arachné, nom : chaine, colonnes : []Colonne) -> TypeErreur
{
	schéma_existant := arachné.trouve_schéma(nom)

	si schéma_existant != nul {
		retourne TypeErreur.SCHÉMA_EXISTANT
	}

	schéma := Schéma{ nom = nom, colonnes = colonnes }
	tableau_ajoute(@arachné.schémas, schéma)

	retourne TypeErreur.AUCUNE
}

crée_noeud :: fonc(dyn arachné : &Arachné, nom_schéma : chaine) -> TypeErreur
{
	schéma := arachné.trouve_schéma(nom_schéma)

	si schéma == nul {
		retourne TypeErreur.SCHÉMA_INEXISTANT
	}

	noeud := Noeud{ schéma = schéma, id = arachné.noeuds.taille, id_ligne = schéma.lignes }
	tableau_ajoute(@arachné.noeuds, noeud)

	réf := mémoire(schéma)
	redimensionne_schéma(réf)

	retourne TypeErreur.AUCUNE
}

crée_relation :: fonc(dyn arachné : &Arachné, nom_schéma : chaine) -> TypeErreur
{
	schéma := arachné.trouve_schéma(nom_schéma)

	si schéma == nul {
		retourne TypeErreur.SCHÉMA_INEXISTANT
	}

	relation := Relation{ schéma = schéma, id = arachné.relations.taille, id_ligne = schéma.lignes }
	tableau_ajoute(@arachné.relations, relation)

	réf := mémoire(schéma)
	redimensionne_schéma(réf)

	retourne TypeErreur.AUCUNE
}

connecte_relation :: fonc(arachné : &Arachné, dyn relation : &Relation, noeud1 : &Noeud, noeud2 : &Noeud) -> rien
{
	relation.noeud_de = noeud1.id
	relation.noeud_vers = noeud2.id

	// connecte les relations
	//noeud1.relation_finale.relation_suivante = relation.id
}

ajourne_valeur_noeud :: fonc(dyn noeud : &Noeud, nom_colonne : chaine, valeur : z32) -> rien
{
	// trouve le noeud
	// trouve la colonne à modifier
	// trouve la place où insérer la valeur

	dyn schéma := noeud.schéma

	pour colonne dans schéma.colonnes {
		si nom_colonne == colonne.nom {
			colonne.données[noeud.id_ligne] = valeur
		}
	}

	retourne
}

trouve_valeur_noeud :: fonc(noeud : &Noeud, nom_colonne : chaine) -> z32
{
	schéma := noeud.schéma

	pour colonne dans schéma.colonnes {
		si nom_colonne == colonne.nom {
			retourne colonne.données[noeud.id_ligne]
		}
	}

	retourne 0
}

trouve_noeud :: fonc(arachné : &Arachné, nom_colonne : chaine, valeur : z32) -> *Noeud
{
	retourne nul
}

// CRÉE TYPE nom ()
// CHERCHE (n : TYPE {})
// CRÉE NOEUD
principale :: fonc(args : []*z8) -> z32
{
	dyn arachné : Arachné

	colonne := Colonne{ nom="nom", type = TypeDonnées.NOMBRE_ENTIER }
	colonnes := [colonne]
	arachné.crée_schéma("FONCTION", colonnes)

	schéma := arachné.trouve_schéma("FONCTION")
	//schéma.ajoute_colonne("nom", TypeDonnées.NOMBRE_ENTIER)

	//arachné.montre_schémas()

	arachné.crée_noeud("FONCTION")

	//arachné.montre_noeuds("FONCTION")

	//noeud := arachné.trouve_noeud("FONCTION", "nom", 5)

	retourne 0
}
