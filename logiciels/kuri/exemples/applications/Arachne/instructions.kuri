charge "lexage"

GenreInstruction :: énum z32 {
    CRÉE_NOEUD
    SÉLECTIONNE_NOEUD
}

Instruction :: struct {
    genre : GenreInstruction
}

Attr :: struct {
    nom: chaine
    valeur: chaine
}

InstructionCréationNoeud :: struct {
    empl base : Instruction

    attributs: []Attr

    genre = GenreInstruction.CRÉE_NOEUD
}

InstructionSélectionneNoeud :: struct {
    empl base : Instruction

    nom : chaine
    expr : *Expression

    genre = GenreInstruction.SÉLECTIONNE_NOEUD
}

détruit_instruction :: fonc (inst: *Instruction)
{
    discr inst.genre {
        CRÉE_NOEUD {
            inst_crée := inst comme *InstructionCréationNoeud
            déloge inst_crée.attributs
            déloge inst_crée
        }
        SÉLECTIONNE_NOEUD {
            inst_sélectionne := inst comme *InstructionSélectionneNoeud
            détruit_expression(inst_sélectionne.expr)
            déloge inst_sélectionne
        }
    }
}

GenreExpression :: énum {
    Invalide
    RéférenceDéclaration
    AccèsMembre
    OpComparaison
}

Expression :: struct {
    genre : GenreExpression
}

ExpressionRéférenceDéclaration :: struct {
    empl base : Expression

    genre = GenreExpression.RéférenceDéclaration

    chn : chaine
}

ExpressionBinaire :: struct {
    empl base : Expression

    gauche : *Expression
    droite : *Expression
}

détruit_expression :: fonc (expr: *Expression)
{
    discr expr.genre {
        RéférenceDéclaration {
            ref := expr comme *ExpressionRéférenceDéclaration
            déloge ref
        }
        AccèsMembre,
        OpComparaison {
            expr_bin := expr comme *ExpressionBinaire
            détruit_expression(expr_bin.gauche)
            détruit_expression(expr_bin.droite)
            déloge expr_bin
        }
        Invalide {
            déloge expr
        }
    }
}
