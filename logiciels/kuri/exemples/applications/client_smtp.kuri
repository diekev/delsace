importe Fondation
importe GlibC
importe Réseau
importe SysFichier

//https://tools.ietf.org/html/rfc5321#page-32
//https://fr.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol
/*

S: 220 smtp.xxxx.xxxx SMTP Ready
C: HELO client
S: 250-smtp.xxxx.xxxx
S: 250-PIPELINING
S: 250 8BITMIME
C: MAIL FROM: <auteur@yyyy.yyyy>
S: 250 Sender ok
C: RCPT TO: <destinataire@xxxx.xxxx>
S: 250 Recipient ok.
C: DATA
S: 354 Enter mail, end with "." on a line by itself
C: Subject: Test
C:
C: Corps du texte
C: .
S: 250 Ok
C: QUIT
S: 221 Closing connection
Connection closed by foreign host.

*/

CodeRetour :: énum z32 {
	// Informationnel
	SERVEUR_NE_PEUT_SE_CONNECTER :: 101
	CONNEXION_REFUSÉE            :: 111

	// Succès
	MESSAGE :: 200
	RÉPONSE_COMMANDE_HELP :: 214
	SERVEUR_PRÊT :: 220
	FERMETURE_CANAL_TRANSMISSION :: 221
	ACTION_REQUISE_COMPLÉTÉE :: 250
	UTILISATION_NON_LOCAL_DEVRA_PROJETÉ :: 251
	NE_PEUT_VÉRIFIER_UTILISATEUR_MAIS_DELIVRE_QUAND_MÊME :: 252

	// Redirection
	COMMENCE_ENTRÉE_COURRIEL :: 354

	// Persistent transient failure
	PROBLÈME_CONNEXION_TIMEOUT :: 420
	SERVICE_NON_DISPONIBLE_À_CAUSE_CONNEXION :: 421
	BOÎTE_PLEINE :: 422
	MANQUE_ESPACE_DISQUE :: 431
	FILE_COURRIEL_DESTINATAIRE_EST_STOPPÉE :: 432
	SERVEUR_DESTINATAIRE_NE_RÉPOND_PAS :: 441
	CONNEXION_ABONDONNÉE_DURANT_TRANSMISSION :: 442
	COMPTE_HOP_EXCÉDÉ_POUR_LE_MESSAGE :: 446
	MESSAGE_TIMOUT :: 447
	ERREUR_ROUTAGE :: 449
	BOÎTE_COURRIEL_INDISPONIBLE :: 450
	ERREUR_LOCAL_LORS_DU_PROCÈS :: 451
	TROP_DE_COURRIELS_ENVOYÉS_OU_TROP_DE_DESTINATAIRES :: 452
	ERREUR_INTERNE :: 471

	// Erreurs permanentes
	ERREUR_DE_SYNTAXE :: 500
	ERREUR_DE_SYNTAXE_PARAMÈTRE_OU_ARGUMENT :: 501
	MAUVAISE_SÉQUENCE_DE_COMMANDE_OU_NON_AUTHENTIFIÉ :: 503
	PARAMÈTRE_DE_COMMANDE_NON_IMPLÉMENTÉ :: 504
	MAUVAISE_ADRESSE_COURRIEL :: 510
	MAUVAISE_ADRESSE_COURRIEL_ :: 511
	DNS_SERVEUR_DU_DESTINATAIRE_INTROUVABLE :: 512
	TYPE_ADRESSE_INCORRECT :: 513
	TAILE_DU_COURRIEL_TROP_GRANDE :: 523
	PROBLÈME_AUTHENTIFICATION :: 530
	DESTINATAIRE_REJETTE_LE_MESSAGE :: 541
	ADRESSE_COURRIEL_INEXISTANTE :: 550
	UTILISATEUR_NON_LOCAL_OU_ADRESSE_INVALIDE :: 551
	ALLOCATION_STOCKAGE_EXCÉDÉE :: 552
	NOM_BOITE_COURRIEL_INVALIDE :: 553
	TRANSACTION_ÉCHOUÉE :: 554
}

serveuse_envoie :: fonc (message: chaine) -> rien
{
	imprime("S > %", message)
}

INTERRUTION := faux
PRISE_SERVEUSE := -1

accepte :: fonc (serveuse: *Fichier) -> Fichier
{
    adresse : sockaddr_in
	sin_size := taille_de(sockaddr_in) comme n32

    prise := accept(serveuse.desc, *adresse comme *sockaddr, *sin_size)

    cliente : Fichier
    cliente.desc = prise

	// @erreur
    si prise == -1 {
        retourne cliente
    }

    retourne cliente
}

démarre :: fonc(serveuse : *Fichier) -> rien
{
    boucle {
        cliente := accepte(serveuse)

        si INTERRUTION {
            arrête
        }

		// @Redondant
        si cliente.desc == -1 {
            perror("accept".pointeur)
            continue
        }

        procède_requête(serveuse, *cliente)
    }
}

ÉtatServeuse :: énum {
	PingDébut
	AttendHelo
	RequiersLogin
	RequiesNomUtilisateur
	RequiersMotDePasse
	RequiersCorrespondants
	MessageAttendu
	MessageReçu
}

procède_requête :: fonc (serveuse: *Fichier, cliente: *Fichier) -> rien
{
	imprime("reçu connexion... desc : %\n", cliente.desc)
	état := ÉtatServeuse.PingDébut

	boucle {
		// À FAIRE : il faut pouvoir retourner de lis_tout si nous n'avons pas d'entrée
		instruction := tente cliente.lis_tout() piège err {
			arrête
		}

		imprime("instruction : %\n", instruction)

		diffère { déloge instruction }

		si instruction == "" && état == ÉtatServeuse.PingDébut {
			état = ÉtatServeuse.AttendHelo
			continue
		}
		sinon {
			arrête
		}

		si instruction == "EHLO\r\n" && état == ÉtatServeuse.AttendHelo {
			état = ÉtatServeuse.RequiersLogin
			_ := cliente.écris("250 ok\r\n")
			continue
		}
		sinon {
			_ := cliente.écris("503 bad sequence of commands\r\n")
			continue
		}

		si instruction == "AUTH LOGIN\r\n" && état == ÉtatServeuse.RequiersLogin {
			état = ÉtatServeuse.RequiesNomUtilisateur
			_ := cliente.écris("334 VXNlcm5hbWU6\r\n")
			continue
		}
		sinon {
			_ := cliente.écris("530 5.7.1 Client was not authenticated\r\n")
			continue
		}

		si état == ÉtatServeuse.RequiesNomUtilisateur {
			état = ÉtatServeuse.RequiersMotDePasse
			_ := cliente.écris("334 UGFzc3dvcmQ6\r\n")
			continue
		}
		sinon {
			_ := cliente.écris("530 5.7.1 Client was not authenticated\r\n")
			continue
		}

		si état == ÉtatServeuse.RequiersMotDePasse {
			état = ÉtatServeuse.RequiersCorrespondants
			_ := cliente.écris("235 2.7.0 Authentication successful\r\n")
			continue
		}
		sinon {
			_ := cliente.écris("530 5.7.1 Client was not authenticated\r\n")
			continue
		}

		si état == ÉtatServeuse.RequiersCorrespondants {
			si instruction.commence_par("MAIL FROM") {
				_ := cliente.écris("250 2.1.0 Ok\r\n")
			}
			sinon si instruction.commence_par("RCPT TO") {
				_ := cliente.écris("250 2.1.0 Ok\r\n")
			}
			sinon {
				_ := cliente.écris("530 5.7.1 Client was not authenticated\r\n")
			}

			continue
		}

		si instruction == "DATA\r\n" {
			état = ÉtatServeuse.MessageAttendu
			_ := cliente.écris("354 End data with <CR><LF>.<CR><LF>\r\n")
			continue
		}

		si état == ÉtatServeuse.MessageAttendu {
			// accumule le message
			si instruction.fini_par("\r\n.\r\n") {
				état = ÉtatServeuse.MessageReçu
				_ := cliente.écris("250 2.0.0 Ok: queued as XXXXXXX\r\n")
			}

			continue
		}

		si état == ÉtatServeuse.MessageReçu {
			si instruction != "QUIT\r\n" {
				_ := cliente.écris("503 bad sequence of commands\r\n")
				continue
			}

			_ := cliente.écris("221 Closing connection\r\n")
			arrête
		}
	}

	_ := tente cliente.ferme() piège nonatteignable
}

rappel_interruption :: fonc (numéro_signal: z32) -> rien #nulctx
{
    nonsûr {
        INTERRUTION = vrai
    }

    // débloque la prise pour pouvoir interrompre la boucle
    flags := fcntl(PRISE_SERVEUSE, F_GETFL, 0);
    // @erreur
    _ := fcntl(PRISE_SERVEUSE, F_SETFL, flags | O_NONBLOCK);
}

principale :: fonc () -> z32
{
	serveuse := tente ouvre_connexion_serveur_pour_écoute(5005, 10) piège err {
		imprime("erreur lors de la création de la prise : %\n", err)
		retourne 1
	}

	enable := 1
    si setsockopt(serveuse.desc, SOL_SOCKET, SO_REUSEADDR, *enable, taille_de(z32)) < 0 {
        // @erreur
        _ := close(serveuse.desc)
        retourne 1
    }

    signal(SIGINT, rappel_interruption)

	PRISE_SERVEUSE = serveuse.desc

	diffère { _ := tente ferme(*serveuse) piège nonatteignable }

	démarre(*serveuse)

	retourne 0
/*
	nouveau_contexte := contexte
    nouveau_contexte.allocatrice = __stockage_temporaire

	serveuse_envoie("220 smtp.delsace.fr SMTP Ready\n")

	enchaineuse : Enchaineuse
	initialise_enchaineuse(@enchaineuse)
	diffère { détruit_tampons(@enchaineuse) }

	reçu_helo := faux
	reçu_envoyeur := faux
	reçu_destinataire := faux
	attente_message := faux

	es := entrée_standarde()

	boucle {
		imprime("C > ")

		entrée : chaine
    	pousse_contexte nouveau_contexte {
			entrée = es.lis_ligne()
    	}

		si entrée.commence_par("HELO") {
			reçu_helo = vrai
			serveuse_envoie("250 smtp.delsace.fr, heureux de vous rencontrer\r\n")
			//serveuse_envoie("250 PIPELINING\r\n")
			//serveuse_envoie("250 8BITMIME\r\n")
		}
		sinon si entrée.commence_par("MAIL FROM") {
			reçu_envoyeur = vrai
			serveuse_envoie("250 Sender Ok\r\n")
		}
		sinon si entrée.commence_par("RCPT TO:") {
			reçu_destinataire = vrai
			serveuse_envoie("250 Recipient ok\r\n")
		}
		sinon si entrée.commence_par("DATA") {
			si !reçu_envoyeur || !reçu_destinataire {
				serveuse_envoie("503 Mauvaise suite de commande\r\n")
			}
			sinon {
				serveuse_envoie("354 Entrez courriel, terminez par <CR><LF>.<CR><LF>\r\n")

				attente_message = vrai
			}
		}
		sinon si entrée.commence_par("QUIT") {
			serveuse_envoie("221 Au revoir\r\n")
			arrête
		}
		sinon {
			si attente_message {
				// accumule le mail
				si entrée == ".\r\n" || entrée == ".\n" {
					// fin du mail
					id := 5
					imprime("S > 250 Ok, enfiler comme %\r\n", id)
				}
				sinon {
					ajoute_au_tampon(@enchaineuse, entrée)
				}
			}
			sinon {
				serveuse_envoie("503 Mauvaise suite de commande\r\n")
			}
		}
	}

	courriel := chaine_depuis_enchaineuse(@enchaineuse)
	diffère { déloge courriel; }

	imprime("\nEnvoie du mail :\n%\n", courriel)

	retourne 0
*/
}
