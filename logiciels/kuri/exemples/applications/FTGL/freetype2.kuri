// Interface pour la bibliothèque FreeType 2

#inclus "freetype2/ft2build.h"
#inclus "freetype2/freetype/freetype.h"
#inclus "freetype2/freetype/ftstroke.h"
#inclus "freetype2/freetype/ftlcdfil.h"

#bib "freetype"

// ***********************************************************************
FT_MemoryRec_ :: struct externe {
	user : *rien
	alloc : fonc(*FT_MemoryRec_, z64)(*rien)
	free : fonc(*FT_MemoryRec_, *rien)(rien)
	realloc : fonc(*FT_MemoryRec_, z64, z64, *rien)(*rien)
}

// FT_Memory :: *FT_MemoryRec_

// ***********************************************************************
FT_StreamDesc :: union nonsûr {
	value : z64
	pointer : *rien
}

// ***********************************************************************
FT_StreamRec_ :: struct externe {
	base : *n8
	size : n64
	pos : n64
	descriptor : FT_StreamDesc
	pathname : FT_StreamDesc
	read : fonc(*FT_StreamRec_, n64, *n8, n64)(n64)
	close : fonc(*FT_StreamRec_)(rien)
	memory : *FT_MemoryRec_
	cursor : *n8
	limit : *n8
}

// FT_Stream :: *FT_StreamRec_

// **********************************************************************
FT_Vector :: struct externe {
	x : z64
	y : z64
}

// **********************************************************************
FT_BBox :: struct externe {
	xMin : z64
	yMin : z64
	xMax : z64
	yMax : z64
}

// **********************************************************************
FT_Pixel_Mode :: énum : n32 {
	FT_PIXEL_MODE_NONE := 0
	FT_PIXEL_MODE_MONO
	FT_PIXEL_MODE_GRAY
	FT_PIXEL_MODE_GRAY2
	FT_PIXEL_MODE_GRAY4
	FT_PIXEL_MODE_LCD
	FT_PIXEL_MODE_LCD_V
	FT_PIXEL_MODE_BGRA
    // do not remove
	FT_PIXEL_MODE_MAX
}

// **********************************************************************
FT_Bitmap :: struct externe {
	rows : n32
	width : n32
	pitch : z32
	buffer : *n8
	num_grays : n16
	pixel_mode : n8
	palette_mode : n8
	palette : *rien
}

// **********************************************************************
FT_Outline :: struct externe {
    // number of contours in glyph
	n_contours : z16
    // number of points in the glyph
	n_points : z16
    // the outline's points
	points : *FT_Vector
    // the points flags
	tags : *z8
    // the contour end points
	contours : *z16
    // outline masks
	flags : z32
}

// **********************************************************************
FT_Outline_Funcs :: struct externe {
	move_to : fonc(*FT_Vector, *rien)(z32)
	line_to : fonc(*FT_Vector, *rien)(z32)
	conic_to : fonc(*FT_Vector, *FT_Vector, *rien)(z32)
	cubic_to : fonc(*FT_Vector, *FT_Vector, *FT_Vector, *rien)(z32)
	shift : z32
	delta : z64
}

// **********************************************************************
FT_Glyph_Format :: énum : n32 {
	FT_GLYPH_FORMAT_NONE      := 0
    FT_GLYPH_FORMAT_COMPOSITE := 1668246896
    FT_GLYPH_FORMAT_BITMAP    := 1651078259
    FT_GLYPH_FORMAT_OUTLINE   := 1869968492
    FT_GLYPH_FORMAT_PLOTTER   := 1886154612
}

// **********************************************************************
FT_Span :: struct externe {
	x : z16
	len : n16
	coverage : n8
}

// **********************************************************************
FT_Raster_Params :: struct externe {
	target : *FT_Bitmap
	source : *rien
	flags : z32
	gray_spans : fonc(z32, z32, *FT_Span, *rien)(rien)
    // unused
	black_spans : fonc(z32, z32, *FT_Span, *rien)(rien)
    // unused
	bit_test : fonc(z32, z32, *rien)(z32)
    // unused
	bit_set : fonc(z32, z32, *rien)(z32)
	user : *rien
	clip_box : FT_BBox
}

// **********************************************************************
FT_Raster_Rec_ :: struct externe;

FT_Raster_Funcs :: struct externe {
	glyph_format : FT_Glyph_Format
	raster_new : fonc(*rien, **FT_Raster_Rec_)(z32)
	raster_reset : fonc(*FT_Raster_Rec_, *n8, n64)(rien)
	raster_set_mode : fonc(*FT_Raster_Rec_, n64, *rien)(z32)
	raster_render : fonc(*FT_Raster_Rec_, *FT_Raster_Params)(z32)
	raster_done : fonc(*FT_Raster_Rec_)(rien)
}

// **********************************************************************
FT_UnitVector :: struct externe {
	x : z16
	y : z16
}

// **********************************************************************
FT_Matrix_ :: struct externe {
	xx : z64
	xy : z64
	yx : z64
	yy : z64
}

// **********************************************************************
FT_Data_ :: struct externe {
	pointer : *n8
	length : z32
}

// **********************************************************************
FT_Generic :: struct externe {
	data : *rien
	finalizer : fonc(*rien)(rien)
}

// **********************************************************************
FT_ListNodeRec_ :: struct externe {
	prev : *FT_ListNodeRec_
	next : *FT_ListNodeRec_
	data : *rien
}

// **********************************************************************
FT_ListRec_ :: struct externe {
	head : *FT_ListNodeRec_
	tail : *FT_ListNodeRec_
}

anonyme5 :: énum : n32 {
    FT_Mod_Err_Base      :=  0x000
    FT_Mod_Err_Autofit   :=  0x100
    FT_Mod_Err_BDF       :=  0x200
    FT_Mod_Err_Bzip2     :=  0x300
    FT_Mod_Err_Cache     :=  0x400
    FT_Mod_Err_CFF       :=  0x500
    FT_Mod_Err_CID       :=  0x600
    FT_Mod_Err_Gzip      :=  0x700
    FT_Mod_Err_LZW       :=  0x800
    FT_Mod_Err_OTvalid   :=  0x900
    FT_Mod_Err_PCF       :=  0xA00
    FT_Mod_Err_PFR       :=  0xB00
    FT_Mod_Err_PSaux     :=  0xC00
    FT_Mod_Err_PShinter  :=  0xD00
    FT_Mod_Err_PSnames   :=  0xE00
    FT_Mod_Err_Raster    :=  0xF00
    FT_Mod_Err_SFNT      := 0x1000
    FT_Mod_Err_Smooth    := 0x1100
    FT_Mod_Err_TrueType  := 0x1200
    FT_Mod_Err_Type1     := 0x1300
    FT_Mod_Err_Type42    := 0x1400
    FT_Mod_Err_Winfonts  := 0x1500
    FT_Mod_Err_GXvalid   := 0x1600
	FT_Mod_Err_Max
}

anonyme6 :: énum : n32 {
	FT_Err_Ok := 0
	FT_Err_Cannot_Open_Resource := 1
	FT_Err_Unknown_File_Format := 2
	FT_Err_Invalid_File_Format := 3
	FT_Err_Invalid_Version := 4
	FT_Err_Lower_Module_Version := 5
	FT_Err_Invalid_Argument := 6
	FT_Err_Unimplemented_Feature := 7
	FT_Err_Invalid_Table := 8
	FT_Err_Invalid_Offset := 9
	FT_Err_Array_Too_Large := 10
	FT_Err_Missing_Module := 11
	FT_Err_Missing_Property := 12
	FT_Err_Invalid_Glyph_Index := 16
	FT_Err_Invalid_Character_Code := 17
	FT_Err_Invalid_Glyph_Format := 18
	FT_Err_Cannot_Render_Glyph := 19
	FT_Err_Invalid_Outline := 20
	FT_Err_Invalid_Composite := 21
	FT_Err_Too_Many_Hints := 22
	FT_Err_Invalid_Pixel_Size := 23
	FT_Err_Invalid_Handle := 32
	FT_Err_Invalid_Library_Handle := 33
	FT_Err_Invalid_Driver_Handle := 34
	FT_Err_Invalid_Face_Handle := 35
	FT_Err_Invalid_Size_Handle := 36
	FT_Err_Invalid_Slot_Handle := 37
	FT_Err_Invalid_CharMap_Handle := 38
	FT_Err_Invalid_Cache_Handle := 39
	FT_Err_Invalid_Stream_Handle := 40
	FT_Err_Too_Many_Drivers := 48
	FT_Err_Too_Many_Extensions := 49
	FT_Err_Out_Of_Memory := 64
	FT_Err_Unlisted_Object := 65
	FT_Err_Cannot_Open_Stream := 81
	FT_Err_Invalid_Stream_Seek := 82
	FT_Err_Invalid_Stream_Skip := 83
	FT_Err_Invalid_Stream_Read := 84
	FT_Err_Invalid_Stream_Operation := 85
	FT_Err_Invalid_Frame_Operation := 86
	FT_Err_Nested_Frame_Access := 87
	FT_Err_Invalid_Frame_Read := 88
	FT_Err_Raster_Uninitialized := 96
	FT_Err_Raster_Corrupted := 97
	FT_Err_Raster_Overflow := 98
	FT_Err_Raster_Negative_Height := 99
	FT_Err_Too_Many_Caches := 112
	FT_Err_Invalid_Opcode := 128
	FT_Err_Too_Few_Arguments := 129
	FT_Err_Stack_Overflow := 130
	FT_Err_Code_Overflow := 131
	FT_Err_Bad_Argument := 132
	FT_Err_Divide_By_Zero := 133
	FT_Err_Invalid_Reference := 134
	FT_Err_Debug_OpCode := 135
	FT_Err_ENDF_In_Exec_Stream := 136
	FT_Err_Nested_DEFS := 137
	FT_Err_Invalid_CodeRange := 138
	FT_Err_Execution_Too_Long := 139
	FT_Err_Too_Many_Function_Defs := 140
	FT_Err_Too_Many_Instruction_Defs := 141
	FT_Err_Table_Missing := 142
	FT_Err_Horiz_Header_Missing := 143
	FT_Err_Locations_Missing := 144
	FT_Err_Name_Table_Missing := 145
	FT_Err_CMap_Table_Missing := 146
	FT_Err_Hmtx_Table_Missing := 147
	FT_Err_Post_Table_Missing := 148
	FT_Err_Invalid_Horiz_Metrics := 149
	FT_Err_Invalid_CharMap_Format := 150
	FT_Err_Invalid_PPem := 151
	FT_Err_Invalid_Vert_Metrics := 152
	FT_Err_Could_Not_Find_Context := 153
	FT_Err_Invalid_Post_Table_Format := 154
	FT_Err_Invalid_Post_Table := 155
	FT_Err_DEF_In_Glyf_Bytecode := 156
	FT_Err_Missing_Bitmap := 157
	FT_Err_Syntax_Error := 160
	FT_Err_Stack_Underflow := 161
	FT_Err_Ignore := 162
	FT_Err_No_Unicode_Glyph_Name := 163
	FT_Err_Glyph_Too_Big := 164
	FT_Err_Missing_Startfont_Field := 176
	FT_Err_Missing_Font_Field := 177
	FT_Err_Missing_Size_Field := 178
	FT_Err_Missing_Fontboundingbox_Field := 179
	FT_Err_Missing_Chars_Field := 180
	FT_Err_Missing_Startchar_Field := 181
	FT_Err_Missing_Encoding_Field := 182
	FT_Err_Missing_Bbx_Field := 183
	FT_Err_Bbx_Too_Big := 184
	FT_Err_Corrupted_Font_Header := 185
	FT_Err_Corrupted_Font_Glyphs := 186
	FT_Err_Max
}

// **********************************************************************
FT_Glyph_Metrics_ :: struct externe {
	width : z64
	height : z64
	horiBearingX : z64
	horiBearingY : z64
	horiAdvance : z64
	vertBearingX : z64
	vertBearingY : z64
	vertAdvance : z64
}

// **********************************************************************
FT_BitmapSize_ :: struct externe {
	height : z16
	width : z16
	size : z64
	x_ppem : z64
	y_ppem : z64
}

// **********************************************************************
FT_Encoding :: énum : n32 {
    FT_ENCODING_NONE := 0
    FT_ENCODING_MS_SYMBOL := 1937337698
    FT_ENCODING_UNICODE := 1970170211
    FT_ENCODING_SJIS := 1936353651
    FT_ENCODING_PRC := 1734484000
    FT_ENCODING_BIG5 := 1651074869
    FT_ENCODING_WANSUNG := 2002873971
    FT_ENCODING_JOHAB := 1785686113
    // for backward compatibility
	FT_ENCODING_GB2312 := FT_ENCODING_PRC
    // for backward compatibility
	FT_ENCODING_MS_SJIS := FT_ENCODING_SJIS
    // for backward compatibility
	FT_ENCODING_MS_GB2312 := FT_ENCODING_PRC
    // for backward compatibility
	FT_ENCODING_MS_BIG5 := FT_ENCODING_BIG5
    // for backward compatibility
	FT_ENCODING_MS_WANSUNG := FT_ENCODING_WANSUNG
    // for backward compatibility
	FT_ENCODING_MS_JOHAB := FT_ENCODING_JOHAB
    FT_ENCODING_ADOBE_STANDARD := 1094995778
    FT_ENCODING_ADOBE_EXPERT := 1094992453
    FT_ENCODING_ADOBE_CUSTOM := 1094992451
    FT_ENCODING_ADOBE_LATIN_1 := 1818326065
    FT_ENCODING_OLD_LATIN_2 := 1818326066
    FT_ENCODING_APPLE_ROMAN := 1634889070
}

// **********************************************************************
// À FAIRE: dépendance cyclique entre type
FT_CharMapRec_ :: struct externe {
	face : FT_Face
	encoding : FT_Encoding
	platform_id : n16
	encoding_id : n16
}

// **********************************************************************
FT_FaceRec_ :: struct externe {
	num_faces : z64
	face_index : z64
	face_flags : z64
	style_flags : z64
	num_glyphs : z64
	family_name : *z8
	style_name : *z8
	num_fixed_sizes : z32
	available_sizes : *FT_BitmapSize
	num_charmaps : z32
	charmaps : *FT_CharMap
	generic : FT_Generic
    // // The following member variables (down to `underline_thickness')
	bbox : FT_BBox
	units_per_EM : n16
	ascender : z16
	descender : z16
	height : z16
	max_advance_width : z16
	max_advance_height : z16
	underline_position : z16
	underline_thickness : z16
	glyph : FT_GlyphSlot
	size : FT_Size
	charmap : FT_CharMap
    // begin
	driver : FT_Driver
	memory : *FT_MemoryRec_
	stream : FT_Stream
	sizes_list : FT_ListRec
    // face-specific auto-hinter data
	autohint : FT_Generic
    // unused
	extensions : *rien
	internal : FT_Face_Internal
}

// **********************************************************************
FT_Size_Metrics_ :: struct externe {
    // horizontal pixels per EM
	x_ppem : n16
    // vertical pixels per EM
	y_ppem : n16
    // scaling values used to convert font
	x_scale : z64
    // units to 26.6 fractional pixels
	y_scale : z64
    // ascender in 26.6 frac. pixels
	ascender : z64
    // descender in 26.6 frac. pixels
	descender : z64
    // text height in 26.6 frac. pixels
	height : z64
    // max horizontal advance, in 26.6 pixels
	max_advance : z64
}

// **********************************************************************
FT_SizeRec_ :: struct externe {
    // parent face object
	face : FT_Face
    // generic pointer for client uses
	generic : FT_Generic
    // size metrics
	metrics : FT_Size_Metrics
	internal : FT_Size_Internal
}

// **********************************************************************
FT_GlyphSlotRec_ :: struct externe {
	library : FT_Library
	face : FT_Face
	next : FT_GlyphSlot
    // retained for binary compatibility
	reserved : n32
	generic : FT_Generic
	metrics : FT_Glyph_Metrics
	linearHoriAdvance : z64
	linearVertAdvance : z64
	advance : FT_Vector
	format : FT_Glyph_Format
	bitmap : FT_Bitmap
	bitmap_left : z32
	bitmap_top : z32
	outline : FT_Outline
	num_subglyphs : n32
	subglyphs : FT_SubGlyph
	control_data : *rien
	control_len : z64
	lsb_delta : z64
	rsb_delta : z64
	other : *rien
	internal : FT_Slot_Internal
}

// **********************************************************************
FT_Init_FreeType :: fonc externe (alibrary : *FT_Library) -> z32
// **********************************************************************
FT_Done_FreeType :: fonc externe (library : FT_Library) -> z32
// **********************************************************************
FT_Parameter_ :: struct externe {
	tag : n64
	data : *rien
}

// **********************************************************************
FT_Open_Args_ :: struct externe {
	flags : n32
	memory_base : *n8
	memory_size : z64
	pathname : *z8
	stream : FT_Stream
	driver : FT_Module
	num_params : z32
	params : *FT_Parameter
}

// **********************************************************************
FT_New_Face :: fonc externe (library : FT_Library, filepathname : *z8, face_index : z64, aface : *FT_Face) -> z32
// **********************************************************************
FT_New_Memory_Face :: fonc externe (library : FT_Library, file_base : *n8, file_size : z64, face_index : z64, aface : *FT_Face) -> z32
// **********************************************************************
FT_Open_Face :: fonc externe (library : FT_Library, args : *FT_Open_Args, face_index : z64, aface : *FT_Face) -> z32
// **********************************************************************
FT_Attach_File :: fonc externe (face : FT_Face, filepathname : *z8) -> z32
// **********************************************************************
FT_Attach_Stream :: fonc externe (face : FT_Face, parameters : *FT_Open_Args) -> z32
// **********************************************************************
FT_Reference_Face :: fonc externe (face : FT_Face) -> z32
// **********************************************************************
FT_Done_Face :: fonc externe (face : FT_Face) -> z32
// **********************************************************************
FT_Select_Size :: fonc externe (face : FT_Face, strike_index : z32) -> z32
// **********************************************************************
FT_Size_Request_Type_ :: énum : n32 {
	FT_SIZE_REQUEST_TYPE_NOMINAL
	FT_SIZE_REQUEST_TYPE_REAL_DIM
	FT_SIZE_REQUEST_TYPE_BBOX
	FT_SIZE_REQUEST_TYPE_CELL
	FT_SIZE_REQUEST_TYPE_SCALES
	FT_SIZE_REQUEST_TYPE_MAX
}

// **********************************************************************
FT_Size_RequestRec_ :: struct externe {
	type : FT_Size_Request_Type
	width : z64
	height : z64
	horiResolution : n32
	vertResolution : n32
}

// **********************************************************************
FT_Request_Size :: fonc externe (face : FT_Face, req : FT_Size_Request) -> z32
// **********************************************************************
FT_Set_Char_Size :: fonc externe (face : FT_Face, char_width : FT_F26Dot6, char_height : FT_F26Dot6, horz_resolution : n32, vert_resolution : n32) -> z32
// **********************************************************************
FT_Set_Pixel_Sizes :: fonc externe (face : FT_Face, pixel_width : n32, pixel_height : n32) -> z32
// **********************************************************************
FT_Load_Glyph :: fonc externe (face : FT_Face, glyph_index : n32, load_flags : z3232) -> z32
// **********************************************************************
FT_Load_Char :: fonc externe (face : FT_Face, char_code : n64, load_flags : z3232) -> z32
// **********************************************************************
FT_Set_Transform :: fonc externe (face : FT_Face, matrix : *FT_Matrix, delta : *FT_Vector) -> rien
// **********************************************************************
FT_Render_Mode_ :: énum : n32 {
	FT_RENDER_MODE_NORMAL := 0
	FT_RENDER_MODE_LIGHT
	FT_RENDER_MODE_MONO
	FT_RENDER_MODE_LCD
	FT_RENDER_MODE_LCD_V
	FT_RENDER_MODE_MAX
}

// **********************************************************************
FT_Render_Glyph :: fonc externe (slot : FT_GlyphSlot, render_mode : FT_Render_Mode) -> z32
// **********************************************************************
FT_Kerning_Mode_ :: énum : n32 {
	FT_KERNING_DEFAULT := 0
	FT_KERNING_UNFITTED
	FT_KERNING_UNSCALED
}

// **********************************************************************
FT_Get_Kerning :: fonc externe (face : FT_Face, left_glyph : n32, right_glyph : n32, kern_mode : n32, akerning : *FT_Vector) -> z32
// **********************************************************************
FT_Get_Track_Kerning :: fonc externe (face : FT_Face, point_size : z64, degree : z32, akerning : *z64) -> z32
// **********************************************************************
FT_Get_Glyph_Name :: fonc externe (face : FT_Face, glyph_index : n32, buffer : *rien, buffer_max : n32) -> z32
// **********************************************************************
FT_Get_Postscript_Name :: fonc externe (face : FT_Face) -> *z8
// **********************************************************************
FT_Select_Charmap :: fonc externe (face : FT_Face, encoding : FT_Encoding) -> z32
// **********************************************************************
FT_Set_Charmap :: fonc externe (face : FT_Face, charmap : FT_CharMap) -> z32
// ***********************************************************************
FT_Get_Charmap_Index :: fonc externe (charmap : FT_CharMap) -> z32
// **********************************************************************
FT_Get_Char_Index :: fonc externe (face : FT_Face, charcode : n64) -> n32
// **********************************************************************
FT_Get_First_Char :: fonc externe (face : FT_Face, agindex : *n32) -> n64
// **********************************************************************
FT_Get_Next_Char :: fonc externe (face : FT_Face, char_code : n64, agindex : *n32) -> n64
// ***********************************************************************
FT_Face_Properties :: fonc externe (face : FT_Face, num_properties : n32, properties : *FT_Parameter) -> z32
// **********************************************************************
FT_Get_Name_Index :: fonc externe (face : FT_Face, glyph_name : *z8) -> n32
// ***********************************************************************
FT_Get_SubGlyph_Info :: fonc externe (glyph : FT_GlyphSlot, sub_index : n32, p_index : *z32, p_flags : *n32, p_arg1 : *z32, p_arg2 : *z32, p_transform : *FT_Matrix) -> z32
// **********************************************************************
FT_Get_FSType_Flags :: fonc externe (face : FT_Face) -> n16
// **********************************************************************
FT_Face_GetCharVariantIndex :: fonc externe (face : FT_Face, charcode : n64, variantSelector : n64) -> n32
// **********************************************************************
FT_Face_GetCharVariantIsDefault :: fonc externe (face : FT_Face, charcode : n64, variantSelector : n64) -> z32
// **********************************************************************
FT_Face_GetVariantSelectors :: fonc externe (face : FT_Face) -> *n32
// **********************************************************************
FT_Face_GetVariantsOfChar :: fonc externe (face : FT_Face, charcode : n64) -> *n32
// **********************************************************************
FT_Face_GetCharsOfVariant :: fonc externe (face : FT_Face, variantSelector : n64) -> *n32
// **********************************************************************
FT_MulDiv :: fonc externe (a : z64, b : z64, c : z64) -> z64
// **********************************************************************
FT_MulFix :: fonc externe (a : z64, b : z64) -> z64
// **********************************************************************
FT_DivFix :: fonc externe (a : z64, b : z64) -> z64
// **********************************************************************
FT_RoundFix :: fonc externe (a : z64) -> z64
// **********************************************************************
FT_CeilFix :: fonc externe (a : z64) -> z64
// **********************************************************************
FT_FloorFix :: fonc externe (a : z64) -> z64
// **********************************************************************
FT_VectorTransform :: fonc externe (vec : *FT_Vector, matrix : *FT_Matrix) -> rien
// **********************************************************************
FT_Library_Version :: fonc externe (library : FT_Library, amajor : *z32, aminor : *z32, apatch : *z32) -> rien
// **********************************************************************
FT_Face_CheckTrueTypePatents :: fonc externe (face : FT_Face) -> n8
// **********************************************************************
FT_Face_SetUnpatentedHinting :: fonc externe (face : FT_Face, value : n8) -> n8
// **********************************************************************
FT_Outline_Decompose :: fonc externe (outline : *FT_Outline, func_interface : *FT_Outline_Funcs, user : *rien) -> z32
// **********************************************************************
FT_Outline_New :: fonc externe (library : FT_Library, numPoints : n32, numContours : z32, anoutline : *FT_Outline) -> z32
FT_Outline_New_Internal :: fonc externe (memory : *FT_MemoryRec_, numPoints : n32, numContours : z32, anoutline : *FT_Outline) -> z32
// **********************************************************************
FT_Outline_Done :: fonc externe (library : FT_Library, outline : *FT_Outline) -> z32
FT_Outline_Done_Internal :: fonc externe (memory : *FT_MemoryRec_, outline : *FT_Outline) -> z32
// **********************************************************************
FT_Outline_Check :: fonc externe (outline : *FT_Outline) -> z32
// **********************************************************************
FT_Outline_Get_CBox :: fonc externe (outline : *FT_Outline, acbox : *FT_BBox) -> rien
// **********************************************************************
FT_Outline_Translate :: fonc externe (outline : *FT_Outline, xOffset : z64, yOffset : z64) -> rien
// **********************************************************************
FT_Outline_Copy :: fonc externe (source : *FT_Outline, target : *FT_Outline) -> z32
// **********************************************************************
FT_Outline_Transform :: fonc externe (outline : *FT_Outline, matrix : *FT_Matrix) -> rien
// **********************************************************************
FT_Outline_Embolden :: fonc externe (outline : *FT_Outline, strength : z64) -> z32
// **********************************************************************
FT_Outline_EmboldenXY :: fonc externe (outline : *FT_Outline, xstrength : z64, ystrength : z64) -> z32
// **********************************************************************
FT_Outline_Reverse :: fonc externe (outline : *FT_Outline) -> rien
// **********************************************************************
FT_Outline_Get_Bitmap :: fonc externe (library : FT_Library, outline : *FT_Outline, abitmap : *FT_Bitmap) -> z32
// **********************************************************************
FT_Outline_Render :: fonc externe (library : FT_Library, outline : *FT_Outline, params : *FT_Raster_Params) -> z32
// ************************************************************************
FT_Orientation_ :: énum : n32 {
	FT_ORIENTATION_TRUETYPE := 0
	FT_ORIENTATION_POSTSCRIPT := 1
	FT_ORIENTATION_FILL_RIGHT := FT_ORIENTATION_TRUETYPE
	FT_ORIENTATION_FILL_LEFT := FT_ORIENTATION_POSTSCRIPT
	FT_ORIENTATION_NONE
}

// ************************************************************************
FT_Outline_Get_Orientation :: fonc externe (outline : *FT_Outline) -> FT_Orientation
// **********************************************************************
FT_GlyphRec_ :: struct externe {
	library : FT_Library
	clazz : *FT_Glyph_Class
	format : FT_Glyph_Format
	advance : FT_Vector
}

// **********************************************************************
FT_BitmapGlyphRec_ :: struct externe {
	root : FT_GlyphRec
	left : z32
	top : z32
	bitmap : FT_Bitmap
}

// **********************************************************************
FT_OutlineGlyphRec_ :: struct externe {
	root : FT_GlyphRec
	outline : FT_Outline
}

// **********************************************************************
FT_Get_Glyph :: fonc externe (slot : FT_GlyphSlot, aglyph : *FT_Glyph) -> z32
// **********************************************************************
FT_Glyph_Copy :: fonc externe (source : FT_Glyph, target : *FT_Glyph) -> z32
// **********************************************************************
FT_Glyph_Transform :: fonc externe (glyph : FT_Glyph, matrix : *FT_Matrix, delta : *FT_Vector) -> z32
// **********************************************************************
FT_Glyph_BBox_Mode_ :: énum : n32 {
	FT_GLYPH_BBOX_UNSCALED := 0
	FT_GLYPH_BBOX_SUBPIXELS := 0
	FT_GLYPH_BBOX_GRIDFIT := 1
	FT_GLYPH_BBOX_TRUNCATE := 2
	FT_GLYPH_BBOX_PIXELS := 3
}

// **********************************************************************
FT_Glyph_Get_CBox :: fonc externe (glyph : FT_Glyph, bbox_mode : n32, acbox : *FT_BBox) -> rien
// **********************************************************************
FT_Glyph_To_Bitmap :: fonc externe (the_glyph : *FT_Glyph, render_mode : FT_Render_Mode, origin : *FT_Vector, destroy : n8) -> z32
// **********************************************************************
FT_Done_Glyph :: fonc externe (glyph : FT_Glyph) -> rien
// **********************************************************************
FT_Matrix_Multiply :: fonc externe (a : *FT_Matrix, b : *FT_Matrix) -> rien
// **********************************************************************
FT_Matrix_Invert :: fonc externe (matrix : *FT_Matrix) -> z32
// ************************************************************
FT_Stroker_LineJoin_ :: énum : n32 {
	FT_STROKER_LINEJOIN_ROUND := 0
	FT_STROKER_LINEJOIN_BEVEL := 1
	FT_STROKER_LINEJOIN_MITER_VARIABLE := 2
	FT_STROKER_LINEJOIN_MITER := FT_STROKER_LINEJOIN_MITER_VARIABLE
	FT_STROKER_LINEJOIN_MITER_FIXED := 3
}

// ************************************************************
FT_Stroker_LineCap_ :: énum : n32 {
	FT_STROKER_LINECAP_BUTT := 0
	FT_STROKER_LINECAP_ROUND
	FT_STROKER_LINECAP_SQUARE
}

// ************************************************************
FT_StrokerBorder_ :: énum : n32 {
	FT_STROKER_BORDER_LEFT := 0
	FT_STROKER_BORDER_RIGHT
}

// ************************************************************
FT_Outline_GetInsideBorder :: fonc externe (outline : *FT_Outline) -> FT_StrokerBorder
// ************************************************************
FT_Outline_GetOutsideBorder :: fonc externe (outline : *FT_Outline) -> FT_StrokerBorder
// ************************************************************
FT_Stroker_New :: fonc externe (library : FT_Library, astroker : *FT_Stroker) -> z32
// ************************************************************
FT_Stroker_Set :: fonc externe (stroker : FT_Stroker, radius : z64, line_cap : FT_Stroker_LineCap, line_join : FT_Stroker_LineJoin, miter_limit : z64) -> rien
// ************************************************************
FT_Stroker_Rewind :: fonc externe (stroker : FT_Stroker) -> rien
// ************************************************************
FT_Stroker_ParseOutline :: fonc externe (stroker : FT_Stroker, outline : *FT_Outline, opened : n8) -> z32
// ************************************************************
FT_Stroker_BeginSubPath :: fonc externe (stroker : FT_Stroker, to : *FT_Vector, open : n8) -> z32
// ************************************************************
FT_Stroker_EndSubPath :: fonc externe (stroker : FT_Stroker) -> z32
// ************************************************************
FT_Stroker_LineTo :: fonc externe (stroker : FT_Stroker, to : *FT_Vector) -> z32
// ************************************************************
FT_Stroker_ConicTo :: fonc externe (stroker : FT_Stroker, control : *FT_Vector, to : *FT_Vector) -> z32
// ************************************************************
FT_Stroker_CubicTo :: fonc externe (stroker : FT_Stroker, control1 : *FT_Vector, control2 : *FT_Vector, to : *FT_Vector) -> z32
// ************************************************************
FT_Stroker_GetBorderCounts :: fonc externe (stroker : FT_Stroker, border : FT_StrokerBorder, anum_points : *n32, anum_contours : *n32) -> z32
// ************************************************************
FT_Stroker_ExportBorder :: fonc externe (stroker : FT_Stroker, border : FT_StrokerBorder, outline : *FT_Outline) -> rien
// ************************************************************
FT_Stroker_GetCounts :: fonc externe (stroker : FT_Stroker, anum_points : *n32, anum_contours : *n32) -> z32
// ************************************************************
FT_Stroker_Export :: fonc externe (stroker : FT_Stroker, outline : *FT_Outline) -> rien
// ************************************************************
FT_Stroker_Done :: fonc externe (stroker : FT_Stroker) -> rien
// ************************************************************
FT_Glyph_Stroke :: fonc externe (pglyph : *FT_Glyph, stroker : FT_Stroker, destroy : n8) -> z32
// ************************************************************
FT_Glyph_StrokeBorder :: fonc externe (pglyph : *FT_Glyph, stroker : FT_Stroker, inside : n8, destroy : n8) -> z32
// **************************************************************************
FT_LcdFilter_ :: énum : n32 {
	FT_LCD_FILTER_NONE := 0
	FT_LCD_FILTER_DEFAULT := 1
	FT_LCD_FILTER_LIGHT := 2
	FT_LCD_FILTER_LEGACY1 := 3
	FT_LCD_FILTER_LEGACY := 16
    // do not remove
	FT_LCD_FILTER_MAX
}

// ************************************************************************
FT_Library_SetLcdFilter :: fonc externe (library : FT_Library, filter : FT_LcdFilter) -> z32
// ************************************************************************
FT_Library_SetLcdFilterWeights :: fonc externe (library : FT_Library, weights : *n8) -> z32


anonyme7 :: struct externe {
	code : z32
	message : *z8
}

//FT_Errors : /home/kevin/freetype.c:10:7) [94] = [ [ FT_Err_Ok, "no error" ], [ FT_Err_Cannot_Open_Resource, "cannot open resource" ], [ FT_Err_Unknown_File_Format, "unknown file format" ], [ FT_Err_Invalid_File_Format, "broken file" ], [ FT_Err_Invalid_Version, "invalid FreeType version" ], [ FT_Err_Lower_Module_Version, "module version is too low" ], [ FT_Err_Invalid_Argument, "invalid argument" ], [ FT_Err_Unimplemented_Feature, "unimplemented feature" ], [ FT_Err_Invalid_Table, "broken table" ], [ FT_Err_Invalid_Offset, "broken offset within table" ], [ FT_Err_Array_Too_Large, "array allocation size too large" ], [ FT_Err_Missing_Module, "missing module" ], [ FT_Err_Missing_Property, "missing property" ], [ FT_Err_Invalid_Glyph_Index, "invalid glyph index" ], [ FT_Err_Invalid_Character_Code, "invalid character code" ], [ FT_Err_Invalid_Glyph_Format, "unsupported glyph image format" ], [ FT_Err_Cannot_Render_Glyph, "cannot render this glyph format" ], [ FT_Err_Invalid_Outline, "invalid outline" ], [ FT_Err_Invalid_Composite, "invalid composite glyph" ], [ FT_Err_Too_Many_Hints, "too many hints" ], [ FT_Err_Invalid_Pixel_Size, "invalid pixel size" ], [ FT_Err_Invalid_Handle, "invalid object handle" ], [ FT_Err_Invalid_Library_Handle, "invalid library handle" ], [ FT_Err_Invalid_Driver_Handle, "invalid module handle" ], [ FT_Err_Invalid_Face_Handle, "invalid face handle" ], [ FT_Err_Invalid_Size_Handle, "invalid size handle" ], [ FT_Err_Invalid_Slot_Handle, "invalid glyph slot handle" ], [ FT_Err_Invalid_CharMap_Handle, "invalid charmap handle" ], [ FT_Err_Invalid_Cache_Handle, "invalid cache manager handle" ], [ FT_Err_Invalid_Stream_Handle, "invalid stream handle" ], [ FT_Err_Too_Many_Drivers, "too many modules" ], [ FT_Err_Too_Many_Extensions, "too many extensions" ], [ FT_Err_Out_Of_Memory, "out of memory" ], [ FT_Err_Unlisted_Object, "unlisted object" ], [ FT_Err_Cannot_Open_Stream, "cannot open stream" ], [ FT_Err_Invalid_Stream_Seek, "invalid stream seek" ], [ FT_Err_Invalid_Stream_Skip, "invalid stream skip" ], [ FT_Err_Invalid_Stream_Read, "invalid stream read" ], [ FT_Err_Invalid_Stream_Operation, "invalid stream operation" ], [ FT_Err_Invalid_Frame_Operation, "invalid frame operation" ], [ FT_Err_Nested_Frame_Access, "nested frame access" ], [ FT_Err_Invalid_Frame_Read, "invalid frame read" ], [ FT_Err_Raster_Uninitialized, "raster uninitialized" ], [ FT_Err_Raster_Corrupted, "raster corrupted" ], [ FT_Err_Raster_Overflow, "raster overflow" ], [ FT_Err_Raster_Negative_Height, "negative height while rastering" ], [ FT_Err_Too_Many_Caches, "too many registered caches" ], [ FT_Err_Invalid_Opcode, "invalid opcode" ], [ FT_Err_Too_Few_Arguments, "too few arguments" ], [ FT_Err_Stack_Overflow, "stack overflow" ], [ FT_Err_Code_Overflow, "code overflow" ], [ FT_Err_Bad_Argument, "bad argument" ], [ FT_Err_Divide_By_Zero, "division by zero" ], [ FT_Err_Invalid_Reference, "invalid reference" ], [ FT_Err_Debug_OpCode, "found debug opcode" ], [ FT_Err_ENDF_In_Exec_Stream, "found ENDF opcode in execution stream" ], [ FT_Err_Nested_DEFS, "nested DEFS" ], [ FT_Err_Invalid_CodeRange, "invalid code range" ], [ FT_Err_Execution_Too_Long, "execution context too long" ], [ FT_Err_Too_Many_Function_Defs, "too many function definitions" ], [ FT_Err_Too_Many_Instruction_Defs, "too many instruction definitions" ], [ FT_Err_Table_Missing, "SFNT font table missing" ], [ FT_Err_Horiz_Header_Missing, "horizontal header (hhea) table missing" ], [ FT_Err_Locations_Missing, "locations (loca) table missing" ], [ FT_Err_Name_Table_Missing, "name table missing" ], [ FT_Err_CMap_Table_Missing, "character map (cmap) table missing" ], [ FT_Err_Hmtx_Table_Missing, "horizontal metrics (hmtx) table missing" ], [ FT_Err_Post_Table_Missing, "PostScript (post) table missing" ], [ FT_Err_Invalid_Horiz_Metrics, "invalid horizontal metrics" ], [ FT_Err_Invalid_CharMap_Format, "invalid character map (cmap) format" ], [ FT_Err_Invalid_PPem, "invalid ppem value" ], [ FT_Err_Invalid_Vert_Metrics, "invalid vertical metrics" ], [ FT_Err_Could_Not_Find_Context, "could not find context" ], [ FT_Err_Invalid_Post_Table_Format, "invalid PostScript (post) table format" ], [ FT_Err_Invalid_Post_Table, "invalid PostScript (post) table" ], [ FT_Err_DEF_In_Glyf_Bytecode, "found FDEF or IDEF opcode in glyf bytecode" ], [ FT_Err_Missing_Bitmap, "missing bitmap in strike" ], [ FT_Err_Syntax_Error, "opcode syntax error" ], [ FT_Err_Stack_Underflow, "argument stack underflow" ], [ FT_Err_Ignore, "ignore" ], [ FT_Err_No_Unicode_Glyph_Name, "no Unicode glyph name found" ], [ FT_Err_Glyph_Too_Big, "glyph too big for hinting" ], [ FT_Err_Missing_Startfont_Field, "`STARTFONT' field missing" ], [ FT_Err_Missing_Font_Field, "`FONT' field missing" ], [ FT_Err_Missing_Size_Field, "`SIZE' field missing" ], [ FT_Err_Missing_Fontboundingbox_Field, "`FONTBOUNDINGBOX' field missing" ], [ FT_Err_Missing_Chars_Field, "`CHARS' field missing" ], [ FT_Err_Missing_Startchar_Field, "`STARTCHAR' field missing" ], [ FT_Err_Missing_Encoding_Field, "`ENCODING' field missing" ], [ FT_Err_Missing_Bbx_Field, "`BBX' field missing" ], [ FT_Err_Bbx_Too_Big, "`BBX' too big" ], [ FT_Err_Corrupted_Font_Header, "Font header corrupted or missing fields" ], [ FT_Err_Corrupted_Font_Glyphs, "Font glyphs corrupted or missing fields" ], [ 0, 0 ] ]