importe Fondation
importe Temps

millisecondes_par_jours :: 24 * 60 * 60 * 1000

temps_millis_depuis_époque :: fonc (date: Date) -> z64
{
    millis_jours := jours_entre_dates(Date(jour = 1, mois = 1, année = 1970), date) * millisecondes_par_jours
    retourne millis_jours + date.heure * 60 * 60 * 1000 + date.minute * 60 * 1000 + date.seconde * 1000
}

opérateur < :: fonc (date1: Date, date2: Date) -> bool
{
    si date1.année < date2.année {
        retourne vrai
    }

    si date1.année == date2.année {
        si date1.mois < date2.mois {
            retourne vrai
        }

        si date1.mois == date2.mois {
            retourne date1.jour < date2.jour
        }
    }

    retourne faux
}

jours_entre_dates :: fonc (date1: Date, date2: Date) -> z64
{
    date2_antérieure := date2 < date1

    si date2_antérieure {
        tmp := date1
        date1 = date2
        date2 = tmp
    }

    jours := jours_jusque_fin_année(date1)
    jours += jours_depuis_début_année(date2)

    pour date1.année + 1 ... date2.année - 1 {
        si est_année_bissextile(it) {
            jours += 366
        }
        sinon {
            jours += 365
        }
    }

    si date2_antérieure {
        retourne -jours
    }

    retourne jours
}

jours_pour_mois :: fonc (mois: z32, bissextile: bool) -> z32
{
    jours_par_mois := [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ]

    si bissextile {
        jours_par_mois[1] = 29
    }

    retourne jours_par_mois[mois - 1]
}

jours_depuis_début_année :: fonc (date: Date) -> z64
{
    bissextile := est_année_bissextile(date.année)
    jours := 0

    pour 1 ... date.mois - 1 {
        jours += jours_pour_mois(it, bissextile)
    }

    retourne jours + date.jour
}

jours_jusque_fin_année :: fonc (date: Date) -> z64
{
    bissextile := est_année_bissextile(date.année)
    jours_restant_mois := jours_pour_mois(date.mois, bissextile) - date.jour
    jours := jours_restant_mois

    pour date.mois + 1 ... 12 {
        jours += jours_pour_mois(it, bissextile)
    }

    retourne jours
}

// https://gist.github.com/jamesgdahl/1ef2a458fa6fb9d54b437f5d816792b2
principale :: fonc () -> z32
{
    moment := hui_système()
    raisin := Date(jour = 22, mois = 9, année = 1792)

    adjMoment := temps_millis_depuis_époque(moment) - temps_millis_depuis_époque(raisin)
    imprime("adj_moment : %\n", adjMoment)

    d :: millisecondes_par_jours;
	quantité_leap :: 20925216
    début_équinoxe :: 34284216

    this : Date

	now := (adjMoment % d) comme z32;
	this.heure = now / (60 * 60 * 1000);
	this.minute = (now - this.heure * (60 * 60 * 1000)) / (60 * 1000)
	this.seconde = (now - this.heure * (60 * 60 * 1000) - this.minute * (60 * 1000)) / 1000

	days := adjMoment / d;
	yesterdays := days-1;
	unadjYears := days / 365;
	leapYears := ((quantité_leap*unadjYears)+début_équinoxe)/d;
	yesterdayLeapYears := ((quantité_leap*yesterdays / 365)+début_équinoxe)/d;
	isLeapDay := yesterdayLeapYears != leapYears;
	this.année = ((days-leapYears)/365) comme z32;

    // this.yeardays
	yeardays := (days-leapYears)%365;
	si isLeapDay {
		yeardays += 1
	}

	this.année += 1// year starts as year 1
	this.jour = ((yeardays % 30) + 1) comme z32 // calendar starts on day 1
	this.mois = (yeardays / 30) comme z32

    imprime("date républicaine : %\n", this)

    retourne 0
}
