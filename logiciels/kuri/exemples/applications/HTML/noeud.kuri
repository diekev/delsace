importe Fondation

TypeNoeud :: énum z32 {
    A
    ABBR
    ACRONYM
    ADDRESS
    APPLET
    AREA
    ARTICLE
    ASIDE
    AUDIO
    B
    BASE
    BASEFONT
    BDI
    BDO
    BIG
    BLOCKQUOTE
    BODY
    BR
    BUTTON
    CANVAS
    CAPTION
    CENTER
    CITE
    CODE
    COL
    COLGROUP
    DATA
    DATALIST
    DD
    DEL
    DETAILS
    DFN
    DIALOG
    DIR
    DIV
    DL
    DT
    EM
    EMBED
    FIELDSET
    FIGCAPTION
    FIGURE
    FONT
    FOOTER
    FORM
    FRAME
    FRAMESET
    HEAD
    HEADER
    H
    HR
    HTML
    I
    IFRAME
    IMG
    INPUT
    INS
    KBD
    LABEL
    LEGEND
    LI
    LINK
    MAIN
    MAP
    MARK
    META
    METER
    NAV
    NOFRAMES
    NOSCRIPT
    OBJECT
    OL
    OPTGROUP
    OPTION
    OUTPUT
    P
    PARAM
    PICTURE
    PRE
    PROGRESS
    Q
    RP
    RT
    RUBY
    S
    SAMP
    SCRIPT
    SECTION
    SELECT
    SMALL
    SOURCE
    SPAN
    STRIKE
    STRONG
    STYLE
    SUB
    SUMMARY
    SUP
    SVG
    TABLE
    TBODY
    TD
    TEMPLATE
    TEXTAREA
    TFOOT
    TH
    THEAD
    TIME
    TITLE
    TR
    TRACK
    TT
    U
    UL
    VAR
    VIDEO
    WBR

    TEXTE
}

Noeud :: struct {
    parent : *Noeud
    enfants : []*Noeud
    type : TypeNoeud

    texte : chaine
}

initialise_noeud :: fonc (noeud: *Noeud, texte: chaine, type: TypeNoeud) -> rien
{
    noeud.texte = texte
    noeud.type = type
}

ajoute_enfant :: fonc (noeud: *Noeud, enfant: *Noeud) -> rien
{
    enfant.parent = noeud
    tableau_ajoute(@noeud.enfants, enfant)
}

détruit_noeud :: fonc (noeud: *Noeud) -> rien
{
    pour enfant dans noeud.enfants {
        détruit_noeud(enfant)
    }

    déloge noeud.enfants
    déloge noeud
}

est_élément :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.type != TypeNoeud.TEXTE
}

noeud_depuis_tag :: fonc (tag: chaine) -> *Noeud
{
    discr tag {
        "a" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.A); retourne noeud; }
        "abbr" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.ABBR); retourne noeud; }
        "acronym" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.ACRONYM); retourne noeud; }
        "address" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.ADDRESS); retourne noeud; }
        "applet" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.APPLET); retourne noeud; }
        "area" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.AREA); retourne noeud; }
        "article" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.ARTICLE); retourne noeud; }
        "aside" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.ASIDE); retourne noeud; }
        "audio" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.AUDIO); retourne noeud; }
        "b" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.B); retourne noeud; }
        "base" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BASE); retourne noeud; }
        "basefont" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BASEFONT); retourne noeud; }
        "bdi" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BDI); retourne noeud; }
        "bdo" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BDO); retourne noeud; }
        "big" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BIG); retourne noeud; }
        "blockquote" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BLOCKQUOTE); retourne noeud; }
        "body" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BODY); retourne noeud; }
        "br" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BR); retourne noeud; }
        "button" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.BUTTON); retourne noeud; }
        "canvas" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.CANVAS); retourne noeud; }
        "caption" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.CAPTION); retourne noeud; }
        "center" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.CENTER); retourne noeud; }
        "cite" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.CITE); retourne noeud; }
        "code" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.CODE); retourne noeud; }
        "col" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.COL); retourne noeud; }
        "colgroup" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.COLGROUP); retourne noeud; }
        "data" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DATA); retourne noeud; }
        "datalist" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DATALIST); retourne noeud; }
        "dd" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DD); retourne noeud; }
        "del" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DEL); retourne noeud; }
        "details" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DETAILS); retourne noeud; }
        "dfn" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DFN); retourne noeud; }
        "dialog" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DIALOG); retourne noeud; }
        "dir" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DIR); retourne noeud; }
        "div" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DIV); retourne noeud; }
        "dl" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DL); retourne noeud; }
        "dt" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.DT); retourne noeud; }
        "em" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.EM); retourne noeud; }
        "embed" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.EMBED); retourne noeud; }
        "fieldset" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FIELDSET); retourne noeud; }
        "figcaption" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FIGCAPTION); retourne noeud; }
        "figure" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FIGURE); retourne noeud; }
        "font" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FONT); retourne noeud; }
        "footer" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FOOTER); retourne noeud; }
        "form" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FORM); retourne noeud; }
        "frame" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FRAME); retourne noeud; }
        "frameset" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.FRAMESET); retourne noeud; }
        "head" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.HEAD); retourne noeud; }
        "header" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.HEADER); retourne noeud; }
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.H); retourne noeud; }
        "hr" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.HR); retourne noeud; }
        "html" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.HTML); retourne noeud; }
        "i" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.I); retourne noeud; }
        "iframe" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.IFRAME); retourne noeud; }
        "img" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.IMG); retourne noeud; }
        "input" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.INPUT); retourne noeud; }
        "ins" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.INS); retourne noeud; }
        "kbd" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.KBD); retourne noeud; }
        "label" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.LABEL); retourne noeud; }
        "legend" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.LEGEND); retourne noeud; }
        "li" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.LI); retourne noeud; }
        "link" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.LINK); retourne noeud; }
        "main" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.MAIN); retourne noeud; }
        "map" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.MAP); retourne noeud; }
        "mark" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.MARK); retourne noeud; }
        "meta" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.META); retourne noeud; }
        "meter" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.METER); retourne noeud; }
        "nav" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.NAV); retourne noeud; }
        "noframes" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.NOFRAMES); retourne noeud; }
        "noscript" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.NOSCRIPT); retourne noeud; }
        "object" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.OBJECT); retourne noeud; }
        "ol" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.OL); retourne noeud; }
        "optgroup" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.OPTGROUP); retourne noeud; }
        "option" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.OPTION); retourne noeud; }
        "output" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.OUTPUT); retourne noeud; }
        "p" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.P); retourne noeud; }
        "param" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.PARAM); retourne noeud; }
        "picture" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.PICTURE); retourne noeud; }
        "pre" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.PRE); retourne noeud; }
        "progress" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.PROGRESS); retourne noeud; }
        "q" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.Q); retourne noeud; }
        "rp" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.RP); retourne noeud; }
        "rt" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.RT); retourne noeud; }
        "ruby" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.RUBY); retourne noeud; }
        "s" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.S); retourne noeud; }
        "samp" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SAMP); retourne noeud; }
        "script" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SCRIPT); retourne noeud; }
        "section" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SECTION); retourne noeud; }
        "select" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SELECT); retourne noeud; }
        "small" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SMALL); retourne noeud; }
        "source" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SOURCE); retourne noeud; }
        "span" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SPAN); retourne noeud; }
        "strike" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.STRIKE); retourne noeud; }
        "strong" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.STRONG); retourne noeud; }
        "style" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.STYLE); retourne noeud; }
        "sub" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SUB); retourne noeud; }
        "summary" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SUMMARY); retourne noeud; }
        "sup" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SUP); retourne noeud; }
        "svg" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.SVG); retourne noeud; }
        "table" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TABLE); retourne noeud; }
        "tbody" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TBODY); retourne noeud; }
        "td" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TD); retourne noeud; }
        "template" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TEMPLATE); retourne noeud; }
        "textarea" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TEXTAREA); retourne noeud; }
        "tfoot" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TFOOT); retourne noeud; }
        "th" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TH); retourne noeud; }
        "thead" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.THEAD); retourne noeud; }
        "time" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TIME); retourne noeud; }
        "title" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TITLE); retourne noeud; }
        "tr" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TR); retourne noeud; }
        "track" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TRACK); retourne noeud; }
        "tt" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.TT); retourne noeud; }
        "u" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.U); retourne noeud; }
        "ul" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.UL); retourne noeud; }
        "var" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.VAR); retourne noeud; }
        "video" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.VIDEO); retourne noeud; }
        "wbr" { noeud := loge Noeud;     initialise_noeud(noeud, tag, TypeNoeud.WBR); retourne noeud; }
   }

    retourne nul
}

est_compatible_html5 :: fonc (noeud: *Noeud) -> bool
{
    discr noeud.type {
        ACRONYM,
        APPLET,
        BASEFONT,
        BIG,
        CENTER,
        DIR,
        FONT,
        FRAME,
        FRAMESET,
        NOFRAMES,
        STRIKE,
        TT {
            retourne faux
        }
        sinon {
            retourne vrai
        }
    }

    retourne vrai
}

crée_noeud_texte :: fonc (texte: chaine) -> *Noeud
{
    noeud := loge Noeud
    initialise_noeud(noeud, texte, TypeNoeud.TEXTE)

    retourne noeud
}

imprime_noeud :: fonc (noeud: *Noeud, tab : z32) -> rien
{
    pour i dans 1 ... tab {
        imprime("  ")
    }

    si noeud.type == TypeNoeud.TEXTE {
        imprime("%\n", noeud.texte)
    }
    sinon {
        imprime("%\n", noeud.type)
    }

    pour enfant dans noeud.enfants {
        imprime_noeud(enfant, tab + 1)
    }
}
