importe Fondation

TypeLexème :: énum z32 {
    INVALIDE

    CHEVRON_GAUCHE
    CHEVRON_DROIT
    EXCLAMATION
    SLASH
    TIRET
    ÉGAL

    CHAINE_CARACTÈRE
    CHAINE_LITTÉRALE
}

Position :: struct {
    colonne : z32
    ligne : z32
}

Lexème :: struct {
    type : TypeLexème

    pos : Position

    chn : chaine
}

// ----------------------------------------

ÉtatLexage :: struct {
    curseur := 0
    script := ""
    courant : Lexème
    lexèmes : []Lexème
    pos : Position
}

finalise_lexème :: fonc (état: *ÉtatLexage, type_lexème: TypeLexème) -> rien
{
    pousse_chaine_si_non_vide(état)

    état.pos.colonne = état.curseur

    état.courant.type = type_lexème
    état.courant.chn = construit_chaine(@état.script[état.curseur], 1)
    état.courant.pos = état.pos
    tableau_ajoute(@état.lexèmes, état.courant)

    état.courant.chn.taille = 0
}

pousse_chaine_si_non_vide :: fonc (état: *ÉtatLexage) -> rien
{
    si état.courant.chn.taille != 0 {
        état.courant.type = TypeLexème.CHAINE_CARACTÈRE
        état.courant.pos = état.pos
        tableau_ajoute(@état.lexèmes, état.courant)
    }
}

lèxe :: fonc (chn: chaine) -> []Lexème
{
    pos : Position

    état : ÉtatLexage
    état.script = chn

    est_entre_tags := faux

    tantque état.curseur < chn.taille {
        c := chn[état.curseur]

        discr c {
            '\n' {
                état.pos.ligne += 1
                état.pos.colonne = 0
            }
            '<' {
                finalise_lexème(@état, TypeLexème.CHEVRON_GAUCHE)
                est_entre_tags = faux
            }
            '>' {
                finalise_lexème(@état, TypeLexème.CHEVRON_DROIT)
                est_entre_tags = vrai
            }
            '!' {
                finalise_lexème(@état, TypeLexème.EXCLAMATION)
            }
            '/' {
                finalise_lexème(@état, TypeLexème.SLASH)
            }
            '-' {
                finalise_lexème(@état, TypeLexème.TIRET)
            }
            '=' {
                finalise_lexème(@état, TypeLexème.ÉGAL)
            }
            '\'',
            '"' {
                pousse_chaine_si_non_vide(@état)

                état.curseur += 1
                état.courant.chn.pointeur = @chn[état.curseur]
                état.courant.chn.taille = 0
                état.pos.colonne = état.curseur

                tantque état.curseur < chn.taille {
                    si c == chn[état.curseur] {
                        arrête
                    }

                    état.curseur += 1
                    état.courant.chn.taille += 1
                }

                état.curseur += 1

                tableau_ajoute(@état.lexèmes, état.courant)

                état.courant.chn.taille = 0
            }
            ' ' {
                si !est_entre_tags {
                    pousse_chaine_si_non_vide(@état)
                    état.courant.chn.taille = 0
                }
                sinon {
                    si état.courant.chn.taille == 0 {
                        état.courant.chn.pointeur = @chn[état.curseur]
                        état.pos.colonne = état.curseur
                    }

                    état.courant.chn.taille += 1
                }
            }
            sinon {
                si état.courant.chn.taille == 0 {
                    état.courant.chn.pointeur = @chn[état.curseur]
                    état.pos.colonne = état.curseur
                }

                état.courant.chn.taille += 1
            }
        }

        état.curseur += 1
    }

    retourne état.lexèmes
}
