énum évènement_fenêtre : z32 {
	NUL = 0;
}

struct vec2 {
	x = 0.0;
	y = 0.0;
}

struct Éditrice {

};

struct Application {
	fenetre : *rien = nul;
	éditrices : []*Éditrice;
	souris : vec2;

	# pour la détection des doubles clics
	temps_double_clic = 0;
	dernier_évènement = évènement_fenêtre.NUL;
}

rout initialise_fenêtre(app) : z32
{
	si glfwInit() == 0 {
		renv 1;
	}

	glfwSetErrorCallback(rappel_erreur);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);

	LARGEUR = 800;
	HAUTEUR = 600;

	fenêtre = glfwCreateWindow(LARGEUR, HAUTEUR, "Créathèque", nul, nul);

	si fenêtre == nul {
		glfwTerminate();
		renv 1;
	}

	glfwSetKeyCallback(fenêtre, rappel_clavier);
	glfwSetCursorPosCallback(fenêtre, rappel_position_souris);
	glfwSetMouseButtonCallback(fenêtre, rappel_bouton_souris);
	glfwSetScrollCallback(fenêtre, rappel_roulette);
	glfwSetWindowSizeCallback(fenêtre, rappel_dimension);

	fenêtre de app = fenêtre;

	renv 0;
}

rout initialise_opengl() : z32
{
	# À FAIRE : globale externe
	glewExperimental = 1;
	erreur = glewInit();

	si erreur != 0 {
		renv 1;
	}

	glfwSwapInterval(1);

	renv 0;
}

rout traite_evenements(app : &Application)
{
	tantque !VG_queue_evenement.est_vide() {
		évènement = VG_queue_evenement.front();
	}
}

rout dessine_fenetre(app : &Application)
{

}

rout boucle_principale(app : &Application) : z32
{
	tantque !glfwWindowShouldClose(fenêtre de app) {
		glfwWaitEvents();

		traite_evenements(app);

		dessine_fenetre(app);
	}
}

rout joue(app : &Application) : z32
{
	erreur = initialise_fenêtre(app);

	si erreur != 0 {
		renv erreur;
	}

	erreur = initialise_opengl(app);

	si erreur != 0 {
		renv erreur;
	}

	erreur = boucle_principale(app);

	si erreur != 0 {
		renv erreur;
	}

	nettoye(app);

	renv 0;
}

rout principale()
{
	app = Application{
			fenêtre = nul
		};

	erreur = app.joue();

	si erreur == 1 {
		renv 1;
	}

	renv 0;
}
