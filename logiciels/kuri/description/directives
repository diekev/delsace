Les directives servent à controler le comportement du compilateur.

Directives pour le compilateur

#aligne N               indique l'alignement souhaité pour la structure, où N est un nombre entier, puissance de 2
#compacte               indique que la structure ne doit pas contenir de rembourrage entre les membres, ignorant leurs alignements machines natifs
#opaque                 crée un type depuis un autre, le nouveau type sera héritera des propriétés du type source, mais sera strictement typé (si Entier :: #opaque z32, alors z32 ne peut se faire passer pour Entier)
#bibliothèque           indique le nom de la bibliothèque à lier à l'identifiant utilisé (p.e. libm :: #bibliothèque "m", liera libm.so à l'identifiant libm, et toute fonction utilisant cette identifant après #externe sera considérer comme faisant partie de libm.so, qui sera alors utilisée lors de la liaison des programmes et métaprogrammes pour trouver le symbole associé)
#compilatrice           indique qu'une fonction est définie par la compilatrice, ne peut être que dans le module Kuri ou Compilatrice
#enligne                indique qu'une fonction doit être considérée pour l'enlignage
#externe                indique qu'une fonction ou un symbole est défini dans un fichier objet externe, externe peut-être suivie d'une chaine de caractère contenant le nom du symbole dans la bibliothèque statique ou dynamique
#horsligne              indique qu'une fonction ne doit pas être considérée pour l'enlignage
#inclus                 indique un fichier à inclure pour la coulisse C
#interface              indique qu'une fonction ou structure fait partie de l'interface entre la compilatrice et le programme, ne peut être utilisé qu'au sein du module Kuri
#racine                 indique les fonctions racines qui seront considérées pour la compilation de fichiers objets, si aucune fonction n'est marquée comme racine, le fichier objet sera vide
#sansbroyage            indique que le nom de la fonction ne doit pas être "broyé", c'est à dire que le nom sera utilisé tel quel dans le fichier objet ou l'exécutable généré
#sanstrace              indique qu'une fonction n'a pas de trace d'appel

Directive pour la métaprogrammation

#assert      évalue une expression booléenne lors de la compilation, si le résultat est faux la compilation doit s'arrêter
#corps_texte indique que le corps de la structure ou de la fonction est défini via un métaprogramme retournant une chaine
#cuisine     crée une version d'une fonction ou les paramètres constants sont remplacés par les expressions données
#exécute     exécute un métaprogramme et retourne le résultat
#si          évalue une expression booléenne, et ne compile la branche que si l'expression est vraie
#test        comme #assert mais seulement évaluée si les tests sont activés
#texte_corps pour les fonctions et les structures, exécute le corps de la fonction qui doit retourner une chaine définissant le corps de la structure ou de la fonction, si la fonction ou structure est polymorphique, ne lance le code que lors de l'instantiation
