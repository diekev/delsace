Les directives servent à controler le comportement du compilateur.

Directives pour le compilateur

#bibliothèque_statique  indique le chemin d'une bibliothèque statique pour lier le programme final (.a sur GNU/Linux)
#bibliothèque_dynamique indique le chemin d'une bibliothèque dynamique pour lier le programme final (.so sur GNU/Linux)
#chemin                 indique un chemin où chercher les bibliothèques ou autres fichiers
#compilatrice           indique qu'une fonction est définie par la compilatrice, ne peut être que dans le module Kuri ou Compilatrice
#def                    indique une définition de macro pour la coulisse C
#enligne                indique qu'une fonction doit être considérée pour l'enlignage
#externe                indique qu'une fonction ou un symbole est défini dans un fichier objet externe, externe peut-être suivie d'une chaine de caractère contenant le nom du symbole dans la bibliothèque statique ou dynamique
#horsligne              indique qu'une fonction ne doit pas être considérée pour l'enlignage
#inclus                 indique un fichier à inclure pour la coulisse C
#interface              indique qu'une fonction ou structure fait partie de l'interface entre la compilatrice et le programme, ne peut être utilisé qu'au sein du module Kuri
#nulctx                 indique que la fonction ou le type de fonction ne prend pas le contexte implicite en paramètre
#sansbroyage            indique que le nom de la fonction ne doit pas être "broyé", c'est à dire que le nom sera utilisé tel quel dans le fichier objet ou l'exécutable généré
#sanstrace              indique qu'une fonction n'a pas de trace d'appel

Directive pour la métaprogrammation

#assert      évalue une expression booléenne lors de la compilation, si le résultat est faux la compilation doit s'arrêter
#exécute     exécute un métaprogramme et retourne le résultat
#si          évalue une expression booléenne, et ne compile la branche que si l'expression est vraie
#test        comme #assert mais seulement évaluée si les tests sont activés
#texte_corps pour les fonctions et les structures, exécute le corps de la fonction qui doit retourner une chaine définissant le corps de la structure ou de la fonction, si la fonction ou structure est polymorphique, ne lance le code que lors de l'instantiation
