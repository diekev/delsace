Faitures
--------
- utilisation de caractères unicodes UTF-8 dans les sources
- possibilité d'appeler des fonctions C (comme printf, ou les appels système) et de bibliothèques partagées (.so)
- contrôle de flux via boucles et conditions
- fonctions variadiques typées
- possibilité de nommer les paramètres des fonctions lors des appels (p.e. f(a=0, b=5) au lieu de f(0, 5))
- règle de définition unique : deux structures ou deux fonctions ayant les mêmes paramètres ou deux variables ne peuvent avoir le même nom
- inférence de type
- type de tableaux et de chaine connus par le compilateur
- vérification de l'accès hors des bornes des chaines et tableaux
- transtypage entre types simples
- système de modules pour séparer le code en composants
- manipulation de pointeurs vers fonction
- initialisation de tableaux dans une déclaration
- initialisation de structures dans une déclaration
- nommage et typage explicite des énums pour éviter les problèmes de transtypage ou autre
- déréférencement de pointeur (via 'mémoire')
- initialisation explicite des membres des structures lors de leur définition
- système d'introspection/de réflexion
- mot clé pour différer l'exécution d'un bloc lors du retour d'une fonction
- type 'octet' pour ne pas confondre avec un 'char'
- allocations dynamiques de mémoire via les mots-clés loge/déloge/reloge
- accès à la mémoire actuellement allouée
- association/switch
- surcharge de fonction avec des types différents
- point-virgule implicite (à la fin des expressions)
- surcharge d'opérateurs
- fonctions gabarits/polymorphiques
- valeur par défaut des paramètres de fonctions
- héritage de structures via un système d'emploi
- évite l'initialisation via "---"
- conversion automatique des types en unions et extraction automatique des valeurs des unions
- héritage/polymorphisme par emploi de structures dans d'autres
- types comme valeurs
- évaluation arbitraire du code
- assertions statiques lors de la compilation


Sécurité/évitement des bugs
---------------------------
- les variables sont initialisées à zéro lors de leur déclaration
- aucune conversion n'est implicite (sauf pour les valeurs littérales, quand cela est sensé, z32 -> z64)
- les contrôles de flux doivent avoir des valeurs booléennes explicites
- l'opérateur booléen d'inversion '!' ne peut prendre qu'une valeur booléenne
- les portées doivent être explicitement entourées de { } pour éviter que des expressions ne devant qu'être exécutées dans un contrôle de flux ne soient pas exécutées en dehors.
- l'opérateur d'assignemet '=' ne retourne pas de valeur pour éviter toute confusion avec '==' (peut-être à réviser puisque il n'a pas de conversion implicite vers des valeurs booléennes)
- les ombrages de variables sont interdites, toutes les variables dans une portée ne peuvent avoir le nom d'une variable déjà déclarée dans une portée parente
- blocs explicites : impossible de ne pas avoir un bloc afin de mieux définir ce qui se trouve dans un bloc
- accès aléatoire via des index protégé
- conservation de la taille des tableaux et des chaines (contrairement à C qui les jette et utilise un pointeur nul pour définir la fin)
- souvenir du membre actif des unions


Néologismes
-----------
- faiture   : feature
- entredit  : interdit
- enligner  : inline
- compileur : compilateur
- moultfilage : multithreading


Anglicisme
----------
- fuzzing/fuzzées
- constant folding
- stack canaries
