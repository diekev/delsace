// Interface avec la bibliothèque PNG, ainsi qu'une fonction pour charger une image
// depuis un fichier PNG

importe Couleur

#inclus "png.h"

#bibliothèque_dynamique "png"

png_struct_def :: struct externe;
png_info_def :: struct externe;

png_create_read_struct :: fonc externe (
    user_png_ver: *z8,
    error_ptr: *rien,
    error_fn: fonc(*png_struct_def, *z8)(rien),
    warn_fn: fonc(*png_struct_def, *z8)(rien)) -> *png_struct_def

png_destroy_read_struct :: fonc externe (
    png: **png_struct_def,
    info : **png_info_def,
    end_info: **png_info_def) -> rien

png_create_info_struct :: fonc externe (
    png: *png_struct_def) -> *png_info_def


__jmp_buf_tag :: struct externe;

setjmp :: fonc externe (env: *__jmp_buf_tag) -> z32

png_jmpbuf :: fonc externe (png: *png_struct_def) -> *__jmp_buf_tag

_IO_FILE :: struct externe;

fopen :: fonc externe (chemin: *z8, mode: *z8) -> *_IO_FILE
fclose :: fonc externe (file: *_IO_FILE) -> rien

png_init_io :: fonc externe (png: *png_struct_def, file: *_IO_FILE) -> rien

png_read_info :: fonc externe (png: *png_struct_def, info : *png_info_def) -> rien

png_get_image_height :: fonc externe (png: *png_struct_def, info : *png_info_def) -> n32
png_get_image_width :: fonc externe (png: *png_struct_def, info : *png_info_def) -> n32
png_get_color_type :: fonc externe (png: *png_struct_def, info : *png_info_def) -> n8
png_get_bit_depth :: fonc externe (png: *png_struct_def, info : *png_info_def) -> n8
png_read_update_info :: fonc externe (png: *png_struct_def, info : *png_info_def) -> rien
png_get_rowbytes :: fonc externe (png: *png_struct_def, info : *png_info_def) -> n32

png_set_strip_16 :: fonc externe (png: *png_struct_def) -> rien
png_set_palette_to_rgb :: fonc externe (png: *png_struct_def) -> rien
png_set_expand_gray_1_2_4_to_8 :: fonc externe (png: *png_struct_def) -> rien
png_set_tRNS_to_alpha :: fonc externe (png: *png_struct_def) -> rien
png_set_filler :: fonc externe (png: *png_struct_def, filler: n32, flags: z32) -> rien
png_set_gray_to_rgb :: fonc externe (png: *png_struct_def) -> rien
png_get_valid :: fonc externe (png: *png_struct_def, info : *png_info_def, flags: n32) -> n32

png_read_image :: fonc externe (png: *png_struct_def, image: **n8) -> rien

charge_image_png :: fonc (chemin: chaine) -> *Image
{
    _PNG_COLOR_TYPE_GRAY : n32 = 0
    _PNG_COLOR_TYPE_PALETTE : n32 = 3
    _PNG_COLOR_TYPE_RGB : n32 = 2
    _PNG_COLOR_TYPE_RGB_ALPHA : n32 = 6
    _PNG_COLOR_TYPE_GRAY_ALPHA : n32 = 4
    _PNG_FILLER_AFTER := 1
    _PNG_INFO_tRNS : n32 = 0x0010

    image := loge Image

	png := png_create_read_struct("1.6.34".pointeur, nul, nul, nul)

	si png == nul {
		retourne image
	}

	info := png_create_info_struct(png)

    diffère { png_destroy_read_struct(@png, @info, nul); }

	si info == nul {
		retourne image
	}

	si setjmp(png_jmpbuf(png)) != 0 {
		retourne image
	}

	file := fopen(chemin.pointeur, "rb".pointeur)

	si file == nul {
		retourne image
	}

    diffère { fclose(file); }

	png_init_io(png, file)

	png_read_info(png, info)

	hauteur    := png_get_image_height(png, info)
	largeur    := png_get_image_width(png, info)
	color_type := png_get_color_type(png, info)
	bit_depth  := png_get_bit_depth(png, info)

	si bit_depth == 16 {
		png_set_strip_16(png)
	}

	si color_type == _PNG_COLOR_TYPE_PALETTE {
		png_set_palette_to_rgb(png)
	}

	// PNG_COLOR_TYPE_GRAY_ALPHA is always 8 or 16bit depth.
	si color_type == _PNG_COLOR_TYPE_GRAY && bit_depth < 8 {
		png_set_expand_gray_1_2_4_to_8(png)
	}

	si png_get_valid(png, info, _PNG_INFO_tRNS) != 0 {
		png_set_tRNS_to_alpha(png)
	}

	// These color_type don't have an alpha channel then fill it with 0xff.
	si (color_type == _PNG_COLOR_TYPE_RGB || color_type == _PNG_COLOR_TYPE_GRAY || color_type == _PNG_COLOR_TYPE_PALETTE) {
		png_set_filler(png, 0xFF comme n32, _PNG_FILLER_AFTER)
	}

	si (color_type == _PNG_COLOR_TYPE_GRAY || color_type == _PNG_COLOR_TYPE_GRAY_ALPHA) {
		png_set_gray_to_rgb(png)
	}

	png_read_update_info(png, info)

	row_pointers := loge [hauteur]*n8
	row_pointers.taille = hauteur comme z64

	pour y dans 0 ... hauteur comme z32 - 1 {
        row_bytes := png_get_rowbytes(png, info)
        row_pointers[y] = malloc(row_bytes comme z64) comme *n8
	}

	png_read_image(png, @row_pointers[0])

    image.hauteur = hauteur comme z32
    image.largeur = largeur comme z32
    image.tampon = loge [image.hauteur * image.largeur]Couleur
	image.tampon.taille = image.hauteur * image.largeur

    index : z64 = 0

	pour row dans row_pointers {
        pour x dans 0 ... largeur comme z32 - 1 {
            px := @row[x * 4]

            couleur : Couleur
            couleur.r = px[0] comme r32 / 255.0
            couleur.v = px[1] comme r32 / 255.0
            couleur.b = px[2] comme r32 / 255.0
            couleur.a = px[3] comme r32 / 255.0

            image.tampon[index] = couleur
            index += 1
        }
	}

	pour row dans row_pointers {
        free(row)
	}

    déloge row_pointers

    retourne image
}
