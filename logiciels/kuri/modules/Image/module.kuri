importe Chaine
importe Couleur
importe Fondation
importe Math
importe MIME
importe SysFichier
importe PThread

libtbb :: #bibliothèque "tbb"

#dépendance_bibliothèque libmodule_c_image libtbb

FormatPixel :: énum n16 {
    Gris_8
    Gris_32

    RVB_8
    RVB_32

    RVBA_8
    RVBA_32
}

DirectionImage :: énum n16 {
    /* L'image a son point d'origine en haut : la première ligne de l'image est celle du haut. */
    HautEnBas
    /* L'image a son point d'origine en bas : la première ligne de l'image est celle du bas. */
    BasEnHaut
}

DescriptriceImage :: struct {
    largeur: n32
    hauteur: n32
    format: FormatPixel
    direction: DirectionImage
}

donne_taille_données :: fonc (desc: *DescriptriceImage) -> z64
{
    résultat := (desc.largeur comme n64) * (desc.hauteur comme n64)
    résultat *= donne_taille_octet_pixel(mémoire(desc))
    retourne résultat comme z64
}

donne_taille_octet_pixel :: fonc (desc: DescriptriceImage) -> n32
{
    discr desc.format {
        Gris_8 {
            retourne taille_de(n8)
        }
        Gris_32 {
            retourne taille_de(r32)
        }
        RVB_8 {
            retourne taille_de(n8) * 3
        }
        RVB_32 {
            retourne taille_de(r32) * 3
        }
        RVBA_8 {
            retourne taille_de(n8) * 4
        }
        RVBA_32 {
            retourne taille_de(r32) * 4
        }
    }

    panique("format invalide")
}

donne_nombre_de_pixels :: fonc (desc: DescriptriceImage) -> n64
{
    retourne desc.largeur * desc.hauteur
}

SourceDonnéesImage :: énum n8 {
    /* L'image possède les données. */
    Interne
    /* Les données de l'image appartiennent à quelqu'un d'autres et ne peuvent
     * être détruites avec l'image. */
    Externe
}

/* ------------------------------------------------------------------------- */
/** \nom NouvelleImage
 * \{ */

NouvelleImage :: struct {
    données: *octet
    desc: DescriptriceImage
    source_données: SourceDonnéesImage
}

crée_image :: fonc (desc: *DescriptriceImage) -> NouvelleImage
{
    taille_données := donne_taille_données(desc)
    données := loge_tableau(octet, taille_données)

    résultat: NouvelleImage
    résultat.données = données.pointeur
    résultat.desc = mémoire(desc)
    résultat.source_données = SourceDonnéesImage.Interne
    retourne résultat
}

crée_image_pour_données_externe :: fonc (données: *octet, largeur: n32, hauteur: n32, format: FormatPixel, direction := DirectionImage.HautEnBas) -> NouvelleImage
{
    résultat: NouvelleImage
    résultat.données = données
    résultat.desc.largeur = largeur
    résultat.desc.hauteur = hauteur
    résultat.desc.format = format
    résultat.desc.direction = direction
    résultat.source_données = SourceDonnéesImage.Externe
    retourne résultat
}

crée_image_depuis_image_io :: fonc (image: *ImageIO) -> NouvelleImage
{
    desc := donne_descriptice_depuis_image_io(image)
    résultat := crée_image(*desc)
    copie_mem_nonsur(src = image.donnees, dst = résultat.données, taille = donne_taille_données(*desc))
    retourne résultat
}

donne_descriptice_depuis_image_io :: fonc (image: *ImageIO) -> DescriptriceImage
{
    desc: DescriptriceImage
    desc.largeur = image.largeur comme n32
    desc.hauteur = image.hauteur comme n32

    si image.nombre_composants == 1 {
        si image.format == ImageIO_DataType.UINT8 || image.format == ImageIO_DataType.INT8 {
            desc.format = FormatPixel.Gris_8
        }
        sinon si image.format == ImageIO_DataType.FLOAT {
            desc.format = FormatPixel.Gris_32
        }
        sinon {
            panique("type image non supporté : %", image.format)
        }
    }
    sinon si image.nombre_composants == 3 {
        si image.format == ImageIO_DataType.UINT8 || image.format == ImageIO_DataType.INT8 {
            desc.format = FormatPixel.RVB_8
        }
        sinon si image.format == ImageIO_DataType.FLOAT {
            desc.format = FormatPixel.RVB_32
        }
        sinon {
            panique("type image non supporté : %", image.format)
        }
    }
    sinon si image.nombre_composants == 4 {
        si image.format == ImageIO_DataType.UINT8 || image.format == ImageIO_DataType.INT8 {
            desc.format = FormatPixel.RVBA_8
        }
        sinon si image.format == ImageIO_DataType.FLOAT {
            desc.format = FormatPixel.RVBA_32
        }
        sinon {
            panique("type image non supporté : %", image.format)
        }
    }
    sinon {
        panique("nombre de composant non-géré : %", image.nombre_composants)
    }

    retourne desc
}

détruit_données_image :: fonc (image: *NouvelleImage)
{
    si image.source_données == SourceDonnéesImage.Externe {
        retourne
    }

    taille_données := donne_taille_données(*image.desc)
    données: [..]octet
    données.pointeur = image.données
    données.capacité = taille_données

    déloge(données)
    image.données = nul
}

charge_image :: fonc (chemin: chaine) -> (bool, NouvelleImage)
{
    contenu := contenu_fichier_binaire(CheminFichier(chemin))
    diffère déloge(contenu)
    retourne décode_image(contenu, "", chemin)
}

décode_image :: fonc (données: []octet, type_mime: chaine, chemin := "") -> (bool, NouvelleImage)
{
    si type_mime == "" {
        si chemin == "" {
            panique("Aucun type mime ou chemin pour décoder l'image.")
        }

        chm := CheminFichier(chemin)
        type_mime = type_mime_pour_extension(chm.extension())
    }

    si type_mime == "image/webp" {
        data := données.pointeur comme *n8
        data_size := données.taille comme n64

        hauteur: z32
        largeur: z32
        résultat_info := WebPGetInfo(data, data_size, *largeur, *hauteur)
        si résultat_info == 0 {
            imprime("Impossible de lire l'image WebP.")
            retourne faux, NouvelleImage()
        }

        tampon := loge_tableau(octet, hauteur comme z64 * largeur comme z64 * 4)

        output_buffer := tampon.pointeur comme *n8
        output_buffer_size := tampon.capacité comme n64

        résultat_décodage := WebPDecodeRGBAInto(data, data_size, output_buffer, output_buffer_size, largeur * 4)
        saufsi résultat_décodage {
            imprime("Impossible de décoder l'image WebP.")
            retourne faux, NouvelleImage()
        }
        assert(résultat_décodage == output_buffer)

        résultat: NouvelleImage
        résultat.desc.hauteur = hauteur comme n32
        résultat.desc.largeur = largeur comme n32
        résultat.desc.format = FormatPixel.RVBA_8
        résultat.données = tampon.pointeur
        retourne vrai, résultat
    }

    si type_mime == "image/gif" {
        data := données.pointeur comme *n8
        data_size := données.taille comme n64

        image: ImageIO
        résultat_img := IMG_ouvre_gif_depuis_memoire(data, data_size, *image)

        si résultat_img != ResultatOperation.OK {
            retourne faux, NouvelleImage()
        }

        résultat := crée_image_depuis_image_io(*image)
        IMG_detruit_image(*image)
        retourne vrai, résultat
    }

    si type_mime == MIME_image_svg {
        chaine_c := crée_chaine_c(chaine(données.pointeur comme *z8, données.taille))
        diffère détruit_chaine_c(chaine_c)

        image_svg: SVGImage
        saufsi SVG_parse_image_depuis_contenu(chaine_c comme *z8, *image_svg) {
            retourne faux, NouvelleImage()
        }
        diffère SVG_image_detruit(*image_svg)

        desc: DescriptriceImage
        desc.largeur = image_svg.width comme n32
        desc.hauteur = image_svg.height comme n32
        desc.format = FormatPixel.RVBA_8

        résultat := crée_image(*desc)
        SVG_image_ratisse(*image_svg, résultat.données comme *n8, desc.largeur comme z32, desc.hauteur comme z32)
        retourne vrai, résultat
    }

    si chemin == "" {
        si type_mime == "image/png" {
            chemin = "image.png"
        }
        sinon si type_mime == "image/jpeg" {
            chemin = "image.jpeg"
        }
        sinon {
            panique("chemin image non résolvable")
        }
    }

    proxy_image := IMG_cree_proxy_memoire(données.pointeur, données.taille comme n64)
    diffère IMG_detruit_proxy(proxy_image)

    chn_c_chemin := crée_chaine_c(chemin)
    diffère détruit_chaine_c(chn_c_chemin)

    image: ImageIO
    résultat_lecture_image := IMG_ouvre_image_avec_proxy(chn_c_chemin, *image, proxy_image, ImageIO_DataType.UNKNOWN)
    si résultat_lecture_image != ResultatOperation.OK {
        imprime("Impossible de lire l'image : %\n", résultat_lecture_image)
        retourne faux, NouvelleImage()
    }

    résultat := crée_image_depuis_image_io(*image)
    IMG_detruit_image(*image)
    retourne vrai, résultat
}

échantillonne_prochain :: fonc (image: *NouvelleImage, pos: *Vec2) -> CouleurRVBA
{
    assert(image.desc.format == FormatPixel.RVBA_32)
    largeur := image.desc.largeur comme z32
    hauteur := image.desc.hauteur comme z32

    x := pos.x * largeur comme r32
    y := pos.y * hauteur comme r32

    xi := x comme z32
    yi := y comme z32

    restreint(*xi, 0 comme z32, largeur - 1)
    restreint(*yi, 0 comme z32, hauteur - 1)

    index := xi + yi * largeur

    couleurs := image.données comme *CouleurRVBA
    retourne couleurs[index]
}

pixels_comme :: fonc (image: NouvelleImage, $T: type_de_données) -> []T
{
    tableau : []T = ---
    tableau.pointeur = image.données comme *T
    tableau.taille = image.hauteur * image.largeur
    retourne tableau
}

pixel_à_la_position :: fonc (image: NouvelleImage, x: z32, y: z32, $T: type_de_données) -> *T
{
    largeur := image.desc.largeur comme z32
    index := y * largeur + x
    retourne (*image.données[0] comme *T) + index
}

crée_icone :: fonc (image: NouvelleImage, hauteur: z32) -> NouvelleImage
{
    largeur := 0

    si image.desc.largeur > image.desc.hauteur {
        largeur = hauteur
        hauteur = image.desc.hauteur comme z32 * largeur / image.desc.largeur comme z32
    }
    sinon si image.desc.hauteur > image.desc.largeur {
        largeur = image.desc.largeur comme z32 * hauteur / image.desc.hauteur comme z32
    }
    sinon {
        largeur = hauteur
    }

    desc := DescriptriceImage(largeur comme n32, hauteur comme n32, image.desc.format)
    résultat := crée_image(*desc)

    discr image.desc.format {
        Gris_8 {
            tampon := donne_tampon_gris_8bit(image)
            tampon_icone := donne_tampon_gris_8bit(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        RVB_8 {
            tampon := donne_tampon_rvb_8bit(image)
            tampon_icone := donne_tampon_rvb_8bit(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        RVBA_8 {
            tampon := donne_tampon_rvba_8bit(image)
            tampon_icone := donne_tampon_rvba_8bit(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        Gris_32 {
            tampon := donne_tampon_gris(image)
            tampon_icone := donne_tampon_gris(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        RVB_32 {
            tampon := donne_tampon_spectre(image)
            tampon_icone := donne_tampon_spectre(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        RVBA_32 {
            tampon := donne_tampon_rvba(image)
            tampon_icone := donne_tampon_rvba(résultat)
            rééchantillonne_prochain_voisin(tampon, *tampon_icone)
        }
        sinon {
            panique("image non supportée : %", image.desc.format)
        }
    }

    retourne résultat
}

crée_icone_pour_image_invalide :: fonc (taille_icone: z32) -> NouvelleImage
{
    desc := DescriptriceImage(taille_icone comme n32, taille_icone comme n32, FormatPixel.RVB_32)
    résultat := crée_image(*desc)
    remplis_tampon(résultat.donne_tampon_spectre(), Spectre(1.0, 0.0, 1.0))
    retourne résultat
}

crée_icone_depuis_chemin :: fonc (chemin: CheminFichier, taille_icone: z32) -> NouvelleImage
{
    icone: NouvelleImage

    succès, image := charge_image(chemin.chn)
    si succès {
        icone = crée_icone(image, taille_icone)
        détruit_données_image(*image)
    }

    retourne icone
}

/** \} */

charge "interface_image"

liboiio :: #bibliothèque "OpenImageIO"
liboiio_util :: #bibliothèque "OpenImageIO_Util"
// libjpeg :: #bibliothèque "jpeg"
// libpugixml :: #bibliothèque "pugixml"
// libtiff :: #bibliothèque "tiff"
// libtiffxx :: #bibliothèque "tiffxx"
// libz :: #bibliothèque "z"
// libboost_thread :: #bibliothèque "boost_thread"
// libboost_system :: #bibliothèque "boost_system"
// libboost_filesystem :: #bibliothèque "boost_filesystem"
// libopenjp2 :: #bibliothèque "openjp2"
// libdl :: #bibliothèque "dl"
// libpng :: #bibliothèque "png"

// #dépendance_bibliothèque liboiio_util libdl
// #dépendance_bibliothèque libtiff libz
// #dépendance_bibliothèque libtiff libtiffxx
// #dépendance_bibliothèque liboiio libpng
// #dépendance_bibliothèque liboiio libwebp
// #dépendance_bibliothèque liboiio libtiff
// #dépendance_bibliothèque liboiio libpthread
// #dépendance_bibliothèque liboiio libpugixml
// #dépendance_bibliothèque liboiio libjpeg
// #dépendance_bibliothèque liboiio libopenjp2
#dépendance_bibliothèque liboiio liboiio_util
// #dépendance_bibliothèque libmodule_c_image libboost_thread
// #dépendance_bibliothèque libmodule_c_image libboost_system
// #dépendance_bibliothèque libmodule_c_image libboost_filesystem
#dépendance_bibliothèque libmodule_c_image liboiio

écris_image :: fonc (chemin: chaine, image: NouvelleImage)
{
    écris_image(CheminFichier(chemin), image)
}

écris_image :: fonc (chemin: CheminFichier, image: NouvelleImage)
{
    image_io: ImageIO = ---
    image_io.largeur = image.desc.largeur comme z32
    image_io.hauteur = image.desc.hauteur comme z32
    image_io.donnees = image.données comme *n8

    discr image.desc.format {
        Gris_8 {
            image_io.format = ImageIO_DataType.UINT8
            image_io.nombre_composants = 1
        }
        RVB_8 {
            image_io.format = ImageIO_DataType.UINT8
            image_io.nombre_composants = 3
        }
        RVBA_8 {
            image_io.format = ImageIO_DataType.UINT8
            image_io.nombre_composants = 4
        }
        Gris_32 {
            image_io.format = ImageIO_DataType.FLOAT
            image_io.nombre_composants = 1
        }
        RVB_32 {
            image_io.format = ImageIO_DataType.FLOAT
            image_io.nombre_composants = 3
        }
        RVBA_32 {
            image_io.format = ImageIO_DataType.FLOAT
            image_io.nombre_composants = 4
        }
    }

    chn_c_sortie := crée_chaine_c(chemin.chn)
    diffère détruit_chaine_c(chn_c_sortie)

    _ := IMG_ecris_image(chn_c_sortie comme *z8, *image_io)
}

calcule_empreinte_floue :: fonc (image: NouvelleImage, composants_x: z32, composants_y: z32) -> chaine
{
    tampon: [2 + 4 + (9 * 9 - 1) * 2 + 1]z8
    taille_résultat: z64

    discr image.desc.format {
        Gris_8 {
            panique("non-implémenté")
        }
        RVB_8 {
            panique("non-implémenté")
        }
        RVBA_8 {
            panique("non-implémenté")
        }
        Gris_32 {
            tampon_img := image.donne_tampon_gris()
            IMG_calcule_empreinte_floue_reel(tampon_img.données, tampon_img.largeur, tampon_img.hauteur, 1, composants_x, composants_y, *tampon[0], *taille_résultat)
        }
        RVB_32 {
            tampon_img := image.donne_tampon_spectre()
            IMG_calcule_empreinte_floue_reel(tampon_img.données comme *r32, tampon_img.largeur, tampon_img.hauteur, 3, composants_x, composants_y, *tampon[0], *taille_résultat)
        }
        RVBA_32 {
            tampon_img := image.donne_tampon_rvba()
            IMG_calcule_empreinte_floue_reel(tampon_img.données comme *r32, tampon_img.largeur, tampon_img.hauteur, 4, composants_x, composants_y, *tampon[0], *taille_résultat)
        }
    }

    résultat := loge_chaine(taille_résultat)

    pour 0 ... taille_résultat - 1 {
        résultat[it] = tampon[it]
    }

    retourne résultat
}

/* ------------------------------------------------------------------------- */
/** \nom Empreinte différentielle.
 *
 * Réduis l'image en niveau de gris pour faire 9x8 pixels (8 bit par ligne).
 * Pour chaque pixel de chaque ligne, le bit de l'empreinte est activé si la
 * valeur dudit pixel est inférieure à la valeur du pixel suivant.
 * Les lignes ont un pixel de plus pour la différence du dernier pixel (d'où la
 * taille de 9x8 au lieu de 8x8).
 *
 * Les bits sont mis en place en grand boutisme, du haut-gauche au bas-droit de
 * l'image.
 * 
 * Référence :
 * https://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
 * \{ */

calcule_empreinte_différentielle :: fonc (image: NouvelleImage) -> n64
{
    gris := convertis_en_nuances_de_gris(image)
    diffère détruit_données_image(*gris)

    tampon_gris := gris.donne_tampon_gris()

    sortie: [9 * 8]r32 = ---
    largeur_empreinte := 9
    hauteur_empreinte := 8
    tampon_empreinte: TamponImage(r32)
    tampon_empreinte.données = *sortie[0]
    tampon_empreinte.largeur = largeur_empreinte
    tampon_empreinte.hauteur = hauteur_empreinte

    rééchantillonne_prochain_voisin(tampon_gris, *tampon_empreinte)

    empreinte: n64
    bit : n64 = 63

    pour y dans hauteur_empreinte {
        pour x dans largeur_empreinte - 1 {
            index := y * largeur_empreinte + x
            
            si sortie[index] < sortie[index + 1] {
                empreinte |= (1 << bit) 
            }

            bit -= 1
        }
    }

    retourne empreinte
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Empreinte moyenne.
 *
 * Réduis l'image en niveau de gris pour faire 8x8 pixels (1 valeur par bit
 * d'empreinte). Pour chaque pixel, le bit de l'empreinte est activé si la
 * valeur dudit pixel est inférieure à la valeur moyenne des pixels.
 *
 * Les bits sont mis en place en grand boutisme, du haut-gauche au bas-droit de
 * l'image.
 * 
 * Référence :
 * https://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html
 * \{ */

calcule_empreinte_moyenne :: fonc (image: NouvelleImage) -> n64
{
    gris := convertis_en_nuances_de_gris(image)
    diffère détruit_données_image(*gris)

    tampon_gris := gris.donne_tampon_gris()

    sortie: [8 * 8]r32 = ---
    largeur_empreinte := 8
    hauteur_empreinte := 8
    tampon_empreinte: TamponImage(r32)
    tampon_empreinte.données = *sortie[0]
    tampon_empreinte.largeur = largeur_empreinte
    tampon_empreinte.hauteur = hauteur_empreinte

    rééchantillonne_prochain_voisin(tampon_gris, *tampon_empreinte)

    moyenne: r32
    pour sortie {
        moyenne += it
    }
    moyenne /= sortie.taille comme r32

    empreinte: n64
    bit : n64 = 63

    pour sortie {
        si it < moyenne {
            empreinte |= (1 << bit) 
        }

        bit -= 1
    }

    retourne empreinte
}

/** \} */

convertis_en_nuances_de_gris :: fonc (image: NouvelleImage) -> NouvelleImage
{
    résultat: NouvelleImage
    desc := image.desc
    nombre_de_pixels := desc.largeur * desc.hauteur

    discr image.desc.format {
        Gris_8, Gris_32 {
            résultat = image
            résultat.source_données = SourceDonnéesImage.Externe
        }
        RVB_8 {
            desc.format = FormatPixel.Gris_8
            résultat = crée_image(*desc)

            pixels_entrée := image.données comme *n8
            pixels_sortie := résultat.données comme *n8

            pour nombre_de_pixels {
                r := mémoire(pixels_entrée) comme r32 / 255.0
                v := mémoire(pixels_entrée + 1) comme r32 / 255.0
                b := mémoire(pixels_entrée + 2) comme r32 / 255.0

                l := luminance(CouleurRVBA(r, v, b))
                mémoire(pixels_sortie) = (l * 255.0) comme n8

                pixels_entrée += 3
                pixels_sortie += 1
            }
        }
        RVB_32 {
            desc.format = FormatPixel.Gris_32
            résultat = crée_image(*desc)

            pixels_entrée := image.données comme *r32
            pixels_sortie := résultat.données comme *r32

            pour nombre_de_pixels {
                r := mémoire(pixels_entrée)
                v := mémoire(pixels_entrée + 1)
                b := mémoire(pixels_entrée + 2)

                l := luminance(CouleurRVBA(r, v, b))
                mémoire(pixels_sortie) = l

                pixels_entrée += 3
                pixels_sortie += 1
            }
        }
        RVBA_8 {
            desc.format = FormatPixel.Gris_8
            résultat = crée_image(*desc)

            pixels_entrée := image.données comme *n8
            pixels_sortie := résultat.données comme *n8

            pour nombre_de_pixels {
                r := mémoire(pixels_entrée) comme r32 / 255.0
                v := mémoire(pixels_entrée + 1) comme r32 / 255.0
                b := mémoire(pixels_entrée + 2) comme r32 / 255.0

                l := luminance(CouleurRVBA(r, v, b))
                mémoire(pixels_sortie) = (l * 255.0) comme n8

                pixels_entrée += 4
                pixels_sortie += 1
            }
        }
        RVBA_32 {
            desc.format = FormatPixel.Gris_32
            résultat = crée_image(*desc)

            pixels_entrée := image.données comme *r32
            pixels_sortie := résultat.données comme *r32

            pour nombre_de_pixels {
                r := mémoire(pixels_entrée)
                v := mémoire(pixels_entrée + 1)
                b := mémoire(pixels_entrée + 2)

                l := luminance(CouleurRVBA(r, v, b))
                mémoire(pixels_sortie) = l

                pixels_entrée += 4
                pixels_sortie += 1
            }
        }
    }

    retourne résultat
}

TamponImage :: struct ($T: type_de_données) {
    données: *T
    largeur: z32
    hauteur: z32
}

remplis_tampon :: fonc (image: TamponImage($T), valeur: T)
{
    nombre_de_pixels := image.largeur * image.hauteur
    pour nombre_de_pixels {
        image.données[it] = valeur
    }
}

TamponImageGrise8Bit :: TamponImage(n8)
TamponImageRVBA8Bit :: TamponImage(CouleurRVBAN8)
TamponImageRVBA32Bit :: TamponImage(CouleurRVBA)

donne_tampon_gris :: fonc (image: NouvelleImage) -> TamponImage(r32)
{
    assert(image.desc.format == FormatPixel.Gris_32)
    résultat: TamponImage(r32) = ---
    résultat.données = image.données comme *r32
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

donne_tampon_gris_8bit :: fonc (image: NouvelleImage) -> TamponImage(n8)
{
    assert(image.desc.format == FormatPixel.Gris_8)
    résultat: TamponImage(n8) = ---
    résultat.données = image.données comme *n8
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

donne_tampon_spectre :: fonc (image: NouvelleImage) -> TamponImage(Spectre)
{
    assert(image.desc.format == FormatPixel.RVB_32)
    résultat: TamponImage(Spectre) = ---
    résultat.données = image.données comme *Spectre
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

donne_tampon_rvb_8bit :: fonc (image: NouvelleImage) -> TamponImage(CouleurRVBN8)
{
    assert(image.desc.format == FormatPixel.RVB_8)
    résultat: TamponImage(CouleurRVBN8) = ---
    résultat.données = image.données comme *CouleurRVBN8
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

donne_tampon_rvba :: fonc (image: NouvelleImage) -> TamponImage(CouleurRVBA)
{
    assert(image.desc.format == FormatPixel.RVBA_32)
    résultat: TamponImage(CouleurRVBA) = ---
    résultat.données = image.données comme *CouleurRVBA
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

donne_tampon_rvba_8bit :: fonc (image: NouvelleImage) -> TamponImage(CouleurRVBAN8)
{
    assert(image.desc.format == FormatPixel.RVBA_8)
    résultat: TamponImage(CouleurRVBAN8) = ---
    résultat.données = image.données comme *CouleurRVBAN8
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    retourne résultat
}

rééchantillonne_prochain_voisin :: fonc (entrée: TamponImage($T), sortie: *TamponImage(T))
{
    dlargeur := (entrée.largeur comme r32) / (sortie.largeur comme r32)
    dhauteur := (entrée.hauteur comme r32) / (sortie.hauteur comme r32)

    index_sortie := 0

    pixels_entrée := entrée.données
    pixels_sortie := sortie.données

    pour y dans sortie.hauteur {
        pour x dans sortie.largeur {
            position_x := (x comme r32 * dlargeur) comme z32
            position_y := (y comme r32 * dhauteur) comme z32

            index_entrée := position_y * entrée.largeur + position_x

            pixels_sortie[index_sortie] = pixels_entrée[index_entrée]
            index_sortie += 1
        }
    }
}

rééchantillonne_linéaire :: fonc (entrée: TamponImage($T), sortie: *TamponImage(T))
{
    index_sortie := 0
    pixels_sortie := sortie.données

    échelle_x := (entrée.largeur comme r32) / (sortie.largeur comme r32)
    échelle_y := (entrée.hauteur comme r32) / (sortie.hauteur comme r32)

    pour sy dans sortie.hauteur {
        yc := sy comme r32 * échelle_y
        frac_y := part_réelle(yc)
        j0 := part_entière(yc)
        j1 := j0 + 1

        décalage_j0 := j0 * entrée.largeur
        décalage_j1 := j1 * entrée.largeur

        pour sx dans sortie.largeur {
            xc := sx comme r32 * échelle_x
            frac_x := part_réelle(xc)
            i0 := part_entière(xc)
            i1 := i0 + 1

            idx0 := i0 + décalage_j0
            idx1 := i1 + décalage_j0
            idx2 := i0 + décalage_j1
            idx3 := i1 + décalage_j1

            grille := entrée.données

            résultat: T
            résultat += frac_x * frac_y * grille[idx0]
            résultat += (1.0 - frac_x) * frac_y * grille[idx1]
            résultat += frac_x * (1.0 - frac_y) * grille[idx2]
            résultat += (1.0 - frac_x) * (1.0 - frac_y) * grille[idx3]

            pixels_sortie[index_sortie] = résultat
            index_sortie += 1
        }
    }
}

échantillon_linéaire :: fonc (entrée: TamponImage($T), x: r32, y: r32) -> T
{
    rx := entrée.largeur
    ry := entrée.hauteur

    /* Enveloppe pour que 0 <= (x, y) < 1. */
    x = enveloppe(x)
    y = enveloppe(y)

    /* Convertis la position dans l'espace continu. */
    xc := x * rx comme r32
    yc := y * ry comme r32

    i0 := part_entière(xc)
    j0 := part_entière(yc)

    i1 := i0 + 1
    j1 := j0 + 1

    frac_x := part_réelle(xc)
    frac_y := part_réelle(yc)

    i0 %= rx
    j0 %= ry

    i1 %= rx
    j1 %= ry

    idx0 := i0 + j0 * rx
    idx1 := i1 + j0 * rx
    idx2 := i0 + j1 * rx
    idx3 := i1 + j1 * rx

    grille := entrée.données

    résultat: T
    résultat += frac_x * frac_y * grille[idx0]
    résultat += (1.0 - frac_x) * frac_y * grille[idx1]
    résultat += frac_x * (1.0 - frac_y) * grille[idx2]
    résultat += (1.0 - frac_x) * (1.0 - frac_y) * grille[idx3]
    retourne résultat
}

/* ------------------------------------------------------------------------- */
/** \nom Options de dessin des images pour les modules de dessin.
 * \{ */

/* Définis la manière de répéter une image lors de son dessin.
 *
 * Basée sur les options de CSS :
 * https://drafts.csswg.org/css-backgrounds-3/#background-repeat */
GenreRépétitionImage :: énum n8 {
    /* L'image ne doit être répétée. */
    Aucune
    /* L'image doit être répétée, et peut apparaître coupée. */
    Normale
    /* L'image doit être mise à l'échelle et répétée afin de couvrir son aire de dessin. */
    Arrondis
    /* L'image doit être répétée sans être coupée dans son aire de dessin.
     * Si possible, de l'espace est introduit entre les répétitions. */
    Espacé
}

/* Définis la manière de répéter une image sur chacun des axes lors de son image. */
RépétitionImage :: struct {
    x: GenreRépétitionImage
    y: GenreRépétitionImage
}

GenreÉchantillonnageImage :: énum n8 {
    Linéaire
    Prochain
}

/* Définis la manière d'échantillonner une image pour la minification ou la magnification. */
ÉchantillonnageImage :: struct {
    pour_minification: GenreÉchantillonnageImage
    pour_magnification: GenreÉchantillonnageImage
}

ParamètresRenduImage :: struct {
    répétition: RépétitionImage
    échantillonnage: ÉchantillonnageImage
}

/** \} */

/*

// tentative de l'implémentation en Kuri de https://github.com/woltapp/blurhash/tree/master/C

ErreurHachage :: erreur {
    NombreDeComposantXTropPetit
    NombreDeComposantXTropGrand
    NombreDeComposantYTropPetit
    NombreDeComposantYTropGrand
}

RésultatHachage :: union {
    e: ErreurHachage
    c: chaine
}

blurHashForPixels :: fonc (
    composants_x: z32,
    composants_y: z32,
    image: *ImageIO) -> RésultatHachage
{
    si composants_x < 1 {
        retourne ErreurHachage.NombreDeComposantXTropPetit
    }

    si composants_x > 9 {
        retourne ErreurHachage.NombreDeComposantXTropGrand
    }

    si composants_y < 1 {
        retourne ErreurHachage.NombreDeComposantYTropPetit
    }

    si composants_y > 9 {
        retourne ErreurHachage.NombreDeComposantYTropGrand
    }

    buffer : [2 + 4 + (9 * 9 - 1) * 2 + 1]z8

    factors : [9][9][3]r32

    pour y dans 0 ... composants_y - 1 {
        pour x dans 0 ... composants_x - 1 {
            factor := multiplyBasisFunction(x, y, image)
            factors[y][x][0] = factor[0]
            factors[y][x][1] = factor[1]
            factors[y][x][2] = factor[2]
        }
    }

    dc := *factors[0][0][0]
    ac := dc + 3
    acCount := composants_x * composants_y - 1

    sizeFlag := (composants_x - 1) + (composants_y - 1) * 9
    ptr := encode_int(sizeFlag, 1, *buffer[0])

    maximumValue : r32

    si acCount > 0 {
        actualMaximumValue := 0.0

        pour i dans 0 ... acCount * 3 - 1 {
            actualMaximumValue = max(abs(ac[i]), actualMaximumValue)
        }

        quantisedMaximumValue := max(0, min(82, plancher(actualMaximumValue * 166.0 - 0.5) comme z32))
        maximumValue = (quantisedMaximumValue + 1) comme r32 / 166.0
        ptr = encode_int(quantisedMaximumValue, 1, ptr)
    }
    sinon {
        maximumValue = 1.0
        ptr = encode_int(0, 1, ptr)
    }

    ptr = encode_int(encodeDC(dc[0], dc[1], dc[2]), 4, ptr)

    pour i dans 0 ... acCount - 1 {
        ptr = encode_int(encodeAC(ac[i * 3 + 0], ac[i * 3 + 1], ac[i * 3 + 2], maximumValue), 2, ptr)
    }

    mémoire(ptr) = 0

    taille_chaine := (ptr - *buffer[0]) comme z64

    chn := chaine(*buffer[0], taille_chaine)

    imprime("Résultat : %\n", chn)

    retourne ""
}

résultat_fonction_base : [3]r32

multiplyBasisFunction :: fonc (
    composant_x: z32,
    composant_y: z32,
    image: *ImageIO) -> *r32
{
    r := 0.0
    g := 0.0
    b := 0.0

    normalisation := 1.0

    si (composant_x != 0 || composant_y != 0) {
        normalisation = 2.0
    }

    pour y dans 0 ... image.hauteur - 1 {
        pour x dans 0 ... image.largeur - 1 {
            fraction_largeur := x comme r32 / image.largeur comme r32
            fraction_hauteur := y comme r32 / image.hauteur comme r32

            cos_composant_x := cosinus(Constantes(r32).PI * composant_x comme r32 * fraction_largeur)
            cos_composant_y := cosinus(Constantes(r32).PI * composant_y comme r32 * fraction_hauteur)

            base := cos_composant_x * cos_composant_y

            pixel := *image.données[x * image.composants + y * image.largeur]

            r += base * sRGBToLinear(pixel[0])
            g += base * sRGBToLinear(pixel[1])
            b += base * sRGBToLinear(pixel[2])
        }
    }

    scale := normalisation / (image.largeur * image.hauteur) comme r32

    résultat_fonction_base[0] = r * scale
    résultat_fonction_base[1] = g * scale
    résultat_fonction_base[2] = b * scale

    retourne *résultat_fonction_base[0]
}

encodeDC :: fonc (r: r32, g: r32, b: r32) -> z32
{
    roundedR := linearTosRGB(r)
    roundedG := linearTosRGB(g)
    roundedB := linearTosRGB(b)
    retourne (roundedR << 16) + (roundedG << 8) + roundedB
}

encodeAC :: fonc (r: r32, g: r32, b: r32, maximumValue: r32) -> z32
{
    quantR := max(0.0, min(18.0, floor(signPow(r / maximumValue, 0.5) * 9.0 + 9.5) comme r32))
    quantG := max(0.0, min(18.0, floor(signPow(g / maximumValue, 0.5) * 9.0 + 9.5) comme r32))
    quantB := max(0.0, min(18.0, floor(signPow(b / maximumValue, 0.5) * 9.0 + 9.5) comme r32))

    retourne (quantR * 19 * 19 + quantG * 19 + quantB) comme z32
}

signPow :: fonc (value: r32, exp: r32) -> r32
{
    retourne copie_signe(puissance(abs(value), exp), value)
}

encode_int :: fonc (value: z32, length: z32, destination: *z8) -> *z8
{
    characters :: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~"

    divisor := 1

    pour i dans 0 ... length - 1 {
        divisor *= 83
    }

    pour i dans 0 ... length - 1 {
        digit := (value / divisor) % 83
        divisor /= 83

        mémoire(destination) = characters[digit]
        destination += 1
    }

    retourne destination
}
*/

/* ------------------------------------------------------------------------- */
/** \nom WebP
 * libwebp version 1.4
 * \{ */

libwebp :: #bibliothèque "webp"
libsharpyuv :: #bibliothèque "sharpyuv"
libwebpdemux :: #bibliothèque "webpdemux"
libwebpmux :: #bibliothèque "webpmux"

#dépendance_bibliothèque libwebp libsharpyuv
#dépendance_bibliothèque libwebp libwebpdemux
#dépendance_bibliothèque libwebp libwebpmux

#dépendance_bibliothèque libwebp libpthread

WebPGetInfo :: fonc (data: *n8, data_size: n64, width: *z32, height: *z32) -> z32 #externe libwebp

WebPDecodeRGBInto :: fonc (data: *n8, data_size: n64, output_buffer: *n8, output_buffer_size: n64, output_stride: z32) -> *n8 #externe libwebp
WebPDecodeRGBAInto :: fonc (data: *n8, data_size: n64, output_buffer: *n8, output_buffer_size: n64, output_stride: z32) -> *n8 #externe libwebp

/** \} */
