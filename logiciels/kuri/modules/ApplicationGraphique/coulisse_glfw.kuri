importe Chaine
importe Fondation
importe Géométrie
importe GLFW
importe OpenGL
importe Périphériques
importe Structures

/* ------------------------------------------------------------------------- */
/** \nom Fenêtre GLFW
 * \{ */

FenêtreGLFW :: struct {
    empl base: Fenêtre

    fenêtre : *GLFWwindow = nul
}

crée_fenêtre_glfw :: fonc (args: *ArgumentsCréationFenêtre) -> Optionnel(*FenêtreGLFW)
{
    chn_titre := crée_chaine_c(args.titre)
    diffère détruit_chaine_c(chn_titre)

    glfwWindowHint(CONTEXT_GLFW_VERSION_MAJOR, 4)
    glfwWindowHint(CONTEXT_GLFW_VERSION_MINOR, 0)

    largeur := args.rect.largeur
    hauteur := args.rect.hauteur

    fenêtre_glfw := glfwCreateWindow(largeur, hauteur, chn_titre comme *z8, nul, nul)
    si fenêtre_glfw == nul {
        imprime("Impossible de créer la fenêtre !\n")
        glfwTerminate()
        retourne
    }

    glfwMakeContextCurrent(fenêtre_glfw)
    glfwSwapInterval(1)

    {
        // À FAIRE : utilise ÉvènementsRequis
        glfwSetKeyCallback(fenêtre_glfw, rappel_clavier)
        glfwSetCursorPosCallback(fenêtre_glfw, rappel_position_souris)
        glfwSetMouseButtonCallback(fenêtre_glfw, rappel_bouton_souris)
        glfwSetScrollCallback(fenêtre_glfw, rappel_roulette)
        // Décommente pour activer le redimensionnement
        //glfwSetWindowSizeCallback(fenêtre_glfw, rappel_dimension);
    }

    résultat := loge(FenêtreGLFW)
    résultat.fenêtre = fenêtre_glfw
    résultat.hauteur = args.rect.hauteur
    résultat.largeur = args.rect.largeur
    résultat.sur_destruction = sur_destruction_fenêtre_glfw
    retourne résultat
}

sur_destruction_fenêtre_glfw :: fonc (fenêtre: *Fenêtre)
{
    fenêtre_glfw := fenêtre comme *FenêtreGLFW
    glfwDestroyWindow(fenêtre_glfw.fenêtre)
    déloge(fenêtre_glfw)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ApplicationGLFW
 * \{ */

ApplicationGLFW :: struct {
    empl base: Application

    /* Sauvegarde l'état car GLFW ne renseigne ceci que la souris bouge. */
    état_souris: ÉtatSouris
}

crée_application_glfw :: fonc () -> *ApplicationGLFW
{
    si glfwInit() == 0 {
        imprime("Impossible d'initialiser GLFW !\n")
        retourne nul
    }

    app := loge(ApplicationGLFW)
    retourne app
}

crée_fenêtre_principale :: fonc (app: *ApplicationGLFW, cliente: *$TypeCliente, nom: chaine, rect: RectanglePosDim(z32), plein_écran := faux) -> bool
#corps_texte {
    possède_sur_création_fenêtre := cliente_possède_sur_création_fenêtre(TypeCliente)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    préambule := «
    fenêtre := crée_fenêtre_principal_impl_glfw(nom, rect, plein_écran)
    saufsi fenêtre {
        retourne faux
    }
    app.fenêtre = fenêtre
    »

    ajoute_au_tampon(*enchaineuse, préambule)
    si possède_sur_création_fenêtre {
        ajoute_au_tampon(*enchaineuse, "cliente.sur_création_fenêtre(cliente, fenêtre)\n")
    }

    /* Hack pour éviter les erreurs de compilation.
     * À FAIRE(langage) : système pour dire qu'un paramètre est peut-être inutilisé. */
    ajoute_au_tampon(*enchaineuse, "retourne cliente != nul\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

crée_fenêtre_principal_impl_glfw :: fonc (nom: chaine, rect: RectanglePosDim(z32), plein_écran := faux) -> *FenêtreGLFW
{
    args_création_fenêtre: ArgumentsCréationFenêtre
    args_création_fenêtre.titre = nom
    args_création_fenêtre.rect = rect
    args_création_fenêtre.plein_écran = plein_écran

    fenêtre: *FenêtreGLFW
    discr crée_fenêtre_glfw(*args_création_fenêtre) {
        Quelque(fenêtre_glfw) {
            fenêtre = fenêtre_glfw
        }
        sinon {
            retourne nul
        }
    }

    /* Nous devons avoir un contexte pour ceci. */
    saufsi initialise_opengl() {
        détruit_fenêtre(fenêtre)
        imprime("Erreur lors de l'initilisation de GLEW !\n")
        retourne nul
    }

    retourne fenêtre
}

exécute :: fonc (app: *ApplicationGLFW, cliente: *$TypeCliente)
{
    saufsi app.fenêtre {
        imprime("L'application n'a pas de fenêtre")
        exit(1)
    }

    // À FAIRE : définis le taux/la stratégie de rafraichissement
    fenêtre_principale := app.fenêtre comme *FenêtreGLFW

    tantque glfwWindowShouldClose(fenêtre_principale.fenêtre) == 0 {
        glfwWaitEvents()
        gère_évènement(app, cliente)
        dessine_application(app, cliente)
    }

    détruit_fenêtre(app.fenêtre)
    déloge(app)
    glfwTerminate()
    détruit(VG_file_évènements)
}

dessine_application :: fonc (app: *ApplicationGLFW, cliente: *$TypeCliente)
#corps_texte {
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "glClear(GL_COLOR_BUFFER_BIT)\n")

    mode_dessin := détermine_mode_dessin_fenêtre(TypeCliente)
    discr mode_dessin {
        AUCUN {
            /* Rien à faire. */
        }
        FENÊTRE {
            ajoute_au_tampon(*enchaineuse, "cliente.sur_rendu_fenêtre(cliente, app.fenêtre)\n")
        }
        PERSONNALISÉ {
            ajoute_au_tampon(*enchaineuse, "cliente.sur_rendu_fenêtre(cliente)\n")
        }
    }

    ajoute_au_tampon(*enchaineuse, "glfwSwapBuffers((app.fenêtre comme *FenêtreGLFW).fenêtre)\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Évènements
 * \{ */

gère_évènement :: fonc (app: *ApplicationGLFW, cliente: *$TypeCliente)
#corps_texte {
    évènements_requis := détermine_évènements_requis(TypeCliente)

    // À FAIRE : implémente tous les évènements, ainsi que les rappels associés
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "tantque !est_vide(VG_file_évènements)\n {\n")
    ajoute_au_tampon(*enchaineuse, "    évènement := défile(VG_file_évènements)\n")
    ajoute_au_tampon(*enchaineuse, "    si évènement.type == type_évènement.SOURIS_BOUGEE {\n")
    ajoute_au_tampon(*enchaineuse, "        sauvegarde_état_souris(app, évènement)\n")
    ajoute_au_tampon(*enchaineuse, "    }\n")

    ajoute_au_tampon(*enchaineuse, "    discr évènement.type {\n")

    si évènements_requis.MOUVEMENT_SOURIS {
        ajoute_au_tampon(*enchaineuse, "        SOURIS_BOUGEE {\n")
        ajoute_au_tampon(*enchaineuse, "            cliente.sur_mouvement_souris(cliente, app.état_souris)\n")
        ajoute_au_tampon(*enchaineuse, "        }\n")
    }

    si évènements_requis.CLIQUE_SOURIS {
        ajoute_au_tampon(*enchaineuse, "        SOURIS_PRESSEE {\n")
        ajoute_au_tampon(*enchaineuse, "            souris := donne_clic_souris_depuis_évènement_glfw(app, évènement, ActionSouris.PRESSÉE)\n")
        ajoute_au_tampon(*enchaineuse, "            cliente.sur_clic_souris(cliente, souris)\n")
        ajoute_au_tampon(*enchaineuse, "        }\n")
        ajoute_au_tampon(*enchaineuse, "        SOURIS_RELACHEE {\n")
        ajoute_au_tampon(*enchaineuse, "            souris := donne_clic_souris_depuis_évènement_glfw(app, évènement, ActionSouris.RELACHÉE)\n")
        ajoute_au_tampon(*enchaineuse, "            cliente.sur_clic_souris(cliente, souris)\n")
        ajoute_au_tampon(*enchaineuse, "        }\n")
    }

    si évènements_requis.TOUCHE_CLAVIER {
        ajoute_au_tampon(*enchaineuse, "        CLE_PRESSEE, CLE_REPETEE {\n")
        ajoute_au_tampon(*enchaineuse, "            clé_clavier := clé_clavier_depuis_glfw(évènement.cle)\n")
        ajoute_au_tampon(*enchaineuse, "            cliente.sur_touche_clavier(cliente, clé_clavier)\n")
        ajoute_au_tampon(*enchaineuse, "        }\n")
    }

    ajoute_au_tampon(*enchaineuse, "        sinon {}\n")
    ajoute_au_tampon(*enchaineuse, "    }\n")
    ajoute_au_tampon(*enchaineuse, "}\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)

    /*

TEMPS_DOUBLE_CLIC_MS : z64 = 500

// Maximum, au cas où on laisse les utilisateurs renseigner le temps.
TEMPS_DOUBLE_CLIC_MS_MAX : z64 = 5000

// si souris relachée
// -- si dernier évènement est souris pressée -> nous avons un clic, ignore
// -- sinon -> nous avons une souris relachée
// si souris cliquée
// -- si dernier clic < TEMPS_DOUBLE_CLIC -> nous avons un double clic
// Editrice::souris_clic() est toujours appelé quand la souris est cliquée
// Editrice::double_clic() est appelé si un deuxième clic survient dans l'écart de temps défini
// Editrice::souris_relachee() est appelé un autre évènement est survenu depuis le dernier clic
//    par exemple : presse souris, tappe une lettre, relache souris

si évènement.type == type_évènement.SOURIS_RELACHEE {
    si (app.dernier_évènement == type_évènement.SOURIS_PRESSEE) || (app.dernier_évènement == type_évènement.DOUBLE_CLIC) {
        continue
    }

    // traite l'évènement
}
sinon si évènement.type == type_évènement.SOURIS_PRESSEE {
    si (app.temps_double_clic.temps_écoulé_millisecondes()) <= TEMPS_DOUBLE_CLIC_MS {
        évènement.type = type_évènement.DOUBLE_CLIC
    }

    app.temps_double_clic = maintenant_précis()
}
*/
}

sauvegarde_état_souris :: fonc (app: *ApplicationGLFW, évènement: Évènement)
{
    app.état_souris.où.x = évènement.pos_x comme z32
    app.état_souris.où.y = évènement.pos_y comme z32
}

donne_clic_souris_depuis_évènement_glfw :: fonc (app: *ApplicationSDL, évènement: Évènement, action: ActionSouris) -> ClicSouris
{
    état_souris: ÉtatSouris
    état_souris.où.x = évènement.button.x
    état_souris.où.y = app.fenêtre.hauteur - évènement.button.y

    résultat: ClicSouris
    résultat.état = état_souris
    discr évènement.bouton_souris {
        GAUCHE {
            résultat.bouton = BoutonSouris.PRIMAIRE
        }
        DROITE {
            résultat.bouton = BoutonSouris.CONTEXTUEL
        }
        MILIEU {
            résulat.bouton = BoutonSouris.TERTIAIRE
        }
        sinon {
            // À FAIRE
            résultat.bouton = BoutonSouris.PRIMAIRE
        }
    }
    résultat.action = action
    retourne résultat
}

clé_clavier_depuis_glfw :: fonc (clé: type_cle) -> CléClavier
{
    // À FAIRE : complète
    discr clé {
        RIGHT {
            retourne CléClavier.FLÈCHE_DROITE
        }
        LEFT {
            retourne CléClavier.FLÈCHE_GAUCHE
        }
        UP {
            retourne CléClavier.FLÈCHE_HAUT
        }
        DOWN {
            retourne CléClavier.FLÈCHE_BAS
        }
        sinon {}
    }

    retourne CléClavier.INCONNUE
}

VG_file_évènements: File(T = Évènement)

rappel_clavier :: fonc (fenetre: *GLFWwindow @inutilisée, cle: type_cle, scancode: z32 @inutilisée, action: z32, mods: type_mod) -> rien
pousse_contexte __contexte_fil_principal {
    évènement: Évènement

    si action == 1 {
        évènement.type = type_évènement.CLE_PRESSEE
    }
    sinon si action == 0 {
        évènement.type = type_évènement.CLE_RELACHEE
    }
    sinon si action == 2 {
        évènement.type = type_évènement.CLE_REPETEE
    }

    évènement.mods = mods
    évènement.cle = cle

    enfile(VG_file_évènements, évènement)
}

rappel_bouton_souris :: fonc (fenetre: *GLFWwindow, bouton: bouton_souris, action: z32, mods: type_mod) -> rien
pousse_contexte __contexte_fil_principal {
    évènement: Évènement
    évènement.fenêtre = fenetre

    si action == 1 {
        évènement.type = type_évènement.SOURIS_PRESSEE
    }
    sinon si action == 0 {
        évènement.type = type_évènement.SOURIS_RELACHEE
    }

    évènement.mods = mods
    évènement.souris = bouton

    enfile(VG_file_évènements, évènement)
}

rappel_position_souris :: fonc (fenetre: *GLFWwindow, pos_x: r64, pos_y: r64) -> rien
pousse_contexte __contexte_fil_principal {
    évènement: Évènement
    évènement.fenêtre = fenetre
    évènement.type = type_évènement.SOURIS_BOUGEE
    évènement.pos_x = pos_x comme r32
    évènement.pos_y = pos_y comme r32

    enfile(VG_file_évènements, évènement)
}

rappel_roulette :: fonc (fenetre: *GLFWwindow, delta_x: r64, delta_y: r64) -> rien
pousse_contexte __contexte_fil_principal {
    évènement: Évènement
    évènement.fenêtre = fenetre
    évènement.type = type_évènement.SOURIS_ROULETTE
    évènement.delta_x = delta_x comme r32
    évènement.delta_y = delta_y comme r32

    enfile(VG_file_évènements, évènement)
}

rappel_dimension :: fonc (fenetre: *GLFWwindow, x: z32, y: z32) -> rien
pousse_contexte __contexte_fil_principal {
    glViewport(0, 0, x, y)
    évènement: Évènement
    évènement.fenêtre = fenetre
    évènement.type = type_évènement.REDIMENSION
    évènement.delta_x = x comme r32
    évènement.delta_y = y comme r32

    enfile(VG_file_évènements, évènement)
}

/** \} */
