importe SDL2

/* ------------------------------------------------------------------------- */
/** \nom Curseur.
 * \{ */

Curseur :: union {
    CurseurSDL: *SDL_Cursor
}

TypeCurseurSystème :: énum {
    /* Curseur en forme de flèche (défaut sur la plupart des systèmes). */
    FLÈCHE
    /* Curseur en forme de I pour indiquer une insertion de texte. */
    TEXTE
    /* Curseur indiquant d'attendre sur une tâche. */
    ATTENTE
    /* Curseur en forme de cible. */
    CROIX
    /* Flèche avec une attente. */
    FLÈCHE_AVEC_ATTENTE
    /* Double flèche diagonale pointant nord-ouest sud-est. */
    FLÈCHE_DOUBLE_NOSE
    /* Double flèche diagonale pointant nord-est sud-ouest. */
    FLÈCHE_DOUBLE_NESO
    /* Double flèche horizontale. */
    FLÈCHE_DOUBLE_HORIZONTALE
    /* Double flèche verticale. */
    FLÈCHE_DOUBLE_VERTICALE
    /* Superposition de toutes les doubles flèches. */
    FLÈCHE_DOUBLE_TOUT
    /* Curseur indiquant que quelque chose est interdit. */
    INTERDIT
    /* Curseur représentant une main. */
    MAIN
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom PiloteApplication.
 * Le PiloteApplication sers à permettre aux programmes clients de communiquer
 * avec ou controler le système de fenêtrage pour définir le curseur courant.
 * \{ */

PiloteApplication :: struct {
    /* Rappels pour les curseurs. */
    rappel_crée_curseur: fonc(*PiloteApplication, TypeCurseurSystème)(Curseur)
    rappel_détruit_curseur: fonc(*PiloteApplication, Curseur)(rien)
    rappel_montre_curseur: fonc(*PiloteApplication)(rien)
    rappel_cache_curseur: fonc(*PiloteApplication)(rien)
    rappel_est_curseur_affiché: fonc(*PiloteApplication)(bool)
    rappel_définis_curseur: fonc(*PiloteApplication, Curseur)(rien)
    rappel_donne_curseur_courant: fonc(*PiloteApplication)(Curseur)
    rappel_donne_curseur_défaut: fonc(*PiloteApplication)(Curseur)
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Envellopes pour les rappels de PiloteApplication.
 * \{ */

/* Crée un curseur système. Le curseur retourné devra être détruit avec `détruit_curseur`. */
crée_curseur :: fonc (pilote: *PiloteApplication, type_curseur: TypeCurseurSystème) -> Curseur
{
    retourne pilote.rappel_crée_curseur(pilote, type_curseur)
}

/* Détruit un curseur crée par `crée_curseur`. */
détruit_curseur :: fonc (pilote: *PiloteApplication, curseur: Curseur)
{
    pilote.rappel_détruit_curseur(pilote, curseur)
}

/* Affiche le curseur courant. Ne fait rien si le curseur est déjà visible. */
montre_curseur :: fonc (pilote: *PiloteApplication)
{
    pilote.rappel_montre_curseur(pilote)
}

/* Cache le curseur courant. Ne fait rien si le curseur est déjà invisible. */
cache_curseur :: fonc (pilote: *PiloteApplication)
{
    pilote.rappel_cache_curseur(pilote)
}

/* Retourne vrai si le curseur est visible. */
est_curseur_affiché :: fonc (pilote: *PiloteApplication) -> bool
{
    retourne pilote.rappel_est_curseur_affiché(pilote)
}

/* Change le curseur courant. */
définis_curseur :: fonc (pilote: *PiloteApplication, curseur: Curseur)
{
    pilote.rappel_définis_curseur(pilote, curseur)
}

/* Retourne le curseur courant. */
donne_curseur_courant :: fonc (pilote: *PiloteApplication) -> Curseur
{
    retourne pilote.rappel_donne_curseur_courant(pilote)
}

/* Retourne le curseur par défaut du système. */
donne_curseur_défaut :: fonc (pilote: *PiloteApplication) -> Curseur
{
    retourne pilote.rappel_donne_curseur_défaut(pilote)
}

/** } */
