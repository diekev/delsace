importe Fondation
importe GlibC

Instantané :: struct {
    seconde: z64
    nanoseconde: z64
}

// Retourne le temps monotonic du système
maintenant :: fonc () -> Instantané
{
    t : timespec
    // @erreur
    _ := clock_gettime(CLOCK_MONOTONIC_COARSE, *t)

    inst : Instantané
    inst.seconde = t.tv_sec
    inst.nanoseconde = t.tv_nsec

    retourne inst
}

// Retourne le temps monotonic du système
maintenant_précis :: fonc () -> Instantané
{
    t : timespec
    // @erreur
    _ := clock_gettime(CLOCK_MONOTONIC, *t)

    inst : Instantané
    inst.seconde = t.tv_sec
    inst.nanoseconde = t.tv_nsec

    retourne inst
}

secondes :: fonc (inst: Instantané) -> z64
{
    retourne inst.seconde + inst.nanoseconde / 1_000_000_000
}

millisecondes :: fonc (inst: Instantané) -> z64
{
    retourne inst.seconde * 1_000 + inst.nanoseconde / 1_000_000
}

microsecondes :: fonc (inst: Instantané) -> z64
{
    retourne inst.seconde * 1_000_000 + inst.nanoseconde / 1_000
}

nanosecondes :: fonc (inst: Instantané) -> z64
{
    retourne inst.seconde * 1_000_000_000 + inst.nanoseconde
}

temps_écoulé_secondes :: fonc (inst: Instantané) -> z64
{
    m := maintenant().seconde
    retourne m - inst.seconde
}

temps_écoulé_microsecondes :: fonc (inst: Instantané) -> z64
{
    m := maintenant_précis().microsecondes()
    retourne m - microsecondes(inst)
}

TempsSystème :: struct {
    seconde: z64
    nanoseconde: z64
}

maintenant_système :: fonc () -> TempsSystème
{
    t : timespec
    // @erreur
    _ := clock_gettime(CLOCK_REALTIME_COARSE, *t)

    temps : TempsSystème
    temps.seconde = t.tv_sec
    temps.nanoseconde = t.tv_nsec

    retourne temps
}

maintenant_système_précis :: fonc () -> TempsSystème
{
    t : timespec
    // @erreur
    _ := clock_gettime(CLOCK_REALTIME, *t)

    temps : TempsSystème
    temps.seconde = t.tv_sec
    temps.nanoseconde = t.tv_nsec

    retourne temps
}

millisecondes :: fonc (temps: TempsSystème) -> z64
{
    retourne temps.seconde * 1_000 + temps.nanoseconde / 1_000_000
}

secondes_par_an :: fonc () -> z32
{
    retourne 31_556_952
}

Date :: struct {
    année : z32
    mois : z32
    jour : z32
    jour_semaine : z32

    heure : z32
    minute : z32
    seconde : z32
}

est_année_bissextile :: fonc (année: z64) -> bool
{
    si (année % 100 == 0) {
        si (année % 400 == 0) {
            retourne vrai
        }

        retourne faux
    }

    retourne (année % 4 == 0)
}

hui_système :: fonc () -> Date
{
    inst := maintenant_système_précis()
    retourne date_depuis_secondes(inst.seconde)
}

date_depuis_millisecondes :: fonc (millisecondes: z64) -> Date
{
    secondes := millisecondes / 1000
    retourne date_depuis_secondes(secondes)
}

weekday_from_days :: fonc (z: z64) -> n32
{
    retourne (si z >= -4 { (z+4) % 7 } sinon { (z+5) % 7 + 6 }) comme n32
}

// https://stackoverflow.com/questions/7960318/math-to-convert-seconds-since-1970-into-date-and-vice-versa
// https://howardhinnant.github.io/date_algorithms.html
date_depuis_secondes :: fonc (secondes: z64) -> Date
{
    z := secondes / 86400
    z += 719468
    era := (si z >= 0 { z } sinon { z - 146096 }) / 146097
    doe := (z - era * 146097) comme n32                     // [0, 146096]
    yoe := (doe - doe/1460 + doe/36524 - doe/146096) / 365  // [0, 399]
    y := yoe comme z32 + era * 400
    doy := doe - (365*yoe + yoe/4 - yoe/100)                // [0, 365]
    mp := (5*doy + 2)/153                                   // [0, 11]
    d := doy - (153*mp+2)/5 + 1                             // [1, 31]
    m := mp + si mp < 10 { 3 } sinon { -9 }                 // [1, 12]

    seconde := secondes % 60
    minutes := (secondes / 60) % 60
    heures  := (secondes / 3600) % 24

    jours := d - 1
    mois := (m - 1) comme z32
    années := y

    date : Date = ---
    date.jour = jours comme z32
    date.mois = mois
    date.année = années comme z32
    date.heure = heures comme z32
    date.minute = minutes comme z32
    date.seconde = seconde comme z32
    date.jour_semaine = weekday_from_days(z - 719468) comme z32
    retourne date
}

/*
  formattage date :
    - A : année
    - M : mois
    - J : jour
    - h : heure
    - m : minute
    - s : seconde
*/
formatte :: fonc (date: &Date, format: chaine) -> chaine
{
    i : z64 = 0

    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    tantque i < format.taille {
        si format[i] == '%' {
            i += 1

            c := format[i]

            discr c {
                'A' {
                    ajoute_au_tampon(*enchaineuse, date.année)
                }
                'M' {
                    si (date.mois + 1) < 10 {
                        ajoute_au_tampon(*enchaineuse, '0')
                    }
                    ajoute_au_tampon(*enchaineuse, date.mois + 1)
                }
                'J' {
                    si (date.jour + 1) < 10 {
                        ajoute_au_tampon(*enchaineuse, '0')
                    }
                    ajoute_au_tampon(*enchaineuse, date.jour + 1)
                }
                'h' {
                    si (date.heure) < 10 {
                        ajoute_au_tampon(*enchaineuse, '0')
                    }
                    ajoute_au_tampon(*enchaineuse, date.heure)
                }
                'm' {
                    si (date.minute) < 10 {
                        ajoute_au_tampon(*enchaineuse, '0')
                    }
                    ajoute_au_tampon(*enchaineuse, date.minute)
                }
                's' {
                    si (date.seconde) < 10 {
                        ajoute_au_tampon(*enchaineuse, '0')
                    }
                    ajoute_au_tampon(*enchaineuse, date.seconde)
                }
                sinon {
                    continue
                }
            }

            i += 1
            continue
        }

        chn := construit_chaine(*format[i], 1)
        ajoute_au_tampon(*enchaineuse, chn)

        i += 1
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

parse_date :: fonc (chaine_date: chaine, format: chaine) -> Date
{
    résultat : Date

    si chaine_date.taille != format.taille {
        retourne résultat
    }


    pour format {
        c := chaine_date[index_it]

        discr it {
            'A' {
                résultat.année *= 10
                résultat.année += (c - '0') comme z32
            }
            'M' {
                résultat.mois *= 10
                résultat.mois += (c - '0') comme z32
            }
            'J' {
                résultat.jour *= 10
                résultat.jour += (c - '0') comme z32
            }
            'h' {
                résultat.heure *= 10
                résultat.heure += (c - '0') comme z32
            }
            'm' {
                résultat.minute *= 10
                résultat.minute += (c - '0') comme z32
            }
            's' {
                résultat.seconde *= 10
                résultat.seconde += (c - '0') comme z32
            }
            sinon {
                continue
            }
        }
    }

    résultat.jour -= 1
    résultat.mois -= 1

    retourne résultat
}

// À FAIRE : ceci est pour HTML
parse_date_pour_info_type :: fonc (chn: chaine, tampon: []octet) -> bool
{
    date := parse_date(chn, "AAAA-MM-JJ")
    copie_mem(src = date, dst = tampon, taille = tampon.taille)
    retourne vrai
}

// À FAIRE: Date et DateHorodotée ?
parse_date_depuis_mysql :: fonc (chn: chaine, tampon: []octet) -> bool
{
    date := parse_date(chn, "AAAA-MM-JJ hh:mm:ss")

    // À FAIRE: conversion propre
    date.mois += 1
    date.jour += 1

    copie_mem(src = date, dst = tampon, taille = taille_de(Date) comme z64)
    retourne vrai
}

DateCalendaire :: struct {
    nom_jour: chaine
    numéro_jour: z32
    nom_mois: chaine
    année: z32
}

date_calendaire_depuis_date :: fonc (date: Date) -> DateCalendaire
{
    résultat : DateCalendaire

    noms_jours := ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"]
    noms_mois := ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]

    résultat.nom_jour = noms_jours[date.jour_semaine]
    résultat.numéro_jour = date.jour + 1
    résultat.nom_mois = noms_mois[date.mois]
    résultat.année = date.année

    retourne résultat
}

// ---------------------------------------------------
// Tests

importe Compilatrice

#test {
    date := parse_date("2020/11/22 6:37:20", "AAAA/MM/JJ h:mm:ss")

    compilatrice_vérifie_égalité(date.jour, 21)
    compilatrice_vérifie_égalité(date.mois, 10)
    compilatrice_vérifie_égalité(date.année, 2020)
    compilatrice_vérifie_égalité(date.heure, 6)
    compilatrice_vérifie_égalité(date.minute, 37)
    compilatrice_vérifie_égalité(date.seconde, 20)
}

#test {
    date := parse_date("2020/11/22 6:37:20", "AAAA/MM/JJ h:mm:ss")

    résultat := date.formatte("%h:%m:%s")
    compilatrice_vérifie_égalité(résultat, "06:37:20")
    déloge(résultat)

    résultat = date.formatte("%J/%M/%A")
    compilatrice_vérifie_égalité(résultat, "22/11/2020")
    déloge(résultat)

    résultat = date.formatte("%J/%M/%A %h:%m:%s")
    compilatrice_vérifie_égalité(résultat, "22/11/2020 06:37:20")
    déloge(résultat)

    résultat = date.formatte("%h:%m:%s %J/%M/%A")
    compilatrice_vérifie_égalité(résultat, "06:37:20 22/11/2020")
    déloge(résultat)
}

// ---------------------------------------------------

Heure :: #opaque z32
Minute :: #opaque z32
Seconde :: #opaque z32

vers_heures :: fonc (minutes: Minute) -> Heure
{
    retourne Heure(minutes comme z32 / 60)
}

vers_heures :: fonc (secondes: Seconde) -> Heure
{
    retourne vers_heure(vers_minutes(secondes))
}

vers_minutes :: fonc (secondes: Seconde) -> Minute
{
    retourne Minute(secondes comme z32 / 60)
}

vers_minutes :: fonc (heures: Heure) -> Minute
{
    retourne Minute(heures comme z32 * 60)
}

vers_secondes :: fonc (minutes: Minute) -> Seconde
{
    retourne Seconde(minutes comme z32 * 60)
}

vers_secondes :: fonc (heures: Heure) -> Seconde
{
    retourne vers_secondes(vers_minutes(heures))
}

// https://fr.wikipedia.org/wiki/Ann%C3%A9e_(astronomie)

// L'année civile équivaut à la durée en deux dates dans le même calendrier
// Pour le calendrier grégorien, une année est de 365.2425 jours, ou un jour = 24 * 84600
AnnéeCivile :: #opaque z32
AnnéeSidérale :: #opaque z32
AnnéeLumière :: #opaque z32

// Une année julienne correspond exactement à 365.25 * 24 heures, ou une 1 heure = 84600 secondes
AnnéeJulienne :: #opaque z32

vers_heures :: fonc (année: AnnéeJulienne) -> Heure
{
    retourne Heure(année comme z32 * 36525 * 24 / 100)
}

vers_heures :: fonc (année: AnnéeSidérale) -> Heure
{
    retourne vers_heures(Seconde(31_558_149 * année comme z32))
}
