// Bibliothèque pour traiter un tableau quelconque comme un ensemble où une même valeur
// n'est présente qu'une seule fois. Plus tard, quand nous aurons des structures
// polymorphiques, nous pourrons ajouter une structure spécialisée utilisant un arbre
// binaire pour stocker les données.

importe Algorithmes
importe Fondation

ensemble_ajoute :: fonc (ensemble: *[..]$T, donnée: T) -> rien
{
    _ := ensemble_ajoute_retourne_adresse(ensemble, donnée)
}

ensemble_ajoute_retourne_adresse :: fonc (ensemble: *[..]$T, donnée: T) -> *T
{
    index_d_insertion := ensemble_ajoute_retourne_index(ensemble, donnée)
    retourne *ensemble.pointeur[index_d_insertion]
}

ensemble_ajoute_retourne_index :: fonc (ensemble: *[..]$T, donnée: T) -> z64
{
    si ensemble.taille == 0 {
        tableau_ajoute(ensemble, donnée)
        retourne 0
    }

    début := ensemble.pointeur
    fin := début + ensemble.taille

    limite := limite_basse(début, fin, donnée)

    si limite < fin {
        si mémoire(limite) == donnée {
            retourne distance(début, limite)
        }
    }

    index_d_insertion := distance(début, limite)

    taille := ensemble.taille

    tmp := mémoire(ensemble)

    tableau_redimensionne(tmp, taille + 1)

    i := taille

    tantque i > index_d_insertion {
        tmp[i] = tmp[i - 1]
        i -= 1
    }

    tmp[index_d_insertion] = donnée

    mémoire(ensemble) = tmp

    retourne index_d_insertion
}

ensemble_possède :: fonc (ensemble: *[..]$T, donnée: T) -> bool
{
    si ensemble.taille == 0 {
        retourne faux
    }

    début := ensemble.pointeur
    fin := début + ensemble.taille

    limite := limite_basse(début, fin, donnée)

    si limite < fin {
        si mémoire(limite) == donnée {
            retourne vrai
        }
    }

    retourne faux
}

ensemble_possède_retourne_index :: fonc (ensemble: *[..]$T, donnée: T) -> z64
{
    si ensemble.taille == 0 {
        retourne -1
    }

    début := ensemble.pointeur
    fin := début + ensemble.taille

    limite := limite_basse(début, fin, donnée)

    si limite < fin {
        si mémoire(limite) == donnée {
            retourne distance(début, limite)
        }
    }

    retourne -1
}

RésultatRecherche :: struct {
    index: z64
    partiel := faux
    trouvé := faux
}

/*
 * Recherche dans l'ensemble une valeur donnée, et retourne des informations sur la recherche.
 * Si la donnée fut trouvée exactement, le résultat retourné possèdera l'index où se trouve la donnée,
 * et le drapeau trouvé sera activé.
 * Si la donnée ne fut pas trouvée, mais que la valeur à l'index courrant est valide, rappel sera appelé,
 * et s'il retourne vrai, le résultat retourné possèdera l'index courrant, et ses drapeaux trouvé et partiel
 * seront activés.
 * Autrement, le résultat retourné n'aura aucun drapeau activé.
 */
ensemble_possède_rappel_si_possible :: fonc (ensemble: *[..]$T, donnée: T, rappel: fonc(T, T)(bool)) -> RésultatRecherche
{
    résultat: RésultatRecherche

    si ensemble.taille == 0 {
        résultat.trouvé = faux
        retourne résultat
    }

    début := ensemble.pointeur
    fin := début + ensemble.taille

    limite := limite_basse(début, fin, donnée)

    si limite < fin {
        si mémoire(limite) == donnée {
            résultat.trouvé = vrai
            résultat.partiel = faux
            résultat.index = distance(début, limite)
            retourne résultat
        }

        si rappel(mémoire(limite), donnée) {
            résultat.trouvé = vrai
            résultat.partiel = vrai
            résultat.index = distance(début, limite)
            retourne résultat
        }
    }

    retourne résultat
}

ensemble_possède_rappel_si_possible :: fonc (ensemble: *[]$T, donnée: T, rappel: fonc(T, T)(bool)) -> RésultatRecherche
{
    tableau: [..]T
    tableau.pointeur = ensemble.pointeur
    tableau.taille = ensemble.taille
    retourne ensemble_possède_rappel_si_possible(*tableau, donnée, rappel)
}

/*
ensemble_imprime :: fonc (ensemble: *[..]$T) -> rien
{
    pour donnée dans ensemble {
        imprime("%\n", donnée)
    }
}
*/

TableDeHachage :: struct ($Clé: type_de_données, $Valeur: type_de_données) {
    clés: [..]Clé
    valeurs: [..]Valeur
}

détruit_données :: fonc (table: *TableDeHachage($Clé, $Valeur))
{
    déloge(table.clés)
    déloge(table.valeurs)
}

table_insère_si_non_existant :: fonc (table: *TableDeHachage($Clé, $Valeur), clé: Clé, valeur: Valeur) -> (existait: bool, valeur_insérée: Valeur)
{
    indice := ensemble_possède_retourne_index(*table.clés, clé)
    si indice == -1 {
        indice = ensemble_ajoute_retourne_index(*table.clés, clé)
        tableau_insère_index(*table.valeurs, valeur, indice)
        retourne faux, valeur
    }

    retourne vrai, table.valeurs[indice]
}
