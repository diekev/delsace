importe Fondation
importe Numérique

// Module de travail sur les adresses IP v4 et v6
// RFCs pour IPv6 :
// https://tools.ietf.org/html/rfc4291
// https://tools.ietf.org/html/rfc5952

// À FAIRE : représenter les adresses IPv4 dans les chaines IPv6
// À FAIRE : parser les adresses IPv4 et IPv6 avec préfixes

ErreurParsageIP :: erreur {
    NombreÉlémentsIncorrect
    CaractèreInvalide
}

AdresseIPv4 :: #opaque [4]n8
AdresseIPv6 :: #opaque [8]n16

AdresseIP :: union {
    ipv4 : AdresseIPv4
    ipv6 : AdresseIPv6
}

// parse_ip :: fonc (chn: chaine) -> AdresseIP | ErreurParsageIP
// {
//     ipv4 := tente parse_ipv4(chn) piège err_ipv4 {
//         ipv6 := tente parse_ipv6(chn) piège err_ipv6 {
//             retourne err_ipv6
//         }

//         retourne AdresseIP(ipv6 = ipv6)
//     }

//     retourne AdresseIP(ipv4 = ipv4)
// }


parse_ipv4_pour_ipv6 :: fonc (chn: chaine, addr: *AdresseIPv4) -> bool
{
    ipv4 := tente parse_ipv4(chn) piège err {
        retourne faux
    }

    mémoire(addr) = ipv4

    retourne vrai
}

parse_ipv6 :: fonc (chn: chaine) -> AdresseIPv6 | ErreurParsageIP
{
    // prend en compte les chaines provenant des URI entre crochets : [...]
    saufsi chn {
        retourne ErreurParsageIP.NombreÉlémentsIncorrect
    }

    si chn[0] == '[' {
        chn = avance(chn, 1)
    }

    saufsi chn {
        retourne ErreurParsageIP.NombreÉlémentsIncorrect
    }

    si chn[chn.taille - 1] == ']' {
        chn = recule(chn, 1)
    }

    // il ne peut y avoir qu'un seul :: par chaine
    morceaux := divise(chn, "::")
    diffère { déloge(morceaux) }

    si morceaux.taille > 2 {
        retourne ErreurParsageIP.NombreÉlémentsIncorrect
    }

    possède_raccourci := morceaux.taille == 2

    morceaux_nombre := divise(morceaux[0], ':')
    diffère { déloge(morceaux_nombre) }

    possède_ipv4 := faux
    ipv4 : AdresseIPv4 = ---

    chaines : [8]chaine

    pour & chaines {
        it = ""
    }

    si !possède_raccourci {
        si morceaux_nombre.taille < 8 {
            si morceaux_nombre.taille == 7 {
                possède_ipv4 = parse_ipv4_pour_ipv6(morceaux_nombre[6], *ipv4)
                morceaux_nombre[6] = ""
            }

            si !possède_ipv4 {
                retourne ErreurParsageIP.NombreÉlémentsIncorrect
            }
        }
    }

    pour morceaux_nombre {
        chaines[index_it] = it
    }

    si possède_raccourci {
        déloge(morceaux_nombre)
        morceaux_nombre = divise(morceaux[1], ':')

        possède_ipv4 = parse_ipv4_pour_ipv6(morceaux_nombre[morceaux_nombre.taille - 1], *ipv4)

        index_début := 8 - morceaux_nombre.taille

        si possède_ipv4 {
            index_début -= 1
            morceaux_nombre[morceaux_nombre.taille - 1] = ""
        }

        pour morceaux_nombre {
            chaines[index_début + index_it] = it
        }
    }

    ipv6 : AdresseIPv6 = ---

    pour & ipv6 {
        it = 0
    }

    pour chaines {
        si !it {
            continue
        }

        ipv6[index_it] = tente parse_hexadécimal_n16(it) piège err {
            // À FAIRE : erreur pour les dépassements de limites
            retourne ErreurParsageIP.CaractèreInvalide
        }
    }

    si possède_ipv4 {
        ipv6[6] = (ipv4[0] comme n16 << 8) | ipv4[1]
        ipv6[7] = (ipv4[2] comme n16 << 8) | ipv4[3]
    }

    retourne ipv6
}

chaine_depuis_ipv6 :: fonc (ipv6: AdresseIPv6) -> chaine
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    formatte_ipv6(*enchaineuse, *ipv6)
    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

formatte_ipv6 :: fonc (enchaineuse: *Enchaineuse, ptr_ipv6: *AdresseIPv6)
{
    saufsi ptr_ipv6 {
        retourne
    }

    ipv6 := mémoire(ptr_ipv6)

    // les champs doivent être écrits sans 0 au début
    // OK     : 2001:db8::1
    // Pas OK : 2001:0db8::0001

    // les caractères doivent être en minuscule

    // les suites de zéros doivent être raccourcis
    // 2001:db8:0:0:0:0:2:1 -> 2001:db8::2:1 mais non 2001:db8::0:1

    // on ne peut raccourcir un seul 0
    // 2001:db8:0:1:1:1:1:1 n'est pas changé -> 2001:db8::1:1:1:1:1 est incorrect

    // s'il y a plusieurs série de zéros, seule la plus longue devrait être remplacée par ::
    // 2001:0:0:1:0:0:0:1 -> 2001:0:0:1::1 et non 2001::1:0:0:0:1

    // s'il y a plusieurs séquences de zéros de même taille, la première doit être raccourcie
    // 2001:db8:0:0:1:0:0:1 -> 2001:db8::1:0:0:1

    Séquence :: struct {
        index_début  : z64
        index_fin    : z64
        nombre_zéros : z32
    }

    // il ne peut y avoir qu'au maximum 4 séquences de 1 zéros :
    // 1:0:1:0:1:0:1:0
    // 0:1:0:1:0:1:0:1
    séquences : [4]Séquence

    nombre_zéros := 0

    séquence : Séquence
    nombre_de_séquences : z64 = 0

    pour ipv6 {
        si it == 0 {
            si nombre_zéros == 0 {
                séquence.index_début = index_it
            }

            nombre_zéros += 1
        }
        sinon si nombre_zéros != 0 {
            séquence.nombre_zéros = nombre_zéros
            séquence.index_fin = index_it

            séquences[nombre_de_séquences] = séquence
            nombre_de_séquences += 1
            nombre_zéros = 0
        }
    }

    si nombre_zéros != 0 {
        séquence.nombre_zéros = nombre_zéros
        séquence.index_fin = 8

        séquences[nombre_de_séquences] = séquence
        nombre_de_séquences += 1
    }

    séquence_la_plus_longue := séquences[0]

    pour 1 ... nombre_de_séquences - 1 {
        si séquences[it].nombre_zéros > séquence_la_plus_longue.nombre_zéros {
            séquence_la_plus_longue = séquences[it]
        }
    }

    si séquence_la_plus_longue.nombre_zéros == 8 {
        ajoute_au_tampon(enchaineuse, "::")
        retourne
    }

    si séquence_la_plus_longue.nombre_zéros < 2 {
        séquence_la_plus_longue.nombre_zéros = 0
        séquence_la_plus_longue.index_début = 0
        séquence_la_plus_longue.index_fin = 0
    }

    tampon : [39]z8
    taille_tampon : z64 = 0

    double_points := '\0'
    caractères_hex :: "0123456789abcdef"

    pour 0 ... séquence_la_plus_longue.index_début - 1 {
        tampon[taille_tampon] = double_points
        taille_tampon += 1

        v := ipv6[it]

        si v == 0 {
            tampon[taille_tampon] = '0'
            taille_tampon += 1
            double_points = ':'
            continue
        }

        a := (v >> 12) & 0xf

        si a != 0 {
            tampon[taille_tampon] = caractères_hex[a comme z64]
            taille_tampon += 1
        }

        b := (v >> 8) & 0xf

        si b != 0 || a != 0 {
            tampon[taille_tampon] = caractères_hex[b comme z64]
            taille_tampon += 1
        }

        c := (v >> 4) & 0xf

        si c != 0 || b != 0 || a != 0 {
            tampon[taille_tampon] = caractères_hex[c comme z64]
            taille_tampon += 1
        }

        d := v & 0xf

        tampon[taille_tampon] = caractères_hex[d comme z64]
        taille_tampon += 1

        double_points = ':'
    }

    si séquence_la_plus_longue.nombre_zéros != 0 {
        double_points = ':'
        tampon[taille_tampon] = double_points
        taille_tampon += 1
    }

    si séquence_la_plus_longue.index_fin == 8 {
        tampon[taille_tampon] = double_points
        taille_tampon += 1
    }

    pour séquence_la_plus_longue.index_fin ... 7 {
        tampon[taille_tampon] = double_points
        taille_tampon += 1

        v := ipv6[it]

        si v == 0 {
            tampon[taille_tampon] = '0'
            taille_tampon += 1
            double_points = ':'
            continue
        }

        a := (v >> 12) & 0xf

        si a != 0 {
            tampon[taille_tampon] = caractères_hex[a comme z64]
            taille_tampon += 1
        }

        b := (v >> 8) & 0xf

        si b != 0 || a != 0 {
            tampon[taille_tampon] = caractères_hex[b comme z64]
            taille_tampon += 1
        }

        c := (v >> 4) & 0xf

        si c != 0 || b != 0 || a != 0 {
            tampon[taille_tampon] = caractères_hex[c comme z64]
            taille_tampon += 1
        }

        d := v & 0xf

        tampon[taille_tampon] = caractères_hex[d comme z64]
        taille_tampon += 1

        double_points = ':'
    }

    ptr_tampon := *tampon[0]

    si tampon[0] == '\0' {
        taille_tampon -= 1
        ptr_tampon += 1
    }

    chn : chaine = ---
    chn.pointeur = ptr_tampon
    chn.taille = taille_tampon
    ajoute_au_tampon(enchaineuse, chn)
} @FormattageImpression

parse_ipv4 :: fonc (chn: chaine) -> AdresseIPv4 | ErreurParsageIP
{
    morceaux := divise(chn, '.')
    diffère { déloge(morceaux) }

    // il est possible d'obtenir des chaines contenant l'adresse au format décimale :
    // x * 256 ^ 3 + y * 256 ^ 2 + z ^ 256 + w
    si morceaux.taille == 1 {
        valeur := tente extrait_n32(chn) piège err {
            retourne ErreurParsageIP.CaractèreInvalide
        }

        données : [4]n8

        données[0] = (valeur / 16_777_216) comme n8
        valeur %= 16_777_216

        données[1] = (valeur / 65_536) comme n8
        valeur %= 65_536

        données[2] = (valeur / 256) comme n8
        valeur %= 256

        données[3] = (valeur) comme n8

        retourne AdresseIPv4(données = données)
    }

    si morceaux.taille != 4 {
        retourne ErreurParsageIP.NombreÉlémentsIncorrect
    }

    données : [4]n8

    pour morceaux {
        valeur := tente extrait_n8(it) piège err {
            // À FAIRE : erreur spéciale en cas de dépassement de la taille du nombre
            retourne ErreurParsageIP.CaractèreInvalide
        }

        données[index_it] = valeur
    }

    retourne AdresseIPv4(données = données)
}

chaine_depuis_ipv4 :: fonc (ipv4: AdresseIPv4) -> chaine
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    formatte_ipv6(*enchaineuse, *ipv6)
    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

formatte_ipv4 :: fonc (enchaineuse: *Enchaineuse, ptr_ipv4: *AdresseIPv4)
{
    saufsi ptr_ipv4 {
        retourne
    }

    ipv4 := mémoire(ptr_ipv4)
    tampon : [15]z8
    taille_tampon := 0

    pour ipv4 {
        d := it
        centaine := it / 100

        si centaine != 0 {
            tampon[taille_tampon] = (centaine + 0x30) comme z8
            taille_tampon += 1
            d %= 100
        }

        dizaine := d / 10

        si dizaine != 0 || centaine != 0 {
            tampon[taille_tampon] = (dizaine + 0x30) comme z8
            taille_tampon += 1
            d %= 10
        }

        tampon[taille_tampon] = (d + 0x30) comme z8
        taille_tampon += 1

        si index_it < 3 {
            tampon[taille_tampon] = '.'
            taille_tampon += 1
        }
    }

    chn : chaine = ---
    chn.pointeur = *tampon[0]
    chn.taille = taille_tampon
    ajoute_au_tampon(enchaineuse, chn)
} @FormattageImpression

ErreurConversionIP :: erreur {
    AdresseIPv6NEstPasIPv4
}

ipv4_depuis_ipv6 :: fonc (ipv6: AdresseIPv6) -> AdresseIPv4 | ErreurConversionIP
{
    pour 0 ... 4 {
        si ipv6[it] != 0 {
            retourne ErreurConversionIP.AdresseIPv6NEstPasIPv4
        }
    }

    si ipv6[5] != 0xffff {
        retourne ErreurConversionIP.AdresseIPv6NEstPasIPv4
    }

    ipv4 : AdresseIPv4 = ---

    ipv4[0] = (ipv6[6] >> 8) comme n8
    ipv4[1] = ((ipv6[6]) & 0xff) comme n8
    ipv4[2] = (ipv6[7] >> 8) comme n8
    ipv4[3] = ((ipv6[7]) & 0xff) comme n8

    retourne ipv4
}

// 127.0.0.1 -> 0:0:0:0:0:ffff:127.0.0.1 ou 0:0:0:0:0:ffff:7f00:1
ipv6_depuis_ipv4 :: fonc (ipv4: AdresseIPv4) -> AdresseIPv6
{
    ipv6 : AdresseIPv6 = ---

    pour 0 ... 4 {
        ipv6[it] = 0
    }

    ipv6[5] = 0xffff
    ipv6[6] = ipv4[0] comme n16 << 8 | ipv4[1] comme n16
    ipv6[7] = ipv4[2] comme n16 << 8 | ipv4[3] comme n16

    retourne ipv6
}

// --------------------------------------------------------------------------------
// Tests

importe Compilatrice

test_raccourcissement_ipv6 :: fonc (donnée: chaine, attendue: chaine, pos := PositionCodeSource())
{
    ipv6 := tente parse_ipv6(donnée) piège err {
        espace := compilatrice_espace_courant()

        discr err {
            NombreÉlémentsIncorrect {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv6 n'a pas le nombre correcte de morceaux")
            }
            CaractèreInvalide {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv6 contient des caractères non-hexadécimaux")
            }
        }

        compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "une erreur inconnue de parsage IPv4 est survenue")
        retourne
    }

    chn_ipv6 := chaine_depuis_ipv6(ipv6)
    compilatrice_vérifie_égalité(chn_ipv6, attendue)
    déloge(chn_ipv6)
}

#test {
    test_raccourcissement_ipv6("2001:db8:0:0:1:1:1:1", "2001:db8::1:1:1:1")
    test_raccourcissement_ipv6("2001:db8:0:0:1:0:0:1", "2001:db8::1:0:0:1")
    test_raccourcissement_ipv6("0:1:0:1:0:1:0:1", "0:1:0:1:0:1:0:1")
    test_raccourcissement_ipv6("1:0:1:0:1:0:1:0", "1:0:1:0:1:0:1:0")
    test_raccourcissement_ipv6("0:0:0:0:0:0:0:0", "::")
    test_raccourcissement_ipv6("1:0:0:0:0:0:0:0", "1::")
    test_raccourcissement_ipv6("0:0:0:0:0:0:0:1", "::1")
    test_raccourcissement_ipv6("ff01:0:0:0:0:0:0:101", "ff01::101")
    test_raccourcissement_ipv6("0:0:0:0:0:ffff:7f00:1", "::ffff:7f00:1")
    test_raccourcissement_ipv6("2001:0:0:1:0:0:0:1", "2001:0:0:1::1")
    test_raccourcissement_ipv6("2001:0:0:1::1", "2001:0:0:1::1")
    test_raccourcissement_ipv6("[2001:db8::7]", "2001:db8::7")
}

test_parsage_ipv4_impl :: fonc (chn_donnée: chaine, chn_attendue: chaine, pos : PositionCodeSource)
{
    ipv4 := tente parse_ipv4(chn_donnée) piège err {
        espace := compilatrice_espace_courant()

        discr err {
            NombreÉlémentsIncorrect {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv4 n'a pas le nombre correcte de morceaux")
            }
            CaractèreInvalide {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv4 contient des caractères non-décimaux")

            }
        }

        compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "une erreur inconnue de parsage IPv4 est survenue")
        retourne
    }

    chn_ipv4 := chaine_depuis_ipv4(ipv4)
    compilatrice_vérifie_égalité(chn_ipv4, chn_attendue)
    déloge(chn_ipv4)
}

test_parsage_ipv4 :: fonc (chn: chaine, pos := PositionCodeSource())
{
    test_parsage_ipv4_impl(chn, chn, pos)
}

test_parsage_ipv4_décimale :: fonc (chn_décimale: chaine, chn_attendue: chaine, pos := PositionCodeSource())
{
    test_parsage_ipv4_impl(chn_décimale, chn_attendue, pos)
}

#test {
    test_parsage_ipv4("8.8.8.8")
    test_parsage_ipv4_décimale("2815984929", "167.216.133.33")
    test_parsage_ipv4_décimale("0", "0.0.0.0")
}

test_ipv6_depuis_ipv4 :: fonc (chn_ipv4: chaine, chn_ipv6: chaine, pos := PositionCodeSource())
{
    ipv4 := tente parse_ipv4(chn_ipv4) piège err {
        espace := compilatrice_espace_courant()
        compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "une erreur de parsage IPv4 est survenue")
        retourne
    }

    ipv6 := ipv6_depuis_ipv4(ipv4)

    chn := chaine_depuis_ipv6(ipv6)
    compilatrice_vérifie_égalité(chn, chn_ipv6, pos)
    déloge(chn)
}

#test {
    test_ipv6_depuis_ipv4("127.0.0.1", "::ffff:7f00:1")
}

test_ipv4_depuis_ipv6 :: fonc (chn_ipv6: chaine, chn_ipv4: chaine, pos := PositionCodeSource())
{
    ipv6 := tente parse_ipv6(chn_ipv6) piège err {
        espace := compilatrice_espace_courant()

        discr err {
            NombreÉlémentsIncorrect {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv6 n'a pas le nombre correcte de morceaux")
            }
            CaractèreInvalide {
                compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "l'adresse IPv6 contient des caractères non-hexadécimaux")
            }
        }

        compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, "une erreur de parsage IPv6 est survenue")
        retourne
    }

    ipv4 := ipv4_depuis_ipv6(ipv6)

    chn := chaine_depuis_ipv4(ipv4)
    compilatrice_vérifie_égalité(chn, chn_ipv4, pos)
    déloge(chn)
}

#test {
    test_ipv4_depuis_ipv6("0:0:0:0:0:ffff:127.0.0.1", "127.0.0.1")
    test_ipv4_depuis_ipv6("::ffff:127.0.0.1", "127.0.0.1")
}
