// Transpile du code Kuri vers GLSL

importe Compilatrice
importe Fondation
importe SysFichier

/*

    - bug dans l'impression de nombre réels dans les méta-programmes

 */
convertis_vers_glsl :: fonc (espace: *EspaceDeTravail, corps: *NoeudCodeCorpsFonction)
{
    bloc := corps.bloc
    entête := corps.entête

    pour entête.annotations {
        si it.nom == "GLSL" {
            arrête
        }
    }
    sansarrêt {
        retourne
    }

    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    imprime_dans_enchaineuse(*enchaineuse, "void %", entête.nom)

    virgule := "("
    pour entête.params {
        ajoute_au_tampon(*enchaineuse, virgule, "in ")
        converti_code_glsl(espace, *enchaineuse, it, 0)
        virgule = ", "
    }

    pour entête.params_sorties {
        ajoute_au_tampon(*enchaineuse, virgule, "out ")
        converti_code_glsl(espace, *enchaineuse, it, 0)
        virgule = ", "
    }

    ajoute_au_tampon(*enchaineuse, ")\n{\n")

    converti_code_glsl(espace, *enchaineuse, bloc, 0)

    ajoute_au_tampon(*enchaineuse, "}\n")

    _ := copie_enchaineuse_fichier(*enchaineuse, sortie_standarde())
}

convertis_vers_glsl :: fonc (espace: *EspaceDeTravail, enchaineuse: *Enchaineuse, type: *InfoType, site: *NoeudCode)
{
    saufsi type {
        ajoute_au_tampon(enchaineuse, "<type nul !>")
        retourne
    }

    si type.id == GenreInfoType.STRUCTURE {
        type_struct := type comme *InfoTypeStructure

        si type_struct.nom == "Vec3" {
            ajoute_au_tampon(enchaineuse, "vec3")
            retourne
        }
    }

    si type.id == GenreInfoType.RÉEL {
        si type.taille_en_octet == 4 {
            ajoute_au_tampon(enchaineuse, "float")
            retourne
        }

        si type.taille_en_octet == 8 {
            ajoute_au_tampon(enchaineuse, "float")
            retourne
        }
    }

    compilatrice_rapporte_erreur(espace, site.chemin_fichier, site.numéro_ligne, "impossible de convertir le type vers GLSL")
}

converti_code_glsl :: fonc (espace: *EspaceDeTravail, enchaineuse: *Enchaineuse, code: *NoeudCode, profondeur: z32)
{
    si code == nul {
        retourne
    }

    discr code.genre {
        DÉCLARATION_VARIABLE {
            code_déclaration := code comme *NoeudCodeDéclarationVariable
            convertis_vers_glsl(espace, enchaineuse, code_déclaration.type, code_déclaration)

            ident := code_déclaration.nom
            ajoute_au_tampon(enchaineuse, " ", ident)

            si code_déclaration.expression {
                ajoute_au_tampon(enchaineuse, " = ")
                converti_code_glsl(espace, enchaineuse, code_déclaration.expression, profondeur)
            }
        }
        EXPRESSION_ASSIGNATION_VARIABLE {
            assignation := code comme *NoeudCodeAssignation
            converti_code_glsl(espace, enchaineuse, assignation.assignée, profondeur)
            ajoute_au_tampon(enchaineuse, " = ")
            converti_code_glsl(espace, enchaineuse, assignation.expression, profondeur)
        }
        OPÉRATEUR_BINAIRE {
            binaire := code comme *NoeudCodeExpressionBinaire
            converti_code_glsl(espace, enchaineuse, binaire.opérande_gauche, profondeur)
            imprime_dans_enchaineuse(enchaineuse, " % ", binaire.nom)
            converti_code_glsl(espace, enchaineuse, binaire.opérande_droite, profondeur)
        }
        OPÉRATEUR_UNAIRE {
            unaire := code comme *NoeudCodeExpressionUnaire
            ajoute_au_tampon(enchaineuse, unaire.nom)
            converti_code_glsl(espace, enchaineuse, unaire.opérande, profondeur)
        }
        INSTRUCTION_SI {
            code_si := code comme *NoeudCodeSi

            ajoute_au_tampon(enchaineuse, "if (")
            converti_code_glsl(espace, enchaineuse, code_si.condition, profondeur)
            ajoute_au_tampon(enchaineuse, ") {\n")
            converti_code_glsl(espace, enchaineuse, code_si.bloc_si_vrai, profondeur)
            imprime_tabulation(enchaineuse, profondeur)
            ajoute_au_tampon(enchaineuse, "}\n")

            si code_si.bloc_si_faux {
                imprime_tabulation(enchaineuse, profondeur)

                ajoute_au_tampon(enchaineuse, "else {\n")
                converti_code_glsl(espace, enchaineuse, code_si.bloc_si_faux, profondeur)

                imprime_tabulation(enchaineuse, profondeur)

                ajoute_au_tampon(enchaineuse, "}\n")
            }

            ajoute_au_tampon(enchaineuse, "\n")
        }
        INSTRUCTION_COMPOSÉE {
            bloc := code comme *NoeudCodeBloc

            pour bloc.expressions {
                imprime_tabulation(enchaineuse, profondeur + 1)

                converti_code_glsl(espace, enchaineuse, it, profondeur + 1)

                si it.genre != GenreNoeud.INSTRUCTION_SI && it.genre != GenreNoeud.INSTRUCTION_RETOUR {
                    ajoute_au_tampon(enchaineuse, ";\n")
                }
            }
        }
        INSTRUCTION_RETOUR {
            ret := code comme *NoeudCodeInstructionRetour
            si ret.expression {
                // @Incomplet : vérifie si nous avons une assignation
                converti_code_glsl(espace, enchaineuse, ret.expression, profondeur)
                ajoute_au_tampon(enchaineuse, ";\n")
                imprime_tabulation(enchaineuse, profondeur)
            }
            ajoute_au_tampon(enchaineuse, "return;\n")
        }
        INSTRUCTION_BOUCLE {
            code_boucle := code comme *NoeudCodeBoucle
            ajoute_au_tampon(enchaineuse, "while (1) {\n")
            converti_code_glsl(espace, enchaineuse, code_boucle.bloc, profondeur)
            ajoute_au_tampon(enchaineuse, "}\n\n")
        }
        INSTRUCTION_TANTQUE {
            code_boucle := code comme *NoeudCodeBoucle
            ajoute_au_tampon(enchaineuse, "while condition {\n")
            converti_code_glsl(espace, enchaineuse, code_boucle.bloc, profondeur)
            ajoute_au_tampon(enchaineuse, "}\n\n")
        }
        INSTRUCTION_RÉPÈTE {
            code_boucle := code comme *NoeudCodeBoucle
            ajoute_au_tampon(enchaineuse, "do {\n")
            converti_code_glsl(espace, enchaineuse, code_boucle.bloc, profondeur)
            ajoute_au_tampon(enchaineuse, "} while condition;\n\n")
        }
        EXPRESSION_RÉFÉRENCE_DÉCLARATION {
            ident := code comme *NoeudCodeRéférenceDéclaration
            ajoute_au_tampon(enchaineuse, ident.nom)
        }
        EXPRESSION_PARENTHÈSE {
            paren := code comme *NoeudCodeParenthèse
            ajoute_au_tampon(enchaineuse, "(")
            converti_code_glsl(espace, enchaineuse, paren.expression, profondeur)
            ajoute_au_tampon(enchaineuse, ")")
        }
        EXPRESSION_APPEL {
            appel := code comme *NoeudCodeAppel

            // @faible
            ident := appel.expression comme *NoeudCodeRéférenceDéclaration

            si ident.nom == "produit_scalaire" {
                ajoute_au_tampon(enchaineuse, "dot")
            }
            sinon {
                converti_code_glsl(espace, enchaineuse, appel.expression, profondeur)
            }

            virgule := "("
            pour appel.paramètres {
                ajoute_au_tampon(enchaineuse, virgule)
                converti_code_glsl(espace, enchaineuse, it, profondeur)
                virgule = ", "
            }

            ajoute_au_tampon(enchaineuse, ")")
        }
        EXPRESSION_CONSTRUCTION_STRUCTURE {
            appel := code comme *NoeudCodeAppel

            convertis_vers_glsl(espace, enchaineuse, appel.type, appel)

            virgule := "("
            pour appel.paramètres {
                // @Incomplet : vérifie si nous avons une assignation
                ajoute_au_tampon(enchaineuse, virgule)
                converti_code_glsl(espace, enchaineuse, it, profondeur)
                virgule = ", "
            }

            ajoute_au_tampon(enchaineuse, ")")
        }
        EXPRESSION_LITTÉRALE_NOMBRE_RÉEL {
            lit := code comme *NoeudCodeLittéraleRéel
            x := lit.valeur comme r32
            imprime_dans_enchaineuse(enchaineuse, "%", x)
        }
        EXPRESSION_COMME {
            expr_comme := code comme *NoeudCodeComme
            converti_code_glsl(espace, enchaineuse, expr_comme.expression, profondeur)
        }
        /*
        EXPRESSION_VIRGULE {
            virgule := code comme *NoeudCodeVirgule

            pour virgule.expressions {
                converti_code_glsl(espace, enchaineuse, it, profondeur)

                si index_it != virgule.expressions.taille - 1 {
                    ajoute_au_tampon(enchaineuse, ";\n")

                    pour i dans 0 ... profondeur - 1 {
                        ajoute_au_tampon(enchaineuse, "\t")
                    }
                }
            }
        }
        EXPRESSION_RÉFÉRENCE_MEMBRE {
            membre := code comme *NoeudCodeOpérationBinaire

            converti_code_glsl(espace, enchaineuse, membre.opérande_gauche, profondeur)
            ajoute_au_tampon(enchaineuse, ".")
            converti_code_glsl(espace, enchaineuse, membre.opérande_droite, profondeur)
        }
        */
        sinon {

        }
    }
}
