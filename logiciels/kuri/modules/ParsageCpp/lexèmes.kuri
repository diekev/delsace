importe Fondation


TypeCaractère :: énum {
    INCONNU

    NUMÉRIQUE
    ALPHABÉTIQUE
    ESPACE
    NOUVELLE_LIGNE
    PONCTUATION
    HASHTAG
}

PeutSuivre :: énum_drapeau {
    IDENTIFIANT
    NOMBRE
}

construit_table_caractères :: fonc () -> [256]TypeCaractère
{
    résultat : [256]TypeCaractère

    pour & résultat {
        it = TypeCaractère.INCONNU
    }

    résultat['#'] = TypeCaractère.HASHTAG

    caractères_alphabétique :: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"

    pour caractères_alphabétique {
        résultat[it] = TypeCaractère.ALPHABÉTIQUE
    }

    caractères_numérique :: "0123456789"

    pour caractères_numérique {
        résultat[it] = TypeCaractère.NUMÉRIQUE
    }

    caractères_ponctuation :: «"'()[]{}+-/*=&|^%!:;,?.~<>\\»

    pour caractères_ponctuation {
        résultat[it] = TypeCaractère.PONCTUATION
    }

    résultat['\n'] = TypeCaractère.NOUVELLE_LIGNE

    résultat['\r'] = TypeCaractère.ESPACE
    résultat['\t'] = TypeCaractère.ESPACE
    résultat['\v'] = TypeCaractère.ESPACE
    résultat[' '] = TypeCaractère.ESPACE
    résultat['@'] = TypeCaractère.ESPACE

    retourne résultat
}

construit_table_peut_suivre :: fonc () -> [256]PeutSuivre
{
    résultat : [256]PeutSuivre
    caractères_alphabétique :: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"

    pour caractères_alphabétique {
        résultat[it] |= PeutSuivre.IDENTIFIANT
    }

    caractères_numérique :: "0123456789"

    pour caractères_numérique {
        résultat[it] |= PeutSuivre.IDENTIFIANT | PeutSuivre.NOMBRE
    }

    résultat['.'] |= PeutSuivre.NOMBRE
    résultat['u'] |= PeutSuivre.NOMBRE
    résultat['U'] |= PeutSuivre.NOMBRE
    résultat['l'] |= PeutSuivre.NOMBRE
    résultat['L'] |= PeutSuivre.NOMBRE
    résultat['e'] |= PeutSuivre.NOMBRE
    résultat['f'] |= PeutSuivre.NOMBRE
    résultat['F'] |= PeutSuivre.NOMBRE
    résultat['x'] |= PeutSuivre.NOMBRE

    retourne résultat
}

GenreLexème :: énum {
    IDENTIFIANT
    CHAINE_LITTÉRALE
    MOT_CLÉ
    NOMBRE
    AUTRE
    HASHTAG
    CARACTÈRE_LITTÉRAL
}

Lexème :: struct {
    genre: GenreLexème
    ident: chaine
    ligne: z32
    colonne: z32
}

crée_lexème :: fonc (genre: GenreLexème, ident: chaine) -> Lexème
{
    retourne Lexème(genre, ident)
}

chaine_pour_caractère :: fonc (c: *z8) -> chaine
{
    retourne construit_chaine(c, 1)
}

parse_identifiant :: fonc (lexeuse: *Lexeuse, peut_suivre: PeutSuivre, c: Rune) -> chaine
{
    extraction_identifiant := lexeuse.flux.donne_données_extraction_sous_chaine()

    tantque peut_suivre.IDENTIFIANT == vrai {
        extraction_identifiant.taille += 1
        lexeuse.avance()

        si lexeuse.fini() {
            arrête
        }

        c = lexeuse.caractère_courant()
        peut_suivre = donne_drapeaux_peut_suivre(c)
    }

    retourne lexeuse.flux.donne_sous_chaine_source(extraction_identifiant)
}

parse_nombre :: fonc (lexeuse: *Lexeuse, peut_suivre: PeutSuivre, c: Rune) -> chaine
{
    extraction_nombre := lexeuse.flux.donne_données_extraction_sous_chaine()

    tantque peut_suivre.NOMBRE == vrai {
        extraction_nombre.taille += 1
        lexeuse.avance()

        si lexeuse.fini() {
            arrête
        }

        c = lexeuse.caractère_courant()
        peut_suivre = donne_drapeaux_peut_suivre(c)
    }

    retourne lexeuse.flux.donne_sous_chaine_source(extraction_nombre)
}

est_mot_clé :: fonc (identifiant: chaine) -> bool
{
    mots_clés := [
        "bool",
        "void",
        "int",
        "uint",
        "unsigned",
        "float",
        "double",
        "class",
        "private",
        "protected",
        "public",
        "struct",
        "enum",
        "long",
        "int8_t",
        "uint8_t",
        "int16_t",
        "uint16_t",
        "int32_t",
        "uint32_t",
        "int64_t",
        "uint64_t",
        "char",
        "short",
        "long",
        "const",
        "return",
        "if",
        "else",
        "for",
        "auto",
        "constexpr",
        "final",
        "while",
        "do",
        "true",
        "false",
        "static",
        "size_t",
        "float2" ]

    pour mots_clés {
        si it == identifiant {
            retourne vrai
        }
    }

    retourne faux
}

// -------------------------------

est_mot_clé :: fonc (lexème: Lexème, ident: chaine) -> bool
{
    retourne lexème.genre == GenreLexème.MOT_CLÉ && lexème.ident == ident
}

est_identifiant :: fonc (lexème: Lexème, ident: chaine) -> bool
{
    retourne lexème.genre == GenreLexème.IDENTIFIANT && lexème.ident == ident
}

donne_type_caractère :: fonc (rune: Rune) -> TypeCaractère
{
    valeur := rune comme n32
    si valeur < 128 {
        retourne __table_caractères[valeur]
    }

    retourne TypeCaractère.ALPHABÉTIQUE
}

donne_drapeaux_peut_suivre :: fonc (rune: Rune) -> PeutSuivre
{
    valeur := rune comme n32
    si valeur < 128 {
        retourne __table_peut_suivre[valeur]
    }

    retourne PeutSuivre.IDENTIFIANT
}

/* ------------------------------------------------------------------------- */
/** \nom Lexeuse
 * \{ */

__table_caractères : [256]TypeCaractère = ---
__table_peut_suivre : [256]PeutSuivre = ---

Lexeuse :: struct {
    lexèmes: []Lexème
    flux: FluxSource

    ligne : z32 = 1
    colonne : z32 = 1
}

fini :: fonc (lexeuse: *Lexeuse) -> bool
{
    retourne lexeuse.flux.fini()
}

caractère_courant :: fonc (lexeuse: *Lexeuse) -> Rune
{
    retourne lexeuse.flux.caractère_courant()
}

caractère_suivant :: fonc (lexeuse: *Lexeuse) -> Rune
{
    retourne lexeuse.flux.caractère_suivant()
}

avance :: fonc (lexeuse: *Lexeuse, n: z32 = 1)
{
    lexeuse.flux.avance(n)
    lexeuse.colonne += n
}

passe_sur_ligne_suivante :: fonc (lexeuse: *Lexeuse)
{
    lexeuse.ligne += 1
    lexeuse.colonne = 1
}

crée_lexème :: fonc (lexeuse: *Lexeuse, genre: GenreLexème, texte: chaine) -> Lexème
{
    retourne Lexème(genre, texte, lexeuse.ligne, lexeuse.colonne)
}

ajoute_lexème :: fonc (lexeuse: *Lexeuse, genre: GenreLexème, texte: chaine)
{
    tableau_ajoute(*lexeuse.lexèmes, lexeuse.crée_lexème(genre, texte))
}

ajoute_lexème_identifiant :: fonc (lexeuse: *Lexeuse, ident: chaine)
{
    lexeuse.ajoute_lexème(GenreLexème.IDENTIFIANT, ident)
}

ajoute_lexème_chaine_littérale :: fonc (lexeuse: *Lexeuse, ident: chaine)
{
    lexeuse.ajoute_lexème(GenreLexème.CHAINE_LITTÉRALE, ident)
}

ajoute_lexème_caractère_littéral :: fonc (lexeuse: *Lexeuse, ident: chaine)
{
    lexeuse.ajoute_lexème(GenreLexème.CARACTÈRE_LITTÉRAL, ident)
}

ajoute_lexème_mot_clé :: fonc (lexeuse: *Lexeuse, ident: chaine)
{
    lexeuse.ajoute_lexème(GenreLexème.MOT_CLÉ, ident)
}

ajoute_lexème_numérique :: fonc (lexeuse: *Lexeuse, ident: chaine)
{
    lexeuse.ajoute_lexème(GenreLexème.NOMBRE, ident)
}

lèxe_fichier_source :: fonc (lexeuse: *Lexeuse, fichier: *FichierSource)
{
    __table_caractères = construit_table_caractères()
    __table_peut_suivre = construit_table_peut_suivre()

    diffère fichier.lexèmes = lexeuse.lexèmes

    lexeuse.flux = fichier.donne_flux_source()
    diffère détruit_données_flux(lexeuse.flux)

    tantque !lexeuse.fini() {
        c := lexeuse.caractère_courant()

        type_c := donne_type_caractère(c)
        peut_suivre := donne_drapeaux_peut_suivre(c)

        si type_c == TypeCaractère.INCONNU {
            // chn := chaine_pour_caractère(*c)
            imprime("%:% : caractère inconnu : %\n", fichier.chemin, lexeuse.ligne + 1, c)
        }

        si type_c == TypeCaractère.PONCTUATION {
            si c == '/' && lexeuse.caractère_suivant() == '*' {
                lexeuse.avance(2)

                tantque !lexeuse.fini() {
                    c = lexeuse.caractère_courant()

                    si c == '*' && lexeuse.caractère_suivant() == '/' {
                        lexeuse.avance(2)
                        arrête
                    }

                    lexeuse.avance()

                    si c == '\n' {
                        lexeuse.passe_sur_ligne_suivante()
                    }
                }
            }
            sinon si c == '/' && lexeuse.caractère_suivant() == '/' {
                lexeuse.avance(2)

                tantque !lexeuse.fini() {
                    c = lexeuse.caractère_courant()
                    lexeuse.avance()

                    si c == '\n' {
                        lexeuse.passe_sur_ligne_suivante()
                        arrête
                    }
                }
            }
            sinon si c == '"' {
                lexeuse.avance()

                extraction_chaine_littérale := lexeuse.flux.donne_données_extraction_sous_chaine()

                tantque !lexeuse.fini() {
                    c = lexeuse.caractère_courant()

                    si c == '\\' && lexeuse.caractère_suivant() == '"' {
                        lexeuse.avance(2)
                        extraction_chaine_littérale.taille += 2
                        continue
                    }

                    si c == '"' {
                        lexeuse.avance()
                        arrête
                    }

                    lexeuse.avance()
                    extraction_chaine_littérale.taille += 1
                }

                chaine_littérale := lexeuse.flux.donne_sous_chaine_source(extraction_chaine_littérale)
                ajoute_lexème_chaine_littérale(lexeuse, chaine_littérale)
            }
            sinon si c == '\'' {
                lexeuse.avance()

                extraction_caractère_littéral := lexeuse.flux.donne_données_extraction_sous_chaine()
                tantque !lexeuse.fini() {
                    c = lexeuse.caractère_courant()

                    si c == '\\' && lexeuse.caractère_suivant() == '\\' {
                        lexeuse.avance(2)
                        extraction_caractère_littéral.taille += 2
                        continue
                    }

                    si c == '\\' && lexeuse.caractère_suivant() == '\'' {
                        lexeuse.avance(2)
                        extraction_caractère_littéral.taille += 2
                        continue
                    }

                    si c == '\'' {
                        lexeuse.avance()
                        arrête
                    }

                    lexeuse.avance()
                    extraction_caractère_littéral.taille += 1
                }

                caractère_littéral := lexeuse.flux.donne_sous_chaine_source(extraction_caractère_littéral)
                ajoute_lexème_caractère_littéral(lexeuse, caractère_littéral)
            }
            sinon {
                extraction_caractère := lexeuse.flux.donne_données_extraction_sous_chaine()
                extraction_caractère.taille += 1

                chaine_caractère := lexeuse.flux.donne_sous_chaine_source(extraction_caractère)

                ajoute_lexème(lexeuse, GenreLexème.AUTRE, chaine_caractère)
                lexeuse.avance()
            }
        }
        sinon si type_c == TypeCaractère.ALPHABÉTIQUE {
            identifiant := parse_identifiant(lexeuse, peut_suivre, c)
            si est_mot_clé(identifiant) {
                ajoute_lexème_mot_clé(lexeuse, identifiant)
            }
            sinon {
                ajoute_lexème_identifiant(lexeuse, identifiant)
            }
        }
        sinon si type_c == TypeCaractère.NUMÉRIQUE {
            nombre := parse_nombre(lexeuse, peut_suivre, c)
            ajoute_lexème_numérique(lexeuse, nombre)
        }
        sinon si type_c == TypeCaractère.HASHTAG {
            extraction_caractère := lexeuse.flux.donne_données_extraction_sous_chaine()
            extraction_caractère.taille += 1

            chaine_caractère := lexeuse.flux.donne_sous_chaine_source(extraction_caractère)

            ajoute_lexème(lexeuse, GenreLexème.HASHTAG, chaine_caractère)
            lexeuse.avance()
        }
        sinon si type_c == TypeCaractère.NOUVELLE_LIGNE {
            lexeuse.avance()
            lexeuse.passe_sur_ligne_suivante()
        }
        sinon {
            // imprime("Type caractère non-géré : %\n", type_c)
            lexeuse.avance()
        }

/*
        chn : chaine = ---
        chn.pointeur = *c
        chn.taille = 1

        imprime("%", chn)
        */
    }
}

/** } */
