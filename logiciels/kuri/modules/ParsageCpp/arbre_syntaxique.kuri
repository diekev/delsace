/* ------------------------------------------------------------------------- */
/** \nom Noeud de base pour tous les noeuds syntaxique.
 * \{ */

NoeudSyntaxique :: struct {
    lexème: *Lexème
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Noeud pour référencer un symbole.
 * \{ */

NoeudRéférenceSymbole :: struct {
    empl base: NoeudSyntaxique
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Noeud représentation un instruction de prodéclaration de type.
 * \{ */

NoeudProdéclarationObjet :: struct {
    empl base: NoeudSyntaxique

    nom_objet: chaine
    est_struct: bool
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom NoeudProdéclarationÉnum
 * \{ */

NoeudProdéclarationÉnum :: struct {
    empl base: NoeudSyntaxique

    nom_énum: chaine
    expression_type: *NoeudSyntaxique
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom NoeudDéfinitionClasse
 * \{ */

SpécificationBase :: struct {
    accès: SpécificationAccès
    est_virtuel: bool
    nom: chaine
}

NoeudDéfinitionClasse :: struct {
    empl base: NoeudSyntaxique

    nom: chaine
    clé_classe: CléClasse
    bases: []SpécificationBase
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Créatrice de Noeuds
 * \{ */

CréatriceNoeuds :: struct {
    noeuds: []*NoeudSyntaxique
}

crée_noeud :: fonc (créatrice: &CréatriceNoeuds, lexème: *Lexème, $TypeNoeud: type_de_données) -> *TypeNoeud
{
    noeud := loge(TypeNoeud)
    noeud.lexème = lexème
    tableau_ajoute(*créatrice.noeuds, noeud)
    retourne noeud
}

/** } */