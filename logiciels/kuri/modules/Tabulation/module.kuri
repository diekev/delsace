/*

    Module de formattage et d'impression de données sous forme de tableaux.

    Par exemple :

    +---------------+----------------+
    | Ma donnée 1   | Ma donnée 2    |
    +---------------+----------------+
    | Valeur 1a     | Valeur 2a      |
    | Valeur 1b     | Valeur 2b      |
    | Valeur 1c     | Valeur 2c      |
    | Valeur 1d     | Valeur 2d      |
    | Valeur 1e     | Valeur 2e      |
    +---------------+----------------+

 */

importe Fondation
importe Introspection
importe SysFichier
importe Unicode

LigneTabuleuse :: struct {
    colonnes: []chaine
}

Alignement :: énum z32 {
    GAUCHE
    DROITE
    CENTRE
}

Tabuleuse :: struct {
    lignes : []LigneTabuleuse
    alignements : []Alignement
    nombre_colonnes : z64

    chaines_allouées: []chaine
}

crée_tabuleuse :: fonc (titres: ...chaine) -> Tabuleuse
{
    ligne := crée_ligne(...titres)
    retourne crée_tabuleuse(ligne)
}

crée_tabuleuse :: fonc  (ligne_titre: LigneTabuleuse) -> Tabuleuse
{
    tabuleuse: Tabuleuse

    ajoute_ligne(*tabuleuse, ligne_titre)

    tableau_redimensionne(tabuleuse.alignements, ligne_titre.colonnes.taille)

    pour & a dans tabuleuse.alignements {
        a = Alignement.GAUCHE
    }

    retourne tabuleuse
}

détruit_tabuleuse :: fonc (tabuleuse: *Tabuleuse) -> rien
{
    pour ligne dans tabuleuse.lignes {
        déloge(ligne.colonnes)
    }

    déloge_tableau_et_ses_éléments(tabuleuse.chaines_allouées)
    déloge(tabuleuse.lignes)
    déloge(tabuleuse.alignements)
}

/**
 * Ajoute une ligne contenant un nombre de colonnes égal au nombre d'éléments
 * de la liste d'arguments.
 * Les éléments de type autre que « chaine » sont convertis en chaines en
 * utilisant Fondation.imprime_valeur. De fait, pour controller l'aspect des
 * nombres entiers et réels, le format du contexte peut être modifié avant
 * d'appeler cette fonction, par exemple :
 *
 * ctx := contexte()
 * ctx.format_entier.séparation = 3
 * pousse_contexte ctx {
 *     ajoute_ligne(*tabuleuse, ...)
 * }
 *
 * Pour imprimer les nombres sous format "123 456" au lieu "123456".
 */
ajoute_ligne :: fonc (tabuleuse: *Tabuleuse, args: ...eini) -> rien
{
    ligne : LigneTabuleuse

    pour arg dans args {
        chn := obtiens_chaine_pour_eini(tabuleuse, arg)
        tableau_ajoute(*ligne.colonnes, chn)
    }

    tableau_ajoute(*tabuleuse.lignes, ligne)
}

obtiens_chaine_pour_eini :: fonc (tabuleuse: *Tabuleuse, arg: eini) -> chaine
{
    si arg.info.id == id_info.CHAINE {
        // À FAIRE(langage) : bug dans l'extraction des valeurs ?
        retourne arg.comme_chaine()
    }

    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    imprime_valeur(*enchaineuse, arg, faux)
    résultat := chaine_depuis_enchaineuse(*enchaineuse)

    tableau_ajoute(*tabuleuse.chaines_allouées, résultat)

    retourne résultat
}

ajoute_ligne :: fonc (tabuleuse: *Tabuleuse, args: ...chaine) -> rien
{
    tableau_ajoute(*tabuleuse.lignes, crée_ligne(...args))
}

crée_ligne :: fonc (args: ...chaine) -> LigneTabuleuse
{
    résultat : LigneTabuleuse

    pour arg dans args {
        tableau_ajoute(*résultat.colonnes, arg)
    }

    retourne résultat
}

ajoute_ligne :: fonc (tabuleuse: *Tabuleuse, ligne: LigneTabuleuse) -> rien
{
    tableau_ajoute(*tabuleuse.lignes, ligne)
}

alignement :: fonc (tabuleuse: *Tabuleuse, idx: z64, align: Alignement) -> rien
{
    tabuleuse.alignements[idx] = align comme z32
}

imprime_table :: fonc (tabuleuse: *Tabuleuse) -> rien
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère { détruit_tampons(*enchaineuse) }

    nombre_colonnes : z64

    pour ligne dans tabuleuse.lignes {
        si ligne.colonnes.taille > nombre_colonnes {
            nombre_colonnes = ligne.colonnes.taille
        }
    }

    tailles_max_colonnes : []z64
    tableau_redimensionne(tailles_max_colonnes, nombre_colonnes)
    diffère { déloge(tailles_max_colonnes); }

    pour & t dans tailles_max_colonnes {
        t = 0
    }

    pour ligne dans tabuleuse.lignes {
        pour colonne, i dans ligne.colonnes {
            taille_colonne := colonne.taille_unicode()

            si tailles_max_colonnes[i] < taille_colonne {
                tailles_max_colonnes[i] = taille_colonne
            }
        }
    }

    /* ajout de marges */
    taille_ligne : z64 = 0

    pour t dans tailles_max_colonnes {
        taille_ligne += t + 2;
    }

    /* impression */
    imprime_ligne_demarcation(*enchaineuse, tailles_max_colonnes)
    imprime_ligne(*enchaineuse, tabuleuse, *tabuleuse.lignes[0], tailles_max_colonnes)
    imprime_ligne_demarcation(*enchaineuse, tailles_max_colonnes)

    pour i dans 1 ... tabuleuse.lignes.taille - 1 {
        imprime_ligne(*enchaineuse, tabuleuse, *tabuleuse.lignes[i], tailles_max_colonnes)
    }

    imprime_ligne_demarcation(*enchaineuse, tailles_max_colonnes)

    _ := copie_enchaineuse_fichier(*enchaineuse, sortie_standarde())
}

imprime_ligne_demarcation :: fonc (enchaineuse: *Enchaineuse, tailles_max_colonnes: []z64) -> rien
{
    pour taille dans tailles_max_colonnes {
        ajoute_au_tampon(enchaineuse, "+-")

        pour taille {
            ajoute_au_tampon(enchaineuse, "-")
        }

        ajoute_au_tampon(enchaineuse, "-")
    }

    ajoute_au_tampon(enchaineuse, "+\n")
}

imprime_ligne :: fonc (enchaineuse: *Enchaineuse, tabuleuse: *Tabuleuse, ligne: *LigneTabuleuse, tailles_max_colonnes: []z64) -> rien
{
    pour colonne, i dans ligne.colonnes {
        ajoute_au_tampon(enchaineuse, "| ")

        si tabuleuse.alignements[i] == Alignement.DROITE {
            pour tailles_max_colonnes[i] - colonne.taille_unicode() {
                ajoute_au_tampon(enchaineuse, " ")
            }
        }

        ajoute_au_tampon(enchaineuse, colonne)

        si tabuleuse.alignements[i] == Alignement.GAUCHE {
            pour tailles_max_colonnes[i] - colonne.taille_unicode() {
                ajoute_au_tampon(enchaineuse, " ")
            }
        }

        ajoute_au_tampon(enchaineuse, " ")
    }

    pour i dans ligne.colonnes.taille ... tailles_max_colonnes.taille - 1 {
        ajoute_au_tampon(enchaineuse, "| ")

        pour tailles_max_colonnes[i] {
            ajoute_au_tampon(enchaineuse, " ")
        }

        ajoute_au_tampon(enchaineuse, " ")
    }

    ajoute_au_tampon(enchaineuse, "|\n")
}

/*
principale :: fonc () -> z32
{
    diffère { imprime("Fin du programme, mémoire utilisée : %o\n", mémoire_utilisée()) }

    tabuleuse := crée_tabuleuse("Sources", "Entêtes", "Total");

    ajoute_ligne(@tabuleuse, 1932, 567, 2499)
    alignement(@tabuleuse, 1, Alignement.DROITE)

    imprime_table(@tabuleuse)

    détruit_tabuleuse(@tabuleuse)

    retourne 0
}
*/
