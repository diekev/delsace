/* Module pour définir des types communs à différents systèmes de définition d'interfaces graphiques. */

importe Couleur
importe Fondation

RayonsRectangle :: struct {
    haut_gauche: r32
    haut_droite: r32
    bas_gauche: r32
    bas_droite: r32
}

crée_rayons_rectangle :: fonc (rayon: r32) -> RayonsRectangle
{
    résultat: RayonsRectangle = ---
    résultat.haut_gauche = rayon
    résultat.haut_droite = rayon
    résultat.bas_gauche = rayon
    résultat.bas_droite = rayon
    retourne résultat
}

restreint_rayons :: fonc (rayons: *RayonsRectangle, rayon_max: r32)
{
    si rayons.haut_gauche > rayon_max {
        rayons.haut_gauche = rayon_max
    }
    si rayons.haut_droite > rayon_max {
        rayons.haut_droite = rayon_max
    }
    si rayons.bas_gauche > rayon_max {
        rayons.bas_gauche = rayon_max
    }
    si rayons.bas_droite > rayon_max {
        rayons.bas_droite = rayon_max
    }
}

LargeursBordureRectangle :: struct {
    haut: r32
    bas: r32
    gauche: r32
    droite: r32
}

CouleursBordureRectangle :: struct {
    haut: CouleurRVBA
    bas: CouleurRVBA
    gauche: CouleurRVBA
    droite: CouleurRVBA
}

crée_couleurs_bordure_rectangle :: fonc (haut: CouleurRVBAN8, bas: CouleurRVBAN8, gauche: CouleurRVBAN8, droite: CouleurRVBAN8) -> CouleursBordureRectangle
{
    résultat: CouleursBordureRectangle = ---
    résultat.haut = vers_couleur_rvba(haut)
    résultat.bas = vers_couleur_rvba(bas)
    résultat.gauche = vers_couleur_rvba(gauche)
    résultat.droite = vers_couleur_rvba(droite)
    retourne résultat
}

crée_couleurs_bordure_rectangle :: fonc (haut: CouleurRVBA, bas: CouleurRVBA, gauche: CouleurRVBA, droite: CouleurRVBA) -> CouleursBordureRectangle
{
    résultat: CouleursBordureRectangle = ---
    résultat.haut = haut
    résultat.bas = bas
    résultat.gauche = gauche
    résultat.droite = droite
    retourne résultat
}

Direction :: énum n8 {
    Horizontale
    Verticale

    HORIZONTALE :: Horizontale
    VERTICALE :: Verticale
}

Alignement :: énum n8 {
    Début
    Milieu
    Fin

    GAUCHE :: Début
    DROIT :: Fin
    DROITE :: Fin
    CENTRE :: Milieu
}

/* ------------------------------------------------------------------------- */
/** \nom EspaceDisponible
 * \{ */

EspaceDisponible :: struct {
    largeur: n32
    hauteur: n32
}

enlève_hauteur :: fonc (espace: EspaceDisponible, delta: n32) -> EspaceDisponible
{
    si espace.hauteur >= delta {
        espace.hauteur -= delta
    }
    sinon {
        espace.hauteur = 0
    }
    retourne espace
}

divise_espace :: fonc (espace: EspaceDisponible, direction: Direction, facteur: r32) -> (EspaceDisponible, EspaceDisponible)
{
    résultat1 := espace
    résultat2 := espace

    si direction == Direction.Horizontale {
        résultat1.largeur = (espace.largeur comme r32 * facteur) comme n32
        résultat2.largeur = espace.largeur - résultat1.largeur
    }
    sinon {
        assert(direction == Direction.Verticale)
        résultat1.hauteur = (espace.hauteur comme r32 * facteur) comme n32
        résultat2.hauteur = espace.hauteur - résultat1.hauteur
    }

    retourne résultat1, résultat2
}

/** \} */
