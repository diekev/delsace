/* Module de création d'interface de programmation pour d'autres langages.
 * À utiliser dans des métaprogrammes. */

importe Compilatrice
importe Ensemble
importe Fondation
importe SysFichier
importe Unicode

/* ------------------------------------------------------------------------- */

/* Discrimination des annotations @Python pouvant se trouver sur des fonctions. */

AnnotationIPA :: énum {
    NON_TROUVÉE
    INVALIDE
    TROUVÉE_SANS_PARAMÈTRE
    MULTIPLES_ANNOTATIONS
    POUR_MÉTHODE
    POUR_NEW
}

/* Retourne la valeur de l'énumération correspondant à une chaine de
 * caractère, qui doit se trouver après l'annotation @Python. */
annotation_python_pour_chaine :: fonc (chn: chaine) -> AnnotationIPA
{
    si chn == "méthode" {
        retourne AnnotationIPA.POUR_MÉTHODE
    }

    si chn == "new" {
        retourne AnnotationIPA.POUR_NEW
    }

    si chn == "" {
        retourne AnnotationIPA.TROUVÉE_SANS_PARAMÈTRE
    }

    retourne AnnotationIPA.INVALIDE
}

/* Retourne la valeur de l'énumération correspondant à l'annotation, ou
 * le manque d'annotation, @Python de la fonction */
annotation_pour_python :: fonc (entête: *NoeudCodeEntêteFonction) -> AnnotationIPA
{
    annotation_trouvée := AnnotationIPA.NON_TROUVÉE

    pour entête.annotations {
        si it.nom != "Python" {
            continue
        }

        si annotation_trouvée != AnnotationIPA.NON_TROUVÉE {
            retourne AnnotationIPA.MULTIPLES_ANNOTATIONS
        }

        annotation_trouvée = annotation_python_pour_chaine(it.valeur)

        si annotation_trouvée == AnnotationIPA.INVALIDE {
            arrête
        }
    }

    retourne annotation_trouvée
}

ConfidentialitéTypeIPA :: énum {
    /* Les membres du type peuvent être accédés. */
    ACCESSIBLE
    /* Les membres du type peuvent être mutés, ceci implique qu'ils sont également ACCESSIBLE. */
    MUTABLE
    /* Les membres du type ne sont pas ni accessible, ni mutable. */
    OPAQUE
}

confidentialité_pour_annotation :: fonc (annotations: []*AnnotationCode) -> ConfidentialitéTypeIPA
{
    pour annotations {
        si it.nom == "privé" {
            retourne ConfidentialitéTypeIPA.OPAQUE
        }

        si it.nom == "mutable" {
            retourne ConfidentialitéTypeIPA.MUTABLE
        }

        si it.nom == "accessible" {
            retourne ConfidentialitéTypeIPA.ACCESSIBLE
        }
    }

    /* Par défaut, les membres sont opaques. */
    retourne ConfidentialitéTypeIPA.OPAQUE
}

MembreTypeIPA :: struct {
    nom: chaine
    confidentialité: ConfidentialitéTypeIPA
    type: *InfoType
    type_ipa: *TypeIPA

    /* Index des fonctions de lecture et d'écriture du membre dans la liste des
     * méthodes du type parent. */
    index_fonction_écriture: z64 = -1
    index_fonction_lecture: z64 = -1
}

DrapeauxTypeIPA :: énum_drapeau {
    TYPE_EST_BASIQUE
    TYPE_EST_TABLEAU
    TYPE_EST_TRANCHE
    TYPE_EST_ÉNUM
    TYPE_EST_POINTEUR
    TYPE_EST_FONCTION
    TOUJOURS_COMME_POINTEUR
    REQUIERS_RAFINAGE

    /* Si le type possède des types dérivés. */
    TYPE_EST_DÉRIVÉ

    /* Définit si une classe virtuelle doit être généré.
     * Ceci est pour les structures avec fonctions rappels. */
    TYPE_EST_ABSTRAIT

    /* Pour la génération de code. */
    DÉCLARATION_TYPE_C_FUT_GÉNÉRÉE
    DÉCLARATION_TYPE_CPP_FUT_GÉNÉRÉE
    DÉFINITION_TYPE_CPP_FUT_GÉNÉRÉE
}

/* Informations pour un type faisant partie de l'IPA. */
TypeIPA :: struct {
    infos: *InfoType
    nom: chaine
    fonctions: [..]MéthodeIPA
    drapeaux: DrapeauxTypeIPA

    constructrice: Optionnel(MéthodeIPA)

    /* Pour les pointeurs, le type pointé. */
    type_pointé : *TypeIPA

    membres: [..]MembreTypeIPA

    /* Type de base. */
    type_base: *TypeIPA

    /* Pour les fonctions. */
    types_entrée : [..]*TypeIPA
    types_sortie : [..]*TypeIPA
}

détruit_type_ipa :: fonc (type: *TypeIPA)
{
    déloge(type.membres)
    déloge(type.types_entrée)
    déloge(type.types_sortie)
    déloge_tableau_et_ses_éléments(type.fonctions, détruit_données_méthode_ipa)

    discr type.constructrice {
        Quelque(méthode) {
            détruit_données_méthode_ipa(méthode)
        }
        sinon {}
    }

    déloge(type)
}

/* Informations pour un type faisant partie de l'IPA. */
MéthodeIPA :: struct {
    Paramètre :: struct {
        type: *InfoType
        type_ipa: *TypeIPA
        nom: chaine
    }

    noeud_code: *NoeudCodeEntêteFonction
    est_accès_membre: *MembreTypeIPA

    nom: chaine
    nom_pour_fonction_c: chaine
    nom_rappel_pour_table: chaine

    entrées: [..]Paramètre
    sorties: [..]Paramètre
}

/* Par valeur pour déloge_tableau_et_ses_éléments. */
détruit_données_méthode_ipa :: fonc (méthode: MéthodeIPA)
{
    déloge(méthode.entrées)
    déloge(méthode.sorties)
    déloge(méthode.nom_pour_fonction_c)
    déloge(méthode.nom_rappel_pour_table)

    si méthode.est_accès_membre {
        déloge(méthode.nom)
    }
}

convertis_paramètre :: fonc (param: *NoeudCode) -> MéthodeIPA.Paramètre
{
    si param.genre == GenreNoeud.INSTRUCTION_EMPL {
        param = (param comme *NoeudCodeEmpl).expression
    }

    résultat: MéthodeIPA.Paramètre
    résultat.nom = param.nom
    résultat.type = param.type
    retourne résultat
}

nom_pour_info_récursif :: fonc (info: *InfoType) -> chaine
{
    si info.id == id_info.STRUCTURE {
        retourne (info comme *InfoTypeStructure).nom
    }

    si info.id == id_info.POINTEUR {
        retourne nom_pour_info_récursif((info comme *InfoTypePointeur).type_pointé)
    }

    retourne ""
}

nom_pour_premier_param :: fonc (entête: *NoeudCodeEntêteFonction) -> chaine
{
    si entête.params.taille > 0 {
        type_premier_param := entête.params[0].type
        retourne nom_pour_info_récursif(type_premier_param)
    }

    retourne ""
}

assainie_nom_fonction_interface :: fonc (fonction: *MéthodeIPA)
{
    remplace_sans_copie(*fonction.nom_pour_fonction_c, '.', '_')
    remplace_sans_copie(*fonction.nom_rappel_pour_table, '.', '_')

    remplace_caractères_accentués(*fonction.nom_pour_fonction_c)
    remplace_caractères_accentués(*fonction.nom_rappel_pour_table)
}

convertis_entête_en_méthode_ipa :: fonc (entête: *NoeudCodeEntêteFonction, type_méthode: *TypeIPA, espace_de_nom: chaine) -> MéthodeIPA
{
    résultat := MéthodeIPA(noeud_code = entête)
    résultat.nom = entête.nom
    si type_méthode {
        nom_type := copie_chaine(type_méthode.nom)
        diffère déloge(nom_type)
        supprime_points_et_parenthèses(*nom_type)
        résultat.nom_rappel_pour_table = enchaine(nom_type, "_", entête.nom)
        résultat.nom_pour_fonction_c = enchaine(espace_de_nom, "_", nom_type, "_", entête.nom)
    }
    sinon {
        nom_premier_param := nom_pour_premier_param(entête)
        résultat.nom_rappel_pour_table = enchaine("IPA_", nom_premier_param, "_", entête.nom)
        résultat.nom_pour_fonction_c = enchaine(espace_de_nom, "_", nom_premier_param, "_", entête.nom)
    }

    assainie_nom_fonction_interface(*résultat)

    pour entête.params {
        tableau_ajoute(*résultat.entrées, convertis_paramètre(it))
    }

    pour entête.params_sorties {
        tableau_ajoute(*résultat.sorties, convertis_paramètre(it))
    }

    retourne résultat
}

/* Informations sur l'IPA. */
IPA :: struct {
    types: [..]*TypeIPA
    fonctions: [..]MéthodeIPA

    espace_de_nom: chaine
    nom_module: chaine
    dossier_sortie: chaine
}

détruit_données_ipa :: fonc (ipa: &IPA)
{
    déloge_tableau_et_ses_éléments(ipa.types, détruit_type_ipa)
    déloge_tableau_et_ses_éléments(ipa.fonctions, détruit_données_méthode_ipa)
}

initialise_ipa :: fonc (espace_de_nom: chaine, nom_module: chaine, dossier_sortie: chaine) -> IPA
{
    résultat: IPA
    résultat.espace_de_nom = espace_de_nom
    résultat.nom_module = nom_module
    résultat.dossier_sortie = dossier_sortie
    retourne résultat
}

initialise_génératrice_code_c :: fonc (ipa: &IPA) -> GénératriceCodeC
{
    résultat: GénératriceCodeC
    résultat.ipa = ipa
    résultat.espace_de_nom = ipa.espace_de_nom
    résultat.nom_module = ipa.nom_module
    résultat.dossier_sortie = ipa.dossier_sortie
    retourne résultat
}

ajoute_type :: fonc (ipa: &IPA, type: *InfoType, drapeaux: DrapeauxTypeIPA = DrapeauxTypeIPA.zéro)
{
    résultat := convertis_vers_type_ipa(ipa, type)
    résultat.drapeaux |= drapeaux
}

convertis_vers_type_ipa :: fonc (ipa: &IPA, type: *InfoType) -> *TypeIPA
{
    type_existant := trouve_type_ipa(ipa, type)
    si type_existant {
        retourne type_existant
    }

    résultat := loge(TypeIPA)
    résultat.infos = type
    /* À FAIRE(langage) : table des types. */
    type.index_dans_table_des_types = (ipa.types.taille + 1) comme n32
    tableau_ajoute(*ipa.types, résultat)

    discr type.id {
        ENTIER,
        RÉEL,
        BOOLÉEN,
        OCTET,
        RIEN {
            résultat.drapeaux.TYPE_EST_BASIQUE = vrai
        }
        ÉNUM {
            résultat.drapeaux.TYPE_EST_ÉNUM = vrai
            type_sous_jacent := (type comme *InfoTypeÉnum).type_sous_jacent
            _ := convertis_vers_type_ipa(ipa, type_sous_jacent)
        }
        CHAINE {
        }
        POINTEUR {
            info_pointeur := type comme *InfoTypePointeur
            résultat.drapeaux.TYPE_EST_BASIQUE = vrai
            résultat.drapeaux.TYPE_EST_POINTEUR = vrai
            résultat.type_pointé = convertis_vers_type_ipa(ipa, info_pointeur.type_pointé)
        }
        STRUCTURE {
            info_struct := type comme *InfoTypeStructure
            résultat.nom = info_struct.nom

            pour info_struct.membres {
                confidentialité := confidentialité_pour_annotation(it.annotations)

                si confidentialité == ConfidentialitéTypeIPA.OPAQUE {
                    continue
                }

                membre := tableau_ajoute_élément(*résultat.membres)
                membre.nom = it.nom
                membre.confidentialité = confidentialité
                membre.type = it.id
                membre.type_ipa = ipa.convertis_vers_type_ipa(it.id)
            }
        }
        UNION {
            compilatrice_rapporte_erreur("Les types « union » ne sont pas convertibles vers C/C++ pour le moment")
        }
        FONCTION {
            info_fonction := type comme *InfoTypeFonction

            si info_fonction.est_coroutine {
                compilatrice_rapporte_erreur("Les coroutines ne sont pas convertibles en C/C++.")
                retourne nul
            }

            si info_fonction.types_sortie.taille > 1 {
                compilatrice_rapporte_erreur("Les types fonctions avec plusieurs valeurs de retour ne sont pas convertibles en C/C++.")
                retourne nul
            }

            résultat.drapeaux.TYPE_EST_FONCTION = vrai

            pour info_fonction.types_entrée {
                /* À FAIRE : pointeurs de tableaux. */
                si it.id == id_info.TABLEAU {
                    compilatrice_rapporte_erreur("Les types tableaux en entrée de fonction ne sont pas convertibles en C++ pour l'instant.")
                    retourne nul
                }

                tableau_ajoute(*résultat.types_entrée, ipa.convertis_vers_type_ipa(it))
            }

            pour info_fonction.types_sortie {
                /* À FAIRE : pointeurs de tableaux. */
                si it.id == id_info.TABLEAU {
                    compilatrice_rapporte_erreur("Les types tableaux en sortie de fonction ne sont pas convertibles en C++ pour l'instant.")
                    retourne nul
                }

                tableau_ajoute(*résultat.types_sortie, ipa.convertis_vers_type_ipa(it))
            }
        }
        OPAQUE {
            compilatrice_rapporte_erreur("Les types « opaque » ne sont pas convertibles vers C/C++ pour le moment")
        }
        TABLEAU {
            info_tableau := type comme *InfoTypeTableau

            si info_tableau.est_tableau_fixe {
                compilatrice_rapporte_erreur("Les types tableaux fixe ne sont pas convertibles vers Python pour le moment")
                retourne nul
            }

            résultat.drapeaux.TYPE_EST_TABLEAU = vrai

            ajoute_type(ipa, info_tableau.type_pointé)
        }
        TRANCHE {
            info_tranche := type comme *InfoTypeTranche
            résultat.drapeaux.TYPE_EST_TRANCHE = vrai
            ajoute_type(ipa, info_tranche.type_élément)
        }
        TYPE_DE_DONNÉES {
            compilatrice_rapporte_erreur("Les types « type_de_données » ne sont pas convertibles vers C/C++ pour le moment")
        }
        EINI {
            compilatrice_rapporte_erreur("Les types « eini » ne sont pas convertibles vers C/C++ pour le moment")
        }
        VARIADIQUE {
            compilatrice_rapporte_erreur("Les types « variadiques » ne sont pas convertibles vers C/C++ pour le moment")
        }
    }

    retourne résultat
}

trouve_type_ipa :: fonc (ipa: &IPA, type: *InfoType) -> *TypeIPA
{
    /* À FAIRE(langage) : table des types. */
    index := (type.index_dans_table_des_types comme z64) - 1

    si index < 0 || index >= ipa.types.taille {
        retourne nul
    }

    retourne ipa.types[index]
}

ajoute_méthode :: fonc (ipa: &IPA, noeud_code: *NoeudCodeEntêteFonction)
{
    annotation := annotation_pour_python(noeud_code)

    discr annotation {
        NON_TROUVÉE,
        INVALIDE,
        MULTIPLES_ANNOTATIONS {
            retourne
        }
        TROUVÉE_SANS_PARAMÈTRE {
            ajoute_méthode(ipa, noeud_code, nul)
            retourne
        }
        POUR_MÉTHODE {
            premier_type := noeud_code.params[0].type

            si premier_type.id == id_info.POINTEUR {
                premier_type = (premier_type comme *InfoTypePointeur).type_pointé
            }

            type_ipa := trouve_type_ipa(ipa, premier_type comme *InfoTypeStructure)
            ajoute_méthode(ipa, noeud_code, type_ipa)
            retourne
        }
        POUR_NEW {
            /* À FAIRE : valide */
            premier_type := noeud_code.params[0].type

            si premier_type.id == id_info.POINTEUR {
                premier_type = (premier_type comme *InfoTypePointeur).type_pointé
            }

            type_ipa := convertis_vers_type_ipa(ipa, premier_type comme *InfoTypeStructure)
            ajoute_méthode_new(ipa, noeud_code, type_ipa)
            retourne
        }
        sinon {
            retourne
        }
    }
}

ajoute_fonction_accès_membre :: fonc (type: *TypeIPA, membre: *MembreTypeIPA, pour_lecture: bool) -> *MéthodeIPA
{
    fonction := tableau_ajoute_élément(*type.fonctions)
    si pour_lecture {
        fonction.nom = enchaine("donne_", membre.nom)
    }
    sinon {
        fonction.nom = enchaine("définis_", membre.nom)
    }
    fonction.est_accès_membre = membre
    retourne fonction
}

ajoute_entrée :: fonc (fonction: *MéthodeIPA, nom: chaine, type: *InfoType, type_ipa: *TypeIPA)
{
    entrée := tableau_ajoute_élément(*fonction.entrées)
    entrée.nom = nom
    entrée.type = type
    entrée.type_ipa = type_ipa
}

ajoute_sortie :: fonc (fonction: *MéthodeIPA, nom: chaine, type: *InfoType, type_ipa: *TypeIPA)
{
    sortie := tableau_ajoute_élément(*fonction.sorties)
    sortie.nom = nom
    sortie.type = type
    sortie.type_ipa = type_ipa
}

ajoute_méthodes_pour_membres_types :: fonc (ipa: &IPA)
{
    pour ipa.types {
        nom_type := copie_chaine(it.nom)
        diffère déloge(nom_type)

        supprime_points_et_parenthèses(*nom_type)

        pour * membre dans it.membres {
            /* Fonction lecture. */
            fonction := ajoute_fonction_accès_membre(it, membre, vrai)
            membre.index_fonction_lecture = it.fonctions.taille - 1
            fonction.nom_rappel_pour_table = enchaine(ipa.espace_de_nom, "_", nom_type, "_donne_", membre.nom)
            fonction.nom_pour_fonction_c = copie_chaine(fonction.nom_rappel_pour_table)

            ajoute_entrée(fonction, "moi", it.infos, it)
            ajoute_sortie(fonction, "résultat", membre.type, membre.type_ipa)

            assainie_nom_fonction_interface(fonction)

            saufsi membre.confidentialité == ConfidentialitéTypeIPA.MUTABLE {
                continue
            }

            /* Fonction écriture. */
            fonction = ajoute_fonction_accès_membre(it, membre, faux)
            membre.index_fonction_écriture = it.fonctions.taille - 1
            fonction.nom_rappel_pour_table = enchaine(ipa.espace_de_nom, "_", nom_type, "_definis_", membre.nom)
            fonction.nom_pour_fonction_c = copie_chaine(fonction.nom_rappel_pour_table)

            ajoute_entrée(fonction, "moi", it.infos, it)
            ajoute_entrée(fonction, "valeur", membre.type, membre.type_ipa)
            ajoute_sortie(fonction, "résultat", info_de(rien), ipa.convertis_vers_type_ipa(info_de(rien)))

            assainie_nom_fonction_interface(fonction)
        }
    }
}

finalise_informations_types :: fonc (ipa: &IPA)
{
    ajoute_méthodes_pour_membres_types(ipa)

    pour ipa.types {
        infos := it.infos

        saufsi infos.id == id_info.STRUCTURE {
            continue
        }

        info_struct := infos comme *InfoTypeStructure

        saufsi info_struct.structs_employées {
            continue
        }

        type_base := ipa.convertis_vers_type_ipa(info_struct.structs_employées[0])
        si type_base.drapeaux.TOUJOURS_COMME_POINTEUR {
            it.drapeaux.TOUJOURS_COMME_POINTEUR = vrai
        }

        it.type_base = type_base
        type_base.drapeaux.TYPE_EST_DÉRIVÉ = vrai
    }
}

ajoute_méthode :: fonc (ipa: &IPA, noeud_code: *NoeudCodeEntêteFonction, type_méthode: *TypeIPA)
{
    résultat := convertis_entête_en_méthode_ipa(noeud_code, type_méthode, ipa.espace_de_nom)

    si type_méthode {
        tableau_ajoute(*type_méthode.fonctions, résultat)
    }
    sinon {
        tableau_ajoute(*ipa.fonctions, résultat)
    }

    convertis_types_params_méthode(ipa, *résultat)
}

ajoute_méthode_new :: fonc (ipa: &IPA, noeud_code: *NoeudCodeEntêteFonction, type_méthode: *TypeIPA)
{
    résultat := convertis_entête_en_méthode_ipa(noeud_code, nul, ipa.espace_de_nom)
    convertis_types_params_méthode(ipa, *résultat)
    type_méthode.constructrice = résultat
}

convertis_types_params_méthode :: fonc (ipa: &IPA, méthode: *MéthodeIPA)
{
    pour & méthode.entrées {
        it.type_ipa = convertis_vers_type_ipa(ipa, it.type)
    }

    pour & méthode.sorties {
        it.type_ipa = convertis_vers_type_ipa(ipa, it.type)
    }
}
