importe Compilatrice
importe Fondation
importe SysFichier

/* ------------------------------------------------------------------------- */
/** \nom Fonctions auxilliaires.
 * À FAIRE : déplace celles-ci dans des modules.
 * \{ */

copie_enchaineuse_fichier_ex :: fonc (enchaineuse: *Enchaineuse, chemin: CheminFichier)
{
    discr copie_enchaineuse_fichier(enchaineuse, chemin) {
        Quelque(err) {
            si err != 0 comme ErreurFichier {
                compilatrice_rapporte_erreur("impossible d'ouvrir le fichier")
            }
        }
        sinon {}
    }
}

supprime_caractère_unicode :: fonc (chn: *chaine)
{
    ptr_source := chn.pointeur
    ptr_final := ptr_source + chn.taille
    ptr_dest := chn.pointeur

    paires_unicode_ascii := [
        ["À", "A"],
        ["Â", "A"],
        ["à", "a"],
        ["â", "a"],
        ["Ç", "C"],
        ["ç", "c"],
        ["É", "E"],
        ["Ê", "E"],
        ["È", "E"],
        ["é", "e"],
        ["ê", "e"],
        ["è", "e"],
        ["Î", "I"],
        ["î", "i"],
        ["Ô", "O"],
        ["ô", "o"],
        ["Û", "U"],
        ["û", "u"]]

    tantque ptr_source < ptr_final {
        it := mémoire(ptr_source)

        si 'a' <= it <= 'z' || 'A' <= it <= 'Z' || it == '_' || '0' <= it <= '9' {
            mémoire(ptr_dest) = it
            ptr_source += 1
            ptr_dest += 1
            continue
        }

        tmp : chaine = ---
        tmp.pointeur = ptr_source
        tmp.taille = 2
        pour paire dans paires_unicode_ascii {
            si paire[0] == tmp {
                mémoire(ptr_dest) = paire[1][0]
                ptr_source += 2
                ptr_dest += 1
                arrête
            }
        }
        sansarrêt {
            mémoire(ptr_dest) = it
            ptr_source += 1
            ptr_dest += 1
        }
    }

    chn.taille = ptr_dest - chn.pointeur
}

// À FAIRE(langage) : crash dans la MV si le type retour est n32 (la conversion vers z64 pour l'indexage ne fonctionne pas)
index_bit_taille_octet :: fonc (taille: n32) -> z32
{
    résultat : z32 = 0

    tantque taille / 2 != 0 {
        résultat += 1
        taille /= 2
    }

    retourne résultat
}

/** } */
