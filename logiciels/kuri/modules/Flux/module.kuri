importe Fondation
importe Ordinatrice
importe SysFichier

/* ------------------------------------------------------------------------- */
/** \nom FluxOctetsMémoire
 * \{ */

FluxOctets :: struct {
    sur_lis: fonc(*FluxOctets, []octet)(z64)
    sur_ferme: fonc(*FluxOctets)(rien)
}

ferme :: fonc (flux: *FluxOctets)
{
    si flux.sur_ferme {
        flux.sur_ferme(flux)
    }
}

lis :: fonc (flux: *FluxOctets, tampon: []octet) -> z64
{
    retourne flux.sur_lis(flux, tampon)
}

lis_grand_boutisme :: fonc (flux: *FluxOctets, $T: type_de_données) -> T, z64
{
    résultat: T
    taille_lue := flux.lis(résultat)
    commute_boutisme(*résultat)
    retourne résultat, taille_lue
}

lis_petit_boutisme :: fonc (flux: *FluxOctets, $T: type_de_données) -> T, z64
{
    résultat: T
    taille_lue := flux.lis(résultat)
    retourne résultat, taille_lue
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FluxOctetsMémoire
 * \{ */

FluxOctetsMémoire :: struct {
    empl base: FluxOctets

    octets: []octet
    curseur: []octet
}

crée_flux_octets_mémoire :: fonc (octets: []octet) -> FluxOctetsMémoire
{
    résultat: FluxOctetsMémoire
    résultat.sur_lis = flux_octets_mémoire_lis
    résultat.octets = octets
    résultat.curseur = octets
    retourne résultat
}

flux_octets_mémoire_lis :: fonc (base: *FluxOctets, tampon: []octet) -> z64
{
    flux := base comme *FluxOctetsMémoire

    taille_à_lire := tampon.taille
    si taille_à_lire > flux.curseur.taille {
        taille_à_lire = flux.curseur.taille
    }

    copie_mem_nonsur(src = flux.curseur.pointeur, dst = tampon.pointeur, taille = taille_à_lire)

    flux.curseur = avance(flux.curseur, taille_à_lire)

    retourne taille_à_lire
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FluxOctetsFichier
 * \{ */

FluxOctetsFichier :: struct {
    empl base: FluxOctets

    fichier: Fichier
}

crée_flux_octets_fichier :: fonc (chemin: chaine) -> FluxOctetsFichier
{
    retourne crée_flux_octets_fichier(CheminFichier(chemin))
}

crée_flux_octets_fichier :: fonc (chemin: CheminFichier) -> FluxOctetsFichier
{
    résultat: FluxOctetsFichier
    résultat.sur_lis = flux_octets_fichier_lis
    résultat.sur_ferme = flux_octets_fichier_ferme

    résultat.fichier = tente ouvre_fichier(chemin, pour_lecture, 0o644) piège err {
        imprimeln("Impossible d'ouvrir le fichier '%' : %", chemin.chn, err)
        retourne résultat
    }

    retourne résultat
}

flux_octets_fichier_lis :: fonc (base: *FluxOctets, tampon: []octet) -> z64
{
    flux := base comme *FluxOctetsFichier

    octets_lus := tente lis(*flux.fichier, tampon) piège err {
        imprimeln("Impossible de lire le fichier : %", err)
        retourne 0
    }

    retourne octets_lus comme z64
}

flux_octets_fichier_ferme :: fonc (base: *FluxOctets)
{
    flux := base comme *FluxOctetsFichier
    _ := ferme(*flux.fichier)
}

/** \} */

