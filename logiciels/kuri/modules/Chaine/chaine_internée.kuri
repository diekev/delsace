/* Une chaine internée est une chaine qui n'existe qu'en un seul exemplaire dans
 * le programme, ceci nous permet de ne faire qu'une comparaison de pointeur au
 * lieu d'une comparaison de chaine complète. */

importe TableHachage

/* Le type de chaine qui sera interné. Ceci utilise la sémantique de valeur, ainsi deux chaines de types
 * différents (p.e. chaine et ChaineUTF32) qui possède les mêmes points de code dans un codec commun ne
 * seront internées qu'une seule fois. */
TypeChaineInternée :: union {
    chn_native: chaine
    chn_utf32: ChaineUTF32
}

// À FAIRE(langage) : les discriminations sur des types pointeurs échoues
// À FAIRE(langage) : trouve une solution pour les opérateurs prenant une union et un type rubrique, pour éviter les paniques en cas de rubrique non-active

détruit_chaine :: fonc (type_chaine: TypeChaineInternée)
{
    discr type_chaine {
        chn_native {
            déloge(type_chaine.chn_native)
        }
        chn_utf32 {
            détruit_chaine(type_chaine.chn_utf32)
        }
        sinon {}
    }
}

opérateur == :: fonc (type_chaine: TypeChaineInternée, chn: chaine) -> bool
{
    discr type_chaine {
        chn_native {
            retourne type_chaine.chn_native == chn
        }
        chn_utf32 {
            retourne type_chaine.chn_utf32 == chn
        }
        sinon {}
    }

    retourne faux
}

opérateur == :: fonc (type_chaine: TypeChaineInternée, chn: ChaineUTF32) -> bool
{
    discr type_chaine {
        chn_native {
            retourne type_chaine.chn_native == chn
        }
        chn_utf32 {
            retourne type_chaine.chn_utf32 == chn
        }
        sinon {}
    }

    retourne faux
}

opérateur == :: fonc (type_chaine_a: TypeChaineInternée, type_chaine_b: TypeChaineInternée) -> bool
{
    discr type_chaine_a {
        chn_native {
            retourne type_chaine_b == type_chaine_a.chn_native
        }
        chn_utf32 {
            retourne type_chaine_b == type_chaine_a.chn_utf32
        }
        sinon {}
    }

    retourne faux
}

ChaineInternée :: struct {
    chn: TypeChaineInternée
}

opérateur == :: fonc (chaine_internée: *ChaineInternée, chn: chaine) -> bool
{
    si chaine_internée == nul {
        retourne chn == ""
    }

    retourne chaine_internée.chn == chn
}

opérateur != :: fonc (chaine_internée: *ChaineInternée, chn: chaine) -> bool
{
    retourne !(chaine_internée == chn)
}

opérateur == :: fonc (chaine_internée: *ChaineInternée, chn: ChaineUTF32) -> bool
{
    si chaine_internée == nul {
        retourne chn.est_vide()
    }

    retourne chaine_internée.chn == chn
}

opérateur != :: fonc (chaine_internée: *ChaineInternée, chn: ChaineUTF32) -> bool
{
    retourne !(chaine_internée == chn)
}

opérateur < :: fonc (chaine_internée: *ChaineInternée, chn: chaine) -> bool
{
    retourne chaine_internée.chn < chn
}

opérateur > :: fonc (chaine_internée: *ChaineInternée, chn: chaine) -> bool
{
    si chaine_internée == nul {
        retourne faux
    }

    retourne chaine_internée.chn > chn
}

/* Retourne une copie de la chaine internée du type de chaine native.
 * C'est de la responsabilité de l'appelante de libérer la mémoire allouée. */
chaine_native :: fonc (chaine_internée: *ChaineInternée) -> chaine
{
    discr chaine_internée.chn {
        chn_native(chn) {
            retourne copie_chaine(chn)
        }
        chn_utf32(chn) {
            retourne converti_vers_chaine(chn)
        }
        sinon {
            retourne copie_chaine("")
        }
    }
}

imprime_chaine_internée :: fonc (enchaineuse: *Enchaineuse, chaine_internée: *ChaineInternée)
{
    discr chaine_internée.chn {
        chn_native(chn) {
            ajoute_au_tampon(enchaineuse, chn)
        }
        chn_utf32(chn) {
            imprime_chaine_utf32(enchaineuse, *chn)
        }
        sinon {}
    }
} @FormattageImpression

calcule_empreinte :: fonc (type_chaine: TypeChaineInternée) -> n64
{
    discr type_chaine {
        chn_native {
            chn_utf32 := crée_chaine_utf32(type_chaine.chn_native)
            diffère détruit_chaine(chn_utf32)
            retourne calcule_empreinte_djb2(chn_utf32)
        }
        chn_utf32 {
            retourne calcule_empreinte_djb2(type_chaine.chn_utf32)
        }
        sinon {}
    }

    retourne 0
}

table_des_chaines : Table(TypeChaineInternée, *ChaineInternée, calcule_empreinte)

crée_chaine_internée :: fonc (chn: $T) -> *ChaineInternée
{
    chaine_existante := trouve_chaine_internée(chn)

    saufsi chaine_existante {
        nouvelle_chaine := loge(ChaineInternée)
        nouvelle_chaine.chn = copie_chaine(chn)

        insère(*table_des_chaines, nouvelle_chaine.chn, nouvelle_chaine)
        chaine_existante = nouvelle_chaine
    }

    retourne chaine_existante
}

/* Crée une ChaineInternée depuis une chaine native, mais convertis en UTF-32 afin
 * d'éviter les comparaisons coûteuse entre chaine et ChaineUTF32. */
crée_chaine_internée_converti_utf32 :: fonc (chn: chaine) -> *ChaineInternée
{
    chaine_existante := trouve_chaine_internée(chn)

    saufsi chaine_existante {
        nouvelle_chaine := loge(ChaineInternée)
        nouvelle_chaine.chn = crée_chaine_utf32(chn)

        insère(*table_des_chaines, nouvelle_chaine.chn, nouvelle_chaine)
        chaine_existante = nouvelle_chaine
    }

    retourne chaine_existante
}

trouve_chaine_internée :: fonc (chn: $T) -> *ChaineInternée
{
    type_chaine: TypeChaineInternée
    type_chaine = chn

    résultat := trouve(*table_des_chaines, type_chaine)

    // À FAIRE(langage) : les discriminations ne fonctionnent pas sur les types pointeus ou autres
    TypePointeurChaineInternée :: *ChaineInternée

    discr résultat {
        bool {
            retourne nul
        }
        TypePointeurChaineInternée(c) {
            retourne c
        }
        sinon {
            retourne nul
        }
    }
}

détruit_chaines_internées :: fonc ()
{
    pour v, idx dans table_des_chaines.valeurs {
        saufsi table_des_chaines.occupés[idx] {
            continue
        }

        détruit_chaine(v.chn)
        déloge(v)
    }

    détruit(*table_des_chaines)
}
