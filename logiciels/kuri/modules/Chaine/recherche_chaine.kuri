/* Faitures à supporter dans le langage :
 * - surcharge de structures polymorphiques   Chaine :: struct ($T: type_de_données) { ... } -> Chaine :: struct (T = n8) { ... }
 * - valeur structure pour les constantes globales
 * - interface, traits...
 * - structure vide
 */

// Idée de Rust :
// - validation des chaines pour vérifier qu'elles soient bel et bien encodées en UTF-8 lors de leurs construction
// -- les chaines connues lors de la compilation doivent être vérifiées par le compilateur
// -- lors d'une assignation ?
// -- lors d'une construction depuis une chaine C -> validation des caractères
// - avoir des itérateurs sur chaine pour UTF-8, aller de point-code en point-code
// -- pouvoir convertir en majuscule ou en minuscule
// -- pouvoir normaliser la chaine (remplacer les caractères similaires)
// - https://fasterthanli.me/blog/2020/working-with-strings-in-rust/

/*

BaseChaine :: struct ($T: type_de_données) {
    données: [..]T
}

/* Une chaine UTF-8 */
Chaine :: BaseChaine(T = n8)

/* Une chaine UTF-16 */
Chaine16 :: BaseChaine(T = n16)

/* Une chaine UTF-32 */
Chaine32 :: BaseChaine(T = n32)

// avec un codec

BaseChaine :: struct ($T: type_de_données, $codec: Codec(T = T)) {

}

c := Chaine()

// Codec

Codec :: struct ($T: type_de_données) {
    est_espace_blanche : fonc(T)(bool)
    est_nombre : fonc(T)(bool)
    est_lettre : fonc(T)(bool)
    en_minuscule : fonc(T)(T)
    en_majuscule : fonc(T)(T)

    // ne contient que des lettres
    est_alphabétique : fonc(T)(T)

    // ne contient que des nombres
    est_numérique : fonc(T)(T)

    // ne contient que des lettres et des nombres
    est_alphanumérique : fonc(T)(bool)

    // converti vers un codec de base (UTF-8)
    en_utf8 :: fonc (T, &[4]n8)(z32)

    // est_valide dans ce codec
    est_valide :: fonc ([]octet, z64)(bool)
}

// génère les fonctions par un métaprogramme, est_espace_blanche, ...

// min := Chaine.codec.en_minuscule(l)

// stocke les empreintes, et accumule les valeurs quand la chaine est modifiée

/*
ajoute :: fonc (chn: &Chaine, v: valeur)
{
    ajourne_empreinte(*chn.empreinte, v)
}
*/

// d'autres chaines : voir Houdini pour les chaines référencées

// Pour travailloer sur les chaines

-- représenter une chaine
-- connaitre le codec d'une chaine
-- ajouter ou supprimer des éléments d'une chaine
-- parser une chaine
-- formatter une structure de données pour la représenter sous forme de chaine
-- itérer sur une chaine

// ----------

Chaine :: struct {

}

implémente Chaine {
    taille :: fonc () -> z64

    codec :: fonc () -> *CodecChaine
}

// ChaineASCII :: #opaque Chaine(CodecASCII)
// ChaineSystème :: #opaque Chaine(CodecDéfaut)
// ChaineUTF8 :: #opaque Chaine(CodecUTF8)
// ChaineUTF16 :: #opaque Chaine(CodecUTF16)
// ChaineUTF32 :: #opaque Chaine(CodecUTF32)

// ----------

CodecChaine :: struct {

}

implémente CodecChaine {
    TypeCaractère :: $T
    TypePointDeCode :: TypeCaractère

    en_minuscule

    en_majuscule

    est_alphabétique

    est_numérique

    est_ponctuation

    est_point_de_controle
}

// ----------

ParseuseChaine :: struct {

}

// ----------

Enchaineuse :: struct {

}

// ----------

// ----------

*/
