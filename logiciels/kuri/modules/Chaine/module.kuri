importe Fondation
importe Unicode

charge "chaine_c"
charge "chaine_internée"
charge "chaine_utf32"
charge "chaine_utf_16"
charge "empreintes"

est_chaine_statique :: fonc (chn: chaine) -> bool #enligne
{
    retourne intrinsèque_est_adresse_données_constantes(chn.pointeur)
}

supprime_espaces_blancs :: fonc (ligne: chaine) -> chaine
{
    ligne = supprime_espaces_blancs_au_début(ligne)
    ligne = supprime_espaces_blancs_à_la_fin(ligne)
    retourne ligne
}

supprime_espaces_blancs_au_début :: fonc (ligne: chaine) -> chaine
{
    tantque ligne.taille > 0 {
        saufsi est_espace_blanc(ligne[0]) {
            arrête
        }
        ligne = avance(ligne, 1)
    }
    retourne ligne
}

supprime_espaces_blancs_à_la_fin :: fonc (ligne: chaine) -> chaine
{
    tantque ligne.taille > 0 {
        saufsi est_espace_blanc(ligne[ligne.taille - 1]) {
            arrête
        }
        ligne = recule(ligne, 1)
    }
    retourne ligne
}

compare_ascii_insensible_à_la_casse :: fonc (c1: z8, c2: z8) -> bool #enligne
{
    si c1 == c2 {
        retourne vrai
    }

    retourne en_minuscule(c1) == en_minuscule(c2)
}

compare_ascii_insensible_à_la_casse :: fonc (chn1: chaine, chn2: chaine) -> bool
{
    si chn1.taille != chn2.taille {
        retourne faux
    }

    pour chn1.taille {
        c1 := chn1[index_it]
        c2 := chn2[index_it]

        saufsi compare_ascii_insensible_à_la_casse(c1, c2) {
            retourne faux
        }
    }

    retourne vrai
}

convertis_casse_serpent_pour_interface :: fonc (chn: chaine) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    en_majuscule := vrai

    pour chn {
        si it == '_' {
            ajoute_au_tampon(*enchaineuse, ' ')
            en_majuscule = vrai
            continue
        }

        si en_majuscule {
            si 'a' <= it <= 'z' {
                ajoute_au_tampon(*enchaineuse, it - 'a' + 'A')
            }
            sinon {
                ajoute_au_tampon(*enchaineuse, it)
            }

            en_majuscule = faux
        }
        sinon {
            ajoute_au_tampon(*enchaineuse, it)
        }
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

/* ------------------------------------------------------------------------- */
/** \nom ChaineFixe
 * \{ */

ChaineFixe :: struct {
    données: [23]z8 // À FAIRE : polymorphise, 23 est pour HTML
    taille: z8
}

chaine_ajoute :: fonc (chn: *ChaineFixe, c: z8)
{
    chn.données[chn.taille] = c
    chn.taille += 1
}

chaine_ajoute :: fonc (chn: *ChaineFixe, point_de_code: n32)
{
    nombre_octets := point_de_code_vers_utf8(point_de_code, *chn.données[chn.taille] comme *n8)

    si nombre_octets == 0 {
        // À FAIRE : que faire ici ?
        retourne
    }

    chn.taille += nombre_octets comme z8
}

converti_vers_chaine :: fonc (chn: &ChaineFixe) -> chaine
{
    résultat : chaine = ---
    résultat.pointeur = *chn.données[0]
    résultat.taille = chn.taille
    retourne résultat
}

/** \} */
