// Interface pour la bibliothèque OpenSSL

#bibliothèque_dynamique "ssl"
#bibliothèque_dynamique "crypto"

//###############################################################################

ssl_method_st :: struct externe  // SSL_METHOD dans l'IPA C
ssl_st :: struct externe  // SSL dans l'IPA C

X509 :: struct externe
X509_NAME :: struct externe
X509_REQ :: struct externe
X509_CRL :: struct externe

SSL_library_init :: fonc externe () -> rien
OpenSSL_add_all_algorithms :: fonc externe () -> rien
OpenSSL_add_ssl_algorithms :: fonc externe () -> rien
TLSv1_2_server_method :: fonc externe () -> *ssl_method_st
SSL_load_error_strings :: fonc externe () -> rien
SSLv23_client_method :: fonc externe () -> *ssl_method_st
SSL_CTX_new :: fonc externe (method : *ssl_method_st) -> *ssl_st
SSL_new :: fonc externe (ctx_s : *rien) -> *ssl_st
SSL_set_fd :: fonc externe (ssl : *ssl_st, prise : z32) -> rien
SSL_connect :: fonc externe (ssl : *ssl_st) -> z32
SSL_free :: fonc externe (ssl : *ssl_st) -> rien
SSL_get_error :: fonc externe (ssl : *ssl_st, erreur_ : z32) -> z32
SSL_write :: fonc externe (ssl : *ssl_st, ptr : *z8, taille : z32) -> z32
SSL_read :: fonc externe (ssl : *ssl_st, tampon : *z8, max : z32) -> z32

SSL_ERROR_NONE :: 0
SSL_ERROR_SSL :: 1
SSL_ERROR_WANT_READ :: 2
SSL_ERROR_WANT_WRITE :: 3
SSL_ERROR_WANT_X509_LOOKUP :: 4
SSL_ERROR_SYSCALL :: 5
SSL_ERROR_ZERO_RETURN :: 6
SSL_ERROR_WANT_CONNECT :: 7
SSL_ERROR_WANT_ACCEPT :: 8

SSL_CTX_free :: fonc externe (ssl: *ssl_st) -> rien
SSL_accept :: fonc externe (ssl: *ssl_st) -> z32
SSL_get_fd :: fonc externe (ssl: *ssl_st) -> z32

SSL_get_peer_certificate :: fonc externe (ssl: *ssl_st) -> *X509
X509_free :: fonc externe (x509: *X509) -> rien

X509_get_subject_name :: fonc externe (x: *X509) -> *X509_NAME
X509_set_subject_name :: fonc externe (x: *X509, nom: *X509_NAME) -> z32

X509_get_issuer_name :: fonc externe (x: *X509) -> *X509_NAME
X509_set_issuer_name :: fonc externe (x: *X509, nom: *X509_NAME) -> z32

X509_REQ_get_subject_name :: fonc externe (req: *X509_REQ) -> *X509_NAME
X509_REQ_set_subject_name :: fonc externe (req: *X509_REQ, nom: *X509_NAME) -> z32

X509_CRL_get_issuer :: fonc externe (crl: *X509_CRL) -> *X509_NAME
X509_CRL_set_issuer_name :: fonc externe (crl: *X509_CRL, nom: *X509_NAME) -> z32

X509_NAME_oneline :: fonc externe (a: *X509_NAME, buf: *z8, size: z32) -> *z8

SSL_CTX_use_certificate_file :: fonc externe (ctx: *ssl_st, CertFile: *z8, x: z32) -> z32
SSL_CTX_use_PrivateKey_file :: fonc externe (ctx: *ssl_st, KeyFile: *z8, x: z32) -> z32
SSL_CTX_check_private_key :: fonc externe (ctx: *ssl_st) -> z32

X509_FILETYPE_PEM     :: 1
X509_FILETYPE_ASN1    :: 2
X509_FILETYPE_DEFAULT :: 3

SSL_FILETYPE_PEM  :: X509_FILETYPE_PEM
SSL_FILETYPE_ASN1 :: X509_FILETYPE_ASN1

ERR_print_errors_cb :: fonc externe (cb : fonc(*z8,n64,*rien)z32, u : *rien) -> rien

// ----------------------------------------------------------------------------

importe Fondation
importe SysFichier

ErreurCertificat :: erreur {
    FichierCertificationInvalide
    FichierCléInvalide
    MésappariementClésPubliquePrivée
}

charge_certificats_ssl :: fonc(ctx: *ssl_st, chemin_fichier_certificat: chaine, chemin_fichier_clé: chaine) -> ErreurCertificat
{
    ptr_chemin_certificat := chaine_c_temp(chemin_fichier_certificat)
    si SSL_CTX_use_certificate_file(ctx, ptr_chemin_certificat, SSL_FILETYPE_PEM) <= 0 {
        retourne ErreurCertificat.FichierCertificationInvalide
    }

    ptr_chemin_clé := chaine_c_temp(chemin_fichier_clé)
    si SSL_CTX_use_PrivateKey_file(ctx, ptr_chemin_clé, SSL_FILETYPE_PEM) <= 0 {
        retourne ErreurCertificat.FichierCléInvalide
    }

    si SSL_CTX_check_private_key(ctx) == 0 {
        retourne ErreurCertificat.MésappariementClésPubliquePrivée
    }

    retourne 0 comme ErreurCertificat
}

imprime_certificats_ssl :: fonc(ssl: *ssl_st) -> rien
{
    cert := SSL_get_peer_certificate(ssl)

    si cert == nul {
        imprime("Aucun certificats !\n")
        retourne
    }

    imprime("Certificats serveurs :\n")

    line := X509_NAME_oneline(X509_get_subject_name(cert), nul, 0)
    imprime("Sujet :\n%\n", converti_chaine_c(line))
    free(line)

    line = X509_NAME_oneline(X509_get_issuer_name(cert), nul, 0)
    imprime("Émetteur :\n%\n", converti_chaine_c(line))
    free(line)

    X509_free(cert)
}

ErreurInitialisationSSL :: erreur {
    NePeutCréerMéthode
    NePeutCréerContexte
}

ErreurOuContexteSSL :: union {
    c: *ssl_st
    e: ErreurInitialisationSSL
}

initialise_contexte_ssl_client :: fonc () -> ErreurOuContexteSSL
{
    SSL_library_init()
    OpenSSL_add_ssl_algorithms()
    SSL_load_error_strings()

    method := SSLv23_client_method()

    si method == nul {
        retourne ErreurInitialisationSSL.NePeutCréerMéthode
    }

    ctx := SSL_CTX_new(method)

    si ctx == nul {
        //converti_erreur_ssl(nul, 0)
        retourne ErreurInitialisationSSL.NePeutCréerContexte
    }

    retourne ctx
}

initialise_contexte_ssl_serveur :: fonc () -> ErreurOuContexteSSL
{
    SSL_library_init()
    OpenSSL_add_all_algorithms()
    SSL_load_error_strings()

    method := TLSv1_2_server_method()

    si method == nul {
        retourne ErreurInitialisationSSL.NePeutCréerMéthode
    }

    ctx := SSL_CTX_new(method)

    si ctx == nul {
        //converti_erreur_ssl(nul, 0)
        retourne ErreurInitialisationSSL.NePeutCréerContexte
    }

    retourne ctx
}

ErreurSSL :: erreur {
    LectureAttendue
    ÉcritureAttendue
    ConnexionAttendue
    AcceptationAttendue
    RécupérationX509Attendue
    SSL
    Aucune
    RetourneZéro
    AppelSystème
}

converti_erreur_ssl :: fonc (ssl : *ssl_st, code_erreur : z32) -> ErreurSSL
{
    erreur_ssl := SSL_get_error(ssl, code_erreur)

    discr erreur_ssl {
        SSL_ERROR_NONE {
            retourne ErreurSSL.Aucune
        }
        SSL_ERROR_ZERO_RETURN {
            retourne ErreurSSL.RetourneZéro
        }
        SSL_ERROR_WANT_READ {
            retourne ErreurSSL.LectureAttendue
        }
        SSL_ERROR_WANT_WRITE {
            retourne ErreurSSL.ÉcritureAttendue
        }
        SSL_ERROR_WANT_CONNECT {
            retourne ErreurSSL.ConnexionAttendue
        }
        SSL_ERROR_WANT_ACCEPT {
            retourne ErreurSSL.AcceptationAttendue
        }
        SSL_ERROR_WANT_X509_LOOKUP {
            retourne ErreurSSL.RécupérationX509Attendue
        }
        SSL_ERROR_SYSCALL {
            retourne ErreurSSL.AppelSystème
        }
        SSL_ERROR_SSL {
            retourne ErreurSSL.SSL
        }
        sinon {
            retourne ErreurSSL.SSL
        }
    }

    retourne ErreurSSL.SSL
}

// Puisque sur les systèmes UNIX tout est un fichier, les prises sont des fichiers, donc utilisons
// l'interface d'un fichier pour envelopper la logique de lecture et d'écriture pour une connexion SSL
FichierSSL :: struct {
    fichier: Fichier
    ssl : *ssl_st
}

FichierOuErreurSSL :: union {
    f: FichierSSL
    e: ErreurSSL
}

ouvre_fichier_ssl :: fonc (ctx_ssl: *ssl_st, fichier: Fichier) -> FichierOuErreurSSL
{
    m_ssl := SSL_new(ctx_ssl)

    si m_ssl == nul {
        retourne converti_erreur_ssl(m_ssl, 0)
    }

    SSL_set_fd(m_ssl, fichier.desc)

    connexion := SSL_connect(m_ssl)

    si connexion <= 0 {
        retourne converti_erreur_ssl(m_ssl, 0)
    }

    fichier_ssl : FichierSSL
    fichier_ssl.fichier = fichier
    fichier_ssl.ssl = m_ssl
    retourne fichier_ssl
}

écris :: fonc (fichier: *FichierSSL, texte: chaine) -> ErreurSSL
{
    taille := SSL_write(fichier.ssl, texte.pointeur, texte.taille comme z32)

    si taille <= 0 {
        retourne converti_erreur_ssl(fichier.ssl, taille)
    }

    retourne 0 comme ErreurSSL
}

ChaineOuErreurSSL :: union {
    c: chaine
    e: ErreurSSL
}

lis_tout :: fonc (fichier: *FichierSSL) -> ChaineOuErreurSSL
{
    TAILLE_MAX_DONNÉES :: 1024
    tampon : [TAILLE_MAX_DONNÉES]z8
    résultat : chaine

    boucle {
        taille := SSL_read(fichier.ssl, @tampon[0], TAILLE_MAX_DONNÉES)

        si taille > 0 {
            ancienne_taille := résultat.taille
            reloge résultat : chaine(résultat.taille + taille)
            copie_mem_nonsur(src=@tampon[0], dst=@résultat[ancienne_taille], taille=taille comme z64)
        }
        sinon si taille == 0 {
            arrête
        }
        sinon {
            err := converti_erreur_ssl(fichier.ssl, taille)

            si err != ErreurSSL.Aucune && err != ErreurSSL.RetourneZéro {
                retourne converti_erreur_ssl(fichier.ssl, taille)
            }
        }
    }

    retourne résultat
}

ferme :: fonc (fichier: *FichierSSL) -> rien
{
    _ := tente ferme(@fichier.fichier) piège nonatteignable

    si fichier.ssl {
        SSL_free(fichier.ssl)
    }
}
