importe GlibC

libssl :: #bibliothèque "ssl"
libcrypto :: #bibliothèque "crypto"

#dépendance_bibliothèque libssl libcrypto

ssl_method_st :: struct #externe // SSL_METHOD dans l'IPA C
ssl_st :: struct #externe // SSL dans l'IPA C
ssl_ctx_st :: struct #externe // SSL_CTX dans l'IPA C

SSL :: ssl_st
SSL_CTX :: ssl_ctx_st

X509 :: struct #externe
X509_NAME :: struct #externe
X509_REQ :: struct #externe
X509_CRL :: struct #externe
STACK_OF_X509_NAME :: struct #externe // STACK_OF(X509_NAME)
X509_STORE_CTX :: struct #externe
DH :: struct #externe
BIO :: struct #externe
BIO_METHOD :: struct #externe
OPENSSL_INIT_SETTINGS :: struct #externe

OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS : n64 : 0x00000001
OPENSSL_INIT_LOAD_CRYPTO_STRINGS : n64 : 0x00000002
OPENSSL_INIT_ADD_ALL_CIPHERS : n64 : 0x00000004
OPENSSL_INIT_ADD_ALL_DIGESTS : n64 : 0x00000008

OPENSSL_INIT_NO_LOAD_SSL_STRINGS : n64 : 0x00100000
OPENSSL_INIT_LOAD_SSL_STRINGS    : n64 : 0x00200000

OPENSSL_init_ssl :: fonc (opts: n64, settings: *OPENSSL_INIT_SETTINGS) -> z32 #externe libssl
OPENSSL_init_crypto :: fonc (opts: n64, settings: *OPENSSL_INIT_SETTINGS) -> z32 #externe libssl

// Déprécié, devient un macro
SSL_library_init :: fonc () -> rien
{
    _ := OPENSSL_init_ssl(0, nul)
}

// Déprécié, devient un macro
SSL_load_error_strings :: fonc () -> rien
{
    _ := OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, nul)
}

OPENSSL_add_all_algorithms_conf :: fonc () -> rien #externe libssl
OPENSSL_add_all_algorithms_noconf :: fonc () -> rien
{
    _ := OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS | OPENSSL_INIT_ADD_ALL_DIGESTS, nul)
}

TLS_method :: fonc () -> *ssl_method_st #externe libssl
TLS_server_method :: fonc () -> *ssl_method_st #externe libssl
TLS_client_method :: fonc () -> *ssl_method_st #externe libssl

SSL_CTX_new :: fonc (method : *ssl_method_st) -> *SSL_CTX #externe libssl
SSL_new :: fonc (ctx_s : *rien) -> *ssl_st #externe libssl
SSL_set_fd :: fonc (ssl : *ssl_st, prise : z32) -> z32 #externe libssl
SSL_connect :: fonc (ssl : *ssl_st) -> z32 #externe libssl
SSL_free :: fonc (ssl : *ssl_st) -> rien #externe libssl
SSL_get_error :: fonc (ssl : *ssl_st, erreur_ : z32) -> z32 #externe libssl
SSL_write :: fonc (ssl : *ssl_st, ptr : *z8, taille : z32) -> z32 #externe libssl
SSL_read :: fonc (ssl : *ssl_st, tampon : *z8, max : z32) -> z32 #externe libssl
SSL_set_connect_state :: fonc (ssl: *ssl_st) #externe libssl
SSL_set_accept_state :: fonc (ssl: *ssl_st) #externe libssl

SSL_set_bio :: fonc (ssl: *ssl_st, rbio: *BIO, wbio: *BIO) #externe libssl

SSL_MODE_ENABLE_PARTIAL_WRITE :: 0x00000001
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER :: 0x00000002
SSL_MODE_AUTO_RETRY :: 0x00000004
SSL_MODE_NO_AUTO_CHAIN :: 0x00000008
SSL_MODE_RELEASE_BUFFERS :: 0x00000010

SSL_VERIFY_NONE                 :: 0x00
SSL_VERIFY_PEER                 :: 0x01
SSL_VERIFY_FAIL_IF_NO_PEER_CERT :: 0x02
SSL_VERIFY_CLIENT_ONCE          :: 0x04

TLS1_VERSION    : n16 : 0x0301
TLS1_1_VERSION  : n16 : 0x0302
TLS1_2_VERSION  : n16 : 0x0303
TLS_MAX_VERSION : n16 : TLS1_2_VERSION

pem_password_cb :: fonc(*z8, z32, z32, *rien)(z32)

SSL_CTRL_SET_TMP_DH :: 3
SSL_CTRL_MODE :: 33
SSL_CTRL_SET_READ_AHEAD :: 41
SSL_CTRL_SET_MIN_PROTO_VERSION :: 123

SSL_CTX_ctrl :: fonc (ssl: *SSL_CTX, cmd: z32, larg: z64, parg: *rien) -> z64 #externe libssl

// Ceci est un macro en C
SSL_CTX_set_mode :: fonc (ssl: *SSL_CTX, mode: z64) -> z64
{
    retourne SSL_CTX_ctrl(ssl, SSL_CTRL_MODE, mode, nul)
}

// Ceci est un macro en C
SSL_CTX_set_read_ahead :: fonc (ssl: *SSL_CTX, oui_non: z32) -> rien
{
    _ := SSL_CTX_ctrl(ssl, SSL_CTRL_SET_READ_AHEAD, oui_non, nul)
}

// Ceci est un macro en C
SSL_CTX_set_min_proto_version :: fonc (ssl: *SSL_CTX, version: n16) -> z64
{
    retourne SSL_CTX_ctrl(ssl, SSL_CTRL_SET_MIN_PROTO_VERSION, version comme z64, nul)
}

// Ceci est un macro en C
SSL_CTX_set_tmp_dh :: fonc (ssl: *SSL_CTX, dh: *DH) -> z64
{
    retourne SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TMP_DH, 0, dh)
}

SSL_CTX_set_default_passwd_cb_userdata :: fonc (ssl: *SSL_CTX, données: *rien) -> rien #externe libssl
SSL_CTX_get_default_passwd_cb_userdata :: fonc (ssl: *SSL_CTX) -> *rien #externe libssl
SSL_CTX_set_default_passwd_cb :: fonc (ssl: *SSL_CTX, rappel : pem_password_cb) -> rien #externe libssl

SSL_CTX_set_cipher_list :: fonc (ssl: *SSL_CTX, control: ChaineC) -> z32 #externe libssl

BIO_TYPE_SOURCE_SINK :: 0x0400

BIO_TYPE_MEM :: (1 | BIO_TYPE_SOURCE_SINK)

BIO_CTRL_FLUSH :: 11

BIO_FLAGS_READ :: 0x01
BIO_FLAGS_WRITE :: 0x02
BIO_FLAGS_IO_SPECIAL :: 0x04
BIO_FLAGS_RWS :: (BIO_FLAGS_READ|BIO_FLAGS_WRITE|BIO_FLAGS_IO_SPECIAL)
BIO_FLAGS_SHOULD_RETRY :: 0x08

BIO_meth_new :: fonc (type: z32, name: ChaineC) -> *BIO_METHOD #externe libssl
BIO_meth_free :: fonc (biom: *BIO_METHOD) -> rien #externe libssl
BIO_meth_set_create :: fonc (bio: *BIO_METHOD, cb: fonc(*BIO)(z32)) -> rien #externe libssl
BIO_meth_set_write :: fonc (bio: *BIO_METHOD, cb: fonc(*BIO, *octet, z32)(z32)) -> rien #externe libssl
BIO_meth_set_read :: fonc (bio: *BIO_METHOD, cb: fonc(*BIO, *octet, z32)(z32)) -> rien #externe libssl
BIO_meth_set_ctrl :: fonc (bio: *BIO_METHOD, cb: fonc(*BIO, z32, z64, *rien)(z64)) -> rien #externe libssl

BIO_new :: fonc (type: *BIO_METHOD) -> *BIO #externe libssl
BIO_new_mem_buf :: fonc (buf: *rien, len: z32) -> *BIO #externe libssl
BIO_free :: fonc (a: *BIO) -> z32 #externe libssl
BIO_up_ref :: fonc (a: *BIO) -> z32 #externe libssl
BIO_get_data :: fonc (bio: *BIO) -> *rien #externe libssl
BIO_set_data :: fonc (bio: *BIO, data: *rien) #externe libssl
BIO_set_flags :: fonc (bio: *BIO, flags: z32) #externe libssl
BIO_set_init :: fonc (bio: *BIO, init: z32) #externe libssl

// Macro en C.
BIO_set_retry_read :: fonc (bio: *BIO) #enligne
{
    BIO_set_flags(bio, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_READ)
}

// Macro en C.
BIO_set_retry_write :: fonc (bio: *BIO) #enligne
{
    BIO_set_flags(bio, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_WRITE)
}

DH_free :: fonc (dh: *DH) -> rien #externe libssl

PEM_read_bio_DHparams :: fonc (bp: *BIO, x: **DH, cb: pem_password_cb, u: *rien) -> *DH #externe libssl

SSL_CTX_use_certificate_chain_file :: fonc (ctx: *SSL_CTX, file: ChaineC) -> z32 #externe libssl

SSL_load_client_CA_file :: fonc (CApath: ChaineC) -> *STACK_OF_X509_NAME #externe libssl
SSL_CTX_set_client_CA_list :: fonc (contexte_ssl: *SSL_CTX, ca_list: *STACK_OF_X509_NAME) -> rien #externe libssl

SSL_CTX_load_verify_locations :: fonc (ctx: *SSL_CTX, CAfile: ChaineC, CApath: ChaineC) -> z32 #externe libssl

verify_callback_type :: fonc (z32, *X509_STORE_CTX)(z32)
SSL_CTX_set_verify :: fonc (ctx: *SSL_CTX, mode: z32, cb: verify_callback_type) -> rien #externe libssl

// ceci est un macro en C
OpenSSL_add_all_algorithms :: fonc () -> rien
{
//#si OPENSSL_LOAD_CONF {
//    OPENSSL_add_all_algorithms_conf()
//}
//#sinon {
    OPENSSL_add_all_algorithms_noconf()
//}
}

// ceci est un macro en C
OpenSSL_add_ssl_algorithms :: fonc ()
{
    SSL_library_init()
}

SSL_ERROR_NONE :: 0
SSL_ERROR_SSL :: 1
SSL_ERROR_WANT_READ :: 2
SSL_ERROR_WANT_WRITE :: 3
SSL_ERROR_WANT_X509_LOOKUP :: 4
SSL_ERROR_SYSCALL :: 5
SSL_ERROR_ZERO_RETURN :: 6
SSL_ERROR_WANT_CONNECT :: 7
SSL_ERROR_WANT_ACCEPT :: 8

SSL_CTX_free :: fonc (ssl: *SSL_CTX) -> rien #externe libssl
SSL_accept :: fonc (ssl: *ssl_st) -> z32 #externe libssl
SSL_get_fd :: fonc (ssl: *ssl_st) -> z32 #externe libssl

SSL_get_peer_certificate :: fonc (ssl: *ssl_st) -> *X509 #externe libssl
X509_free :: fonc (x509: *X509) -> rien #externe libssl

X509_get_subject_name :: fonc (x: *X509) -> *X509_NAME #externe libssl
X509_set_subject_name :: fonc (x: *X509, nom: *X509_NAME) -> z32 #externe libssl

X509_get_issuer_name :: fonc (x: *X509) -> *X509_NAME #externe libssl
X509_set_issuer_name :: fonc (x: *X509, nom: *X509_NAME) -> z32 #externe libssl

X509_REQ_get_subject_name :: fonc (req: *X509_REQ) -> *X509_NAME #externe libssl
X509_REQ_set_subject_name :: fonc (req: *X509_REQ, nom: *X509_NAME) -> z32 #externe libssl

X509_CRL_get_issuer :: fonc (crl: *X509_CRL) -> *X509_NAME #externe libssl
X509_CRL_set_issuer_name :: fonc (crl: *X509_CRL, nom: *X509_NAME) -> z32 #externe libssl

X509_NAME_oneline :: fonc (a: *X509_NAME, buf: *z8, size: z32) -> ChaineC #externe libssl

SSL_CTX_use_certificate_file :: fonc (ctx: *SSL_CTX, CertFile: ChaineC, x: z32) -> z32 #externe libssl
SSL_CTX_use_PrivateKey_file :: fonc (ctx: *SSL_CTX, KeyFile: ChaineC, x: z32) -> z32 #externe libssl
SSL_CTX_check_private_key :: fonc (ctx: *SSL_CTX) -> z32 #externe libssl

X509_FILETYPE_PEM     :: 1
X509_FILETYPE_ASN1    :: 2
X509_FILETYPE_DEFAULT :: 3

SSL_FILETYPE_PEM  :: X509_FILETYPE_PEM
SSL_FILETYPE_ASN1 :: X509_FILETYPE_ASN1

ERR_print_errors_cb :: fonc (cb : fonc(ChaineC,n64,*rien)(z32), u : *rien) -> rien #externe libssl
ERR_clear_error :: fonc () #externe libssl
