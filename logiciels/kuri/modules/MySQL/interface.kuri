importe Fondation

charge "mysql"

ConfigurationMySQL :: struct {
	hôte : chaine
	utilisateur : chaine
	mot_de_passe : chaine
	base_de_données : chaine
}

ConnexionMySQL :: struct {
	mysql : MYSQL
}

ferme_connexion :: fonc (connexion: *ConnexionMySQL) -> rien
{
	mysql_close(@connexion.mysql)
}

ErreurConnexionMySQL :: erreur {
	MémoireInsuffisante
	MauvaiseConnexion
}

RésultatConnexionMySQL :: union {
	e: ErreurConnexionMySQL
	c: ConnexionMySQL
}

connecte :: fonc (config: ConfigurationMySQL) -> RésultatConnexionMySQL
{
	mysql : MYSQL
	handler := mysql_init(@mysql)

    // handler ne peut être nul que si le paramètre passé à mysql_init est nul, auquel cas une allocation aura lieu
    si handler == nul {
        imprime("impossible d'allouer de la mémoire pour l'initialisation de MySQL !\n")
        retourne ErreurConnexionMySQL.MémoireInsuffisante
    }

/*
	succès := mysql_options(@mysql, mysql_option.MYSQL_READ_DEFAULT_GROUP,"option".pointeur);

    si succès != 0 {
        imprime("erreur lors de la mise en place d'une option !\n")
        retourne 1
    }
*/

	// @note : l'hôte doit être une adresse IP
	c := mysql_real_connect(@mysql, config.hôte.pointeur, config.utilisateur.pointeur, config.mot_de_passe.pointeur, config.base_de_données.pointeur, 0, nul, 0);

	si (c == nul) {
		e := mysql_error(@mysql)
		chn := converti_chaine_c(e)
		imprime("[MYSQL] : %\n", chn);
		retourne ErreurConnexionMySQL.MauvaiseConnexion
	}

	connexion : ConnexionMySQL
	connexion.mysql = mysql

	retourne connexion
}

CurseurRésultat :: struct {
	résultat : *MYSQL_RES

	longueurs : *n64
	ligne : **z8

	nombre_résultat : n64
	nombre_colonne : n32
	index_colonne : n32
}

détruit_curseur :: fonc (curseur : *CurseurRésultat) -> rien
{
	mysql_free_result(curseur.résultat)
}

exécute :: fonc (connexion: *ConnexionMySQL, chaine_requête: chaine) -> CurseurRésultat
{
	succès := mysql_query(@connexion.mysql, chaine_requête.pointeur)

	si succès != 0 {
		e := mysql_error(@connexion.mysql)
		chn := converti_chaine_c(e)
		imprime("Une erreur est survenue lors de la requête : % !\n", chn)
	}

	résultat := mysql_store_result(@connexion.mysql)

	si résultat == nul {
		e := mysql_error(@connexion.mysql)

		si e != nul {
			chn := converti_chaine_c(e)
			imprime("Une erreur est survenue lors de la requête : % !\n", chn)
		}
	}

	nombre_résultat := mysql_num_rows(résultat)
	nombre_champs := mysql_num_fields(résultat);

	curseur : CurseurRésultat
	curseur.résultat = résultat
	curseur.nombre_colonne = nombre_champs
	curseur.nombre_résultat = nombre_résultat

	retourne curseur
}

ligne_suivante :: fonc (curseur: *CurseurRésultat) -> **z8
{
	ligne := mysql_fetch_row(curseur.résultat)

	curseur.index_colonne = 0
	curseur.ligne = ligne
	curseur.longueurs = mysql_fetch_lengths(curseur.résultat)

	retourne ligne
}

colonne_suivante :: fonc (curseur: *CurseurRésultat) -> chaine
{
	chn := construit_chaine(curseur.ligne[curseur.index_colonne], transtype(curseur.longueurs[curseur.index_colonne]: z64))
	curseur.index_colonne += 1
	retourne chn
}
