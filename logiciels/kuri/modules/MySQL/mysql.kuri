#inclus "mysql.h"
#bibliothèque_dynamique "mysqlclient"

#chemin "-L/opt/lib/mysql/lib/"
#chemin "-I/opt/lib/mysql/include/"

// Column types for MySQL
enum_field_types :: énum n32 {
	MYSQL_TYPE_DECIMAL
	MYSQL_TYPE_TINY
	MYSQL_TYPE_SHORT
	MYSQL_TYPE_LONG
	MYSQL_TYPE_FLOAT
	MYSQL_TYPE_DOUBLE
	MYSQL_TYPE_NULL
	MYSQL_TYPE_TIMESTAMP
	MYSQL_TYPE_LONGLONG
	MYSQL_TYPE_INT24
	MYSQL_TYPE_DATE
	MYSQL_TYPE_TIME
	MYSQL_TYPE_DATETIME
	MYSQL_TYPE_YEAR
	// Internal to MySQL. Not used in protocol
	MYSQL_TYPE_NEWDATE
	MYSQL_TYPE_VARCHAR
	MYSQL_TYPE_BIT
	MYSQL_TYPE_TIMESTAMP2
	// Internal to MySQL. Not used in protocol
	MYSQL_TYPE_DATETIME2
	// Internal to MySQL. Not used in protocol
	MYSQL_TYPE_TIME2
	// Used for replication only
	MYSQL_TYPE_TYPED_ARRAY
	MYSQL_TYPE_JSON := 245
	MYSQL_TYPE_NEWDECIMAL := 246
	MYSQL_TYPE_ENUM := 247
	MYSQL_TYPE_SET := 248
	MYSQL_TYPE_TINY_BLOB := 249
	MYSQL_TYPE_MEDIUM_BLOB := 250
	MYSQL_TYPE_LONG_BLOB := 251
	MYSQL_TYPE_BLOB := 252
	MYSQL_TYPE_VAR_STRING := 253
	MYSQL_TYPE_STRING := 254
	MYSQL_TYPE_GEOMETRY := 255
}

// include/my_list.h
LIST :: struct externe {
	prev : *LIST
	next : *LIST
	data : *rien
}

//typedef int (*list_walk_action)(void *, void *);

list_add :: fonc externe (root : *LIST, element : *LIST) -> *LIST
list_delete :: fonc externe (root : *LIST, element : *LIST) -> *LIST
list_cons :: fonc externe (data : *rien, root : *LIST) -> *LIST
list_reverse :: fonc externe (root : *LIST) -> *LIST
list_free :: fonc externe (root : *LIST, free_data : n32) -> rien
list_length :: fonc externe (root : *LIST) -> n32
list_walk :: fonc externe (root : *LIST, action : #nulctx fonc(*rien,*rien)(z32), argument : *n8) -> z32
// A list of all MySQL protocol commands.
enum_server_command :: énum n32 {
	// Currently refused by the server. See ::dispatch_command. Also used internally to mark the start of a session.
	COM_SLEEP
	// See
	COM_QUIT
	// See
	COM_INIT_DB
	// See
	COM_QUERY
	// Deprecated. See
	COM_FIELD_LIST
	// Currently refused by the server. See ::dispatch_command
	COM_CREATE_DB
	// Currently refused by the server. See ::dispatch_command
	COM_DROP_DB
	// Deprecated. See
	COM_REFRESH
	// Deprecated, used to be COM_SHUTDOWN
	COM_DEPRECATED_1
	// See
	COM_STATISTICS
	// Deprecated. See
	COM_PROCESS_INFO
	// Currently refused by the server.
	COM_CONNECT
	// Deprecated. See
	COM_PROCESS_KILL
	// See
	COM_DEBUG
	// See
	COM_PING
	// Currently refused by the server.
	COM_TIME
	// Functionality removed.
	COM_DELAYED_INSERT
	// See
	COM_CHANGE_USER
	// See
	COM_BINLOG_DUMP
	COM_TABLE_DUMP
	COM_CONNECT_OUT
	COM_REGISTER_SLAVE
	// See
	COM_STMT_PREPARE
	// See
	COM_STMT_EXECUTE
	// See
	COM_STMT_SEND_LONG_DATA
	// See
	COM_STMT_CLOSE
	// See
	COM_STMT_RESET
	// See
	COM_SET_OPTION
	// See
	COM_STMT_FETCH
	// Currently refused by the server. See ::dispatch_command. Also used internally to mark the session as a "daemon", i.e. non-client THD. Currently the scheduler and the GTID code does use this state. These threads won't be killed by `KILL`
	COM_DAEMON
	// Currently refused by the server. See ::dispatch_command. Also used internally to mark the session as a "daemon", i.e. non-client THD. Currently the scheduler and the GTID code does use this state. These threads won't be killed by `KILL`
	COM_BINLOG_DUMP_GTID
	// See
	COM_RESET_CONNECTION
	COM_CLONE
	// Not a real command. Refused.
	COM_END
}

// List of valid values for compression_algorithm
enum_compression_algorithm :: énum n32 {
	MYSQL_UNCOMPRESSED := 1
	MYSQL_ZLIB
	MYSQL_ZSTD
	MYSQL_INVALID
}

// Compress context information. relating to zlib compression.
mysql_zlib_compress_context :: struct externe {
	// Compression level to use in zlib compression.
	compression_level : n32
}

ZSTD_CCtx :: struct externe;
ZSTD_DCtx :: struct externe;

// Compress context information relating to zstd compression.
mysql_zstd_compress_context :: struct externe {
	// Pointer to compressor context.
	cctx : *ZSTD_CCtx
	// Pointer to decompressor context.
	dctx : *ZSTD_DCtx
	// Compression level to use in zstd compression.
	compression_level : n32
}

anonyme4 :: union nonsûr {
	// Context information of zlib.
	zlib_ctx : mysql_zlib_compress_context
	// Context information of zstd.
	zstd_ctx : mysql_zstd_compress_context
}

// Compression context information. It encapsulate the context information based on compression method and presents a generic struct.
mysql_compress_context :: struct externe {
	// Compression algorithm name.
	algorithm : enum_compression_algorithm

	u : anonyme4
}

// Get default compression level corresponding to a given compression method.
mysql_default_compression_level :: fonc externe (algorithm : enum_compression_algorithm) -> n32
// Initialize a compress context object to be associated with a NET object.
mysql_compress_context_init :: fonc externe (cmp_ctx : *mysql_compress_context, algorithm : enum_compression_algorithm, compression_level : n32) -> rien
// Deinitialize the compression context allocated.
mysql_compress_context_deinit :: fonc externe (mysql_compress_ctx : *mysql_compress_context) -> rien
// The status flags are a bit-field
SERVER_STATUS_flags_enum :: énum n32 {
	// Is raised when a multi-statement transaction has been started, either explicitly, by means of BEGIN or COMMIT AND CHAIN, or implicitly, by the first transactional statement, when autocommit=off.
	SERVER_STATUS_IN_TRANS := 1
	// Server in auto_commit mode
	SERVER_STATUS_AUTOCOMMIT := 2
	// Multi query - next query exists
	SERVER_MORE_RESULTS_EXISTS := 8
	SERVER_QUERY_NO_GOOD_INDEX_USED := 16
	SERVER_QUERY_NO_INDEX_USED := 32
	// The server was able to fulfill the clients request and opened a read-only non-scrollable cursor for a query. This flag comes in reply to COM_STMT_EXECUTE and COM_STMT_FETCH commands. Used by Binary Protocol Resultset to signal that COM_STMT_FETCH must be used to fetch the row-data.
	SERVER_STATUS_CURSOR_EXISTS := 64
	// This flag is sent when a read-only cursor is exhausted, in reply to COM_STMT_FETCH command.
	SERVER_STATUS_LAST_ROW_SENT := 128
	// A database was dropped
	SERVER_STATUS_DB_DROPPED := 256
	SERVER_STATUS_NO_BACKSLASH_ESCAPES := 512
	// Sent to the client if after a prepared statement reprepare we discovered that the new statement returns a different number of result set columns.
	SERVER_STATUS_METADATA_CHANGED := 1024
	// Sent to the client if after a prepared statement reprepare we discovered that the new statement returns a different number of result set columns.
	SERVER_QUERY_WAS_SLOW := 2048
	// To mark ResultSet containing output parameter values.
	SERVER_PS_OUT_PARAMS := 4096
	// Set at the same time as SERVER_STATUS_IN_TRANS if the started multi-statement transaction is a read-only transaction. Cleared when the transaction commits or aborts. Since this flag is sent to clients in OK and EOF packets, the flag indicates the transaction status at the end of command execution.
	SERVER_STATUS_IN_TRANS_READONLY := 8192
	// This status flag, when on, implies that one of the state information has changed on the server because of the execution of the last statement.
	SERVER_SESSION_STATE_CHANGED := (1 << 14)
}

Vio :: struct externe;

NET :: struct externe {
	vio : *Vio
	buff : *n8
	buff_end : *n8
	write_pos : *n8
	read_pos : *n8
	// For Perl DBI/dbd
	fd : z32
	// Set if we are doing several queries in one command ( as in LOAD TABLE ... FROM MASTER ), and do not want to confuse the client with OK at the wrong time
	remain_in_buf : n64
	// Set if we are doing several queries in one command ( as in LOAD TABLE ... FROM MASTER ), and do not want to confuse the client with OK at the wrong time
	length : n64
	// Set if we are doing several queries in one command ( as in LOAD TABLE ... FROM MASTER ), and do not want to confuse the client with OK at the wrong time
	buf_length : n64
	// Set if we are doing several queries in one command ( as in LOAD TABLE ... FROM MASTER ), and do not want to confuse the client with OK at the wrong time
	where_b : n64
	max_packet : n64
	max_packet_size : n64
	pkt_nr : n32
	compress_pkt_nr : n32
	write_timeout : n32
	read_timeout : n32
	retry_count : n32
	fcntl : z32
	return_status : *n32
	reading_or_writing : n8
	save_char : n8
	compress : bool
	last_errno : n32
	error : n8
	// Client library error message buffer. Actually belongs to struct externe MYSQL.
	last_error : [512]z8
	// Client library sqlstate buffer. Set along with the error message.
	sqlstate : [6]z8
	// Extension pointer, for the caller private use. Any program linking with the networking library can use this pointer, which is handy when private connection specific data needs to be maintained. The mysqld server process uses this pointer internally, to maintain the server internal instrumentation for the connection.
	extension : *rien
}

// We want levels to be in growing order of hardness (because we use number comparisons).
mysql_enum_shutdown_level :: énum n32 {
	SHUTDOWN_DEFAULT := 0
	// Wait for existing connections to finish
	SHUTDOWN_WAIT_CONNECTIONS := transtype((1 << 0) : n8)
	// Wait for existing transactons to finish
	SHUTDOWN_WAIT_TRANSACTIONS := transtype((1 << 1) : n8)
	// Wait for existing updates to finish (=> no partial MyISAM update)
	SHUTDOWN_WAIT_UPDATES := transtype((1 << 3) : n8)
	// Flush InnoDB buffers and other storage engines' buffers
	SHUTDOWN_WAIT_ALL_BUFFERS := (transtype((1 << 3) : n8) << transtype(1: n32))
	// Don't flush InnoDB buffers, flush other storage engines' buffers
	SHUTDOWN_WAIT_CRITICAL_BUFFERS := (transtype((1 << 3) : n8) << transtype(1: n32)) + transtype(1: n32)
	// Query level of the KILL command
	KILL_QUERY := 254
	// Connection level of the KILL command
	KILL_CONNECTION := 255
}

// @}
enum_resultset_metadata :: énum n32 {
	// No metadata will be sent.
	RESULTSET_METADATA_NONE := 0
	// The server will send all metadata.
	RESULTSET_METADATA_FULL := 1
}

enum_cursor_type :: énum n32 {
	CURSOR_TYPE_NO_CURSOR := 0
	CURSOR_TYPE_READ_ONLY := 1
	CURSOR_TYPE_FOR_UPDATE := 2
	CURSOR_TYPE_SCROLLABLE := 4
}

// options for ::mysql_options()
enum_mysql_set_option :: énum n32 {
	MYSQL_OPTION_MULTI_STATEMENTS_ON
	MYSQL_OPTION_MULTI_STATEMENTS_OFF
}

// Type of state change information that the server can include in the Ok packet.
enum_session_state_type :: énum n32 {
	// Session system variables
	SESSION_TRACK_SYSTEM_VARIABLES
	// Current schema
	SESSION_TRACK_SCHEMA
	// track session state changes
	SESSION_TRACK_STATE_CHANGE
	// See also: session_track_gtids
	SESSION_TRACK_GTIDS
	// Transaction chistics
	SESSION_TRACK_TRANSACTION_CHARACTERISTICS
	// Transaction state
	SESSION_TRACK_TRANSACTION_STATE
}

rand_struct :: struct externe {
	seed1 : n64
	seed2 : n64
	max_value : n64
	max_value_dbl : r64
}

// Type of the user defined function return slot and arguments
Item_result :: énum z32 {
	INVALID_RESULT := -1
	// not valid for UDFs
	STRING_RESULT := 0
	// char *
	REAL_RESULT
	// double
	INT_RESULT
	// long long
	ROW_RESULT
	// not valid for UDFs
	DECIMAL_RESULT
}

UDF_ARGS :: struct externe {
	// Number of arguments
	arg_count : n32
	// Pointer to item_results
	arg_type : *Item_result
	// Pointer to argument
	args : **z8
	// Length of string arguments
	lengths : *n64
	// Set to 1 for all maybe_null args
	maybe_null : *z8
	// Pointer to attribute name
	attributes : **z8
	// Length of attribute arguments
	attribute_lengths : *n64
	extension : *rien
}

// Information about the result of a user defined function
UDF_INIT :: struct externe {
	maybe_null : bool
	// 1 if function can return NULL
	decimals : n32
	// for real functions
	max_length : n64
	// For string functions
	ptr : *z8
	// free pointer for function data
	const_item : bool
	// 1 if function always returns the same value
	extension : *rien
}

Item_udftype :: énum n32 {
	UDFTYPE_FUNCTION := 1
	UDFTYPE_AGGREGATE
}

va_list :: struct externe;
__va_list_tag :: struct externe;

st_mysql_client_plugin :: struct externe {
	type : z32
	interface_version : n32
	name : *z8
	author : *z8
	desc : *z8
	version : [3]n32
	license : *z8
	mysql_api : *rien
	init : #nulctx fonc(*z8,n64,z32,*__va_list_tag)(z32)
	deinit : #nulctx fonc(rien)(z32)
	options : #nulctx fonc(*z8,*rien)(z32)
}

// À FAIRE: structures dans structures...
anonyme5 :: énum n32 {
	MYSQL_VIO_INVALID
	MYSQL_VIO_TCP
	MYSQL_VIO_SOCKET
	MYSQL_VIO_PIPE
	MYSQL_VIO_MEMORY
}

MYSQL_PLUGIN_VIO_INFO :: struct externe {

	protocol : anonyme5
	// it's set, if the protocol is SOCKET or TCP
	socket : z32
}

// state of an asynchronous operation
net_async_status :: énum n32 {
	NET_ASYNC_COMPLETE := 0
	NET_ASYNC_NOT_READY
	NET_ASYNC_ERROR
	NET_ASYNC_COMPLETE_NO_MORE_RESULTS
}

// Provides plugin access to communication channel
MYSQL_PLUGIN_VIO :: struct externe {
	// Plugin provides a pointer reference and this function sets it to the contents of any incoming packet. Returns the packet length, or -1 if the plugin should terminate.
	read_packet : #nulctx fonc(*MYSQL_PLUGIN_VIO,**n8)(z32)
	// Plugin provides a buffer with data and the length and this function sends it as a packet. Returns 0 on success, 1 on failure.
	write_packet : #nulctx fonc(*MYSQL_PLUGIN_VIO,*n8,z32)(z32)
	// Fills in a MYSQL_PLUGIN_VIO_INFO structure, providing the information about the connection.
	info : #nulctx fonc(*MYSQL_PLUGIN_VIO,*MYSQL_PLUGIN_VIO_INFO)(rien)
	// Non blocking version of read_packet. This function points buf to starting position of incoming packet. When this function returns NET_ASYNC_NOT_READY plugin should call this function again until all incoming packets are read. If return code is NET_ASYNC_COMPLETE, plugin can do further processing of read packets.
	read_packet_nonblocking : #nulctx fonc(*MYSQL_PLUGIN_VIO,**n8,*z32)(net_async_status)
	// Non blocking version of write_packet. Sends data available in pkt of length pkt_len to server in asynchrnous way.
	write_packet_nonblocking : #nulctx fonc(*MYSQL_PLUGIN_VIO,*n8,z32,*z32)(net_async_status)
}

// Do not not pull in the server header "my_inttypes.h" from client code. IWYU pragma: no_include "my_inttypes.h"
enum_mysql_timestamp_type :: énum z32 {
	MYSQL_TIMESTAMP_NONE := -2
	MYSQL_TIMESTAMP_ERROR := -1
	// Stores year, month and day components.
	MYSQL_TIMESTAMP_DATE := 0
	// Stores all date and time components. Value is in UTC for `TIMESTAMP` type. Value is in local time zone for `DATETIME` type.
	MYSQL_TIMESTAMP_DATETIME := 1
	// Stores hour, minute, second and microsecond.
	MYSQL_TIMESTAMP_TIME := 2
	// A temporary type for `DATETIME` or `TIMESTAMP` types equipped with time zone information. After the time zone information is reconciled, the type is converted to MYSQL_TIMESTAMP_DATETIME.
	MYSQL_TIMESTAMP_DATETIME_TZ := 3
}

// Structure which is used to represent datetime values inside MySQL.
MYSQL_TIME :: struct externe {
	year : n32
	month : n32
	day : n32
	hour : n32
	minute : n32
	second : n32
	// microseconds
	second_part : n64
	neg : bool
	time_type : enum_mysql_timestamp_type
	// The time zone displacement, specified in seconds.
	time_zone_displacement : z32
}
// Error messages
externe client_errors : []*z8
// Visual Studio requires '__inline' for C code
#enligne ER_CLIENT :: fonc (client_errno : z32) -> *z8
{
	si client_errno >= 2000 && client_errno <= 2066 {
		retourne client_errors[client_errno - 2000]
	}

	retourne client_errors[2000]
}

externe mysql_port : n32
externe mysql_unix_port : *z8
MYSQL_FIELD :: struct externe {
	// Name of column
	name : *z8
	// Original column name, if an alias
	org_name : *z8
	// Table of column if column was a field
	table : *z8
	// Org table name, if table was an alias
	org_table : *z8
	// Database for table
	db : *z8
	// Catalog for table
	catalog : *z8
	// Default value (set by mysql_list_fields)
	def : *z8
	// Width of column (create length)
	length : n64
	// Max width for selected set
	max_length : n64
	name_length : n32
	org_name_length : n32
	table_length : n32
	org_table_length : n32
	db_length : n32
	catalog_length : n32
	def_length : n32
	// Div flags
	flags : n32
	// Number of decimals in field
	decimals : n32
	// Character set
	charsetnr : n32
	// Type of field. See mysql_com.h for types
	type : enum_field_types
	extension : *rien
}

MYSQL_ROWS :: struct externe {
	// list of rows
	next : *MYSQL_ROWS
	data : **z8
	length : n64
}

MEM_ROOT :: struct externe;

MYSQL_DATA :: struct externe {
	data : *MYSQL_ROWS
	alloc : *MEM_ROOT
	rows : n64
	fields : n32
}

mysql_option :: énum n32 {
	MYSQL_OPT_CONNECT_TIMEOUT
	MYSQL_OPT_COMPRESS
	MYSQL_OPT_NAMED_PIPE
	MYSQL_INIT_COMMAND
	MYSQL_READ_DEFAULT_FILE
	MYSQL_READ_DEFAULT_GROUP
	MYSQL_SET_CHARSET_DIR
	MYSQL_SET_CHARSET_NAME
	MYSQL_OPT_LOCAL_INFILE
	MYSQL_OPT_PROTOCOL
	MYSQL_SHARED_MEMORY_BASE_NAME
	MYSQL_OPT_READ_TIMEOUT
	MYSQL_OPT_WRITE_TIMEOUT
	MYSQL_OPT_USE_RESULT
	MYSQL_REPORT_DATA_TRUNCATION
	MYSQL_OPT_RECONNECT
	MYSQL_PLUGIN_DIR
	MYSQL_DEFAULT_AUTH
	MYSQL_OPT_BIND
	MYSQL_OPT_SSL_KEY
	MYSQL_OPT_SSL_CERT
	MYSQL_OPT_SSL_CA
	MYSQL_OPT_SSL_CAPATH
	MYSQL_OPT_SSL_CIPHER
	MYSQL_OPT_SSL_CRL
	MYSQL_OPT_SSL_CRLPATH
	MYSQL_OPT_CONNECT_ATTR_RESET
	MYSQL_OPT_CONNECT_ATTR_ADD
	MYSQL_OPT_CONNECT_ATTR_DELETE
	MYSQL_SERVER_PUBLIC_KEY
	MYSQL_ENABLE_CLEARTEXT_PLUGIN
	MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS
	MYSQL_OPT_MAX_ALLOWED_PACKET
	MYSQL_OPT_NET_BUFFER_LENGTH
	MYSQL_OPT_TLS_VERSION
	MYSQL_OPT_SSL_MODE
	MYSQL_OPT_GET_SERVER_PUBLIC_KEY
	MYSQL_OPT_RETRY_COUNT
	MYSQL_OPT_OPTIONAL_RESULTSET_METADATA
	MYSQL_OPT_SSL_FIPS_MODE
	MYSQL_OPT_TLS_CIPHERSUITES
	MYSQL_OPT_COMPRESSION_ALGORITHMS
	MYSQL_OPT_ZSTD_COMPRESSION_LEVEL
}

Init_commands_array :: struct externe;
st_mysql_options_extention :: struct externe;

st_mysql_options :: struct externe {
	connect_timeout : n32
	read_timeout : n32
	write_timeout : n32
	port : n32
	protocol : n32
	client_flag : n64
	host : *z8
	user : *z8
	password : *z8
	unix_socket : *z8
	db : *z8
	init_commands : *Init_commands_array
	my_cnf_file : *z8
	my_cnf_group : *z8
	charset_dir : *z8
	charset_name : *z8
	// PEM key file
	ssl_key : *z8
	// PEM cert file
	ssl_cert : *z8
	// PEM CA file
	ssl_ca : *z8
	// PEM directory of CA-s?
	ssl_capath : *z8
	// cipher to use
	ssl_cipher : *z8
	shared_memory_base_name : *z8
	max_allowed_packet : n64
	compress : bool
	named_pipe : bool
	// The local address to bind when connecting to remote server.
	bind_address : *z8
	// 0 - never report, 1 - always report (default)
	report_data_truncation : bool
	// function pointers for local infile support
	local_infile_init : #nulctx fonc(**rien,*z8,*rien)(z32)
	local_infile_read : #nulctx fonc(*rien,*z8,n32)(z32)
	local_infile_end : #nulctx fonc(*rien)(rien)
	local_infile_error : #nulctx fonc(*rien,*z8,n32)(z32)
	local_infile_userdata : *rien
	extension : *st_mysql_options_extention
}

mysql_status :: énum n32 {
	MYSQL_STATUS_READY
	MYSQL_STATUS_GET_RESULT
	MYSQL_STATUS_USE_RESULT
	MYSQL_STATUS_STATEMENT_GET_RESULT
}

mysql_protocol_type :: énum n32 {
	MYSQL_PROTOCOL_DEFAULT
	MYSQL_PROTOCOL_TCP
	MYSQL_PROTOCOL_SOCKET
	MYSQL_PROTOCOL_PIPE
	MYSQL_PROTOCOL_MEMORY
}

mysql_ssl_mode :: énum n32 {
	SSL_MODE_DISABLED := 1
	SSL_MODE_PREFERRED
	SSL_MODE_REQUIRED
	SSL_MODE_VERIFY_CA
	SSL_MODE_VERIFY_IDENTITY
}

mysql_ssl_fips_mode :: énum n32 {
	SSL_FIPS_MODE_OFF := 0
	SSL_FIPS_MODE_ON := 1
	SSL_FIPS_MODE_STRICT
}

MY_CHARSET_INFO :: struct externe {
	// character set number
	number : n32
	// character set state
	state : n32
	// collation name
	csname : *z8
	// character set name
	name : *z8
	// comment
	comment : *z8
	// character set directory
	dir : *z8
	// min. length for multibyte strings
	mbminlen : n32
	// max. length for multibyte strings
	mbmaxlen : n32
}

CHARSET_INFO :: struct externe;
MYSQL_METHODS :: struct externe;

MYSQL :: struct externe {
	// Communication parameters
	net : NET
	// ConnectorFd for SSL
	connector_fd : *n8
	host : *z8
	user : *z8
	passwd : *z8
	unix_socket : *z8
	server_version : *z8
	host_info : *z8
	info : *z8
	db : *z8
	charset : *CHARSET_INFO
	fields : *MYSQL_FIELD
	field_alloc : *MEM_ROOT
	affected_rows : n64
	// id if insert on table with NEXTNR
	insert_id : n64
	// Not used
	extra_info : n64
	// Id for connection in server
	thread_id : n64
	packet_length : n64
	port : n32
	client_flag : n64
	server_capabilities : n64
	protocol_version : n32
	field_count : n32
	server_status : n32
	server_language : n32
	warning_count : n32
	options : st_mysql_options
	status : mysql_status
	resultset_metadata : enum_resultset_metadata
	// If free in mysql_close
	free_me : bool
	// set to 1 if automatic reconnect
	reconnect : bool
	// session-wide random string
	scramble : [21]z8
	// list of all statements
	stmts : *LIST
	methods : *MYSQL_METHODS
	thd : *rien
	// Points to boolean flag in MYSQL_RES or MYSQL_STMT. We set this flag from mysql_stmt_close if close had to cancel result set of this object.
	unbuffered_fetch_owner : *bool
	extension : *rien
}

MYSQL_RES :: struct externe {
	row_count : n64
	fields : *MYSQL_FIELD
	data : *MYSQL_DATA
	data_cursor : *MYSQL_ROWS
	// column lengths of current row
	lengths : *n64
	// for unbuffered reads
	handle : *MYSQL
	methods : *MYSQL_METHODS
	// If unbuffered read
	row : **z8
	// buffer to current row
	current_row : **z8
	field_alloc : *MEM_ROOT
	field_count : n32
	current_field : n32
	// Used by mysql_fetch_row
	eof : bool
	// mysql_stmt_close() had to cancel this result
	unbuffered_fetch_cancelled : bool
	metadata : enum_resultset_metadata
	extension : *rien
}

// Struct for information about a replication stream.
MYSQL_RPL :: struct externe {
	file_name_length : n64
	// Length of the 'file_name' or 0
	file_name : *z8
	// Filename of the binary log to read
	start_position : n64
	// Position in the binary log to
	server_id : n32
	// Server ID to use when identifying
	flags : n32
	// Size of gtid set data
	gtid_set_encoded_size : n64
	// Callback function which is called
	fix_gtid_set : #nulctx fonc(*MYSQL_RPL,*n8)(rien)
	gtid_set_arg : *rien
	// GTID set data or an argument for
	size : n64
	// Size of the packet returned by
	buffer : *n8
}
// statement state
enum_mysql_stmt_state :: énum n32 {
	MYSQL_STMT_INIT_DONE := 1
	MYSQL_STMT_PREPARE_DONE
	MYSQL_STMT_EXECUTE_DONE
	MYSQL_STMT_FETCH_DONE
}

// This structure is used to define bind information, and internally by the client library. Public members with their descriptions are listed below (conventionally `On input' refers to the binds given to mysql_stmt_bind_param, `On output' refers to the binds given to mysql_stmt_bind_result):
MYSQL_BIND :: struct externe {
	// output length pointer
	length : *n64
	// Pointer to null indicator
	is_null : *bool
	// buffer to get/put data
	buffer : *rien
	// set this if you want to track data truncations happened during fetch
	error : *bool
	// for the current data position
	row_ptr : *n8
	store_param_func : #nulctx fonc(*NET,*MYSQL_BIND)(rien)
	fetch_result : #nulctx fonc(*MYSQL_BIND,*MYSQL_FIELD,**n8)(rien)
	skip_result : #nulctx fonc(*MYSQL_BIND,*MYSQL_FIELD,**n8)(rien)
	// output buffer length, must be set when fetching str/binary
	buffer_length : n64
	// offset position for char/binary fetch
	offset : n64
	// Used if length is 0
	length_value : n64
	// For null count and error messages
	param_number : n32
	// Internal length for packed data
	pack_length : n32
	// buffer type
	buffer_type : enum_field_types
	// used if error is 0
	error_value : bool
	// set if integer type is unsigned
	is_unsigned : bool
	// If used with mysql_send_long_data
	long_data_used : bool
	// Used if is_null is 0
	is_null_value : bool
	extension : *rien
}

MYSQL_STMT_EXT :: struct externe;

// statement handler
MYSQL_STMT :: struct externe {
	// root allocations
	mem_root : *MEM_ROOT
	// list to keep track of all stmts
	list : LIST
	// connection handle
	mysql : *MYSQL
	// input parameters
	params : *MYSQL_BIND
	// output parameters
	bind : *MYSQL_BIND
	// result set metadata
	fields : *MYSQL_FIELD
	// cached result set
	result : MYSQL_DATA
	// current row in cached result
	data_cursor : *MYSQL_ROWS
	// mysql_stmt_fetch() calls this function to fetch one row (it's different for buffered, unbuffered and cursor fetch).
	read_row_func : #nulctx fonc(*MYSQL_STMT,**n8)(z32)
	// copy of mysql->affected_rows after statement execution
	affected_rows : n64
	// copy of mysql->insert_id
	insert_id : n64
	// Id for prepared statement
	stmt_id : n64
	// i.e. type of cursor to open
	flags : n64
	// number of rows per one COM_FETCH
	prefetch_rows : n64
	// Copied from mysql->server_status after execute/fetch to know server-side cursor status for this statement.
	server_status : n32
	// error code
	last_errno : n32
	// input parameter count
	param_count : n32
	// number of columns in result set
	field_count : n32
	// statement state
	state : enum_mysql_stmt_state
	// error message
	last_error : [512]z8
	sqlstate : [6]z8
	// Types of input parameters should be sent to server
	send_types_to_server : bool
	// input buffers were supplied
	bind_param_done : bool
	// output buffers were supplied
	bind_result_done : n8
	// mysql_stmt_close() had to cancel this result
	unbuffered_fetch_cancelled : bool
	// Is set to true if we need to calculate field->max_length for metadata fields when doing mysql_stmt_store_result.
	update_max_length : bool
	extension : *MYSQL_STMT_EXT
}

auth_plugin_t :: struct externe {
	type : z32
	interface_version : n32
	name : *z8
	author : *z8
	desc : *z8
	version : [3]n32
	license : *z8
	mysql_api : *rien
	init : #nulctx fonc(*z8,n64,z32,*__va_list_tag)(z32)
	deinit : #nulctx fonc(rien)(z32)
	options : #nulctx fonc(*z8,*rien)(z32)
	authenticate_user : #nulctx fonc(*MYSQL_PLUGIN_VIO,*MYSQL)(z32)
	authenticate_user_nonblocking : #nulctx fonc(*MYSQL_PLUGIN_VIO,*MYSQL,*z32)(net_async_status)
}

enum_stmt_attr_type :: énum n32 {
	// When doing mysql_stmt_store_result calculate max_length attribute of statement metadata. This is to be consistent with the old API, where this was done automatically. In the new API we do that only by request because it slows down mysql_stmt_store_result sufficiently.
	STMT_ATTR_UPDATE_MAX_LENGTH
	// unsigned long with combination of cursor flags (read only, for update, etc)
	STMT_ATTR_CURSOR_TYPE
	// Amount of rows to retrieve from server per one fetch if using cursors. Accepts unsigned long attribute in the range 1 - ulong_max
	STMT_ATTR_PREFETCH_ROWS
}

my_net_init :: fonc externe (net : *NET, vio : *Vio) -> bool
my_net_local_init :: fonc externe (net : *NET) -> rien
net_end :: fonc externe (net : *NET) -> rien
net_clear :: fonc externe (net : *NET, check_buffer : bool) -> rien
net_claim_memory_ownership :: fonc externe (net : *NET) -> rien
net_realloc :: fonc externe (net : *NET, length : n64) -> bool
net_flush :: fonc externe (net : *NET) -> bool
my_net_write :: fonc externe (net : *NET, packet : *n8, len : n64) -> bool
net_write_command :: fonc externe (net : *NET, command : n8, header : *n8, head_len : n64, packet : *n8, len : n64) -> bool
net_write_packet :: fonc externe (net : *NET, packet : *n8, length : n64) -> bool
my_net_read :: fonc externe (net : *NET) -> n64
my_net_set_write_timeout :: fonc externe (net : *NET, timeout : n32) -> rien
my_net_set_read_timeout :: fonc externe (net : *NET, timeout : n32) -> rien
my_net_set_retry_count :: fonc externe (net : *NET, retry_count : n32) -> rien

// These functions are used for authentication by client and server and implemented in sql/password.c
randominit :: fonc externe (rs : *rand_struct, seed1 : n64, seed2 : n64) -> rien
my_rnd :: fonc externe (rs : *rand_struct) -> r64
create_random_string :: fonc externe (to : *z8, length : n32, rand_st : *rand_struct) -> rien
hash_password :: fonc externe (to : *n64, password : *z8, password_len : n32) -> rien
make_scrambled_password_323 :: fonc externe (to : *z8, password : *z8) -> rien
scramble_323 :: fonc externe (to : *z8, message : *z8, password : *z8) -> rien
check_scramble_323 :: fonc externe (reply : *n8, message : *z8, salt : *n64) -> bool
get_salt_from_password_323 :: fonc externe (res : *n64, password : *z8) -> rien
make_password_from_salt_323 :: fonc externe (to : *z8, salt : *n64) -> rien
make_scrambled_password :: fonc externe (to : *z8, password : *z8) -> rien
scramble :: fonc externe (to : *z8, message : *z8, password : *z8) -> rien
check_scramble :: fonc externe (reply : *n8, message : *z8, hash_stage2 : *n8) -> bool
get_salt_from_password :: fonc externe (res : *n8, password : *z8) -> rien
make_password_from_salt :: fonc externe (to : *z8, hash_stage2 : *n8) -> rien
octet2hex :: fonc externe (to : *z8, str : *z8, len : n32) -> *z8
// end of password.c
generate_sha256_scramble :: fonc externe (dst : *n8, dst_size : n64, src : *z8, src_size : n64, rnd : *z8, rnd_size : n64) -> bool
get_tty_password :: fonc externe (opt_message : *z8) -> *z8
mysql_errno_to_sqlstate :: fonc externe (mysql_errno : n32) -> *z8
my_thread_init :: fonc externe () -> bool
my_thread_end :: fonc externe () -> rien
net_field_length :: fonc externe (packet : **n8) -> n64
net_field_length_checked :: fonc externe (packet : **n8, max_length : n64) -> n64
net_field_length_ll :: fonc externe (packet : **n8) -> n64
net_store_length :: fonc externe (pkg : *n8, length : n64) -> *n8
net_length_size :: fonc externe (num : n64) -> n32
net_field_length_size :: fonc externe (pos : *n8) -> n32

// loads a plugin and initializes it
mysql_load_plugin :: fonc externe (mysql : *MYSQL, name : *z8, type : z32, argc : z32) -> *st_mysql_client_plugin
// loads a plugin and initializes it, taking va_list as an argument
mysql_load_plugin_v :: fonc externe (mysql : *MYSQL, name : *z8, type : z32, argc : z32, args : va_list) -> *st_mysql_client_plugin
// finds an already loaded plugin by name, or loads it, if necessary
mysql_client_find_plugin :: fonc externe (mysql : *MYSQL, name : *z8, type : z32) -> *st_mysql_client_plugin
// adds a plugin structure to the list of loaded plugins
mysql_client_register_plugin :: fonc externe (mysql : *MYSQL, plugin : *st_mysql_client_plugin) -> *st_mysql_client_plugin
// set plugin options
mysql_plugin_options :: fonc externe (plugin : *st_mysql_client_plugin, option : *z8, value : *rien) -> z32

// include/errmsg.h
init_client_errs :: fonc externe () -> rien
finish_client_errs :: fonc externe () -> rien

// Set up and bring down the server; to ensure that applications will work when linked against either the standard client library or the embedded server library, these functions should be called.
mysql_server_init :: fonc externe (argc : z32, argv : **z8, groups : **z8) -> z32
mysql_server_end :: fonc externe () -> rien
// Set up and bring down a thread; these function should be called for each thread in an application which opens at least one MySQL connection. All uses of the connection(s) should be between these function calls.
mysql_thread_init :: fonc externe () -> bool
mysql_thread_end :: fonc externe () -> rien
// Functions to get information from the MYSQL and MYSQL_RES structures Should definitely be used if one uses shared libraries.
mysql_num_rows :: fonc externe (res : *MYSQL_RES) -> n64
mysql_num_fields :: fonc externe (res : *MYSQL_RES) -> n32
mysql_eof :: fonc externe (res : *MYSQL_RES) -> bool
mysql_fetch_field_direct :: fonc externe (res : *MYSQL_RES, fieldnr : n32) -> *MYSQL_FIELD
mysql_fetch_fields :: fonc externe (res : *MYSQL_RES) -> *MYSQL_FIELD
mysql_row_tell :: fonc externe (res : *MYSQL_RES) -> *MYSQL_ROWS
mysql_field_tell :: fonc externe (res : *MYSQL_RES) -> n32
mysql_result_metadata :: fonc externe (result : *MYSQL_RES) -> enum_resultset_metadata
mysql_field_count :: fonc externe (mysql : *MYSQL) -> n32
mysql_affected_rows :: fonc externe (mysql : *MYSQL) -> n64
mysql_insert_id :: fonc externe (mysql : *MYSQL) -> n64
mysql_errno :: fonc externe (mysql : *MYSQL) -> n32
mysql_error :: fonc externe (mysql : *MYSQL) -> *z8
mysql_sqlstate :: fonc externe (mysql : *MYSQL) -> *z8
mysql_warning_count :: fonc externe (mysql : *MYSQL) -> n32
mysql_info :: fonc externe (mysql : *MYSQL) -> *z8
mysql_thread_id :: fonc externe (mysql : *MYSQL) -> n64
mysql_MY_CHARSET_INFO_name :: fonc externe (mysql : *MYSQL) -> *z8
mysql_set_MY_CHARSET_INFO :: fonc externe (mysql : *MYSQL, csname : *z8) -> z32
mysql_init :: fonc externe (mysql : *MYSQL) -> *MYSQL
mysql_ssl_set :: fonc externe (mysql : *MYSQL, key : *z8, cert : *z8, ca : *z8, capath : *z8, cipher : *z8) -> bool
mysql_get_ssl_cipher :: fonc externe (mysql : *MYSQL) -> *z8
mysql_change_user :: fonc externe (mysql : *MYSQL, user : *z8, passwd : *z8, db : *z8) -> bool
mysql_real_connect :: fonc externe (mysql : *MYSQL, host : *z8, user : *z8, passwd : *z8, db : *z8, port : n32, unix_socket : *z8, clientflag : n64) -> *MYSQL
mysql_select_db :: fonc externe (mysql : *MYSQL, db : *z8) -> z32
mysql_query :: fonc externe (mysql : *MYSQL, q : *z8) -> z32
mysql_send_query :: fonc externe (mysql : *MYSQL, q : *z8, length : n64) -> z32
mysql_real_query :: fonc externe (mysql : *MYSQL, q : *z8, length : n64) -> z32
mysql_store_result :: fonc externe (mysql : *MYSQL) -> *MYSQL_RES
mysql_use_result :: fonc externe (mysql : *MYSQL) -> *MYSQL_RES
mysql_real_connect_nonblocking :: fonc externe (mysql : *MYSQL, host : *z8, user : *z8, passwd : *z8, db : *z8, port : n32, unix_socket : *z8, clientflag : n64) -> net_async_status
mysql_send_query_nonblocking :: fonc externe (mysql : *MYSQL, query : *z8, length : n64) -> net_async_status
mysql_real_query_nonblocking :: fonc externe (mysql : *MYSQL, query : *z8, length : n64) -> net_async_status
mysql_store_result_nonblocking :: fonc externe (mysql : *MYSQL, result : **MYSQL_RES) -> net_async_status
mysql_next_result_nonblocking :: fonc externe (mysql : *MYSQL) -> net_async_status
mysql_select_db_nonblocking :: fonc externe (mysql : *MYSQL, db : *z8, error : *bool) -> net_async_status
mysql_get_MY_CHARSET_INFO_info :: fonc externe (mysql : *MYSQL, charset : *MY_CHARSET_INFO) -> rien
mysql_session_track_get_first :: fonc externe (mysql : *MYSQL, type : enum_session_state_type, data : **z8, length : *n64) -> z32
mysql_session_track_get_next :: fonc externe (mysql : *MYSQL, type : enum_session_state_type, data : **z8, length : *n64) -> z32
mysql_set_local_infile_handler :: fonc externe (mysql : *MYSQL, local_infile_init : #nulctx fonc(**rien,*z8,*rien)(z32), local_infile_read : #nulctx fonc(*rien,*z8,n32)(z32), local_infile_end : #nulctx fonc(*rien)(rien), local_infile_error : #nulctx fonc(*rien,*z8,n32)(z32), xx : *rien) -> rien
mysql_set_local_infile_default :: fonc externe (mysql : *MYSQL) -> rien
mysql_shutdown :: fonc externe (mysql : *MYSQL, shutdown_level : mysql_enum_shutdown_level) -> z32
mysql_dump_debug_info :: fonc externe (mysql : *MYSQL) -> z32
mysql_refresh :: fonc externe (mysql : *MYSQL, refresh_options : n32) -> z32
mysql_kill :: fonc externe (mysql : *MYSQL, pid : n64) -> z32
mysql_set_server_option :: fonc externe (mysql : *MYSQL, option : enum_mysql_set_option) -> z32
mysql_ping :: fonc externe (mysql : *MYSQL) -> z32
mysql_stat :: fonc externe (mysql : *MYSQL) -> *z8
mysql_get_server_info :: fonc externe (mysql : *MYSQL) -> *z8
mysql_get_client_info :: fonc externe () -> *z8
mysql_get_client_version :: fonc externe () -> n64
mysql_get_host_info :: fonc externe (mysql : *MYSQL) -> *z8
mysql_get_server_version :: fonc externe (mysql : *MYSQL) -> n64
mysql_get_proto_info :: fonc externe (mysql : *MYSQL) -> n32
mysql_list_dbs :: fonc externe (mysql : *MYSQL, wild : *z8) -> *MYSQL_RES
mysql_list_tables :: fonc externe (mysql : *MYSQL, wild : *z8) -> *MYSQL_RES
mysql_list_processes :: fonc externe (mysql : *MYSQL) -> *MYSQL_RES
mysql_options :: fonc externe (mysql : *MYSQL, option : mysql_option, arg : *rien) -> z32
mysql_options4 :: fonc externe (mysql : *MYSQL, option : mysql_option, arg1 : *rien, arg2 : *rien) -> z32
mysql_get_option :: fonc externe (mysql : *MYSQL, option : mysql_option, arg : *rien) -> z32
mysql_free_result :: fonc externe (result : *MYSQL_RES) -> rien
mysql_free_result_nonblocking :: fonc externe (result : *MYSQL_RES) -> net_async_status
mysql_data_seek :: fonc externe (result : *MYSQL_RES, offset : n64) -> rien
mysql_row_seek :: fonc externe (result : *MYSQL_RES, offset : *MYSQL_ROWS) -> *MYSQL_ROWS
mysql_field_seek :: fonc externe (result : *MYSQL_RES, offset : n32) -> n32
mysql_fetch_row :: fonc externe (result : *MYSQL_RES) -> **z8
mysql_fetch_row_nonblocking :: fonc externe (res : *MYSQL_RES, row : ***z8) -> net_async_status
mysql_fetch_lengths :: fonc externe (result : *MYSQL_RES) -> *n64
mysql_fetch_field :: fonc externe (result : *MYSQL_RES) -> *MYSQL_FIELD
mysql_list_fields :: fonc externe (mysql : *MYSQL, table : *z8, wild : *z8) -> *MYSQL_RES
mysql_escape_string :: fonc externe (to : *z8, from : *z8, from_length : n64) -> n64
mysql_hex_string :: fonc externe (to : *z8, from : *z8, from_length : n64) -> n64
mysql_real_escape_string :: fonc externe (mysql : *MYSQL, to : *z8, from : *z8, length : n64) -> n64
mysql_real_escape_string_quote :: fonc externe (mysql : *MYSQL, to : *z8, from : *z8, length : n64, quote : z8) -> n64
mysql_debug :: fonc externe (debug : *z8) -> rien
myodbc_remove_escape :: fonc externe (mysql : *MYSQL, name : *z8) -> rien
mysql_thread_safe :: fonc externe () -> n32
mysql_read_query_result :: fonc externe (mysql : *MYSQL) -> bool
mysql_reset_connection :: fonc externe (mysql : *MYSQL) -> z32
mysql_binlog_open :: fonc externe (mysql : *MYSQL, rpl : *MYSQL_RPL) -> z32
mysql_binlog_fetch :: fonc externe (mysql : *MYSQL, rpl : *MYSQL_RPL) -> z32
mysql_binlog_close :: fonc externe (mysql : *MYSQL, rpl : *MYSQL_RPL) -> rien

mysql_stmt_init :: fonc externe (mysql : *MYSQL) -> *MYSQL_STMT
mysql_stmt_prepare :: fonc externe (stmt : *MYSQL_STMT, query : *z8, length : n64) -> z32
mysql_stmt_execute :: fonc externe (stmt : *MYSQL_STMT) -> z32
mysql_stmt_fetch :: fonc externe (stmt : *MYSQL_STMT) -> z32
mysql_stmt_fetch_column :: fonc externe (stmt : *MYSQL_STMT, bind_arg : *MYSQL_BIND, column : n32, offset : n64) -> z32
mysql_stmt_store_result :: fonc externe (stmt : *MYSQL_STMT) -> z32
mysql_stmt_param_count :: fonc externe (stmt : *MYSQL_STMT) -> n64
mysql_stmt_attr_set :: fonc externe (stmt : *MYSQL_STMT, attr_type : enum_stmt_attr_type, attr : *rien) -> bool
mysql_stmt_attr_get :: fonc externe (stmt : *MYSQL_STMT, attr_type : enum_stmt_attr_type, attr : *rien) -> bool
mysql_stmt_bind_param :: fonc externe (stmt : *MYSQL_STMT, bnd : *MYSQL_BIND) -> bool
mysql_stmt_bind_result :: fonc externe (stmt : *MYSQL_STMT, bnd : *MYSQL_BIND) -> bool
mysql_stmt_close :: fonc externe (stmt : *MYSQL_STMT) -> bool
mysql_stmt_reset :: fonc externe (stmt : *MYSQL_STMT) -> bool
mysql_stmt_free_result :: fonc externe (stmt : *MYSQL_STMT) -> bool
mysql_stmt_send_long_data :: fonc externe (stmt : *MYSQL_STMT, param_number : n32, data : *z8, length : n64) -> bool
mysql_stmt_result_metadata :: fonc externe (stmt : *MYSQL_STMT) -> *MYSQL_RES
mysql_stmt_param_metadata :: fonc externe (stmt : *MYSQL_STMT) -> *MYSQL_RES
mysql_stmt_errno :: fonc externe (stmt : *MYSQL_STMT) -> n32
mysql_stmt_error :: fonc externe (stmt : *MYSQL_STMT) -> *z8
mysql_stmt_sqlstate :: fonc externe (stmt : *MYSQL_STMT) -> *z8
mysql_stmt_row_seek :: fonc externe (stmt : *MYSQL_STMT, offset : *MYSQL_ROWS) -> *MYSQL_ROWS
mysql_stmt_row_tell :: fonc externe (stmt : *MYSQL_STMT) -> *MYSQL_ROWS
mysql_stmt_data_seek :: fonc externe (stmt : *MYSQL_STMT, offset : n64) -> rien
mysql_stmt_num_rows :: fonc externe (stmt : *MYSQL_STMT) -> n64
mysql_stmt_affected_rows :: fonc externe (stmt : *MYSQL_STMT) -> n64
mysql_stmt_insert_id :: fonc externe (stmt : *MYSQL_STMT) -> n64
mysql_stmt_field_count :: fonc externe (stmt : *MYSQL_STMT) -> n32
mysql_commit :: fonc externe (mysql : *MYSQL) -> bool
mysql_rollback :: fonc externe (mysql : *MYSQL) -> bool
mysql_autocommit :: fonc externe (mysql : *MYSQL, auto_mode : bool) -> bool
mysql_more_results :: fonc externe (mysql : *MYSQL) -> bool
mysql_next_result :: fonc externe (mysql : *MYSQL) -> z32
mysql_stmt_next_result :: fonc externe (stmt : *MYSQL_STMT) -> z32
mysql_close :: fonc externe (sock : *MYSQL) -> rien
// Public key reset
mysql_reset_server_public_key :: fonc externe () -> rien
