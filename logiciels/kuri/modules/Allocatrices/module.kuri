charge "allocatrice_gardée"
charge "allocatrice_liste_libre"
charge "allocatrice_nulle"
charge "allocatrice_pile"
charge "allocatrice_poule"

/* ------------------------------------------------------------------------- */
/** \nom AllocatriceStats
 * Parasite pour l'allocatrice existante du contexte. Elle sers à rassembler
 * les stats d'allocation de la zone couverte par son existance.
 * \{ */

AllocatriceStats :: struct {
    empl base: BaseAllocatrice

    données_allocatrice: *BaseAllocatrice
    allocatrice: TypeFonctionAllocation 
}

initialise_allocatrice_stats :: fonc (ctx: *ContexteProgramme, alloc: *AllocatriceStats)
{
    alloc.données_allocatrice = ctx.données_allocatrice
    alloc.allocatrice = ctx.allocatrice

    ctx.allocatrice = allocatrice_stats_alloc
    ctx.données_allocatrice = alloc
}

StatsAllocations :: struct {
    mémoire_utilisée: n64
    pic_de_mémoire: n64

    nombre_allocations: z64
    nombre_réallocations: z64
    nombre_désallocations: z64
}

allocatrice_stats_alloc :: fonc (
    mode: ModeAllocatrice,
    nouvelle_taille: z64,
    ancienne_taille: z64,
    ancien_pointeur: *rien,
    données: *BaseAllocatrice,
    info: *InfoType,
    pos: PositionCodeSource) -> *rien
{
    alloc := données comme *AllocatriceStats

    discr mode {
        ALLOUE {
            alloc.mémoire_utilisée += nouvelle_taille
            alloc.nombre_allocations += 1
            si alloc.pic_de_mémoire < alloc.mémoire_utilisée {
                alloc.pic_de_mémoire = alloc.mémoire_utilisée
            }
        }
        RÉALLOUE {
            si ancien_pointeur == nul {
                alloc.nombre_allocations += 1
            }
            sinon {
                alloc.nombre_réallocations += 1
            }

            alloc.mémoire_utilisée += nouvelle_taille - ancienne_taille

            si alloc.pic_de_mémoire < alloc.mémoire_utilisée {
                alloc.pic_de_mémoire = alloc.mémoire_utilisée
            }
        }
        DÉSALLOUE {
            alloc.mémoire_utilisée -= ancienne_taille
            alloc.nombre_désallocations += 1
        }
    }

    retourne alloc.allocatrice(mode, nouvelle_taille, ancienne_taille, ancien_pointeur, alloc.données_allocatrice, info, pos)
}

/** \} */
