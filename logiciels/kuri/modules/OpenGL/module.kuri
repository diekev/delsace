#bibliothèque_dynamique "GL"
#bibliothèque_dynamique "GLEW"

GLenum :: n32
GLboolean :: n8
GLbitfield :: n32
GLbyte :: z8
GLshort :: z16
GLint :: z32
GLsizei :: z32
GLubyte :: n8
GLushort :: n16
GLuint :: n32
GLfloat :: r32
GLclampf :: r32
GLvoid :: rien
GLintptrARB :: z32
GLsizeiptrARB :: z32
GLfixed :: z32
GLclampx :: z32

GL_ARRAY_BUFFER : GLenum : 0x8892
GL_ELEMENT_ARRAY_BUFFER : GLenum : 0x8893
GL_STATIC_DRAW : GLenum : 0x88E4
GL_TRIANGLES : GLenum : 0x0004
GL_FALSE : GLenum : 0
GL_VERTEX_SHADER : GLenum : 0x8B31
GL_FRAGMENT_SHADER : GLenum : 0x8B30
GL_LINK_STATUS : GLenum : 0x8B82
GL_INFO_LOG_LENGTH : GLenum : 0x8B84
GL_COMPILE_STATUS : GLenum : 0x8B81
GL_BLEND : GLenum : 0x0BE2
GL_SRC_ALPHA : GLenum : 0x0302
GL_ONE_MINUS_SRC_ALPHA : GLenum : 0x0303
GL_TEXTURE0 : GLenum : 0x84C0
GL_TEXTURE_1D : GLenum : 0x0DE0
GL_TEXTURE_2D : GLenum : 0x0DE1
GL_UNSIGNED_BYTE : GLenum : 0x1401
GL_UNSIGNED_INT : GLenum : 0x1405
GL_FLOAT : GLenum : 0x1406
GL_RED : GLenum : 0x1903
GL_GREEN : GLenum : 0x1904
GL_BLUE : GLenum : 0x1905
GL_ALPHA : GLenum : 0x1906
GL_RGB : GLenum : 0x1907
GL_RGBA : GLenum : 0x1908
GL_LUMINANCE : GLenum : 0x1909
GL_LUMINANCE_ALPHA : GLenum : 0x190A
GL_NEAREST : GLenum : 0x2600
GL_LINEAR : GLenum : 0x2601
GL_TEXTURE_MIN_FILTER : GLenum : 0x2800
GL_TEXTURE_MAG_FILTER : GLenum : 0x2801
GL_TEXTURE_WRAP_S : GLenum : 0x2802
GL_TEXTURE_WRAP_T : GLenum : 0x2803
GL_CLAMP : GLenum : 0x2900
GL_REPEAT : GLenum : 0x2901
GL_CLAMP_TO_EDGE : GLenum : 0x812F
GL_INVALID_ENUM : GLenum : 0x0500
GL_INVALID_VALUE : GLenum : 0x0501
GL_INVALID_OPERATION : GLenum : 0x0502
GL_INVALID_FRAMEBUFFER_OPERATION : GLenum : 0x0506
GL_STREAM_DRAW : GLenum : 0x88E0
GL_ARRAY_BUFFER_BINDING : GLenum : 0x8894

externe glewExperimental : z32

glewInit :: fonc () -> z32 #externe

glClear :: fonc (bit : z32) -> rien #externe
glClearColor :: fonc (r : r32, g : r32, b : r32, a : r32) -> rien #externe

glEnable :: fonc (cap: GLenum) -> rien #externe
glDisable :: fonc (cap: GLenum) -> rien #externe
glBlendFunc :: fonc (sfactor: n32, dfactor: n32) -> rien #externe

glViewport :: fonc (px : z32, py : z32, tx : z32, ty : z32) -> rien #externe

//# foncs de VAO
glGenVertexArrays :: fonc (n : z32, ptr : *n32) -> rien #externe
glDeleteVertexArrays :: fonc (n : z32, ptr : *n32) -> rien #externe
glBindVertexArray :: fonc (id : GLenum) -> rien #externe

//# foncs de VBO
glGenBuffers :: fonc (n : z32, ptr : *n32) -> rien #externe
glDeleteBuffers :: fonc (n : z32, ptr : *n32) -> rien #externe
glBindBuffer :: fonc (target : GLenum, id : n32) -> rien #externe
glBufferData :: fonc (target : GLenum, size : n64, data : *rien, usage : n32) -> rien #externe

//# foncs Arrays
glEnableVertexAttribArray :: fonc (id : n32) -> rien #externe
glDisableVertexAttribArray :: fonc (id : n32) -> rien #externe
glVertexAttribPointer :: fonc (index : n32, size : z32, type_ : n32, normalized : n32, stride : n32, pointer : *rien) -> rien #externe
glDrawArrays :: fonc (mode : n32, first : z32, count : z64) -> rien #externe
glDrawElements :: fonc (mode : GLenum, count: z64, type: GLenum, indices: *rien) -> rien #externe
glUniform1ui :: fonc (loc: n32, uniform: n32) -> rien #externe

glGetIntegerv :: fonc (pname: GLenum, data: *GLint) -> GLvoid #externe

// textures
glGenTextures :: fonc (n: GLenum, id: *n32) -> rien #externe
glDeleteTextures :: fonc (n: GLenum, id: *n32) -> rien #externe
glIsTexture :: fonc (id: GLenum) -> bool #externe
glActiveTexture :: fonc (id: GLenum) -> rien #externe
glBindTexture :: fonc (cible: GLenum, id: n32) -> rien #externe
glTexParameteri :: fonc (cible: GLenum, a: GLenum, b: GLenum) -> rien #externe

glTexImage2D :: fonc (
    cible: GLenum,
    x: GLenum,
    format_interne: GLenum,
    taille_x: z32,
    taille_z: z32,
    bordure: GLenum,
    format: GLenum,
    type: GLenum,
    données: *rien) -> rien #externe

//# foncs de nuanceurs/programmes
glShaderSource :: fonc (shader : n32, count : z64, string : **z8, length : *z32) -> rien #externe
glCreateShader :: fonc (shaderType : n32) -> n32 #externe
glCompileShader :: fonc (shader : n32) -> rien #externe
glDeleteShader :: fonc (shader : n32) -> rien #externe
glDetachShader :: fonc (program : n32, shader : n32) -> rien #externe
glCreateProgram :: fonc () -> n32 #externe
glAttachShader :: fonc (program : n32, shader : n32) -> rien #externe
glLinkProgram :: fonc (program : n32) -> rien #externe
glUseProgram :: fonc (program : n32) -> rien #externe
glDeleteProgram :: fonc (program : n32) -> rien #externe
glGetShaderiv :: fonc (shader : n32, pname : n32, params : *z32) -> rien #externe
glGetShaderInfoLog :: fonc (shader : n32, maxLength : z32, length : *z32, infoLog : *z8) -> rien #externe
glGetProgramiv :: fonc (program : n32, pname : n32, params : *z32) -> rien #externe
glGetProgramInfoLog :: fonc (shader : n32, maxLength : z32, length : *z32, infoLog : *z8) -> rien #externe
glGetAttribLocation :: fonc (programme : n32, nom: *z8) -> n32 #externe
glGetUniformLocation :: fonc (programme : n32, nom: *z8) -> n32 #externe
glIsShader :: fonc (shader: n32) -> bool #externe
glIsProgram :: fonc (program: GLuint) -> GLboolean #externe

glGetError :: fonc () -> n32 #externe

// ----------------------------------------------------------------------------

importe Fondation

initialise_opengl :: fonc () -> bool
{
    nonsûr {
        glewExperimental = 1
    }

    erreur_ := glewInit()
    retourne erreur_ == 0
}

vérifie_erreur :: fonc (raison: chaine = "") -> rien
{
    erreur_ := glGetError()

	si erreur_ == 0 {
        retourne
	}

    si raison {
        imprime("[%] erreur OpenGL !\n", raison)
    }
    sinon {
	    imprime("erreur OpenGL !\n")
    }

    discr erreur_ {
        GL_INVALID_ENUM {
            imprime("-- énumération invalide\n")
        }
        GL_INVALID_VALUE {
            imprime("-- valeur invalide\n")
        }
        GL_INVALID_OPERATION {
            imprime("-- opération invalide\n")
        }
        GL_INVALID_FRAMEBUFFER_OPERATION {
            imprime("-- opération invalide sur framebuffer\n")
        }
        sinon {
            imprime("-- erreur inconnue, code %\n", erreur_)
        }
    }
}
