importe Chaine
importe Fondation
importe Image

charge "interface"
charge "programme"
charge "tampons"
charge "texture"

initialise_opengl :: fonc () -> bool
{
    nonsûr {
        glewExperimental = 1
    }

    erreur_ := glewInit()

    si erreur_ != 0 {
        chn := convertis_chaine_c(glewGetErrorString(erreur_))
        imprime("Erreur : %\n", chn)
    }

    retourne erreur_ == 0
}

vérifie_erreur :: fonc (raison : chaine = "") -> rien
{
    erreur_ := glGetError()

    si erreur_ == GL_NO_ERROR {
        retourne
    }

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    ajoute_au_tampon(*enchaineuse, "[OpenGL]")

    si raison {
        ajoute_au_tampon(*enchaineuse, "[", raison, "]")
    }

    imprime_dans_enchaineuse(*enchaineuse, " erreur % : ", erreur_)

    discr erreur_ {
        GL_INVALID_ENUM {
            ajoute_au_tampon(*enchaineuse, "énumération invalide\n")
        }
        GL_INVALID_VALUE {
            ajoute_au_tampon(*enchaineuse, "valeur invalide\n")
        }
        GL_INVALID_OPERATION {
            ajoute_au_tampon(*enchaineuse, "opération invalide\n")
        }
        GL_STACK_OVERFLOW {
            ajoute_au_tampon(*enchaineuse, "surdépassement pile\n")
        }
        GL_STACK_UNDERFLOW {
            ajoute_au_tampon(*enchaineuse, "soudépassement pile\n")
        }
        GL_OUT_OF_MEMORY {
            ajoute_au_tampon(*enchaineuse, "mémoire insuffisante\n")
        }
        GL_INVALID_FRAMEBUFFER_OPERATION {
            ajoute_au_tampon(*enchaineuse, "opération invalide sur framebuffer\n")
        }
        sinon {
            ajoute_au_tampon(*enchaineuse, "erreur inconnue\n")
        }
    }

    chaine_erreur := chaine_depuis_enchaineuse(*enchaineuse)
    panique(chaine_erreur)
}

gl_check_framebuffer_status :: fonc ()
{
	status := glCheckFramebufferStatus(GL_FRAMEBUFFER)

    si status == GL_FRAMEBUFFER_COMPLETE {
		retourne
	}

	discr status {
		GL_FRAMEBUFFER_UNDEFINED {
			imprime("default framebuffer does not exist!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT {
			imprime("framebuffer attachment points are incomplete!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT {
			imprime("framebuffer does not have an image attached to it!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER {
			imprime("draw buffer color attachment point is 'none'!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER {
			imprime("read buffer color attachment point is 'none'!\n")
        }
		GL_FRAMEBUFFER_UNSUPPORTED {
			imprime("combination of internal formats is unsupported!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE {
			imprime("incomplete multisample!\n")
        }
		GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS {
			imprime("incomplete layer targets!\n")
        }
        sinon {
            imprime("erreur framebuffer inconnue : %\n", status)
        }
	}
}

/* ------------------------------------------------------------------------- */
/** \nom Texture 2D.
 * \{ */

ParamètresTexture2D :: struct {
    largeur: GLsizei
    hauteur: GLsizei
    bordure: GLint
    /* GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL */
    format: GLenum
    type: GLenum
    données: *rien

    min_filter := GL_LINEAR
    mag_filter := GL_LINEAR

    wrap_s := GL_CLAMP
    wrap_t := GL_CLAMP

    direction: DirectionImage
}

/** Définis les données de la texture correspondant au `code_texture`.
 * `code_texture` est la valeur retournée par un appel à #glGenTextures.
 */
définis_texture_2d :: fonc (code_texture: n32, params: *ParamètresTexture2D)
{
    glBindTexture(GL_TEXTURE_2D, code_texture)
    vérifie_erreur("définis_texture_2d : glBindTexture")

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, params.min_filter)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, params.mag_filter)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, params.wrap_s)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, params.wrap_t)

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, params.largeur, params.hauteur, params.bordure, params.format, params.type, params.données)
    vérifie_erreur("définis_texture_2d : glTexImage2D")

    glBindTexture(GL_TEXTURE_2D, 0)
    vérifie_erreur("définis_texture_2d : glBindTexture 0")
}

donne_paramètres_texture_pour_image :: fonc (image: ImageIO, répétition: RépétitionImage) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.largeur
    résultat.hauteur = image.hauteur
    résultat.données = image.donnees
    résultat.bordure = 0
    résultat.type = GL_FLOAT
    si image.nombre_composants == 1 {
        résultat.format = GL_RED
    }
    sinon si image.nombre_composants == 2 {
        résultat.format = GL_RG
    }
    sinon si image.nombre_composants == 3 {
        résultat.format = GL_RGB
    }
    sinon {
        résultat.format = GL_RGBA
    }
    définis_répétition(*résultat, répétition)
    retourne résultat
}

donne_paramètres_texture_pour_image :: fonc (image: *NouvelleImage, répétition: RépétitionImage) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.desc.largeur comme z32
    résultat.hauteur = image.desc.hauteur comme z32
    résultat.données = image.données
    résultat.bordure = 0
    résultat.direction = image.desc.direction

    discr image.desc.format {
        Gris_8 {
            résultat.type = GL_UNSIGNED_BYTE
            résultat.format = GL_RED
        }
        RVB_8 {
            résultat.type = GL_UNSIGNED_BYTE
            résultat.format = GL_RGB
        }
        RVBA_8 {
            résultat.type = GL_UNSIGNED_BYTE
            résultat.format = GL_RGBA
        }
        Gris_32 {
            résultat.type = GL_FLOAT
            résultat.format = GL_RED
        }
        RVB_32 {
            résultat.type = GL_FLOAT
            résultat.format = GL_RGB
        }
        RVBA_32 {
            résultat.type = GL_FLOAT
            résultat.format = GL_RGBA
        }
    }

    // résultat.format = GL_RG
    définis_répétition(*résultat, répétition)
    retourne résultat
}

donne_paramètres_texture_pour_image :: fonc (image: TamponImageGrise8Bit, répétition: RépétitionImage) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.largeur
    résultat.hauteur = image.hauteur
    résultat.données = image.données
    résultat.bordure = 0
    résultat.type = GL_UNSIGNED_BYTE
    résultat.format = GL_RED
    définis_répétition(*résultat, répétition)
    retourne résultat
}

donne_paramètres_texture_pour_image :: fonc (image: TamponImageRVBA8Bit, répétition: RépétitionImage) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.largeur
    résultat.hauteur = image.hauteur
    résultat.données = image.données
    résultat.bordure = 0
    résultat.type = GL_UNSIGNED_BYTE
    résultat.format = GL_RGBA
    définis_répétition(*résultat, répétition)
    retourne résultat
}

donne_paramètres_texture_pour_image :: fonc (image: TamponImageRVBA32Bit, répétition: RépétitionImage) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.largeur
    résultat.hauteur = image.hauteur
    résultat.données = image.données
    résultat.bordure = 0
    résultat.type = GL_FLOAT
    résultat.format = GL_RGBA
    définis_répétition(*résultat, répétition)
    retourne résultat
}

définis_répétition :: fonc (params: *ParamètresTexture2D, répétition: RépétitionImage)
{
    params.wrap_s = convertis_répétition(répétition.x)
    params.wrap_t = convertis_répétition(répétition.y)
}

convertis_répétition :: fonc (répétition: GenreRépétitionImage) -> GLenum
{
    si répétition != GenreRépétitionImage.Aucune {
        retourne GL_REPEAT
    }

    retourne GL_CLAMP
}

/** \} */
