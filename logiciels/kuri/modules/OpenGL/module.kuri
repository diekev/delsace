importe Fondation
importe Image

charge "interface"

initialise_opengl :: fonc () -> bool
{
    nonsûr {
        glewExperimental = 1
    }

    erreur_ := glewInit()
    retourne erreur_ == 0
}

vérifie_erreur :: fonc (raison: chaine = "") -> rien
{
    erreur_ := glGetError()

	si erreur_ == 0 {
        retourne
	}

    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    si raison {
        imprime_dans_enchaineuse(*enchaineuse, "[%] erreur OpenGL !\n", raison)
    }
    sinon {
	    imprime_dans_enchaineuse(*enchaineuse, "erreur OpenGL !\n")
    }

    discr erreur_ {
        GL_INVALID_ENUM {
            imprime_dans_enchaineuse(*enchaineuse, "-- énumération invalide\n")
        }
        GL_INVALID_VALUE {
            imprime_dans_enchaineuse(*enchaineuse, "-- valeur invalide\n")
        }
        GL_INVALID_OPERATION {
            imprime_dans_enchaineuse(*enchaineuse, "-- opération invalide\n")
        }
        GL_INVALID_FRAMEBUFFER_OPERATION {
            imprime_dans_enchaineuse(*enchaineuse, "-- opération invalide sur framebuffer\n")
        }
        sinon {
            imprime_dans_enchaineuse(*enchaineuse, "-- erreur inconnue, code %\n", erreur_)
        }
    }

    chaine_erreur := chaine_depuis_enchaineuse(*enchaineuse)
    panique(chaine_erreur)
}

/* ------------------------------------------------------------------------- */
/** \nom Texture 2D.
 * \{ */

ParamètresTexture2D :: struct {
 	largeur: GLsizei
    hauteur: GLsizei
    bordure: GLint
    /* GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL */
    format: GLenum
    type: GLenum
    données: *rien
}

/** Définis les données de la texture correspondant au `code_texture`.
 * `code_texture` est la valeur retournée par un appel à #glGenTextures.
 */
définis_texture_2d :: fonc (code_texture: n32, params: *ParamètresTexture2D)
{
    glBindTexture(GL_TEXTURE_2D, code_texture)
    vérifie_erreur("définis_texture_2d : glBindTexture")

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, params.largeur, params.hauteur, params.bordure, params.format, params.type, params.données)
    vérifie_erreur("définis_texture_2d : glTexImage2D")

    glBindTexture(GL_TEXTURE_2D, 0)
    vérifie_erreur("définis_texture_2d : glBindTexture 0")
}

donne_paramètres_texture_pour_image :: fonc (image: ImageIO) -> ParamètresTexture2D
{
    résultat: ParamètresTexture2D
    résultat.largeur = image.largeur
    résultat.hauteur = image.hauteur
    résultat.données = image.donnees
    résultat.bordure = 0
    résultat.type = GL_FLOAT
    si image.nombre_composants == 1 {
        résultat.format = GL_RED
    }
    sinon si image.nombre_composants == 2 {
        // résultat.format = GL_RG À FAIRE
    }
    sinon si image.nombre_composants == 3 {
        résultat.format = GL_RGB
    }
    sinon {
        résultat.format = GL_RGBA
    }
    retourne résultat
}

/** } */
