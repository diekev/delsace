importe Chaine
importe Couleur
importe FTGL
importe Fondation
importe SysFichier
importe Unicode

/* ------------------------------------------------------------------------- */
/** \nom Fonte
 * \{ */

Fonte :: struct {
    atlas: *texture_atlas_t
    font: *texture_font_t
}

crée_fonte :: fonc (chemin: chaine, taille_police: r32) -> *Fonte
{
    retourne crée_fonte(CheminFichier(chemin), taille_police)
}

crée_fonte :: fonc (chemin: CheminFichier, taille_police: r32) -> *Fonte
{
    chemin_c := crée_chaine_c(chemin.chn)
    diffère détruit_chaine_c(chemin_c)

    atlas := texture_atlas_new(512, 512, 1)
    font := texture_font_new_from_file(atlas, taille_police, chemin_c comme *z8)

    saufsi font {
        texture_atlas_delete(atlas)
        retourne nul
    }

    fonte := loge(Fonte)
    fonte.font = font
    fonte.atlas = atlas
    retourne fonte
}

détruit_fonte :: fonc (fonte: *Fonte)
{
    texture_atlas_delete(fonte.atlas)
    texture_font_delete(fonte.font)
    déloge(fonte)
}

donne_glyphe :: fonc (fonte: *Fonte, c: *z8) -> *texture_glyph_t
{
    retourne texture_font_get_glyph(fonte.font, c)
}

donne_glyphe_nul :: fonc (fonte: *Fonte) -> *texture_glyph_t
{
    retourne texture_font_get_glyph(fonte.font, nul)
}

donne_glyphe :: fonc (fonte: *Fonte, point_de_code: n32) -> *texture_glyph_t
{
    retourne texture_font_get_glyph_codepoint(fonte.font, point_de_code)
}

ContrainteChaine :: chaine | ChaineUTF16 | ChaineUTF32

donne_largeur_texte :: fonc (fonte: *Fonte, texte: $T/ContrainteChaine) -> z32
{
    marque := donne_marque_stockage_temporaire()
    diffère définis_marque_stockage_temporaire(marque)

    contexte_temp := contexte()
    contexte_temp.allocatrice = __stockage_temporaire

    glyphes: [..]*texture_glyph_t

    pousse_contexte contexte_temp {
        donne_glyphes(fonte, texte, *glyphes)
    }

    retourne donne_largeur_glyphes(fonte, glyphes)
}

donne_largeur_glyphes :: fonc (fonte: *Fonte, glyphes: []*texture_glyph_t) -> z32
{
    résultat := 0.0
    utilise_crénage := fonte.font.kerning != 0
    dernier_glyphe: *texture_glyph_t
    pour glyphes {
        si utilise_crénage {
            crénage := donne_crénage_avec(it, dernier_glyphe)
            résultat += crénage
        }
        dernier_glyphe = it
        résultat += it.advance_x
    }
    retourne résultat comme z32
}

donne_index_caractère_pour_position :: fonc (fonte: *Fonte, texte: ChaineUTF32, position: r32) -> z64
{
    utilise_crénage := fonte.font.kerning != 0
    dernier_glyphe: *texture_glyph_t
    pour texte.points_de_code {
        glyph := donne_glyphe(fonte, it)
        saufsi glyph {
            continue
        }

        si utilise_crénage {
            crénage := donne_crénage_avec(glyph, dernier_glyphe)
            position -= crénage
        }
        dernier_glyphe = glyph
        position -= glyph.advance_x

        si position <= 0.0 {
            retourne index_it
        }
    }

    retourne -1
}

donne_largeur_texte :: fonc (fonte: *Fonte, texte: ChaineUTF16Unique) -> z32
{
    retourne donne_largeur_texte(fonte, texte.donne_chaine_utf16())
}

donne_largeur_glyph :: fonc (fonte: *Fonte, point_de_code: n32) -> Optionnel(r32)
{
    glyph := donne_glyphe(fonte, point_de_code)
    saufsi glyph {
        retourne
    }
    retourne glyph.advance_x
}

donne_hauteur_glyph :: fonc (fonte: *Fonte, point_de_code: n32) -> Optionnel(n64)
{
    glyph := donne_glyphe(fonte, point_de_code)
    saufsi glyph {
        retourne
    }
    retourne glyph.height
}

donne_glyphes :: fonc (fonte: *Fonte, texte: chaine, glyphes: *[..]*texture_glyph_t)
{
    début := texte.pointeur
    fin := texte.pointeur + texte.taille

    tantque début < fin {
        n := nombre_octets_utf8_rapide(début)
        si n == 0 {
            début += 1
            continue
        }

        point_de_code := converti_utf8_utf32(début, n) comme n32
        début += n

        glyph := fonte.donne_glyphe(point_de_code)
        si glyph == nul {
            continue
        }

        tableau_ajoute(glyphes, glyph)
    }
}

donne_glyphes :: fonc (fonte: *Fonte, texte: ChaineUTF16, glyphes: *[..]*texture_glyph_t)
{
    pour texte.unités {
        glyph := fonte.donne_glyphe(it)
        si glyph == nul {
            continue
        }

        tableau_ajoute(glyphes, glyph)
    }
}

donne_glyphes :: fonc (fonte: *Fonte, texte: ChaineUTF32, glyphes: *[..]*texture_glyph_t)
{
    pour texte.points_de_code {
        glyph := fonte.donne_glyphe(it)
        si glyph == nul {
            continue
        }

        tableau_ajoute(glyphes, glyph)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Métriques fonte.
 * \{ */

MétriquesFonte :: struct {
    /* Hauteur au-dessus de la ligne de base. */
    jambage_supérieur: r32
    /* Hauteur en-dessous de la ligne de base. */
    jambage_inférieur: r32
    /* Espace entre deux lignes. */
    interligne: r32
    /* Taille maximale d'un caractère. */
    largeur_maximale: r32
    /* Taille moyenne d'un caractère. */
    largeur_moyenne: r32
}

donne_métriques_fonte :: fonc (fonte: *Fonte) -> MétriquesFonte
{
    résultat : MétriquesFonte = ---
    résultat.jambage_supérieur = fonte.font.ascender
    résultat.jambage_inférieur = fonte.font.descender
    résultat.interligne = fonte.font.linegap
    résultat.largeur_maximale = fonte.font.max_char_width
    résultat.largeur_moyenne = fonte.font.avg_char_width
    retourne résultat
}

donne_hauteur_ligne :: fonc (empl métriques: MétriquesFonte) -> r32
{
    retourne jambage_supérieur - jambage_inférieur + interligne
}

donne_hauteur_caractère :: fonc (empl métriques: MétriquesFonte) -> r32
{
    retourne jambage_supérieur - jambage_inférieur
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Glyphe
 * \{ */

/* Retourne le crénage de glyphe selon le caractère qui le précède. */
donne_crénage_avec :: fonc (glyphe: *texture_glyph_t, caractère: *z8) -> r32 #enligne
{
    saufsi caractère {
        retourne 0.0
    }

    retourne texture_glyph_get_kerning(glyphe, caractère)
}

donne_crénage_avec :: fonc (glyphe: *texture_glyph_t, point_de_code: n32) -> r32 #enligne
{
    saufsi caractère {
        retourne 0.0
    }

    retourne texture_glyph_get_kerning_codepoint(glyphe, point_de_code)
}

/* Retourne le crénage de glyphe selon le glyphe qui le précède. */
donne_crénage_avec :: fonc (glyphe: *texture_glyph_t, glyphe_précédent: *texture_glyph_t) -> r32 #enligne
{
    saufsi glyphe_précédent {
        retourne 0.0
    }

    retourne texture_glyph_get_kerning_glyph(glyphe, glyphe_précédent)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EffetsTexte
 * Effets pour le rendu.
 * \{ */

EffetsTexte :: struct {
    /* Le texte sera surligné. */
    surlignage: bool
    couleur_surlignage: CouleurRVBA

    /* Le texte sera sousligné. */
    souslignage: bool
    couleur_souslignage: CouleurRVBA

    /* Le texte sera barré. */
    barrage: bool
    couleur_barrage: CouleurRVBA
}

/** \} */
