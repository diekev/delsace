importe Chaine
importe Compilatrice
importe Fondation

/* Les tags communs comme ChaineInternées */

// Tag spéciale pour s'assurer que tous les lexèmes et éléments ont un tag valide.
TAG_vide: DOMString = ---

TAG_a: DOMString = ---
TAG_address: DOMString = ---
TAG_annotation_xml: DOMString = ---
TAG_applet: DOMString = ---
TAG_area: DOMString = ---
TAG_article: DOMString = ---
TAG_aside: DOMString = ---
TAG_b: DOMString = ---
TAG_base: DOMString = ---
TAG_basefont: DOMString = ---
TAG_basefront: DOMString = ---
TAG_bgsound: DOMString = ---
TAG_big: DOMString = ---
TAG_blink: DOMString = ---
TAG_blockquote: DOMString = ---
TAG_body: DOMString = ---
TAG_br: DOMString = ---
TAG_button: DOMString = ---
TAG_caption: DOMString = ---
TAG_center: DOMString = ---
TAG_code: DOMString = ---
TAG_col: DOMString = ---
TAG_colgroup: DOMString = ---
TAG_datalist: DOMString = ---
TAG_dd: DOMString = ---
TAG_desc: DOMString = ---
TAG_details: DOMString = ---
TAG_dialog: DOMString = ---
TAG_dir: DOMString = ---
TAG_div: DOMString = ---
TAG_dl: DOMString = ---
TAG_dt: DOMString = ---
TAG_em: DOMString = ---
TAG_embed: DOMString = ---
TAG_fieldset: DOMString = ---
TAG_figcaption: DOMString = ---
TAG_figure: DOMString = ---
TAG_font: DOMString = ---
TAG_footer: DOMString = ---
TAG_foreignObject: DOMString = ---
TAG_form: DOMString = ---
TAG_frame: DOMString = ---
TAG_frameset: DOMString = ---
TAG_h1: DOMString = ---
TAG_h2: DOMString = ---
TAG_h3: DOMString = ---
TAG_h4: DOMString = ---
TAG_h5: DOMString = ---
TAG_h6: DOMString = ---
TAG_head: DOMString = ---
TAG_header: DOMString = ---
TAG_hgroup: DOMString = ---
TAG_hr: DOMString = ---
TAG_html: DOMString = ---
TAG_i: DOMString = ---
TAG_iframe: DOMString = ---
TAG_image: DOMString = ---
TAG_img: DOMString = ---
TAG_input: DOMString = ---
TAG_ins: DOMString = ---
TAG_keygen: DOMString = ---
TAG_legend: DOMString = ---
TAG_label: DOMString = ---
TAG_li: DOMString = ---
TAG_link: DOMString = ---
TAG_listing: DOMString = ---
TAG_main: DOMString = ---
TAG_marquee: DOMString = ---
TAG_math: DOMString = ---
TAG_menu: DOMString = ---
TAG_meta: DOMString = ---
TAG_mi: DOMString = ---
TAG_mo: DOMString = ---
TAG_mn: DOMString = ---
TAG_ms: DOMString = ---
TAG_mtext: DOMString = ---
TAG_nav: DOMString = ---
TAG_nobr: DOMString = ---
TAG_noembed: DOMString = ---
TAG_noframes: DOMString = ---
TAG_noscript: DOMString = ---
TAG_object: DOMString = ---
TAG_ol: DOMString = ---
TAG_optgroup: DOMString = ---
TAG_option: DOMString = ---
TAG_p: DOMString = ---
TAG_param: DOMString = ---
TAG_plaintext: DOMString = ---
TAG_pre: DOMString = ---
TAG_rb: DOMString = ---
TAG_rp: DOMString = ---
TAG_rt: DOMString = ---
TAG_rtc: DOMString = ---
TAG_ruby: DOMString = ---
TAG_s: DOMString = ---
TAG_span: DOMString = ---
TAG_script: DOMString = ---
TAG_section: DOMString = ---
TAG_select: DOMString = ---
TAG_small: DOMString = ---
TAG_source: DOMString = ---
TAG_strike: DOMString = ---
TAG_strong: DOMString = ---
TAG_style: DOMString = ---
TAG_summary: DOMString = ---
TAG_svg: DOMString = ---
TAG_table: DOMString = ---
TAG_tbody: DOMString = ---
TAG_td: DOMString = ---
TAG_template: DOMString = ---
TAG_textarea: DOMString = ---
TAG_tfoot: DOMString = ---
TAG_th: DOMString = ---
TAG_thead: DOMString = ---
TAG_title: DOMString = ---
TAG_tr: DOMString = ---
TAG_track: DOMString = ---
TAG_tt: DOMString = ---
TAG_u: DOMString = ---
TAG_ul: DOMString = ---
TAG_video: DOMString = ---
TAG_wbr: DOMString = ---
TAG_xmp: DOMString = ---

/* Atributs */

ATTR_action : DOMString = ---
ATTR_alt : DOMString = ---
ATTR_async : DOMString = ---
ATTR_charset : DOMString = ---
ATTR_class : DOMString = ---
ATTR_content : DOMString = ---
ATTR_event : DOMString = ---
ATTR_for : DOMString = ---
ATTR_height : DOMString = ---
ATTR_href : DOMString = ---
ATTR_http_equiv : DOMString = ---
ATTR_id : DOMString = ---
ATTR_is : DOMString = ---
ATTR_lang : DOMString = ---
ATTR_language : DOMString = ---
ATTR_method : DOMString = ---
ATTR_name : DOMString = ---
ATTR_nomodule : DOMString = ---
ATTR_src : DOMString = ---
ATTR_title : DOMString = ---
ATTR_type : DOMString = ---
ATTR_value : DOMString = ---
ATTR_width : DOMString = ---

ATTR_description : DOMString = ---
ATTR_hidden : DOMString = ---
ATTR_importmap : DOMString = ---
ATTR_module : DOMString = ---
ATTR_onload : DOMString = ---
ATTR_refresh : DOMString = ---
ATTR_viewport : DOMString = ---
ATTR_window : DOMString = ---

/* Ceci doit être après les tags, car nous l'utilions comme sentinelle dans les
 * métaprogrammes plus bas. */
tags_initialisés := faux

initialise_tags :: fonc ()
#corps_texte {
    retourne génère_fonction_pour_tags(faux)
}

#ajoute_init initialise_tags()

imprime_tags :: fonc ()
#corps_texte {
    retourne génère_fonction_pour_tags(vrai)
}

génère_fonction_pour_tags :: fonc (pour_impression: bool) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    saufsi pour_impression {
        ajoute_au_tampon(*enchaineuse, "    si tags_initialisés { retourne }\n")
        ajoute_au_tampon(*enchaineuse, "    tags_initialisés = vrai\n")
        ajoute_au_tampon(*enchaineuse, "    TAG_vide = crée_chaine_utf16_unique(\"\")\n")
    }

    lexèmes := compilatrice_lèxe_fichier(#chemin_de_ce_fichier)

    pour lexèmes {
        si it.genre != Compilatrice.GenreLexème.CHAINE_CARACTERE {
            continue
        }

        si it.texte == "tags_initialisés" {
            arrête
        }

        si it.texte == "TAG_vide" {
            continue
        }

        si pour_impression {
            ajoute_au_tampon(*enchaineuse, "    imprime(\"", it.texte, " : %\\n\", ", it.texte, ")\n")
            continue
        }

        nom_tag: chaine
        si it.texte.commence_par("TAG_") {
            nom_tag = it.texte.avance(4)
            si nom_tag == "annotation_xml" {
                nom_tag = "annotation-xml"
            }
        }
        sinon si it.texte.commence_par("ATTR_") {
            nom_tag = it.texte.avance(5)
            si nom_tag == "http_equiv" {
                nom_tag = "http-equiv"
            }
        }
        sinon {
            continue
        }

        ajoute_au_tampon(*enchaineuse, "    ", it.texte, " = crée_chaine_utf16_unique(\"", nom_tag, "\")\n")
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}
