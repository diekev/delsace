importe Compilatrice
importe Ensemble
importe Fondation
importe Math
importe Sérialisation
importe SysFichier

/* https://webidl.spec.whatwg.org/#abstract-opdef-integerpart */
integer_part :: fonc (n: r64) -> r64
{
    // 1. Let r be floor(abs(n)).
    r := plancher(abs(n))

    // 2. If n < 0, then return -1 × r.
    si n < 0.0 {
        retourne -1.0 * r
    }

    // 3. Otherwise, return r.
    retourne r
}

Signedness :: énum {
    Signed
    Unsigned
}

/* https://webidl.spec.whatwg.org/#abstract-opdef-converttoint */
convert_to_int :: fonc (interpréteuse: *JavaScript.Interpréteuse, valeur: JavaScript.Valeur, bit_length: n32 @inutilisée, signedness: Signedness @inutilisée) -> JavaScript.CompletionRecord
{
    // À FAIRE : complète
    // 1. If bitLength is 64, then:

        // 1. Let upperBound be 2^53 − 1.

        // 2. If signedness is "unsigned", then let lowerBound be 0.

        // 3. Otherwise let lowerBound be −2^53 + 1.

    // 2. Otherwise, if signedness is "unsigned", then:

        // 1. Let lowerBound be 0.

        // 2. Let upperBound be 2^bitLength − 1.

    // 3. Otherwise:

        // 1. Let lowerBound be -2^bitLength − 1.

        // 2. Let upperBound be 2^bitLength − 1 − 1.

    // 4. Let x be ? ToNumber(V).
    completion := JavaScript.to_number(interpréteuse, valeur)
    saufsi JavaScript.est_normal(completion) {
        retourne completion
    }

    x := completion.valeur.V.Number

    // 5. If x is −0, then set x to +0.
    si x == -0.0 {
        x = 0.0
    }

    // 6. If the conversion is to an IDL type associated with the [EnforceRange] extended attribute, then:

        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.

        // 2. Set x to IntegerPart(x).

        // 3. If x < lowerBound or x > upperBound, then throw a TypeError.

        // 4. Return x.

    // 7. If x is not NaN and the conversion is to an IDL type associated with the [Clamp] extended attribute, then:

        // 1. Set x to min(max(x, lowerBound), upperBound).

        // 2. Round x to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.

        // 3. Return x.

    // 8. If x is NaN, +0, +∞, or −∞, then return +0.
    si est_nan(x) || x == 0.0 || est_infini(x) {
        retourne JavaScript.normal_completion(JavaScript.Valeur(Number = 0.0))
    }

    // 9. Set x to IntegerPart(x).
    x = integer_part(x)

    // 10. Set x to x modulo 2^bitLength.

    // 11. If signedness is "signed" and x ≥ 2^bitLength − 1, then return x − 2^bitLength.

    // 12. Otherwise, return x.
    retourne JavaScript.normal_completion(JavaScript.Valeur(Number = x))
}

#portée_fichier

Griffonier :: TamponFixe(T = z8, N = 128)

donne_nom_snake_case :: fonc (chn: chaine, griffonier: *Griffonier) -> chaine
{
    premier := vrai

    griffonier.curseur = 0

    curseur := 0

    tantque curseur < chn.taille {
        it := chn[curseur]

        si 'A' <= it <= 'Z' {
            saufsi premier {
                ajoute(griffonier, '_')
            }

            ajoute(griffonier, it - 'A' + 'a')

            si it == 'H' && curseur < chn.taille - 3 && sous_chaine(chn, curseur, curseur + 4) == "HTML" {
                ajoute(griffonier, 't')
                ajoute(griffonier, 'm')
                ajoute(griffonier, 'l')
                curseur += 3
            }
        }
        sinon {
            ajoute(griffonier, it)
        }

        premier = faux
        curseur += 1
    }

    retourne construit_chaine(*griffonier.données[0], griffonier.curseur)
}

NomEtIndex :: struct {
    nom: chaine
    index: z64
}

opérateur < :: fonc (a: NomEtIndex, b: NomEtIndex) -> bool
{
    retourne a.nom < b.nom
}

opérateur == :: fonc (a: NomEtIndex, b: NomEtIndex) -> bool
{
    retourne a.nom == b.nom
}

#portée_module

Interfaces :: struct {
    interfaces: [..]Interface
    contenus_fichiers: [..]chaine
    noms_et_index_parents: [..]NomEtIndex
}

crée_interface :: fonc (interfaces: *Interfaces, nom: chaine) -> *Interface
{
    résultat := tableau_ajoute_élément(*interfaces.interfaces)
    résultat.nom = nom

    nom_et_index_parent: NomEtIndex
    nom_et_index_parent.nom = résultat.nom

    saufsi ensemble_possède(*interfaces.noms_et_index_parents, nom_et_index_parent) {
        nom_et_index_parent.index = interfaces.interfaces.taille - 1
        ensemble_ajoute(*interfaces.noms_et_index_parents, nom_et_index_parent)
    }

    retourne résultat
}

donne_interface :: fonc (interfaces: *Interfaces, nom: chaine) -> *Interface
{
    pour * interfaces.interfaces {
        si it.nom == nom {
            retourne it
        }
    }
    retourne nul
}

détruit_données_interfaces :: fonc (interfaces: *Interfaces)
{
    pour interfaces.interfaces {
        déloge(it.fonctions)
        déloge(it.paramètres)
        déloge(it.attributs)
        déloge(it.mixins)
    }
    déloge_tableau_et_ses_éléments(interfaces.contenus_fichiers)
    déloge(interfaces.interfaces)
    déloge(interfaces.noms_et_index_parents)
}

ajoute_mixins_aux_interfaces :: fonc (interfaces: *Interfaces)
{
    pour * interfaces.interfaces {
        si it.est_mixin {
            continue
        }

        pour nom_mixin dans it.mixins {
            mixin := interfaces.donne_interface(nom_mixin)
            saufsi mixin {
                message_erreur := imprime_chaine("mixin '%' inconnu pour '%'", nom_mixin, it.nom)
                compilatrice_rapporte_erreur(message_erreur)
            }

            pour attribut dans mixin.attributs {
                tableau_ajoute(*it.attributs, attribut)
            }

            // À FAIRE : fonctions
        }
    }
}

compile_interfaces_idl :: fonc () -> chaine
{
    interfaces: Interfaces
    diffère détruit_données_interfaces(*interfaces)

    /* Interface pour réutiliser la mémoire entre les parsages. */
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "importe Chaine\n")
    ajoute_au_tampon(*enchaineuse, "importe #inemployé JavaScript\n")

    // À FAIRE : renomme nos types
    ajoute_au_tampon(*enchaineuse, "#portée_module\n")
    ajoute_au_tampon(*enchaineuse, "Node :: Noeud\n")
    ajoute_au_tampon(*enchaineuse, "Element :: Élément\n")
    ajoute_au_tampon(*enchaineuse, "Text :: NoeudTexte\n")

    chemin_fichier := CheminFichier(#chemin_de_ce_fichier)
    chemin_parent := chemin_fichier.chemin_parent()
    diffère détruit_chemin(chemin_parent)
    chemin := crée_chemin_absolu(chemin_parent, CheminFichier("fichiers"))
    diffère détruit_chemin(chemin)

    pour ExploratriceFichier(chemin) {
        saufsi it.extension() == ".idl" {
            continue
        }

        texte := contenu_fichier_texte(it)
        tableau_ajoute(*interfaces.contenus_fichiers, texte)

        parse_fichier(it, texte, *interfaces)
    }

    ajoute_mixins_aux_interfaces(*interfaces)

    pour * interfaces.interfaces {
        si it.est_mixin {
            continue
        }

        génère_enveloppes_javascript(*enchaineuse, it)
    }

    source := chaine_depuis_enchaineuse(*enchaineuse)
    ajoute_chaine_au_module(compilatrice_espace_courant(), compilatrice_module_courant(), source)
    déloge(source)

    détruit_tampons(*enchaineuse)
    initialise_enchaineuse(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "    tas_de_mémoire := JavaScript.donne_tas_de_mémoire(realm)\n\n")

    pour * interfaces.interfaces {
        si it.est_mixin {
            continue
        }
        génère_création_prototype(*enchaineuse, interfaces.interfaces, it, *interfaces.noms_et_index_parents)
    }

    ajoute_au_tampon(*enchaineuse, "\n    si __table_indexage_prototypes.taille == 0 {\n")
    ajoute_au_tampon(*enchaineuse, "        tableau_redimensionne(__table_indexage_prototypes, ", interfaces.interfaces.taille, ")\n")
    pour interfaces.interfaces {
        si it.est_mixin {
            continue
        }
        ajoute_au_tampon(*enchaineuse, "        __table_indexage_prototypes[", index_it, "] = IndexPrototype(", it.nom, ", ", index_it, ")\n")
    }
    ajoute_au_tampon(*enchaineuse, "    }\n")

    ajoute_au_tampon(*enchaineuse, "\n    tableau_redimensionne(realm.intrinsics.host_intrinsics, ", interfaces.interfaces.taille, ")\n")

    pour interfaces.interfaces {
        si it.est_mixin {
            continue
        }
        ajoute_au_tampon(*enchaineuse, "    realm.intrinsics.host_intrinsics[", index_it, "] = ", it.nom, "_prototype\n")
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

#portée_fichier

génère_création_prototype :: fonc (enchaineuse: *Enchaineuse, interfaces: []Interface, interface: *Interface, noms_et_index_parents: *[..]NomEtIndex)
{
    si interface.création_générée {
        retourne
    }

    interface.création_générée = vrai

    si interface.parent {
        nom_et_index_parent: NomEtIndex
        nom_et_index_parent.nom = interface.parent

        adresse_nom_et_index_parent := ensemble_possède_retourne_index(noms_et_index_parents, nom_et_index_parent)
        assert(adresse_nom_et_index_parent != -1)

        parent := *interfaces[noms_et_index_parents.pointeur[adresse_nom_et_index_parent].index]

        génère_création_prototype(enchaineuse, interfaces, parent, noms_et_index_parents)
    }

    ajoute_au_tampon(enchaineuse, "    ", interface.nom, "_prototype := crée_prototype_", interface.nom, "(tas_de_mémoire, ")
    si interface.parent {
        ajoute_au_tampon(enchaineuse, interface.parent, "_prototype)\n")
    }
    sinon {
        ajoute_au_tampon(enchaineuse, "realm.intrinsics.object_prototype)\n")
    }
}

Type :: struct {
    nom: chaine
    nulifiable: bool
}

Attribut :: struct {
    type: Type
    nom: chaine
    lecture_seule: bool
    reflect: bool
    est_membre: bool
    est_idl_event_handler: bool
    /* 'nom' de [Reflect=nom] */
    attribut_réfléchis: chaine
}

Paramètre :: struct {
    nom: chaine
    type: Type
}

Fonction :: struct {
    type_retour: Type
    nom: chaine

    premier_paramètre: z64
    dernier_paramètre: z64

    /* Voir index properties et named properties https://webidl.spec.whatwg.org/#dfn-supported-property-indices */
    est_getter := faux
    est_setter := faux
}

Interface :: struct {
    nom: chaine
    parent: chaine
    paramètres: [..]Paramètre
    attributs: [..]Attribut
    fonctions: [..]Fonction
    mixins: [..]chaine

    création_générée := faux
    /* vrai si nom == "Window" pour éviter de faire trop de comparaisons de chaines. */
    est_window := faux
    est_mixin := faux
}

donne_paramètres :: fonc (interface: *Interface, fonction: *Fonction) -> []Paramètre
{
    résultat: []Paramètre
    résultat.pointeur = interface.paramètres.pointeur + fonction.premier_paramètre
    résultat.taille = fonction.dernier_paramètre - fonction.premier_paramètre
    retourne résultat
}

imprime_interface :: fonc (interface: *Interface)
{
    imprime("interface % ", interface.nom)
    si interface.parent {
        imprime(": % ", interface.parent)
    }
    imprime("{\n")

    pour interface.fonctions {
        imprime("    ")
        imprime_type(*it.type_retour)
        imprime(" %", it.nom)

        virgule := "("

        pour param dans it.paramètres {
            imprime("%", virgule)
            imprime_type(*param.type)
            imprime(" %", param.nom)
            virgule = ", "
        }

        imprime(");\n")
    }

    imprime("\n")

    pour interface.attributs {
        imprime("    ")
        si it.lecture_seule {
            imprime("readonly ")
        }
        imprime("attribute ")
        imprime_type(*it.type)
        imprime(" %", it.nom)
        imprime(";\n")
    }

    imprime("}\n")
}

génère_enveloppes_javascript :: fonc (enchaineuse: *Enchaineuse, interface: *Interface)
{
    griffonier: Griffonier

    interface.est_window = interface.nom == "Window"

    pour * interface.fonctions {
        génère_enveloppe_javascript(enchaineuse, interface, it, *griffonier)
    }

    pour * interface.attributs {
        génère_enveloppe_javascript_getter(enchaineuse, interface, it, *griffonier)

        saufsi it.lecture_seule {
            génère_enveloppe_javascript_setter(enchaineuse, interface, it, *griffonier)
        }
    }

    génère_création_prototype(enchaineuse, interface)
}

génère_création_prototype :: fonc (enchaineuse: *Enchaineuse, interface: *Interface)
{
    ajoute_au_tampon(enchaineuse, "crée_prototype_", interface.nom, " :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object\n")
    ajoute_au_tampon(enchaineuse, "{\n")

    ajoute_au_tampon(enchaineuse, "    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)\n")

    pour * interface.fonctions {
        ajoute_au_tampon(enchaineuse, "    JavaScript.ajoute_fonction_native(résultat, \"", it.nom, "\", ", interface.nom, "_", it.nom, ")\n")
    }

    pour * interface.attributs {
        ajoute_au_tampon(enchaineuse, "    JavaScript.ajoute_propriété(résultat, crée_chaine_utf16_unique(\"", it.nom, "\"), ")
        ajoute_au_tampon(enchaineuse, "get_", interface.nom, "_", it.nom, ", ")
        si it.lecture_seule {
            ajoute_au_tampon(enchaineuse, "nul, ")
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "set_", interface.nom, "_", it.nom, ", ")
        }
        ajoute_au_tampon(enchaineuse, "JavaScript.DrapeauxPropriété.zéro)\n")
    }
    
    ajoute_au_tampon(enchaineuse, "    retourne résultat\n")
    ajoute_au_tampon(enchaineuse, "}\n")
}

génère_enveloppe_javascript :: fonc (enchaineuse: *Enchaineuse, interface: *Interface, fonction: *Fonction, griffonier: *Griffonier)
{
    paramètres := interface.donne_paramètres(fonction)

    ajoute_au_tampon(enchaineuse, interface.nom, "_", fonction.nom, " :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord\n")
    ajoute_au_tampon(enchaineuse, "{\n")

    génère_code_conversion_this(enchaineuse, interface)

    // Conversion des paramètres
    pour paramètres {
        génère_code_conversion_argument(enchaineuse, it.nom, index_it, *it.type)
    }

    // Appel de la fonction.
    ajoute_au_tampon(enchaineuse, "    ")
    si fonction.type_retour.nom != "undefined" {
        ajoute_au_tampon(enchaineuse, "résultat := ")
    }

    préfixe := ""
    si fonction.est_getter {
        préfixe = "donne_"
    }
    sinon si fonction.est_setter {
        préfixe = "définis_"
    }

    ajoute_au_tampon(enchaineuse, préfixe, donne_nom_snake_case(fonction.nom, griffonier))

    virgule := "(object_this, "
    si paramètres.taille == 0 {
        ajoute_au_tampon(enchaineuse, "(object_this")
    }
    sinon pour paramètres {
        ajoute_au_tampon(enchaineuse, virgule, it.nom)
        virgule = ", "
    }
    ajoute_au_tampon(enchaineuse, ")\n")

    génère_code_conversion_résultat(enchaineuse, *fonction.type_retour)

    ajoute_au_tampon(enchaineuse, "}\n")
}

génère_enveloppe_javascript_getter :: fonc (enchaineuse: *Enchaineuse, interface: *Interface, attribut: *Attribut, griffonier: *Griffonier)
{
    nom_snake_case := donne_nom_snake_case(attribut.nom, griffonier)

    ajoute_au_tampon(enchaineuse, "get_", interface.nom, "_", attribut.nom, " :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord\n")
    ajoute_au_tampon(enchaineuse, "{\n")

    génère_code_conversion_this(enchaineuse, interface)

    // Appel de la fonction
    si attribut.reflect {
        attribut_réfléchis := nom_snake_case
        si attribut.attribut_réfléchis {
            attribut_réfléchis = donne_nom_snake_case(attribut.attribut_réfléchis, griffonier)
        }
        ajoute_au_tampon(enchaineuse, "    résultat := get_an_attribute_value(object_this, ATTR_", attribut_réfléchis, ")\n")
    }
    sinon si attribut.est_membre {
        ajoute_au_tampon(enchaineuse, "    résultat := object_this.", nom_snake_case, "\n")
    }
    sinon si attribut.est_idl_event_handler {
        ajoute_au_tampon(enchaineuse, "    résultat := get_event_handler_idl_attribute(object_this, EVT_", attribut.nom, ");\n")
    }
    sinon {
        ajoute_au_tampon(enchaineuse, "    résultat := donne_", nom_snake_case, "(object_this)\n")
    }

    génère_code_conversion_résultat(enchaineuse, *attribut.type)

    ajoute_au_tampon(enchaineuse, "}\n")
}

génère_enveloppe_javascript_setter :: fonc (enchaineuse: *Enchaineuse, interface: *Interface, attribut: *Attribut, griffonier: *Griffonier)
{
    nom_snake_case := donne_nom_snake_case(attribut.nom, griffonier)

    ajoute_au_tampon(enchaineuse, "set_", interface.nom, "_", attribut.nom, " :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord\n")
    ajoute_au_tampon(enchaineuse, "{\n")

    génère_code_conversion_this(enchaineuse, interface)

    génère_code_conversion_argument(enchaineuse, attribut.nom, 0, *attribut.type)

    // Appel de la fonction
    si attribut.reflect {
        attribut_réfléchis := nom_snake_case
        si attribut.attribut_réfléchis {
            attribut_réfléchis = donne_nom_snake_case(attribut.attribut_réfléchis, griffonier)
        }
        ajoute_au_tampon(enchaineuse, "    set_an_attribute_value(object_this, ATTR_", attribut_réfléchis, ", ", attribut.nom, ")\n")
    }
    sinon si attribut.est_membre {
        ajoute_au_tampon(enchaineuse, "    object_this.", nom_snake_case, " =", attribut.nom, "\n")
    }
    sinon si attribut.est_idl_event_handler {
        ajoute_au_tampon(enchaineuse, "    set_event_handler_idl_attribute(object_this, EVT_", attribut.nom, ", ", attribut.nom, ");\n")
    }
    sinon {
        ajoute_au_tampon(enchaineuse, "    définis_", nom_snake_case, "(object_this, ", attribut.nom, ")\n")
    }

    ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.js_undefined)\n")
    ajoute_au_tampon(enchaineuse, "}\n")
}

génère_code_conversion_this :: fonc (enchaineuse: *Enchaineuse, interface: *Interface)
{
    si interface.est_window {
        /* Puisque Window est l'objet global, si this est undefined, nous utilisons l'objet global du realm courant. */
        ajoute_au_tampon(enchaineuse, "    si JavaScript.est_undefined(this_value) {\n")
        ajoute_au_tampon(enchaineuse, "        realm := JavaScript.donne_realm(interpréteuse)\n")
        ajoute_au_tampon(enchaineuse, "        this_value.Object = realm.global_object\n")
        ajoute_au_tampon(enchaineuse, "    }\n")
    }

    ajoute_au_tampon(enchaineuse, "    completion := donne_platform_object(interpréteuse, this_value, ", interface.nom, ")\n")
    ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
    ajoute_au_tampon(enchaineuse, "    object_this := JavaScript.donne_objet(completion.valeur.V) comme *", interface.nom, "\n")
}

génère_code_conversion_argument :: fonc (enchaineuse: *Enchaineuse, nom: chaine, index: z64, type: *Type)
{
    ajoute_au_tampon(enchaineuse, "    valeur_", nom, " := JavaScript.donne_argument(params, ", index, ")\n")
    si type.nom == "DOMString" {
        ajoute_au_tampon(enchaineuse, "    completion = JavaScript.to_string(interpréteuse, valeur_", nom, ")\n")
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, " := completion.valeur.V.String.texte\n")
    }
    sinon si type.nom == "unsigned long" {
        ajoute_au_tampon(enchaineuse, "    completion = convert_to_int(interpréteuse, valeur_", nom, ", 32, Signedness.Unsigned)\n")
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, " := completion.valeur.V.Number comme n32\n")
    }
    sinon si type.nom == "long" {
        ajoute_au_tampon(enchaineuse, "    completion = convert_to_int(interpréteuse, valeur_", nom, ", 32, Signedness.Signed)\n")
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, " := completion.valeur.V.Number comme z32\n")
    }
    sinon si type.nom == "double" || type.nom == "unrestricted double" {
        ajoute_au_tampon(enchaineuse, "    completion = JavaScript.to_number(interpréteuse, valeur_", nom, ")\n")
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, " := completion.valeur.V.Number\n")
    }
    sinon si type.nom == "EventListener" {
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_object(valeur_", nom, ") {\n")
        ajoute_au_tampon(enchaineuse, "        retourne JavaScript.lance_type_error(interpréteuse, \"argument ", index, " is not callable\")\n")
        ajoute_au_tampon(enchaineuse, "    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, ":= crée_event_listener(JavaScript.donne_objet(valeur_", nom, "))\n")
    }
    sinon si type.nom == "EventHandler" {
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_object(valeur_", nom, ") {\n")
        ajoute_au_tampon(enchaineuse, "        retourne JavaScript.lance_type_error(interpréteuse, \"argument ", index, " is not callable\")\n")
        ajoute_au_tampon(enchaineuse, "    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, ":= crée_event_handler(JavaScript.donne_objet(valeur_", nom, "))\n")
    }
    sinon si type.nom == "Function" {
        indentation := ""
        si type.nulifiable {
            ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_nulle(valeur_", nom, ") {\n")
            indentation = "    "
        }

        ajoute_au_tampon(enchaineuse, indentation, "    saufsi JavaScript.is_callable(valeur_", nom, ") {\n")
        ajoute_au_tampon(enchaineuse, indentation, "        retourne JavaScript.lance_type_error(interpréteuse, \"argument ", index, " is not callable\")\n")
        ajoute_au_tampon(enchaineuse, indentation, "    }\n")
        ajoute_au_tampon(enchaineuse, indentation, "    ", nom, " := JavaScript.donne_objet(valeur_", nom, ")\n")

        si type.nulifiable {
            ajoute_au_tampon(enchaineuse, "    }\n")
        }
    }
    sinon {
        ajoute_au_tampon(enchaineuse, "    completion = donne_platform_object(interpréteuse, valeur_", nom, ", ", type.nom, ")\n")
        ajoute_au_tampon(enchaineuse, "    saufsi JavaScript.est_normal(completion) {\n        retourne completion;\n    }\n")
        ajoute_au_tampon(enchaineuse, "    ", nom, " := JavaScript.donne_objet(completion.valeur.V) comme *", type.nom, "\n")
    }
}

génère_code_conversion_résultat :: fonc (enchaineuse: *Enchaineuse, type: *Type)
{
    si type.nom == "undefined" {
        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.js_undefined)\n")
    }
    sinon si type.nom == "DOMString" {
        ajoute_au_tampon(enchaineuse, "    str_unique: ChaineUTF16Unique\n")
        ajoute_au_tampon(enchaineuse, "    #si type_de(résultat) != type_de(ChaineUTF16Unique) {\n")
        ajoute_au_tampon(enchaineuse, "        str_unique = crée_chaine_utf16_unique(résultat)\n")
        ajoute_au_tampon(enchaineuse, "    }\n")
        ajoute_au_tampon(enchaineuse, "    sinon {\n")
        ajoute_au_tampon(enchaineuse, "        str_unique = résultat\n")
        ajoute_au_tampon(enchaineuse, "    }\n")
        ajoute_au_tampon(enchaineuse, "    str := JavaScript.crée_chaine(JavaScript.donne_realm(interpréteuse), str_unique)\n")
        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.Valeur(String = str))\n")
    }
    sinon si type.nom == "unsigned long" || type.nom == "long" {
        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.Valeur(Number = résultat comme r64))\n")
    }
    sinon si type.nom == "double" || type.nom == "unrestricted double" {
        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.Valeur(Number = résultat))\n")
    }
    sinon si type.nom == "EventHandler" {
        si type.nulifiable {
            ajoute_au_tampon(enchaineuse, "    saufsi résultat {\n")
            ajoute_au_tampon(enchaineuse, "        retourne JavaScript.normal_completion(JavaScript.js_null)\n")
            ajoute_au_tampon(enchaineuse, "    }\n")
        }

        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = résultat.object))\n")
    }
    sinon {
        si type.nulifiable {
            ajoute_au_tampon(enchaineuse, "    saufsi résultat {\n")
            ajoute_au_tampon(enchaineuse, "        retourne JavaScript.normal_completion(JavaScript.js_null)\n")
            ajoute_au_tampon(enchaineuse, "    }\n")
        }

        ajoute_au_tampon(enchaineuse, "    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = résultat))\n")
    }
}

imprime_type :: fonc (type: *Type)
{
    imprime("%", type.nom)
    si type.nulifiable {
        imprime("?")
    }
}

parse_fichier :: fonc (chemin: CheminFichier, texte: chaine, interfaces: *Interfaces)
{
    parseuse := crée_parseuse(chemin, texte)

    tantque parseuse.début < parseuse.fin {
        lexème := donne_lexème_suivant(*parseuse)

        si parseuse.début >= parseuse.fin {
            arrête
        }

        si lexème == "interface" {
            parse_interface(*parseuse, interfaces)
            continue
        }

        interface := donne_interface(interfaces, lexème)
        si interface {
            lexème = donne_lexème_suivant(*parseuse)
            si lexème != "includes" {
                rapporte_erreur(*parseuse, "attendu 'includes'", lexème)
            }

            lexème = donne_lexème_suivant(*parseuse)
            tableau_ajoute(*interface.mixins, lexème)

            consomme_point_virgule(*parseuse)
            continue
        }

        rapporte_erreur(*parseuse, "lexème inattendu", lexème)
    }
}

parse_interface :: fonc (parseuse: *ParseuseInterface, interfaces: *Interfaces)
{
    lexème := donne_lexème_suivant(parseuse)

    est_mixin := faux
    si lexème == "mixin" {
        est_mixin = vrai
        lexème = donne_lexème_suivant(parseuse)
    }

    résultat := interfaces.crée_interface(lexème)
    résultat.est_mixin = est_mixin

    si consomme_caractère(parseuse, ':') {
        résultat.parent = donne_lexème_suivant(parseuse)
    }

    saufsi consomme_caractère(parseuse, '{') {
        rapporte_erreur(parseuse, "attendu '{'", donne_lexème_suivant(parseuse))
    }

    boucle {
        si consomme_caractère(parseuse, '}') {
            arrête
        }

        si apparie(parseuse, '[') || apparie(parseuse, "readonly") || apparie(parseuse, "attribute") {
            parse_un_attribut(parseuse, résultat)
        }
        sinon {
            parse_une_fonction(parseuse, résultat)
        }
    }
}

parse_une_fonction :: fonc (parseuse: *ParseuseInterface, interface: *Interface)
{
    résultat: Fonction

    si parseuse.apparie("getter") {
        résultat.est_getter = vrai
        _ := donne_lexème_suivant(parseuse)
    }
    sinon si parseuse.apparie("setter") {
        _ := donne_lexème_suivant(parseuse)
    }

    parse_type(parseuse, *résultat.type_retour)
    résultat.nom = donne_lexème_suivant(parseuse)
    résultat.premier_paramètre = interface.paramètres.taille

    saufsi consomme_caractère(parseuse, '(') {
        rapporte_erreur(parseuse, "attendu '('", donne_lexème_suivant(parseuse))
    }

    boucle {
        si consomme_caractère(parseuse, ')') {
            arrête
        }

        paramètre: Paramètre
        parse_type(parseuse, *paramètre.type)
        paramètre.nom = donne_lexème_suivant(parseuse)

        tableau_ajoute(*interface.paramètres, paramètre)

        si consomme_caractère(parseuse, ',') {
            continue
        }

        saufsi consomme_caractère(parseuse, ')') {
            rapporte_erreur(parseuse, "attendu ')", donne_lexème_suivant(parseuse))
        }

        arrête
    }

    résultat.dernier_paramètre = interface.paramètres.taille
    tableau_ajoute(*interface.fonctions, résultat)

    consomme_point_virgule(parseuse)
}

parse_un_attribut :: fonc (parseuse: *ParseuseInterface, interface: *Interface)
{
    résultat: Attribut

    si parseuse.consomme_caractère('[') {
        lexème := donne_lexème_suivant(parseuse)
        si lexème == "Reflect" {
            résultat.reflect = vrai
        }
        sinon si lexème == "Member" {
            résultat.est_membre = vrai
        }
        sinon si lexème == "IDLEventHandler" {
            résultat.est_idl_event_handler = vrai
        }
        sinon {
            rapporte_erreur(parseuse, "attribut inconnu", lexème)
        }

        si parseuse.consomme_caractère('=') {
            résultat.attribut_réfléchis = parseuse.donne_lexème_suivant()
        }

        saufsi parseuse.consomme_caractère(']') {
            rapporte_erreur(parseuse, "attendu ']'", parseuse.donne_lexème_suivant())
        }
    }

    lexème := donne_lexème_suivant(parseuse)
    si lexème == "readonly" {
        résultat.lecture_seule = vrai
        lexème = donne_lexème_suivant(parseuse)
    }

    saufsi lexème == "attribute" {
        rapporte_erreur(parseuse, "attendu 'attribute'", lexème)
    }

    parse_type(parseuse, *résultat.type)

    lexème = donne_lexème_suivant(parseuse)

    résultat.nom = lexème

    tableau_ajoute(*interface.attributs, résultat)

    consomme_point_virgule(parseuse)
}

rapporte_erreur :: fonc (parseuse: *ParseuseInterface, message: chaine, lexème_obtenu: chaine)
{
    message_erreur := imprime_chaine("%, obtenu '%'\n", message, lexème_obtenu)
    info := donne_info_erreur_pour_lexème(parseuse, lexème_obtenu)
    espace := compilatrice_espace_courant()
    compilatrice_rapporte_erreur_externe(espace, message_erreur, parseuse.chemin.chn, info.texte_ligne, info.numéro_ligne, info.index_colonne, info.index_colonne_début, info.index_colonne_fin)
}

InfoErreur :: struct {
    texte_ligne := ""
    numéro_ligne := 0
    index_colonne := -1
    index_colonne_début := -1
    index_colonne_fin := -1
}

donne_info_erreur_pour_lexème :: fonc (parseuse: *ParseuseInterface, lexème: chaine) -> InfoErreur
{
    résultat: InfoErreur
    résultat.numéro_ligne = 1

    début_texte := parseuse.texte.pointeur
    fin_texte := parseuse.texte.pointeur + parseuse.texte.taille
    début_lexème := lexème.pointeur

    it := début_texte
    pos_dernière_ligne := début_texte
    tantque it < début_lexème {
        si mémoire(it) == '\n' {
            résultat.numéro_ligne += 1
            pos_dernière_ligne = it + 1
        }
        it += 1
    }

    it = début_lexème
    tantque it < fin_texte {
        si mémoire(it) == '\n' {
            arrête
        }
        it += 1
    }

    résultat.texte_ligne = construit_chaine(pos_dernière_ligne, it - pos_dernière_ligne)
    résultat.index_colonne = (début_lexème - pos_dernière_ligne) comme z32
    résultat.index_colonne_début = résultat.index_colonne
    résultat.index_colonne_fin = résultat.index_colonne + lexème.taille comme z32

    retourne résultat
}

ParseuseInterface :: struct {
    début: *z8
    fin: *z8
    chemin: CheminFichier
    texte: chaine
}

crée_parseuse :: fonc (chemin: CheminFichier, texte: chaine) -> ParseuseInterface
{
    résultat : ParseuseInterface = ---
    résultat.début = texte.pointeur
    résultat.fin = texte.pointeur + texte.taille
    résultat.chemin = chemin
    résultat.texte = texte
    retourne résultat
}

apparie :: fonc (parseuse: *ParseuseInterface, texte: chaine) -> bool
{
    consomme_espaces_blanches(parseuse)
    si parseuse.début >= parseuse.fin {
        retourne faux
    }

    taille := parseuse.fin - parseuse.début
    si taille < texte.taille {
        retourne faux
    }

    chn := construit_chaine(parseuse.début, texte.taille)
    retourne chn == texte
}

apparie :: fonc (parseuse: *ParseuseInterface, c: z8) -> bool
{
    consomme_espaces_blanches(parseuse)
    si parseuse.début >= parseuse.fin {
        retourne faux
    }
    retourne mémoire(parseuse.début) == c
}

parse_type :: fonc (parseuse: *ParseuseInterface, résultat: *Type)
{
    nom_type := donne_lexème_suivant(parseuse)

    si nom_type == "unsigned" {
        nom_mot := donne_lexème_suivant(parseuse)

        si nom_mot == "long" {
            nom_type = "unsigned long"
        }
        sinon {
            rapporte_erreur(parseuse, "attendu 'long'", nom_mot)
        }
    }
    sinon si nom_type == "unrestricted" {
        nom_mot := donne_lexème_suivant(parseuse)

        si nom_mot == "double" {
            nom_type = "unrestricted double"
        }
        sinon {
            rapporte_erreur(parseuse, "attendu 'double'", nom_mot)
        }
    }

    résultat.nom = nom_type
    résultat.nulifiable = consomme_caractère(parseuse, '?')
}

donne_lexème_suivant :: fonc (parseuse: *ParseuseInterface) -> chaine
{
    consomme_espaces_blanches(parseuse)

    si parseuse.début >= parseuse.fin {
        retourne ""
    }

    résultat : chaine = ---
    résultat.pointeur = parseuse.début
    résultat.taille = 0

    tantque parseuse.début < parseuse.fin {
        c := mémoire(parseuse.début)
        si ('a' <= c <= 'z') || ('A' <= c <= 'Z') || ('0' <= c <= '9') {
            parseuse.début += 1
            résultat.taille += 1
            continue
        }

        arrête
    }

    retourne résultat
}

consomme_caractère :: fonc (parseuse: *ParseuseInterface, c: z8) -> bool
{
    consomme_espaces_blanches(parseuse)
    si parseuse.début >= parseuse.fin {
        retourne faux
    }

    caractère := mémoire(parseuse.début)
    si c != caractère {
        retourne faux
    }

    parseuse.début += 1
    retourne vrai
}

consomme_point_virgule :: fonc (parseuse: *ParseuseInterface)
{
    saufsi consomme_caractère(parseuse, ';') {
        rapporte_erreur(parseuse, "attendu ';", donne_lexème_suivant(parseuse))
    }
}

consomme_espaces_blanches :: fonc (parseuse: *ParseuseInterface)
{
    tantque parseuse.début < parseuse.fin {
        si est_espace_blanc(mémoire(parseuse.début)) {
            parseuse.début += 1
            continue
        }

        chn := construit_chaine(parseuse.début, parseuse.fin - parseuse.début)

        si chn.commence_par("//") {
            parseuse.début += 2
            tantque parseuse.début < parseuse.fin {
                si mémoire(parseuse.début) == '\n' {
                    arrête
                }

                parseuse.début += 1
            }

            continue
        }

        si chn.commence_par("/*") {
            parseuse.début += 2
            chn = avance(chn, 2)
            tantque parseuse.début < parseuse.fin {
                si chn.commence_par("*/") {
                    chn = avance(chn, 2)
                    parseuse.début += 2
                    arrête
                }
                parseuse.début += 1
                chn = avance(chn, 1)
            }

            continue
        }

        arrête
    }
}
