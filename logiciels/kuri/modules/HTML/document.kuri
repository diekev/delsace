importe Chaine
importe #inemployé CSS
importe Fondation
importe Internet

/* ------------------------------------------------------------------------- */
/** \nom Document.
 * https://dom.spec.whatwg.org/#document
 * \{ */

Encodage :: énum {
    UTF8
    UTF8LE
    UTF8BE
}

ModeDocument :: énum {
    NO_QUIRKS
    QUIRKS
    LIMITED_QUIRKS
}

formatte_mode_document :: fonc (enchaineuse: *Enchaineuse, mode: *ModeDocument)
{
    saufsi mode {
        retourne
    }
    discr mémoire(mode) {
        NO_QUIRKS {
            ajoute_au_tampon(enchaineuse, "no-quirks")
        }
        QUIRKS {
            ajoute_au_tampon(enchaineuse, "quirks")
        }
        LIMITED_QUIRKS {
            ajoute_au_tampon(enchaineuse, "limited-quirks")
        }
    }
} @FormattageImpression

DOMHighResTimeStamp :: r64

/* https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info */
DocumentLoadTimingInfo :: struct {
    navigation_start_time: z64
    DOM_interactive_time: DOMHighResTimeStamp
    DOM_content_loaded_event_start_time: DOMHighResTimeStamp
    DOM_content_loaded_event_end_time: DOMHighResTimeStamp
    DOM_complete_time: DOMHighResTimeStamp
    load_event_start_time: DOMHighResTimeStamp
    load_event_end_time: DOMHighResTimeStamp
}

Document :: struct {
    empl base: Noeud
    table = *table_virtuelle_document

    type_contenu: chaine
    type: chaine
    url: URI
    encodage: Encodage
    mode: ModeDocument
    permets_racines_shadow_déclaratives: bool

    pending_parsing_blocking_script: *HTMLScriptElement

    la_parseuse_ne_peut_changer_le_mode: bool

    origin: Origin
    browsing_context: *BrowsingContext
    permissions_policy: PermissionsPolicy
    active_sandboxing_flags: SandboxingFlags
    load_timing_info: DocumentLoadTimingInfo
    about_base_url: Optionnel(URI)

    referrer: chaine /* Peut être vide. */

    is_initial_about_blank: bool

    /* CSS. */
    feuilles_de_style: [..]*CSS.CSSStyleSheet
    arbre_de_disposition: *CSS.ArbreDeDisposition

    noeud_survolé: *Élément
}

#portée_fichier

table_virtuelle_document := TableVirtuelleÉlément(
    sur_destruction = document_sur_destruction
)

document_sur_destruction :: fonc (base: *Noeud)
{
    document := base comme *Document
    CSS.détruit_arbre(document.arbre_de_disposition)
    déloge_tableau_et_ses_éléments(document.feuilles_de_style, CSS.détruit_feuille_de_style)
    déloge(document)
}

#portée_export

crée_noeud_document :: fonc () -> *Document
{
    document := loge(Document)
    document.genre = GenreNoeud.Document
    document.encodage = Encodage.UTF8
    document.mode = ModeDocument.NO_QUIRKS
    document.type_contenu = "application/xml"
    document.type = "xml"
    document.url = URI("about:blank")
    document.document = document

    retourne document
}

est_en_mode_quirks :: fonc (document: *Document) -> bool
{
    retourne document.mode == ModeDocument.QUIRKS
}

/* https://html.spec.whatwg.org/multipage/iframe-embed-object.html#an-iframe-srcdoc-document */
est_iframe_srcdoc :: fonc (document: *Document) -> bool
{
    retourne document.url.uri == "about:srcdoc"
}

/* https://html.spec.whatwg.org/multipage/document-sequences.html#fully-active */
est_fully_active :: fonc (document: *Document @inutilisée) -> bool
{
    /* À FAIRE : A Document d is said to be fully active when d is the active document
     *           of a navigable navigable, and either navigable is a top-level traversable
     *           or navigable's container document is fully active. */
    retourne faux
}

/* https://html.spec.whatwg.org/multipage/urls-and-fetching.html#document-base-url */
donne_base_url :: fonc (document: *Document) -> URI
{
    // À FAIRE : implémente
    retourne document.url
}

donne_doctype :: fonc (document: *Document) -> *NoeudTypeDocument
{
    pour document.enfants {
        si it.genre == GenreNoeud.TypeDocument {
            retourne it comme *NoeudTypeDocument
        }
    }
    retourne nul
}

donne_title_element :: fonc (document: *Document) -> *Élément
{
    retourne donne_premier_élément_de_type(document, TAG_title)
}

donne_premier_élément_de_type :: fonc (noeud: *Noeud, tag: DOMString) -> *Élément
{
    si noeud.est_élément_type(tag) {
        retourne noeud comme *Élément
    }

    pour noeud.enfants {
        élément := donne_premier_élément_de_type(it, tag)
        si élément {
            retourne élément
        }
    }

    retourne nul
}

/* https://dom.spec.whatwg.org/#document-element */
donne_élément_document :: fonc (document: *Document) -> *Élément
{
    pour document.enfants {
        si it.est_élément() {
            retourne it comme *Élément
        }
    }
    retourne nul
}

/* https://html.spec.whatwg.org/multipage/dom.html#dom-tree-accessors */
donne_élément_html :: fonc (document: *Document) -> *HTMLHtmlElement
{
    élément := donne_élément_document(document)
    si élément && élément.texte == TAG_html {
        retourne élément comme *HTMLHtmlElement
    }
    retourne nul
}

/* https://html.spec.whatwg.org/multipage/dom.html#the-body-element-2 */
donne_élément_body :: fonc (document: *Document) -> *Élément
{
    élément_html := document.donne_élément_html()
    si élément_html {
        pour élément_html.enfants {
            si it.est_élément_type(TAG_body) || it.est_élément_type(TAG_frameset) {
                retourne it comme *Élément
            }
        }
    }
    retourne nul
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom CSS
 * \{ */

/* À FAIRE : standardise https://drafts.csswg.org/cssom/#add-a-css-style-sheet */
ajoute_feuille_de_style :: fonc (document: *Document, feuille_de_style: *CSS.CSSStyleSheet)
{
    tableau_ajoute(*document.feuilles_de_style, feuille_de_style)
}

définis_noeud_survolé :: fonc (document: *Document, noeud: *Élément)
{
    si document.noeud_survolé == noeud {
        retourne
    }

    // À FAIRE : ajout de :hover, curseur
    document.noeud_survolé = noeud
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudTypeDocument.
 * https://dom.spec.whatwg.org/#documenttype
 * \{ */

NoeudTypeDocument :: struct {
    empl base: Noeud
    table = *table_virtuelle_type_document

    nom: DOMString
    public_id: DOMString
    system_id: DOMString
}

crée_noeud_doctype :: fonc (document: *Document) -> *NoeudTypeDocument
{
    doctype := loge(NoeudTypeDocument)
    doctype.genre = GenreNoeud.TypeDocument
    doctype.document = document

    retourne doctype
}

#portée_fichier

table_virtuelle_type_document := TableVirtuelleÉlément(
    sur_destruction = type_document_sur_destruction
)

type_document_sur_destruction :: fonc (base: *Noeud)
{
    type_document := base comme *NoeudTypeDocument
    déloge(type_document)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudFragmentDocument.
 * https://dom.spec.whatwg.org/#documentfragment
 * \{ */

NoeudFragmentDocument :: struct {
    empl base: Noeud
    table = *table_virtuelle_fragment_document
}

crée_noeud_fragment_document :: fonc (document: *Document) -> *NoeudFragmentDocument
{
    doctype := loge(NoeudFragmentDocument)
    doctype.genre = GenreNoeud.FragmentDocument
    doctype.document = document

    retourne doctype
}

#portée_fichier

table_virtuelle_fragment_document := TableVirtuelleÉlément(
    sur_destruction = fragment_document_sur_destruction
)

fragment_document_sur_destruction :: fonc (base: *Noeud)
{
    fragment_document := base comme *NoeudFragmentDocument
    déloge(fragment_document)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudDonnéesCaractères.
 * Correspond à CharacterDataNode
 * https://dom.spec.whatwg.org/#characterdata
 * \{ */

NoeudDonnéesCaractères :: struct {
    empl base: Noeud

    données: ChaineUTF16
}

est_données_caractères :: fonc (noeud: Noeud)
{
    discr noeud.genre {
        Commentaire,
        Texte,
        ProcessingInstruction {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudTexte.
 * https://dom.spec.whatwg.org/#text
 * \{ */

NoeudTexte :: struct {
    empl base_données: NoeudDonnéesCaractères
    table = *table_virtuelle_texte
}

crée_noeud_texte :: fonc (document: *Document) -> *NoeudTexte
{
    texte := loge(NoeudTexte)
    texte.genre = GenreNoeud.Texte
    texte.document = document

    retourne texte
}

/* https://html.spec.whatwg.org/multipage/dom.html#inter-element-whitespace */
est_espace_blanche_entre_élément :: fonc (texte: *NoeudTexte) -> bool
{
    retourne est_vide_ou_uniquement_espaces_blanches(texte.données)
}

#portée_fichier

table_virtuelle_texte := TableVirtuelleÉlément(
    sur_destruction = texte_sur_destruction
)

texte_sur_destruction :: fonc (base: *Noeud)
{
    texte := base comme *NoeudTexte
    détruit_chaine(texte.données)
    déloge(texte)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudSectionCDATA.
 * https://dom.spec.whatwg.org/#cdatasection
 * \{ */

NoeudSectionCDATA :: struct {
    empl base_texte: NoeudTexte
    table = *table_virtuelle_section_cdata
}

crée_noeud_section_cdata :: fonc (document: *Document) -> *NoeudTexte
{
    texte := loge(NoeudSectionCDATA)
    texte.genre = GenreNoeud.Section_CDATA
    texte.document = document

    retourne texte
}

#portée_fichier

table_virtuelle_section_cdata := TableVirtuelleÉlément(
    sur_destruction = section_cdata_sur_destruction
)

section_cdata_sur_destruction :: fonc (base: *Noeud)
{
    section_cdata := base comme *NoeudSectionCDATA
    détruit_chaine(section_cdata.données)
    déloge(section_cdata)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudCommentaire.
 * https://dom.spec.whatwg.org/#comment
 * \{ */

NoeudCommentaire :: struct {
    empl base_données: NoeudDonnéesCaractères
    table = *table_virtuelle_commentaire
}

crée_noeud_commentaire :: fonc (document: *Document, données: ChaineUTF16) -> *NoeudCommentaire
{
    commentaire := loge(NoeudCommentaire)
    commentaire.genre = GenreNoeud.Commentaire
    commentaire.document = document
    commentaire.données = copie_chaine(données)

    retourne commentaire
}

#portée_fichier

table_virtuelle_commentaire := TableVirtuelleÉlément(
    sur_destruction = commentaire_sur_destruction
)

commentaire_sur_destruction :: fonc (base: *Noeud)
{
    commentaire := base comme *NoeudCommentaire
    détruit_chaine(commentaire.données)
    déloge(commentaire)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudProcessingInstruction.
 * https://dom.spec.whatwg.org/#processinginstruction
 * \{ */

NoeudProcessingInstruction :: struct {
    empl base_données: NoeudDonnéesCaractères
    table = *table_virtuelle_processing_instruction

    cible: ChaineUTF16
}

crée_noeud_processing_instruction :: fonc (document: *Document, données: ChaineUTF16) -> *NoeudCommentaire
{
    résultat := loge(NoeudCommentaire)
    résultat.genre = GenreNoeud.Commentaire
    résultat.document = document
    résultat.données = copie_chaine(données)

    retourne résultat
}

#portée_fichier

table_virtuelle_processing_instruction := TableVirtuelleÉlément(
    sur_destruction = processing_instruction_sur_destruction
)

processing_instruction_sur_destruction :: fonc (base: *Noeud)
{
    processing_instruction := base comme *NoeudProcessingInstruction
    détruit_chaine(processing_instruction.données)
    détruit_chaine(processing_instruction.cible)
    déloge(processing_instruction)
}

#portée_export

/** \} */
