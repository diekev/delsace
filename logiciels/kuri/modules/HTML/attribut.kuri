importe Chaine
importe Fondation
importe #inemployé JavaScript

/* Représentation d'un attribut lors du lexage. */
AttributLexé :: struct {
    nom: DOMString
    valeur: DOMString
}

détruit_attributs :: fonc (attributs: &[..]AttributLexé)
{
    déloge(attributs)
}

cherche_attribut :: fonc (attributs: [..]AttributLexé, nom: DOMString) -> *AttributLexé
{
    pour * attributs {
        si it.nom == nom {
            retourne it
        }
    }

    retourne nul
}

ajoute_attribut :: fonc (attributs: *[..]AttributLexé, nom: DOMString, valeur: DOMString)
{
    attribut := AttributLexé(nom = nom, valeur = valeur)
    tableau_ajoute(attributs, attribut)
}

/* ------------------------------------------------------------------------- */
/** \nom Attr.
 * https://dom.spec.whatwg.org/#interface-attr
 * \{ */

Attr :: struct {
    empl base_noeud: Noeud
    table = *table_virtuelle_attr

    namespace: Optionnel(DOMString)
    namespace_prefix: Optionnel(DOMString)
    local_name: DOMString
    valeur: DOMString
    élément: *Élément
}

crée_noeud_attr :: fonc (document: *Document, nom: DOMString, valeur: DOMString) -> *Attr
{
    résultat := crée_platform_object(document.donne_tas_de_mémoire(), document.realm, Attr)
    résultat.document = document
    résultat.genre = GenreNoeud.Attr
    résultat.local_name = nom
    résultat.valeur = valeur
    retourne résultat
}

cherche_attribut :: fonc (attributs: []*Attr, nom: DOMString) -> *Attr
{
    pour attributs {
        si it.local_name == nom {
            retourne it
        }
    }

    retourne nul
}

/* https://dom.spec.whatwg.org/#set-an-existing-attribute-value */
définis_valeur :: fonc (attribut: *Attr, valeur: DOMString)
{
    // 1. If attribute’s element is null, then set attribute’s value to value.
    si attribut.élément == nul {
        attribut.valeur = valeur
    }
    // 2. Otherwise, change attribute to value.
    sinon {
        change_attribut(attribut, valeur)
    }
}

#portée_fichier

table_virtuelle_attr := TableVirtuelleÉlément(
    classe = Attr,
    sur_destruction = noeud_sur_destruction
)

#portée_export

/** \} */
