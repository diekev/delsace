charge "élément"
charge "lexage"

EntréeFormattage :: struct {
    élément: *Élément
    lexème: Lexème
}

est_marqueur :: fonc (entrée: EntréeFormattage) -> bool
{
    retourne entrée.élément == nul
}

ListeÉlémentsActifsFormattage :: struct {
    // À FAIRE : nous devons associer chaque élément avec son lexème
    entrées: []EntréeFormattage
}

détruit_liste :: fonc (liste: *ListeÉlémentsActifsFormattage)
{
    pour liste.entrées {
        détruit_lexème(@it.lexème)
    }

    déloge liste.entrées
}

est_vide :: fonc (liste: *ListeÉlémentsActifsFormattage) -> bool
{
    retourne liste.entrées.taille == 0
}

première_entrée :: fonc (liste: *ListeÉlémentsActifsFormattage) -> EntréeFormattage
{
    retourne liste.entrées[0]
}

dernière_entrée :: fonc (liste: *ListeÉlémentsActifsFormattage) -> EntréeFormattage
{
    retourne liste.entrées[liste.entrées.taille - 1]
}

remplace :: fonc (liste: *ListeÉlémentsActifsFormattage, entrée: EntréeFormattage, élément: *Élément) -> EntréeFormattage
{
    pour liste.entrées {
        si it.élément == entrée.élément {
            it.élément = élément
            retourne it
        }
    }

    panique("ne devrait pas arriver")
    retourne EntréeFormattage()
}

entrée_précédente :: fonc (liste: *ListeÉlémentsActifsFormattage, entrée: EntréeFormattage) -> EntréeFormattage
{
    index := 0
    pour liste.entrées {
        si it.élément == entrée.élément {
            arrête
        }

        index += 1
    }

    retourne liste.entrées[index]
}

entrée_suivante :: fonc (liste: *ListeÉlémentsActifsFormattage, entrée: EntréeFormattage) -> EntréeFormattage
{
    index := 0
    pour liste.entrées {
        index += 1

        si it.élément == entrée.élément {
            arrête
        }
    }

    retourne liste.entrées[index]
}

ajoute :: fonc (liste: *ListeÉlémentsActifsFormattage, élément: *Élément, lexème: Lexème)
{
    entrée : EntréeFormattage = ---
    entrée.élément = élément
    entrée.lexème = copie_lexème(@lexème)

    tableau_ajoute(@liste.entrées, entrée)
}

ajoute_marqueur :: fonc (liste: *ListeÉlémentsActifsFormattage)
{
    entrée : EntréeFormattage
    tableau_ajoute(@liste.entrées, entrée)
}

possède :: fonc (liste: *ListeÉlémentsActifsFormattage, élément: *Élément) -> bool
{
    pour liste.entrées {
        si it.élément == élément {
            retourne vrai
        }
    }

    retourne faux
}

élément_avant_marqueur :: fonc (liste: *ListeÉlémentsActifsFormattage, nom_tag: chaine) -> *Élément
{
    i := liste.entrées.taille - 1
    élément_trouvé : *Élément = nul

    tantque i > 0 {
        entrée := liste.entrées[i]

        si entrée.élément == nul {
            retourne élément_trouvé
        }

        si entrée.élément.texte == nom_tag {
            retourne entrée.élément
        }

        i -= 1
    }

    retourne élément_trouvé
}

supprime_élément :: fonc (liste: *ListeÉlémentsActifsFormattage, élément: *Élément)
{
    index : z64 = 0

    pour liste.entrées {
        si it.élément == élément {
            index = index_it
            arrête
        }
    }

    tableau_supprime_index(@liste.entrées, index)
}
