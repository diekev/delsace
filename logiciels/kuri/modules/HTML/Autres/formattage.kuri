/* Programme pour formatter un fichier HTML.
 * Puisque la parseuse tente de corriger le DOM, le fichier formatter possédera les corrections. Par exemple,
 * même si le fichier originale n'avait pas de </head>, le format en aura un. */

importe Chaine
importe Compilatrice
importe Fondation
importe HTML
importe #inemployé JavaScript
importe SysFichier
importe Temps

// #exécute compile_pour_production()
// #exécute compile_pour_profilage()
// #exécute compile_pour_débogage()

est_fichier_html :: fonc (chm: CheminFichier) -> bool
{
    retourne chm.extension() == ".html"
}

principale :: fonc ()
{
    args := arguments_ligne_commande()

    si args.taille != 2 {
        imprime("Utilisation: % FICHIER\n", args[0])
        exit(1)
    }

    chm := CheminFichier(args[1])

    saufsi est_fichier_html(chm) {
        imprime("Le chemin '%' n'a pas l'air de pointer vers un fichier HTML !\n", args[1])
        exit(1)
    }

    diffère imprime("Mémoire utilisée : %o\n", mémoire_utilisée())
    diffère détruit_chaines_internées()

    contenu := contenu_fichier_texte(chm.chn)
    diffère déloge(contenu)

    imprime("%\n", contenu)

    taille_contenu := contenu.taille

    mv: JavaScript.MachineVirtuelle
    JavaScript.initialise_mv(nul, *mv)
    diffère JavaScript.détruit_données_mv(*mv)

    début := maintenant_précis()
    parsat := parse_document(JavaScript.donne_tas_de_mémoire(*mv), contenu)
    diffère détruit(parsat)

    taille_formattée := formatte_document(parsat.document, sortie_standarde())
    temps := début.temps_écoulé_microsecondes()

    imprime("\n")
    imprime("Taille originale : %o\n", FormatEntier(taille_contenu, séparation = 3))
    imprime("Taille formattée : %o\n", FormatEntier(taille_formattée, séparation = 3))
    imprime("Durée de travail : %µ\n", FormatEntier(temps, séparation = 3))
}
