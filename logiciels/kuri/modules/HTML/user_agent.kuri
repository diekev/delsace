importe HTTP
importe Internet
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom UserAgent
 * Structure pouvant être dérivée par les applications clientes peuvent pour
 * définir des contextes de navigation.
 * \{ */

UserAgent :: struct {
    /* https://html.spec.whatwg.org/multipage/document-sequences.html#top-level-traversable-set */
    top_level_traversables: [..]*TraversableNavigable
    /* https://html.spec.whatwg.org/multipage/document-sequences.html#browsing-context-group-set */
    browsing_context_groups: [..]*BrowsingContextGroup

    /* Connexion avec l'interface graphique. */
    rappels_interface: *RappelsInterface
}

détruit_données_user_agent :: fonc (user_agent: *UserAgent)
{
    déloge_tableau_et_ses_éléments(user_agent.top_level_traversables, détruit_traversable)
    déloge_tableau_et_ses_éléments(user_agent.browsing_context_groups, détruit_browsing_context_group)
    si user_agent.rappels_interface {
        détruit_rappels(user_agent.rappels_interface)
        user_agent.rappels_interface = nul
    }
}

définis_rappels_interface :: fonc (user_agent: *UserAgent, rappels: *RappelsInterface)
{
    si user_agent.rappels_interface {
        détruit_rappels(rappels)
    }
    user_agent.rappels_interface = rappels
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Algorithm
 * Structure pour implémenter les routines/callbacks/algorithms de la spec.
 * \{ */

Algorithm :: struct {
    sur_run: fonc(*Algorithm)(rien)
    sur_destruction: fonc(*Algorithm)(rien)
}

run :: fonc (algorithm: *Algorithm)
{
    saufsi algorithm {
        retourne
    }

    si algorithm.sur_run {
        algorithm.sur_run(algorithm)
    }

    si algorithm.sur_destruction {
        algorithm.sur_destruction(algorithm)
    }
}

/** \} */

/* https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources */
SourceDeTâche :: énum {
    ManipulationDOM
    InteractionUtilisateur
    Réseautage
    NavigationEtTraversée
    Rendu
}

/* ------------------------------------------------------------------------- */
/** \nom RappelsInterface
 * \{ */

RappelsInterface :: struct {
    sur_destruction: fonc(*RappelsInterface)(rien)
    sur_lancement_requête: fonc(*RappelsInterface, *Request)(*Response)
    sur_spin_event_loop: fonc(*RappelsInterface)(rien)
    sur_élément_survolé: fonc(*RappelsInterface)(rien)
    sur_requête_rendu: fonc(*RappelsInterface)(rien)
    sur_enfile_une_tâche: fonc(*RappelsInterface, SourceDeTâche, *Algorithm)(rien)
}

détruit_rappels :: fonc (rappels: *RappelsInterface)
{
    si rappels.sur_destruction {
        rappels.sur_destruction(rappels)
    }
}

notifie_élément_survolé :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_élément_survolé {
        retourne
    }

    rappels.sur_élément_survolé(rappels)
}

requiers_rendu :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_requête_rendu {
        retourne
    }

    rappels.sur_requête_rendu(rappels)
}

lance_requête :: fonc (user_agent: *UserAgent, request: *Request) -> *Response
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_lancement_requête {
        retourne network_error()
    }

    retourne rappels.sur_lancement_requête(rappels, request)
}

enfile_une_tâche :: fonc (user_agent: *UserAgent, source: SourceDeTâche, algorithm: *Algorithm)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_enfile_une_tâche {
        retourne
    }

    rappels.sur_enfile_une_tâche(rappels, source, algorithm)
}

/** \} */
