importe HTTP
importe Fondation
JavaScript :: importe JavaScript

/* ------------------------------------------------------------------------- */
/** \nom UserAgent
 * Structure pouvant être dérivée par les applications clientes peuvent pour
 * définir des contextes de navigation.
 * \{ */

UserAgent :: struct {
    empl hôte: JavaScript.Hôte

    /* https://html.spec.whatwg.org/multipage/document-sequences.html#top-level-traversable-set */
    top_level_traversables: [..]*TraversableNavigable
    /* https://html.spec.whatwg.org/multipage/document-sequences.html#browsing-context-group-set */
    browsing_context_groups: [..]*BrowsingContextGroup

    /* Connexion avec l'interface graphique. */
    rappels_interface: *RappelsInterface

    mv: JavaScript.MachineVirtuelle
    blob_url_store: BlobURLStore

    supporte_scripting: bool

    /* Valeur par défaut pour l'entête 'User-Agent'.
     * https://fetch.spec.whatwg.org/#default-user-agent-value */
    user_agent_string: DOMString

    /* Utilisé pour les fichiers de réponse pour les erreurs. */
    nom_navigateur := "Le Navigateur"
}

initialise_user_agent :: fonc (user_agent: *UserAgent)
{
    user_agent.sur_visite_cellules = sur_visite_cellules_hôte
    JavaScript.initialise_mv(user_agent, *user_agent.mv)
}

donne_tas_de_mémoire :: fonc (user_agent: *UserAgent) -> *JavaScript.TasDeMémoire
{
    retourne *user_agent.mv.tas_de_mémoire
}

détruit_user_agent :: fonc (user_agent: *UserAgent)
{
    détruit_données_user_agent(user_agent)
    déloge(user_agent)
}

détruit_données_user_agent :: fonc (user_agent: *UserAgent)
{
    déloge_tableau_et_ses_éléments(user_agent.top_level_traversables, détruit_traversable)
    déloge_tableau_et_ses_éléments(user_agent.browsing_context_groups, détruit_browsing_context_group)
    si user_agent.rappels_interface {
        détruit_rappels(user_agent.rappels_interface)
        user_agent.rappels_interface = nul
    }
    JavaScript.détruit_données_mv(*user_agent.mv)
    détruit_données_store(*user_agent.blob_url_store)
}

définis_rappels_interface :: fonc (user_agent: *UserAgent, rappels: *RappelsInterface)
{
    si user_agent.rappels_interface {
        détruit_rappels(rappels)
    }
    user_agent.rappels_interface = rappels
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom JavaScript
 * \{ */

#portée_fichier

sur_visite_cellules_hôte :: fonc (base: *JavaScript.Hôte, visiteuse: *JavaScript.VisiteuseCellule)
{
    user_agent := base comme *UserAgent
    JavaScript.visite_objet(visiteuse, user_agent)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Algorithm
 * Structure pour implémenter les routines/callbacks/algorithms de la spec.
 * \{ */

Algorithm :: struct {
    sur_run: fonc(*Algorithm)(rien)
    sur_destruction: fonc(*Algorithm)(rien)
}

crée_algorithm :: fonc (sur_run: fonc(*Algorithm)(rien), $T: type_de_données) -> *T
{
    sur_destruction :: fonc (base: *Algorithm)
    {
        algorithm := base comme *T
        déloge(algorithm)
    }

    résultat := loge(T)
    résultat.sur_run = sur_run
    résultat.sur_destruction = sur_destruction
    retourne résultat
}

crée_algorithm_pour_fonction :: fonc (params: *$T, fonction: fonc(*T)(rien)) -> *Algorithm
{
    Tâche :: struct {
        empl base: Algorithm

        params: T
        fonction: fonc(*T)(rien)
    }

    sur_run :: fonc (base: *Algorithm)
    {
        tâche := base comme *Tâche
        tâche.fonction(*tâche.params)
    }

    tâche := crée_algorithm(sur_run, Tâche)
    tâche.params = mémoire(params)
    tâche.fonction = fonction
    retourne tâche
}

run :: fonc (algorithm: *Algorithm)
{
    saufsi algorithm {
        retourne
    }

    si algorithm.sur_run {
        algorithm.sur_run(algorithm)
    }

    si algorithm.sur_destruction {
        algorithm.sur_destruction(algorithm)
    }
}

/** \} */

/* https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources */
SourceDeTâche :: énum {
    ManipulationDOM
    InteractionUtilisateur
    Réseautage
    NavigationEtTraversée
    Rendu
}

/* ------------------------------------------------------------------------- */
/** \nom RappelsInterface
 * \{ */

RappelsInterface :: struct {
    sur_destruction: fonc(*RappelsInterface)(rien)
    sur_lancement_requête: fonc(*RappelsInterface, *Request)(*Response)
    sur_spin_event_loop: fonc(*RappelsInterface)(rien)
    sur_élément_survolé: fonc(*RappelsInterface)(rien)
    sur_requête_rendu: fonc(*RappelsInterface)(rien)
    sur_enfile_une_tâche: fonc(*RappelsInterface, SourceDeTâche, *Algorithm)(rien)
    sur_tâche_parallèle: fonc(*RappelsInterface, *Algorithm)(rien)
    sur_tâche_traversable: fonc(*RappelsInterface, *TraversableNavigable, *Algorithm)(rien)
    sur_document_est_prêt: fonc(*RappelsInterface, *Document)(rien)
    sur_est_exécuté_sur_fil_principal: fonc(*RappelsInterface)(bool)
    sur_est_exécuté_en_parallèle: fonc(*RappelsInterface)(bool)
    sur_est_exécuté_sur_file_parallèle: fonc(*RappelsInterface, *TraversableNavigable)(bool)
    sur_création_file_parallèle_pour_traversable: fonc(*RappelsInterface)(z64)
    sur_affichage_alerte: fonc(*RappelsInterface, DOMString)(rien)
    sur_création_timeout: fonc(*RappelsInterface, *Algorithm, z32, bool)(z32)
    sur_destruction_timeout: fonc(*RappelsInterface, z32)(rien)
    sur_request_animation_frame: fonc(*RappelsInterface)(rien)
    sur_défile_page_vers_fragment: fonc(*RappelsInterface)(rien)
    sur_donne_taille_écran: fonc(*RappelsInterface)(TailleÉcranExposéWeb)
    sur_édition_text_input_requise: fonc(*RappelsInterface, *HTMLInputElement)(rien)
    sur_rapporte_exception: fonc (*RappelsInterface, *Document, chaine)(rien)
    sur_rapporte_log: fonc (*RappelsInterface, *Document, chaine)(rien)
}

détruit_rappels :: fonc (rappels: *RappelsInterface)
{
    si rappels.sur_destruction {
        rappels.sur_destruction(rappels)
    }
}

spin_event_loop :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_spin_event_loop {
        retourne
    }

    rappels.sur_spin_event_loop(rappels)
}

notifie_élément_survolé :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_élément_survolé {
        retourne
    }

    rappels.sur_élément_survolé(rappels)
}

requiers_rendu :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_requête_rendu {
        retourne
    }

    rappels.sur_requête_rendu(rappels)
}

lance_requête :: fonc (user_agent: *UserAgent, request: *Request) -> *Response
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_lancement_requête {
        retourne network_error(request)
    }

    retourne rappels.sur_lancement_requête(rappels, request)
}

enfile_une_tâche :: fonc (user_agent: *UserAgent, source: SourceDeTâche, algorithm: *Algorithm)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_enfile_une_tâche {
        retourne
    }

    rappels.sur_enfile_une_tâche(rappels, source, algorithm)
}

/* https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel */
lance_en_parallèle :: fonc (user_agent: *UserAgent, algorithm: *Algorithm)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_tâche_parallèle {
        retourne
    }

    rappels.sur_tâche_parallèle(rappels, algorithm)
}

lance_sur_file_parallèle :: fonc (user_agent: *UserAgent, traversable: *TraversableNavigable, algorithm: *Algorithm)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_tâche_traversable {
        retourne
    }

    rappels.sur_tâche_traversable(rappels, traversable, algorithm)
}

document_est_prêt :: fonc (user_agent: *UserAgent, document: *Document)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_document_est_prêt {
        retourne
    }

    rappels.sur_document_est_prêt(rappels, document)
}

est_exécuté_sur_fil_principal :: fonc (user_agent: *UserAgent) -> bool
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_est_exécuté_sur_fil_principal {
        retourne faux
    }
    retourne rappels.sur_est_exécuté_sur_fil_principal(rappels)
}

est_exécuté_en_parallèle :: fonc (user_agent: *UserAgent) -> bool
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_est_exécuté_en_parallèle {
        retourne faux
    }
    retourne rappels.sur_est_exécuté_en_parallèle(rappels)
}

est_exécuté_sur_file_parallèle :: fonc (user_agent: *UserAgent, traversable: *TraversableNavigable) -> bool
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_est_exécuté_sur_file_parallèle {
        retourne faux
    }
    retourne rappels.sur_est_exécuté_sur_file_parallèle(rappels, traversable)
}

crée_file_parallèle_pour_traversable :: fonc (user_agent: *UserAgent) -> z64
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_création_file_parallèle_pour_traversable {
        retourne -1
    }
    retourne rappels.sur_création_file_parallèle_pour_traversable(rappels)
}

affiche_alerte :: fonc (user_agent: *UserAgent, message: DOMString)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_affichage_alerte {
        retourne
    }
    rappels.sur_affichage_alerte(rappels, message)
}

crée_timeout :: fonc (user_agent: *UserAgent, algorithm: *Algorithm, time_out: z32, se_répète: bool) -> z32
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_création_timeout {
        retourne -1
    }
    retourne rappels.sur_création_timeout(rappels, algorithm, time_out, se_répète)
}

détruit_timeout :: fonc (user_agent: *UserAgent, id: z32)
{
    si id == -1 {
        retourne
    }
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_destruction_timeout {
        retourne
    }
    rappels.sur_destruction_timeout(rappels, id)
}

request_animation_frame :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_request_animation_frame {
        retourne
    }
    rappels.sur_request_animation_frame(rappels)
}

défile_page_vers_fragment :: fonc (user_agent: *UserAgent)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_défile_page_vers_fragment {
        retourne
    }
    rappels.sur_défile_page_vers_fragment(rappels)
}

/* https://drafts.csswg.org/cssom-view/#web-exposed-screen-area */
TailleÉcranExposéWeb :: struct {
    largeur: n64
    hauteur: n64
}

donne_taille_écran :: fonc (user_agent: *UserAgent) -> TailleÉcranExposéWeb
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_donne_taille_écran {
        retourne TailleÉcranExposéWeb()
    }
    retourne rappels.sur_donne_taille_écran(rappels)
}

édition_text_input_requise :: fonc (user_agent: *UserAgent, input: *HTMLInputElement)
{
    assert(input.is_text_entry_widget())
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_édition_text_input_requise {
        retourne
    }
    rappels.sur_édition_text_input_requise(rappels, input)
}

rapporte_exception :: fonc (user_agent: *UserAgent, document: *Document, exception: chaine)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_rapporte_exception {
        imprime("EXCEPTION NON-PIÉGÉE : %\n", exception)
        retourne
    }
    rappels.sur_rapporte_exception(rappels, document, exception)
}

rapporte_log :: fonc (user_agent: *UserAgent, document: *Document, message: chaine)
{
    rappels := user_agent.rappels_interface
    saufsi rappels && rappels.sur_rapporte_log {
        imprime("LOG : %\n", message)
        retourne
    }
    rappels.sur_rapporte_log(rappels, document, message)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Création de tâches.
 * \{ */

crée_tâche_pour_enfiler_tâche :: fonc (user_agent: *UserAgent, tâche_à_enfiler: *Algorithm, source: SourceDeTâche) -> *Algorithm
{
    Tâche :: struct {
        empl base: Algorithm

        user_agent: *UserAgent
        tâche_à_enfiler: *Algorithm
        source: SourceDeTâche
    }

    sur_run :: fonc (base: *Algorithm)
    {
        tâche := base comme *Tâche

        user_agent := tâche.user_agent
        tâche_à_enfiler := tâche.tâche_à_enfiler
        source := tâche.source

        user_agent.enfile_une_tâche(source, tâche_à_enfiler)
    }

    tâche := crée_algorithm(sur_run, Tâche)
    tâche.user_agent = user_agent
    tâche.tâche_à_enfiler = tâche_à_enfiler
    tâche.source = source
    retourne tâche
}

crée_tâche_pour_traversable :: fonc (user_agent: *UserAgent, tâche_à_enfiler: *Algorithm, traversable: *TraversableNavigable) -> *Algorithm
{
    Tâche :: struct {
        empl base: Algorithm

        user_agent: *UserAgent
        tâche_à_enfiler: *Algorithm
        traversable: *TraversableNavigable
    }

    sur_run :: fonc (base: *Algorithm)
    {
        tâche := base comme *Tâche

        user_agent := tâche.user_agent
        tâche_à_enfiler := tâche.tâche_à_enfiler
        traversable := tâche.traversable

        user_agent.lance_sur_file_parallèle(traversable, tâche_à_enfiler)
    }

    tâche := crée_algorithm(sur_run, Tâche)
    tâche.user_agent = user_agent
    tâche.tâche_à_enfiler = tâche_à_enfiler
    tâche.traversable = traversable
    retourne tâche
}

enfile_une_tâche_pour_lancer_évènement_à_élément :: fonc (user_agent: *UserAgent, élément: *Élément, nom: EventType)
{
    Tâche :: struct {
        empl base: Algorithm

        user_agent: *UserAgent
        élément: *Élément
        nom: EventType
    }

    sur_run :: fonc (base: *Algorithm)
    {
        tâche := base comme *Tâche
        _ := fire_an_event(tâche.élément, tâche.nom)
    }

    tâche := crée_algorithm(sur_run, Tâche)
    tâche.user_agent = user_agent
    tâche.élément = élément
    tâche.nom = nom

    user_agent.queue_an_element_task(SourceDeTâche.ManipulationDOM, élément, tâche)
}

queue_a_task_to_fire_error_at_element :: fonc (user_agent: *UserAgent, élément: *Élément)
{
    enfile_une_tâche_pour_lancer_évènement_à_élément(user_agent, élément, EventType.error)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.7.2 Queuing tasks
 * https://html.spec.whatwg.org/multipage/webappapis.html#queuing-tasks
 * \{ */

/* https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task */
queue_a_task :: fonc (user_agent: *UserAgent, source: SourceDeTâche, steps: *Algorithm, event_loop : *rien = nul @inutilisée, document : *Document = nul @inutilisée)
{
    // À FAIRE : 1. If event loop was not given, set event loop to the implied event loop.

    // 2. If document was not given, set document to the implied document.

    // 3. Let task be a new task.

    // 4. Set task's steps to steps.

    // 5. Set task's source to source.

    // 6. Set task's document to the document.

    // 7. Set task's script evaluation environment settings object set to an empty set.

    // 8. Let queue be the task queue to which source is associated on event loop.

    // 9. Append task to queue.
    user_agent.enfile_une_tâche(source, steps)
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-global-task */
queue_a_globask_task :: fonc (user_agent: *UserAgent, source: SourceDeTâche, global_object: *JavaScript.Object @inutilisée, steps: *Algorithm)
{
    // À FAIRE : 1. Let event loop be global's relevant agent's event loop.

    // 2. Let document be global's associated Document, if global is a Window object; otherwise null.

    // 3. Queue a task given source, event loop, document, and steps.
    queue_a_task(user_agent, source, steps)
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#queue-an-element-task */
queue_an_element_task :: fonc (user_agent: *UserAgent, source: SourceDeTâche, élément: *Élément, steps: *Algorithm)
{
    // 1. Let global be element's relevant global object.
    global := donne_relevant_global_object(élément)

    // 2. Queue a global task given source, global, and steps.
    queue_a_globask_task(user_agent, source, global, steps)
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-microtask */
queue_a_microtask :: fonc (user_agent: *UserAgent, steps: *Algorithm, document : *Document = nul)
{
    // À FAIRE : 1. Assert: there is a surrounding agent. I.e., this algorithm is not called while in parallel.

    // 2. Let eventLoop be the surrounding agent's event loop.

    // 3. If document was not given, set document to the implied document.

    // 4. Let microtask be a new task.

    // 5. Set microtask's steps to steps.

    // 6. Set microtask's source to the microtask task source.

    // 7. Set microtask's document to document.

    // 8. Set microtask's script evaluation environment settings object set to an empty set.

    // 9. Enqueue microtask on eventLoop's microtask queue.
}

/** \} */
