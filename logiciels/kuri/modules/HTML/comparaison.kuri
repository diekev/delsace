/* Comparaisons d'équivalences de noeuds et d'arbres. */

/* Comparaisons spécifiques pour les mêmes genres de noeuds. Les attributs ne sont pas
 * vérifiés. */

noeuds_éléments_sont_égaux :: fonc (élément1: *Élément, élément2: *Élément) -> bool
{
    retourne élément1.texte == élément2.texte
}

noeuds_textes_sont_égaux :: fonc (texte1: *NoeudTexte, texte2: *NoeudTexte) -> bool
{
    si texte1.données != texte2.données {
        retourne faux
    }

    retourne vrai
}

noeuds_documents_sont_égaux :: fonc (document1: *Document, document2: *Document) -> bool
{
    /* Pour le moment les documents sont toujours égaux, ils n'ont pas de propriétés. */
    retourne vrai
}

noeuds_doctypes_sont_égaux :: fonc (document1: *DocumentType, document2: *DocumentType) -> bool
{
    /* Pour le moment les doctypes sont toujours égaux, ils n'ont pas de propriétés. */
    retourne vrai
}

noeuds_commentaires_sont_égaux :: fonc (commentaire1: *NoeudCommentaire, commentaire2: *NoeudCommentaire) -> bool
{
    retourne commentaire1.données == commentaire2.données
}

/* Retourne vrai si les deux neouds ont les valeurs (attributs, genre).
 * Ceci ne compare pas les enfants des noeuds, pour cela, utilisez
 * `arbres_sont_égaux`.
 */
noeuds_sont_égaux :: fonc (noeud1: *Noeud, noeud2: *Noeud) -> bool
{
    si noeud1.genre != noeud2.genre {
        retourne faux
    }

    discr noeud1.genre {
        Invalide {
            retourne faux
        }
        Document {
            si !noeuds_documents_sont_égaux(noeud1 comme *Document, noeud2 comme *Document) {
                retourne faux
            }
        }
        Commentaire {
            si !noeuds_commentaires_sont_égaux(noeud1 comme *NoeudCommentaire, noeud2 comme *NoeudCommentaire) {
                retourne faux
            }
        }
        Élément {
            si !noeuds_éléments_sont_égaux(noeud1 comme *Élément, noeud2 comme *Élément) {
                retourne faux
            }
        }
        Texte {
            si !noeuds_textes_sont_égaux(noeud1 comme *NoeudTexte, noeud2 comme *NoeudTexte) {
                retourne faux
            }
        }
        Doctype {
            si !noeuds_doctypes_sont_égaux(noeud1 comme *DocumentType, noeud2 comme *DocumentType) {
                retourne faux
            }
        }
    }

    si noeud1.attributs.taille != noeud2.attributs.taille {
        retourne faux
    }

    pour noeud1.attributs.taille {
        attr1 := noeud1.attributs[it]
        attr2 := noeud2.attributs[it]

        si attr1.nom != attr2.nom && attr1.valeur != attr2.valeur {
            retourne faux
        }
    }

    retourne vrai
}

/* Retourne vrai si les deux arbres ont les mêmes enfants, c'est-à-dire de mêmes
 * genres et de mêmes valeurs.
 */
arbres_sont_égaux :: fonc (arbre1: *Noeud, arbre2: *Noeud) -> bool
{
    saufsi arbre1 && arbre2 {
        retourne faux
    }

    saufsi noeuds_sont_égaux(arbre1, arbre2) {
        retourne faux
    }

    si arbre1.enfants.taille != arbre2.enfants.taille {
        retourne faux
    }

    pour arbre1.enfants.taille {
        enfant1 := arbre1.enfants[it]
        enfant2 := arbre2.enfants[it]

        saufsi arbres_sont_égaux(enfant1, enfant2) {
            retourne faux
        }
    }

    retourne vrai
}
