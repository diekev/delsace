// Module de parsage de code HTML
// Spec : https://html.spec.whatwg.org/multipage/parsing.html

importe Chaine
importe Fondation
importe #inemployé JavaScript
importe SysFichier
importe Temps

charge "élément"
charge "attribut"
charge "browsing_context"
charge "common_microsyntaxes"
charge "comparaison"
charge "document"
charge "entités"
charge "entropisation"
charge "events"
charge "fetch"
charge "file_api"
charge "formattage"
charge "formulaire"
charge "high_resolution_time"
charge "html_collection"
charge "lexage"
charge "liste_éléments_actifs_formattage"
charge "navigation"
charge "noeud"
charge "page_web"
charge "parsage"
charge "pile_éléments_ouverts"
charge "platform_object"
charge "rendering_context"
charge "scripting"
charge "tags_html"
charge "url"
charge "user_agent"
charge "webappsec_csp"
charge "webappsec_permissions_policy"
charge "webappsec_referrer_policy"
charge "webcrypto"
charge "webdriver_bidi"
charge "window"

charge "WebIDL/génératrice_code"

DOMString :: ChaineUTF16Unique

donne_chemin_fichier_css_défaut :: fonc () -> CheminFichier
{
    retourne donne_chemin_fichier_css("Fichiers/defaults.css")
}

donne_chemin_fichier_css_presentational_hints :: fonc () -> CheminFichier
{
    retourne donne_chemin_fichier_css("Fichiers/presentational_hints.css")
}

donne_chemin_fichier_css_quirks :: fonc () -> CheminFichier
{
    chemin_courant := CheminFichier(#chemin_de_ce_fichier)
    chemin_parent := chemin_courant.chemin_parent()
    diffère détruit_chemin(chemin_parent)
    résultat := crée_chemin_absolu(chemin_parent, CheminFichier("Fichiers/quirks.css"))
    assert(est_un_fichier_régulier(résultat))
    retourne résultat
}

#portée_fichier

donne_chemin_fichier_css :: fonc (chemin: chaine) -> CheminFichier
{
    chemin_courant := CheminFichier(#chemin_de_ce_fichier)
    chemin_parent := chemin_courant.chemin_parent()
    diffère détruit_chemin(chemin_parent)
    résultat := crée_chemin_absolu(chemin_parent, CheminFichier(chemin))
    assert(est_un_fichier_régulier(résultat))
    retourne résultat
}

#portée_export

donne_feuille_de_style_défaut :: fonc () -> *CSS.CSSStyleSheet
{
    retourne donne_feuille_de_style("Fichiers/defaults.css")
}

donne_feuille_de_style_presentational_hints :: fonc () -> *CSS.CSSStyleSheet
{
    résultat := donne_feuille_de_style("Fichiers/presentational_hints.css")
    résultat.origine = CSS.OrigineCascade.Author
    résultat.force_spécifité_zéro = vrai
    retourne résultat
}

donne_feuille_de_style_quirks :: fonc () -> *CSS.CSSStyleSheet
{
    retourne donne_feuille_de_style("Fichiers/quirks.css")
}

#portée_fichier

donne_feuille_de_style :: fonc (chemin: chaine) -> *CSS.CSSStyleSheet
{
    chemin_fichier := donne_chemin_fichier_css(chemin)
    diffère détruit_chemin(chemin_fichier)

    contenu := contenu_fichier_texte(chemin_fichier)
    diffère déloge(contenu)

    ctx: CSS.ContexteParsageFeuilleDeStyle
    diffère CSS.détruit_données_contexte(*ctx)

    stylesheet := CSS.parse_a_css_style_sheet(*ctx, contenu)
    stylesheet.origine = CSS.OrigineCascade.UserAgent
    CSS.rapporte_propriétés_non_supportées(*ctx, #nom_de_cette_fonction)

    retourne stylesheet
}

#portée_export

imprime_noeud :: fonc (noeud: *Noeud, tab: z32) -> rien
{
    imprime_tabulation(tab)

    si noeud.est_texte() {
        texte := noeud comme *NoeudTexte
        imprime("%\n", texte.données)
    }
    sinon si noeud.est_élément() {
        élément := noeud comme *Élément
        imprime("<%", élément.local_name)

        pour élément.attributs {
            imprime(" %=%", it.nom, it.valeur)
        }

        imprime(">\n")
    }
    sinon si noeud.est_commentaire() {
        commentaire := noeud comme *NoeudCommentaire
        imprime("<!--%-->\n", commentaire.données)
    }
    sinon {
        imprime("%\n", noeud.genre)
    }

    pour noeud.enfants {
        imprime_noeud(it, tab + 1)
    }
}

imprime_document :: fonc (document: *Document)
{
    imprime("============== Document ==============\n")

    pour document.enfants {
        imprime_noeud(it, 0)
    }
}

/* ------------------------------------------------------------------------- */
/** \nom Traversée, visite, d'un noeud et de ses enfants.
 * \{ */

DécisionTraversée :: énum {
    /* Continue la traversée vers les enfants du noeuds. */
    CONTINUE
    /* Ignore les enfants de ce noeuds. */
    IGNORE_ENFANTS
}

traverse_noeud :: fonc (noeud: *Noeud, rappel_traverse: fonc(*Noeud, $T)(DécisionTraversée), données: T)
{
    pour noeud.enfants {
        décision := rappel_traverse(it, données)
        si décision == DécisionTraversée.IGNORE_ENFANTS {
            continue
        }

        traverse_noeud(it, rappel_traverse, données)
    }
}

/* Version de traverse_noeud sans données utilisateur spécifique. */
traverse_noeud :: fonc (noeud: *Noeud, rappel_traverse: fonc(*Noeud)(DécisionTraversée))
{
    pour noeud.enfants {
        décision := rappel_traverse(it)
        si décision == DécisionTraversée.IGNORE_ENFANTS {
            continue
        }

        traverse_noeud(it, rappel_traverse)
    }
}

/** \} */

/* Résultat du parsage (« parsat », de « parser » + « -at ») d'un document HTML. */
ParsatHTML :: struct {
    /* Le document qui fut parsé. */
    document: *Document
    /* Les différentes erreurs parsage. */
    erreurs: [..]chaine
    /* Le temps de parsage du document, en microsecondes. */
    temps: z64
}

détruit :: fonc (parsat: &ParsatHTML)
{
    déloge(parsat.erreurs)
}

/* Parse un document HTML depuis une chaine de caractère. */
parse_document :: fonc (realm: *JavaScript.Realm, source: chaine) -> ParsatHTML
{
    tas_de_mémoire := JavaScript.donne_tas_de_mémoire(realm)
    document := crée_noeud_document(tas_de_mémoire, realm)
    document.type = "html"

    parseuse := initialise_parseuse(tas_de_mémoire, source, document)
    diffère détruit_parseuse(*parseuse)

    début := maintenant_précis()
    parse(*parseuse)
    temps := début.temps_écoulé_microsecondes()

    parsat: ParsatHTML
    parsat.document = parseuse.document
    parsat.temps = temps
    parsat.erreurs = tableau_vole_mémoire(parseuse.erreurs)
    retourne parsat
}

parse_document :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, document: chaine) -> ParsatHTML
{
    parseuse := initialise_parseuse(tas_de_mémoire, document)
    diffère détruit_parseuse(*parseuse)

    début := maintenant_précis()
    parse(*parseuse)
    temps := début.temps_écoulé_microsecondes()

    parsat: ParsatHTML
    parsat.document = parseuse.document
    parsat.temps = temps
    parsat.erreurs = tableau_vole_mémoire(parseuse.erreurs)
    retourne parsat
}
