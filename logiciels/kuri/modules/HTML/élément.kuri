importe Chaine
importe Fondation

est_tag_auto_fermant :: fonc (tag: DOMString) -> bool
{
    discr tag {
        TAG_area,
        TAG_base,
        TAG_br,
        TAG_col,
        TAG_embed,
        TAG_hr,
        TAG_img,
        TAG_input,
        TAG_link,
        TAG_meta,
        TAG_param,
        TAG_source,
        TAG_track,
        TAG_wbr {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/* ------------------------------------------------------------------------- */
/** \nom Élément
 * https://dom.spec.whatwg.org/#element
 * \{ */

#portée_module

TableVirtuelleÉlément :: struct {
    empl base: TableVirtuelleNoeud

    /* Appelé quand un élément fut dépilé de la pile des éléments ouverts. */
    sur_dépilement: fonc(*Élément)(rien)

    /* Appelé quand un attribut est ajouté, modifié, ou supprimé. */
    sur_changement_attribut: fonc(*Élément, DOMString, *DOMString, *DOMString)(rien) = élément_sur_changement_attribut
}

#portée_export

Élément :: struct {
    empl base: Noeud
    table = *table_virtuelle_élément

    id: DOMString

    /* Uniquement utilisé lors du parsage. */
    est_sur_pile_éléments_ouvert: bool

    espace_de_nom: chaine // DOMString @namespaceURI
    texte: DOMString // DOMString @localName

    état_élément_custom: chaine
    définition_élément_custom: *rien
}

#portée_fichier

table_virtuelle_élément := TableVirtuelleÉlément(
    sur_destruction = élément_sur_destruction,
    sur_changement_attribut = élément_sur_changement_attribut
)

élément_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *Élément
    déloge(élément)
}

élément_sur_changement_attribut :: fonc (élément: *Élément, local_name: DOMString, vieille_valeur: *DOMString @inutilisée, valeur: *DOMString)
{
    /* https://dom.spec.whatwg.org/#concept-id */
    si local_name == ATTR_id {
        // À FAIRE espace de nom pour attribut
        // 1. If localName is id, namespace is null, and value is null or the empty string, then unset element’s ID.
        // À FAIRE : chaine vide
        si valeur == nul {
            élément.id = DOMString()
        }
        // 2. Otherwise, if localName is id, namespace is null, then set element’s ID to value.
        sinon {
            élément.id = mémoire(valeur)
        }
    }
}

#portée_export

/* https://dom.spec.whatwg.org/#concept-element-attributes-append */
ajoute_attribut :: fonc (élément: *Élément, attribut: Attribut)
{
    // 1. Append attribute to element’s attribute list.
    ajoute_attribut(élément, attribut.nom, attribut.valeur)

    // À FAIRE 2. Set attribute’s element to element.

    // 3. Handle attribute changes for attribute with element, null, and attribute’s value.
    gère_changement_attribute(attribut, élément, nul, *attribut.valeur)
}

/* https://dom.spec.whatwg.org/#handle-attribute-changes */
gère_changement_attribute :: fonc (attribut: Attribut, élément: *Élément, vieille_valeur: *DOMString, nouvelle_valeur: *DOMString)
{
    // À FAIRE 1. Queue a mutation record of "attributes" for element with attribute’s local name,
    //    attribute’s namespace, oldValue, « », « », null, and null.

    // À FAIRE 2. If element is custom, then enqueue a custom element callback reaction with element,
    //    callback name "attributeChangedCallback", and an argument list containing attribute’s
    //    local name, oldValue, newValue, and attribute’s namespace.

    // 3. Run the attribute change steps with element, attribute’s local name, oldValue, newValue,
    //    and attribute’s namespace.
    // À FAIRE : espace de nom pour l'attribut
    table := élément.table comme *TableVirtuelleÉlément
    si table && table.sur_changement_attribut {
        table.sur_changement_attribut(élément, attribut.nom, vieille_valeur, nouvelle_valeur)
    }
}

initialise_élément :: fonc (élément: *Élément, document: *Document, texte: DOMString) -> rien
{
    élément.genre = GenreNoeud.Élément
    élément.document = document
    élément.texte = texte
}

crée_élément_avec_tag :: fonc (document: *Document, tag: DOMString) -> *Élément
{
    // les éléments pour les balises SVG ne sont pas présents, espace de noms ?
    élément: *Élément
    si tag == TAG_a {
        élément = loge(HTMLAnchorElement)
    }
    sinon si tag == TAG_body {
        élément = loge(HTMLBodyElement)
    }
    sinon si tag == TAG_form {
        élément = loge(HTMLFormElement)
    }
    sinon si tag == TAG_head {
        élément = loge(HTMLHeadElement)
    }
    sinon si tag == TAG_html {
        élément = loge(HTMLHtmlElement)
    }
    sinon si tag == TAG_img {
        élément = loge(HTMLImageElement)
    }
    sinon si tag == TAG_script {
        élément = loge(HTMLScriptElement)
    }
    sinon si tag == TAG_style {
        élément = loge(HTMLStyleElement)
    }
    sinon si tag == TAG_video {
        élément = loge(HTMLVideoElement)
    }
    sinon {
        élément = loge(Élément)
    }

    initialise_élément(élément, document, tag)
    retourne élément
}

élément_fut_dépilé_de_la_pile_des_éléments_ouverts :: fonc (élément: *Élément)
{
    saufsi élément.table {
        retourne
    }

    table_virtuelle := élément.table comme *TableVirtuelleÉlément    
    si table_virtuelle.sur_dépilement  {
        table_virtuelle.sur_dépilement(élément)
    }
}

est_compatible_html5 :: fonc (élément: *Élément) -> bool
{
    discr élément.texte {
        TAG_acronym,
        TAG_applet,
        TAG_basefont,
        TAG_big,
        TAG_center,
        TAG_dir,
        TAG_font,
        TAG_frame,
        TAG_frameset,
        TAG_noframes,
        TAG_strike,
        TAG_tt {
            retourne faux
        }
        sinon {
            retourne vrai
        }
    }
}

/* https://dom.spec.whatwg.org/#concept-getelementsbyclassname */
get_elements_by_class_name :: fonc (élément: *Élément, class_names: DOMString) -> *HTMLCollection
{
    // 1. Let classes be the result of running the ordered set parser on classNames.
    classes := run_ordered_set_parser(class_names)

    // 2. If classes is the empty set, return an empty HTMLCollection.
    si classes.taille == 0 {
        retourne loge(HTMLCollection)
    }

    // 3. Return an HTMLCollection rooted at root, whose filter matches
    //    descendant elements that have all their classes in classes.
    //    The comparisons for the classes must be done in an ASCII
    //    case-insensitive manner if root’s node document’s mode is "quirks";
    //    otherwise in an identical to manner.
    résultat := loge(HTMLCollection)
    résultat.root = élément
    résultat.filter = crée_filtre_pour_class_name(classes)
    initialise_collection_pour_filtre(résultat)
    retourne résultat
}

/* https://dom.spec.whatwg.org/#concept-getelementsbytagname */
get_elements_by_tag_name :: fonc (élément: *Élément, qualified_name: DOMString) -> *HTMLCollection
{   
    résultat := loge(HTMLCollection)
    résultat.root = élément

    // 1. If qualifiedName is U+002A (*), then return an HTMLCollection rooted at root, whose filter matches only descendant elements.

    // 2. Otherwise, if root’s node document is an HTML document, return an HTMLCollection rooted at root, whose filter matches the following descendant elements:

    //     Whose namespace is the HTML namespace and whose qualified name is qualifiedName, in ASCII lowercase.

    //     Whose namespace is not the HTML namespace and whose qualified name is qualifiedName.

    // 3. Otherwise, return an HTMLCollection rooted at root, whose filter matches descendant elements whose qualified name is qualifiedName. 
    résultat.filter = crée_filtre_pour_tag_name(qualified_name)

    initialise_collection_pour_filtre(résultat)
    retourne résultat
}

/** \} */

fait_partie_de_catégorie_spécial :: fonc (nom: DOMString) -> bool
{
    // À FAIRE : utilisation d'une recherche binaire
    retourne fait_partie_de(nom,
                            TAG_address, TAG_applet, TAG_area, TAG_article,
                            TAG_aside, TAG_base, TAG_basefont, TAG_bgsound,
                            TAG_blockquote, TAG_body, TAG_br, TAG_button,
                            TAG_caption, TAG_center, TAG_col, TAG_colgroup,
                            TAG_dd, TAG_details, TAG_dir, TAG_div, TAG_dl,
                            TAG_dt, TAG_embed, TAG_fieldset, TAG_figcaption,
                            TAG_figure, TAG_footer, TAG_form, TAG_frame,
                            TAG_frameset, TAG_h1, TAG_h2, TAG_h3, TAG_h4,
                            TAG_h5, TAG_h6, TAG_head, TAG_header, TAG_hgroup,
                            TAG_hr, TAG_html, TAG_iframe, TAG_img, TAG_input,
                            TAG_keygen, TAG_li, TAG_link, TAG_listing, TAG_main,
                            TAG_marquee, TAG_menu, TAG_meta, TAG_nav, TAG_noembed,
                            TAG_noframes, TAG_noscript, TAG_object, TAG_ol, TAG_p,
                            TAG_param, TAG_plaintext, TAG_pre, TAG_script,
                            TAG_section, TAG_select, TAG_source, TAG_style,
                            TAG_summary, TAG_table, TAG_tbody, TAG_td, TAG_template,
                            TAG_textarea, TAG_tfoot, TAG_th, TAG_thead, TAG_title,
                            TAG_tr, TAG_track, TAG_ul, TAG_wbr, TAG_xmp, TAG_mi,
                            TAG_mo, TAG_mn, TAG_ms, TAG_mtext, TAG_annotation_xml,
                            TAG_foreignObject, TAG_desc, TAG_title)
}

enfant_directe_avec_balise :: fonc (élément: *Élément, balise: DOMString) -> *Élément
{
    pour élément.enfants {
        saufsi it.genre == GenreNoeud.Élément {
            continue
        }

        élément_enfant := (it comme *Élément)
        si élément_enfant.texte == balise {
            retourne élément_enfant
        }
    }

    retourne nul
}

/* ------------------------------------------------------------------------- */
/** \nom HTMLElement
 * https://html.spec.whatwg.org/multipage/dom.html#htmlelement
 * \{ */

HTMLElement :: struct {
    empl base_élément: Élément
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLAnchorElement
 * https://html.spec.whatwg.org/multipage/text-level-semantics.html#htmlanchorelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 * \{ */

#portée_export

HTMLAnchorElement :: struct {
    empl html_element: HTMLElement
    table = *table_virtuelle_anchor_element
}

est_hyperlien :: fonc (anchor: *HTMLAnchorElement) -> bool
{
    retourne anchor.donne_attribut(ATTR_href).possède_valeur()
}

donne_href :: fonc (anchor: *HTMLAnchorElement) -> DOMString
{
    attribut := anchor.donne_attribut(ATTR_href)
    si attribut.possède_valeur() {
        retourne attribut.Quelque
    }
    retourne DOMString()
}

#portée_fichier

table_virtuelle_anchor_element := TableVirtuelleÉlément(
    sur_destruction = anchor_element_sur_destruction
)

anchor_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLAnchorElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLBodyElement
 * https://html.spec.whatwg.org/multipage/sections.html#the-body-element
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement
 * \{ */

#portée_export

HTMLBodyElement :: struct {
    empl base_élément: Élément
    table = *table_virtuelle_body_element
}

#portée_fichier

table_virtuelle_body_element := TableVirtuelleÉlément(
    sur_destruction = body_element_sur_destruction
)

body_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLBodyElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLFormElement
 * https://html.spec.whatwg.org/multipage/forms.html#htmlformelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
 * \{ */

#portée_export

HTMLFormElement :: struct {
    empl base_élément: Élément
    table = *table_virtuelle_form_element
}

#portée_fichier

table_virtuelle_form_element := TableVirtuelleÉlément(
    sur_destruction = form_element_sur_destruction
)

form_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLFormElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLHeadElement
 * https://html.spec.whatwg.org/multipage/dom.html#htmlheadelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement
 * \{ */

#portée_export

HTMLHeadElement :: struct {
    empl base_élément: Élément
    table = *table_virtuelle_head_element
}

#portée_fichier

table_virtuelle_head_element := TableVirtuelleÉlément(
    sur_destruction = head_element_sur_destruction
)

head_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLHeadElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLHtmlElement
 * https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement
 * \{ */

#portée_export

HTMLHtmlElement :: struct {
    empl base_élément: Élément
    table = *table_virtuelle_html_element
}

#portée_fichier

table_virtuelle_html_element := TableVirtuelleÉlément(
    sur_destruction = html_element_sur_destruction
)

html_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLHtmlElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLAnchorElement
 * https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement
 * \{ */

#portée_export

HTMLImageElement :: struct {
    empl html_element: HTMLElement
    table = *table_virtuelle_image_element
}

donne_src :: fonc (anchor: *HTMLImageElement) -> DOMString
{
    attribut := anchor.donne_attribut(ATTR_src)
    si attribut.possède_valeur() {
        retourne attribut.Quelque
    }
    retourne DOMString()
}

#portée_fichier

table_virtuelle_image_element := TableVirtuelleÉlément(
    sur_destruction = image_element_sur_destruction
)

image_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLImageElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLMediaElement
 * https://html.spec.whatwg.org/multipage/media.html#htmlmediaelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement
 * \{ */

#portée_export

HTMLMediaElement :: struct {
    empl html_element: HTMLElement
}

donne_src :: fonc (anchor: *HTMLMediaElement) -> DOMString
{
    attribut := anchor.donne_attribut(ATTR_src)
    si attribut.possède_valeur() {
        retourne attribut.Quelque
    }
    retourne DOMString()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLVideoElement
 * https://html.spec.whatwg.org/multipage/media.html#htmlvideoelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement
 * \{ */

#portée_export

HTMLVideoElement :: struct {
    empl html_media: HTMLMediaElement
    table = *table_virtuelle_video_element
}

#portée_fichier

table_virtuelle_video_element := TableVirtuelleÉlément(
    sur_destruction = video_element_sur_destruction
)

video_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLVideoElement
    déloge(élément)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLScriptElement
 * https://html.spec.whatwg.org/multipage/scripting.html#htmlscriptelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement
 * \{ */

#portée_export

TypeScript :: énum {
    NUL
    CLASSIC
    MODULE
    IMPORTMAP
}

OptionsFetchScript :: struct {
    cryptographic_nonce: chaine
    integrity_metadata: chaine
    parser_metadata := "not-parser-inserted"
    credentials_mode := "same-origin"
    referrer_policy: chaine
    render_blocking: bool
    fetch_priority := "auto"
}

HTMLScriptElement :: struct {
    empl html_element: HTMLElement
    table = *table_virtuelle_script_element

    document_parseur: *Document
    document_du_temps_de_préparation: *Document

    force_async := vrai // À FAIRE : doit être faux lors de l'ajout d'un attribut async
    provient_de_fichier_externe := faux
    prêt_à_être_exécuté_par_parseuse := faux
    déjà_commencé := faux
    temporise_évènement_de_charge := faux

    type: TypeScript
    // result : "uninitialized", null, scipt, import map parse result
}

donne_src :: fonc (anchor: *HTMLScriptElement) -> DOMString
{
    attribut := anchor.donne_attribut(ATTR_src)
    si attribut.possède_valeur() {
        retourne attribut.Quelque
    }
    retourne DOMString()
}

#portée_fichier

table_virtuelle_script_element := TableVirtuelleÉlément(
    sur_destruction = script_element_sur_destruction
)

script_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLScriptElement
    déloge(élément)
}

#portée_export

/* https://html.spec.whatwg.org/multipage/scripting.html#prepare-the-script-element */
prépare :: fonc (script: *HTMLScriptElement)
{
    /* 1. */
    si script.déjà_commencé {
        retourne
    }

    /* 2. & 3. */
    document_parseur := script.document_parseur
    script.document_parseur = nul

    /* 4. */
    si document_parseur != nul && !script.possède_attribut(ATTR_async) {
        script.force_async = vrai
    }

    /* 5. */
    texte_source := extrait_texte_noeud(script)
    diffère déloge(texte_source)

    /* 6. */
    possède_attr_src := script.possède_attribut(ATTR_src)
    si !possède_attr_src && texte_source == "" {
        retourne
    }

    /* 7. */
    saufsi script.est_connecté() {
        retourne
    }

    /* 8. */
    type_bloc_script := détermine_type_block_script(script)
    
    /* 9. */
    si est_type_mime_javascript(type_bloc_script) {
        script.type = TypeScript.CLASSIC
    }
    /* 10. */
    sinon si compare_ascii_insensible_à_la_casse(type_bloc_script, ATTR_module) {
        script.type = TypeScript.MODULE
    }
    /* 11. */
    sinon si compare_ascii_insensible_à_la_casse(type_bloc_script, ATTR_importmap) {
        script.type = TypeScript.IMPORTMAP
    }
    /* 12. */
    sinon {
        retourne
    }

    /* 13. */
    si document_parseur != nul {
        script.document_parseur = document_parseur
        script.force_async = faux
    }

    /* 14. */
    script.déjà_commencé = vrai

    /* 15. */
    script.document_du_temps_de_préparation = script.document

    /* 16. */
    si document_parseur != nul && document_parseur != script.document_du_temps_de_préparation {
        retourne
    }

    /* 17. */
    si script.scripting_est_désactivé() {
        retourne
    }

    /* 18. */
    si script.possède_attribut(ATTR_nomodule) && script.type == TypeScript.CLASSIC {
        retourne
    }

    /* 19. */
    saufsi possède_attr_src {
        bloqué := le_comportement_inline_de_l_élément_doit_être_bloqué_par_csp(script, "script", texte_source)
        si bloqué == "Blocked" {
            retourne
        }
    }

    /* 20. */
    si script.type == TypeScript.CLASSIC && script.possède_attribut(ATTR_for) && script.possède_attribut(ATTR_event) {
        valeur_for := script.donne_attribut(ATTR_for).Quelque
        valeur_event := script.donne_attribut(ATTR_event).Quelque

        valeur_event = supprime_espace_blanches_autour(valeur_event)
        valeur_for = supprime_espace_blanches_autour(valeur_for)

        saufsi compare_ascii_insensible_à_la_casse(valeur_for, ATTR_window) {
            retourne
        }
    
        saufsi compare_ascii_insensible_à_la_casse(valeur_event, ATTR_onload) || compare_ascii_insensible_à_la_casse(valeur_event, "onload()") {
            retourne
        }
    }

    /* 21. INCOMPLET : charset */

    /* 22. INCOMPLET */
    /* 23. INCOMPLET */
    module_script_credentials := ""

    /* 24. INCOMPLET */
    cryptographic_nonce := ""

    /* 25. INCOMPLET */
    integrity := ""

    /* 26. INCOMPLET */
    referrer_policy := ""

    /* 27. INCOMPLET */
    fetch_priority := ""

    /* 28. */
    métadonnée_parseuse := si script.est_inséré_par_parseuse() {
        "parser-inserted"
    }
    sinon {
        "not-parser-inserted"
    }

    /* 29. */
    options: OptionsFetchScript
    options.cryptographic_nonce = cryptographic_nonce
    options.integrity_metadata = integrity
    options.parser_metadata = métadonnée_parseuse
    options.credentials_mode = module_script_credentials
    options.referrer_policy = referrer_policy
    options.fetch_priority = fetch_priority

    /* 30. INCOMPLET settings object */

    /* 31. */
    si possède_attr_src {
        imprime("source\n")
    }
    /* 32. */
    sinon {
        imprime("pas de source\n")
        imprime("Texte source: %\n", texte_source)
    }

    /* 33. INCOMPLET */

    /* 34. INCOMPLET */
}

est_inséré_par_parseuse :: fonc (script: *HTMLScriptElement) -> bool
{
    retourne script.document_parseur != nul
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#concept-n-noscript */
scripting_est_activé :: fonc (script: *HTMLScriptElement) -> bool
{
    node_document := script.donne_node_document()
    saufsi node_document {
        retourne faux
    }
    saufsi node_document.browsing_context {
        retourne faux
    }
    imprime("À FAIRE : [%]\n", #nom_de_cette_fonction)
    retourne faux
}

scripting_est_désactivé :: fonc (script: *HTMLScriptElement) -> bool
{
    retourne scripting_est_activé(script) == faux
}

détermine_type_block_script :: fonc (script: *HTMLScriptElement) -> DOMString
{
    attr_type := script.cherche_attribut(ATTR_type)
    attr_language := script.cherche_attribut(ATTR_language)

    si (attr_type != nul && attr_type.valeur.est_vide()) ||
         (attr_type == nul && attr_language != nul && attr_language.valeur.est_vide()) ||
         (attr_type == nul && attr_language == nul) {
        retourne crée_chaine_utf16_unique("text/javascript")
    }

    si attr_type {
        /* À FAIRE : supprime espace blanches */
        retourne supprime_espace_blanches_autour(attr_type.valeur)
    }

    assert(attr_language != nul)
    chn := imprime_chaine("text/%", attr_language.valeur)
    diffère déloge(chn)
    retourne crée_chaine_utf16_unique(chn)
}

/* https://mimesniff.spec.whatwg.org/#javascript-mime-type-essence-match */
est_type_mime_javascript :: fonc (chn: DOMString) -> bool
{
    mimes_possibles := [
        "application/ecmascript",
        "application/javascript",
        "application/x-ecmascript",
        "application/x-javascript",
        "text/ecmascript",
        "text/javascript",
        "text/javascript1.0",
        "text/javascript1.1",
        "text/javascript1.2",
        "text/javascript1.3",
        "text/javascript1.4",
        "text/javascript1.5",
        "text/jscript",
        "text/livescript",
        "text/x-ecmascript",
        "text/x-javascript"
    ]

    pour mimes_possibles {
        si compare_ascii_insensible_à_la_casse(chn, it) {
            retourne vrai
        }
    }

    retourne faux
}

/* https://w3c.github.io/webappsec-csp/#should-block-inline */
le_comportement_inline_de_l_élément_doit_être_bloqué_par_csp :: fonc (élément: *Élément, type: chaine @inutilisée, source: chaine @inutilisée) -> chaine
{
    assert(élément != nul)

    résultat := "Allowed"

    /* À FAIRE. */

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLStyleElement
 * https://html.spec.whatwg.org/multipage/semantics.html#the-style-element
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement
 * \{ */

#portée_export

HTMLStyleElement :: struct {
    empl html_element: HTMLElement
    table = *table_virtuelle_style_element
}

#portée_fichier

table_virtuelle_style_element := TableVirtuelleÉlément(
    sur_destruction = style_element_sur_destruction,
    sur_connexion = style_element_sur_connexion_ou_déconnexion,
    sur_déconnexion = style_element_sur_connexion_ou_déconnexion,
    sur_dépilement = style_element_sur_dépilement,
    sur_changement_enfants = style_element_sur_changement_enfants
)

style_element_sur_destruction :: fonc (base: *Noeud)
{
    élément := base comme *HTMLStyleElement
    déloge(élément)
}

style_element_sur_connexion_ou_déconnexion :: fonc (base: *Noeud)
{
    style := base comme *HTMLStyleElement
    saufsi style.est_sur_pile_éléments_ouvert {
        ajourne_style_block(style)
    }
}

style_element_sur_dépilement :: fonc (base: *Élément)
{
    style := base comme *HTMLStyleElement
    ajourne_style_block(style)
}

style_element_sur_changement_enfants :: fonc (base: *Noeud)
{
    style := base comme *HTMLStyleElement
    ajourne_style_block(style)
}

/* https://html.spec.whatwg.org/multipage/semantics.html#update-a-style-block
 *
 * The user agent must run the update a style block algorithm whenever any of the following conditions occur:
 *     The element is popped off the stack of open elements of an HTML parser or XML parser.
 *     The element is not on the stack of open elements of an HTML parser or XML parser, and it becomes connected or disconnected.
 *     The element's children changed steps run.
 */
ajourne_style_block :: fonc (style: *HTMLStyleElement)
{
    // À FAIRE : implémente
    texte_source := extrait_texte_noeud(style)
    diffère déloge(texte_source)

    imprime("[%]\n%\n", #nom_de_cette_fonction, texte_source)
}

/** \} */
