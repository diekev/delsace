importe Chaine
importe Fondation

est_tag_auto_fermant :: fonc (tag: *ChaineInternée) -> bool
{
    discr tag {
        TAG_area,
        TAG_base,
        TAG_br,
        TAG_col,
        TAG_embed,
        TAG_hr,
        TAG_img,
        TAG_input,
        TAG_link,
        TAG_meta,
        TAG_param,
        TAG_source,
        TAG_track,
        TAG_wbr {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/* ------------------------------------------------------------------------- */
/** \nom Élément
 * https://dom.spec.whatwg.org/#element
 * \{ */

Élément :: struct {
    empl base: Noeud

    espace_de_nom: chaine // DOMString @namespaceURI
    texte: *ChaineInternée // DOMString @localName

    état_élément_custom: chaine
    définition_élément_custom: *rien
}

/* https://dom.spec.whatwg.org/#concept-element-attributes-append */
ajoute_attribut :: fonc (élément: *Élément, attribut: Attribut)
{
    // attribut.élément = élément
    ajoute_attribut(élément, attribut.nom, attribut.valeur)
    /* INCOMPLET : 3. Handle attribute changes. */
}

initialise_élément :: fonc (élément: *Élément, document: *Document, texte: *ChaineInternée) -> rien
{
    élément.genre = GenreNoeud.Élément
    élément.document = document
    élément.texte = texte
}

crée_élément_avec_tag :: fonc (document: *Document, tag: *ChaineInternée) -> *Élément
{
    // les éléments pour les balises SVG ne sont pas présents, espace de noms ?
    élément: *Élément
    si tag == TAG_a {
        élément = loge(HTMLAnchorElement)
    }
    sinon si tag == TAG_form {
        élément = loge(HTMLFormElement)
    }
    sinon si tag == TAG_head {
        élément = loge(HTMLHeadElement)
    }
    sinon si tag == TAG_img {
        élément = loge(HTMLImageElement)
    }
    sinon si tag == TAG_script {
        élément = loge(HTMLScriptElement)
    }
    sinon si tag == TAG_video {
        élément = loge(HTMLVideoElement)
    }
    sinon {
        élément = loge(Élément)
    }

    initialise_élément(élément, document, tag)
    retourne élément
}

est_élément_type :: fonc (noeud: *Noeud, type: chaine) -> *Élément
{
    si noeud.genre != GenreNoeud.Élément {
        retourne nul
    }

    élément := noeud comme *Élément

    si élément.texte == type {
        retourne élément
    }

    retourne nul
}

est_élément_type :: fonc (noeud: *Noeud, tag: *ChaineInternée) -> *Élément
{
    si noeud.genre != GenreNoeud.Élément {
        retourne nul
    }

    élément := noeud comme *Élément

    si élément.texte == tag {
        retourne élément
    }

    retourne nul
}

est_compatible_html5 :: fonc (élément: *Élément) -> bool
{
    discr élément.texte {
        TAG_acronym,
        TAG_applet,
        TAG_basefont,
        TAG_big,
        TAG_center,
        TAG_dir,
        TAG_font,
        TAG_frame,
        TAG_frameset,
        TAG_noframes,
        TAG_strike,
        TAG_tt {
            retourne faux
        }
        sinon {
            retourne vrai
        }
    }
}

/** \} */

fait_partie_de_catégorie_spécial :: fonc (nom: *ChaineInternée) -> bool
{
    // À FAIRE : utilisation d'une recherche binaire
    retourne fait_partie_de(nom,
                            TAG_address, TAG_applet, TAG_area, TAG_article,
                            TAG_aside, TAG_base, TAG_basefont, TAG_bgsound,
                            TAG_blockquote, TAG_body, TAG_br, TAG_button,
                            TAG_caption, TAG_center, TAG_col, TAG_colgroup,
                            TAG_dd, TAG_details, TAG_dir, TAG_div, TAG_dl,
                            TAG_dt, TAG_embed, TAG_fieldset, TAG_figcaption,
                            TAG_figure, TAG_footer, TAG_form, TAG_frame,
                            TAG_frameset, TAG_h1, TAG_h2, TAG_h3, TAG_h4,
                            TAG_h5, TAG_h6, TAG_head, TAG_header, TAG_hgroup,
                            TAG_hr, TAG_html, TAG_iframe, TAG_img, TAG_input,
                            TAG_keygen, TAG_li, TAG_link, TAG_listing, TAG_main,
                            TAG_marquee, TAG_menu, TAG_meta, TAG_nav, TAG_noembed,
                            TAG_noframes, TAG_noscript, TAG_object, TAG_ol, TAG_p,
                            TAG_param, TAG_plaintext, TAG_pre, TAG_script,
                            TAG_section, TAG_select, TAG_source, TAG_style,
                            TAG_summary, TAG_table, TAG_tbody, TAG_td, TAG_template,
                            TAG_textarea, TAG_tfoot, TAG_th, TAG_thead, TAG_title,
                            TAG_tr, TAG_track, TAG_ul, TAG_wbr, TAG_xmp, TAG_mi,
                            TAG_mo, TAG_mn, TAG_ms, TAG_mtext, TAG_annotation_xml,
                            TAG_foreignObject, TAG_desc, TAG_title)
}

enfant_directe_avec_balise :: fonc (élément: *Élément, balise: *ChaineInternée) -> *Élément
{
    pour élément.enfants {
        saufsi it.genre == GenreNoeud.Élément {
            continue
        }

        élément_enfant := (it comme *Élément)
        si élément_enfant.texte == balise {
            retourne élément_enfant
        }
    }

    retourne nul
}

DOMString :: ChaineUTF16

/* ------------------------------------------------------------------------- */
/** \nom HTMLElement
 * https://html.spec.whatwg.org/multipage/dom.html#htmlelement
 * \{ */

HTMLElement :: struct {
    empl base_élément: Élément
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLAnchorElement
 * https://html.spec.whatwg.org/multipage/text-level-semantics.html#htmlanchorelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 * \{ */

HTMLAnchorElement :: struct {
    empl html_element: HTMLElement
}

est_hyperlien :: fonc (anchor: *HTMLAnchorElement) -> bool
{
    retourne anchor.cherche_attribut("href") != nul
}

donne_href :: fonc (anchor: *HTMLAnchorElement) -> DOMString
{
    attribut := anchor.cherche_attribut("href")
    si attribut {
        retourne attribut.valeur
    }
    retourne DOMString()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLFormElement
 * https://html.spec.whatwg.org/multipage/forms.html#htmlformelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
 * \{ */

HTMLFormElement :: struct {
    empl base_élément: Élément
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLHeadElement
 * https://html.spec.whatwg.org/multipage/dom.html#htmlheadelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement
 * \{ */

HTMLHeadElement :: struct {
    empl base_élément: Élément
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLAnchorElement
 * https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement
 * \{ */

HTMLImageElement :: struct {
    empl html_element: HTMLElement
}

donne_src :: fonc (anchor: *HTMLImageElement) -> DOMString
{
    attribut := anchor.cherche_attribut("src")
    si attribut {
        retourne attribut.valeur
    }
    retourne DOMString()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLMediaElement
 * https://html.spec.whatwg.org/multipage/media.html#htmlmediaelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement
 * \{ */

HTMLMediaElement :: struct {
    empl html_element: HTMLElement
}

donne_src :: fonc (anchor: *HTMLMediaElement) -> DOMString
{
    attribut := anchor.cherche_attribut("src")
    si attribut {
        retourne attribut.valeur
    }
    retourne DOMString()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLVideoElement
 * https://html.spec.whatwg.org/multipage/media.html#htmlvideoelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement
 * \{ */

HTMLVideoElement :: struct {
    empl html_media: HTMLMediaElement
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLScriptElement
 * https://html.spec.whatwg.org/multipage/scripting.html#htmlscriptelement
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement
 * \{ */

HTMLScriptElement :: struct {
    empl html_element: HTMLElement
}

donne_src :: fonc (anchor: *HTMLScriptElement) -> DOMString
{
    attribut := anchor.cherche_attribut("src")
    si attribut {
        retourne attribut.valeur
    }
    retourne DOMString()
}

/** \} */
