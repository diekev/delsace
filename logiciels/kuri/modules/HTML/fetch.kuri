importe Chaine
importe CodecDonnées
importe Fondation
importe Internet
importe SysFichier

/* ------------------------------------------------------------------------- */
/** \nom 2.2.5 Request
 * https://fetch.spec.whatwg.org/#requests
 * \{ */

Header :: struct {
    name: chaine
    value: chaine
}

Request :: struct {
    method := "GET"
    url_list: [..]URI
    local_urls_only: bool
    header_list: [..]Header
    unsafe_request: bool
    body: Optionnel(chaine) // À FAIRE : plus complexe
    client: *rien // À FAIRE(settings object)
    reserved_client: *rien // À FAIRE(settings object, environment)
    replaces_client_id: chaine
    window: *rien
    keepalive: bool

    /* "audio", "audioworklet", "document", "embed", "font", "frame", "iframe", "image", "json", "manifest", "object", "paintworklet", "report", "script", "serviceworker", "sharedworker", "style", "track", "video", "webidentity", "worker", or "xslt" */
    destination: chaine

    /* "omit", "same-origin", or "include" */
    credentials_mode := "same-origin"
    use_url_credentials: bool

    /* "no-referrer", "client", or a URL */
    referrer := "client"

    /* https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
     * empty string, "no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", or "unsafe-url" */
    referrer_policy := ""

    /* "same-origin", "cors", "no-cors", "navigate", or "websocket" */
    mode := "no-cors"

    /* "follow", "error", or "manual" */
    redirect_mode := "follow"

    reload_navigation: bool
    history_navigation: bool

    /* "basic", "cors", or "opaque" */
    response_tainting := "basic"

    /* empty string, "download", "imageset", "manifest", "prefetch", "prerender", or "xslt" */
    initiator := ""

    user_activation: bool

    render_blocking: bool
}

définis_url :: fonc (request: *Request, url: URI)
{
    tableau_ajoute(*request.url_list, url)
}

détruit_request :: fonc (request: *Request)
{
    déloge(request.header_list)
    pour request.url_list {
        détruit_uri(it)
    }
    déloge(request.url_list)
    déloge(request)
}

donne_url_courant :: fonc (request: *Request) -> URI
{
    retourne request.url_list[request.url_list.taille - 1]
}

possède_entête :: fonc (request: *Request, nom: chaine) -> bool
{
    pour request.header_list {
        si compare_ascii_insensible_à_la_casse(it.name, nom) {
            retourne vrai
        }
    }
    retourne faux
}

ajoute_entête :: fonc (request: *Request, nom: chaine, valeur: chaine)
{
    entête := Header(nom, valeur)
    tableau_ajoute(*request.header_list, entête)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Response
 * https://fetch.spec.whatwg.org/#concept-response
 * \{ */

ResponseBodyInfo :: struct {
    encoded_size: z32
    decodede_size: z32
    content_type: chaine
}

Response :: struct {
    /* "basic", "cors", "default", "error", "opaque", or "opaqueredirect" */
    type := "default"
    aborted_flag: bool

    url_list: [..]URI

    /* Entre 0 et 999. */
    status: z32

    status_message: chaine

    header_list: [..]Header

    body: Optionnel(chaine) // À FAIRE : plus complexe

    /* the empty string, "local", or "validated" */
    cache_state: chaine

    cors_exposed_header_name_list: [..]chaine

    range_requested_flag: bool

    request_includes_credentials: bool

    timing_allow_passed_flag: bool

    body_info: *ResponseBodyInfo

    // A response has an associated service worker timing info (null or a service worker timing info), which is initially null.
    // A response has an associated has-cross-origin-redirects (a boolean), which is initially false.
}

détruit_response :: fonc (response: *Response)
{
    si response.body.possède_valeur() {
        body := response.body.Quelque
        déloge(body)
    }

    si response.body_info {
        déloge_si_logée(response.body_info.content_type)
    }

    déloge(response.body_info)
    déloge(response)
}

/* https://fetch.spec.whatwg.org/#concept-response-url */
donne_url :: fonc (response: *Response) -> Optionnel(URI)
{
    si response.url_list.taille == 0 {
        retourne
    }
    retourne response.url_list[response.url_list.taille - 1]
}

donne_mime_type :: fonc (response: *Response) -> chaine
{
    si response.body_info {
        retourne response.body_info.content_type
    }

    imprime("À FAIRE : %\n", #nom_de_cette_fonction)
    retourne ""
}

possède_entête :: fonc (response: *Response, nom: chaine) -> bool
{
    pour response.header_list {
        si compare_ascii_insensible_à_la_casse(it.name, nom) {
            retourne vrai
        }
    }
    retourne faux
}

/* https://fetch.spec.whatwg.org/#concept-network-error */
network_error :: fonc () -> *Response
{
    résultat := loge(Response)
    résultat.type = "error"
    résultat.status = 0
    résultat.body_info = loge(ResponseBodyInfo)
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FetchParams
 * https://fetch.spec.whatwg.org/#fetch-params
 * \{ */

/* must be an algorithm accepting an integer representing the number of bytes transmitted */
BaseProcessRequestBodyChunkLength :: struct {
    sur_rappel: fonc(*BaseProcessRequestBodyChunkLength, n64)(rien)
    sur_destruction: fonc (*BaseProcessRequestBodyChunkLength)(rien)
} 

/* must be an algorithm accepting no arguments */
BaseProcessRequestEndOfBody :: struct {
    sur_rappel: fonc(*BaseProcessRequestEndOfBody)(rien)
    sur_destruction: fonc (*BaseProcessRequestEndOfBody)(rien)
}

/* must be an algorithm accepting a response */
BaseProcessEarlyHintsResponse :: struct {
    sur_rappel: fonc(*BaseProcessEarlyHintsResponse, *Response)(rien)
    sur_destruction: fonc (*BaseProcessEarlyHintsResponse)(rien)
}

/* must be an algorithm accepting a response */
BaseProcessResponse :: struct {
    sur_rappel: fonc(*BaseProcessResponse, *Response)(rien)
    sur_destruction: fonc (*BaseProcessResponse)(rien)
}

/* must be an algorithm accepting a response */
BaseProcessResponseEndOfBody :: struct {
    sur_rappel: fonc(*BaseProcessResponseEndOfBody, *Response)(rien)
    sur_destruction: fonc (*BaseProcessResponseEndOfBody)(rien)
}

/* must be an algorithm accepting a response and null, failure, or a byte sequence */
BaseProcessResponseConsumeBody :: struct {
    /* À FAIRE : null, failure, or a byte sequence  */
    sur_rappel: fonc(*BaseProcessResponseConsumeBody, []octet)(rien)
    sur_destruction: fonc (*BaseProcessResponseConsumeBody)(rien)
}

FetchParams :: struct {
    request: *Request

    /* Null or an algorithm. */
    process_request_body_chunk_length: *BaseProcessRequestBodyChunkLength
    process_request_end_of_body: *BaseProcessRequestEndOfBody
    process_early_hints_response: *BaseProcessEarlyHintsResponse
    process_response: *BaseProcessResponse
    process_response_end_of_body: *BaseProcessResponseEndOfBody
    process_response_consume_body: *BaseProcessResponseConsumeBody

    /* Null, a global object, or a parallel queue. */
    task_destination: *rien

    cross_origin_isolated_capability: bool

    controller: *FetchController

    timing_info: FetchTimingInfo

    /* Null, "pending", or a response. */
    preloaded_response_candidate: *rien
}

détruit_fetch_params :: fonc (empl fetch_params: *FetchParams)
{
    si process_request_body_chunk_length && process_request_body_chunk_length.sur_destruction {
        process_request_body_chunk_length.sur_destruction(process_request_body_chunk_length)
    }

    si process_request_end_of_body && process_request_end_of_body.sur_destruction {
        process_request_end_of_body.sur_destruction(process_request_end_of_body)
    }

    si process_early_hints_response && process_early_hints_response.sur_destruction {
        process_early_hints_response.sur_destruction(process_early_hints_response)
    }

    si process_response && process_response.sur_destruction {
        process_response.sur_destruction(process_response)
    }

    si process_response_end_of_body && process_response_end_of_body.sur_destruction {
        process_response_end_of_body.sur_destruction(process_response_end_of_body)
    }

    si process_response_consume_body && process_response_consume_body.sur_destruction {
        process_response_consume_body.sur_destruction(process_response_consume_body)
    }

    déloge(fetch_params)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FetchController
 * https://fetch.spec.whatwg.org/#fetch-controller
 * \{ */

FetchController :: struct {
    /* "ongoing", "terminated", or "aborted" */
    state := "ongoing"

    full_timing_info: Optionnel(FetchTimingInfo)

    /* Null or an algorithm accepting a global object. */
    report_timing_steps: *rien

    /* Null or a Record (result of StructuredSerialize). */
    serialized_abort_reason: *rien

    /* Null or an algorithm accepting nothing. */
    next_manual_redirect_steps: *rien
}

détruit_fetch_controller :: fonc (fetch_controller: *FetchController)
{
    déloge(fetch_controller)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FetchTimingInfo
 * https://fetch.spec.whatwg.org/#fetch-timing-info
 * \{ */

FetchTimingInfo :: struct {
    start_time: DOMHighResTimeStamp
    redirect_start_time: DOMHighResTimeStamp
    redirect_end_time: DOMHighResTimeStamp
    post_redirect_start_time: DOMHighResTimeStamp
    final_service_worker_start_time: DOMHighResTimeStamp
    final_network_request_start_time: DOMHighResTimeStamp
    first_interim_network_response_start_time: DOMHighResTimeStamp
    final_network_response_start_time: DOMHighResTimeStamp
    end_time: DOMHighResTimeStamp

    /* Null or a connection timing info. */
    // final connection timing info (default null)

    server_timing_headers: [..]chaine

    render_blocking: bool
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom 4. Fetching
 * https://fetch.spec.whatwg.org/#fetching
 * \{ */

fetch :: fonc (user_agent: *UserAgent,
               request: *Request,
               process_request_body_chunk_length: *BaseProcessRequestBodyChunkLength = nul,
               process_request_end_of_body: *BaseProcessRequestEndOfBody = nul,
               process_early_hints_response: *BaseProcessEarlyHintsResponse = nul,
               process_response: *BaseProcessResponse = nul,
               process_response_end_of_body: *BaseProcessResponseEndOfBody = nul,
               process_response_consume_body: *BaseProcessResponseConsumeBody = nul,
               use_parallel_queue := faux) -> *FetchController
{
    // 1. Assert: request’s mode is "navigate" or processEarlyHintsResponse is null.
    assert(request.mode == "navigate" || process_early_hints_response == nul)

    // 2. Let taskDestination be null.
    task_destination: *rien

    // 3. Let crossOriginIsolatedCapability be false.
    cross_origin_isolated_capability := faux

    // 4. If request’s client is non-null, then:

        // 1. Set taskDestination to request’s client’s global object.

        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin isolated capability.

    // 5. If useParallelQueue is true, then set taskDestination to the result of starting a new parallel queue.
    si use_parallel_queue {
        panique("parallel queue non-implémentée")
    }

    // À FAIRE : 6. Let timingInfo be a new fetch timing info whose start time and post-redirect start time are the coarsened shared current time given crossOriginIsolatedCapability, and render-blocking is set to request’s render-blocking.
    timing_info: FetchTimingInfo
    timing_info.render_blocking = request.render_blocking

    // 7. Let fetchParams be a new fetch params whose
    //    request is request,
    //    timing info is timingInfo,
    //    process request body chunk length is processRequestBodyChunkLength,
    //    process request end-of-body is processRequestEndOfBody,
    //    process early hints response is processEarlyHintsResponse,
    //    process response is processResponse,
    //    process response consume body is processResponseConsumeBody,
    //    process response end-of-body is processResponseEndOfBody,
    //    task destination is taskDestination, and
    //    cross-origin isolated capability is crossOriginIsolatedCapability.
    fetch_params := loge(FetchParams)
    diffère détruit_fetch_params(fetch_params)

    fetch_params.request = request
    fetch_params.timing_info = timing_info
    fetch_params.process_request_body_chunk_length = process_request_body_chunk_length
    fetch_params.process_request_end_of_body = process_request_end_of_body
    fetch_params.process_early_hints_response = process_early_hints_response
    fetch_params.process_response = process_response
    fetch_params.process_response_end_of_body = process_response_end_of_body
    fetch_params.process_response_consume_body = process_response_consume_body
    fetch_params.task_destination = task_destination
    fetch_params.cross_origin_isolated_capability = cross_origin_isolated_capability

    // 8. If request’s body is a byte sequence, then set request’s body to request’s body as a body.

    // 9. If request’s window is "client", then set request’s window to request’s client, if request’s client’s global object is a Window object; otherwise "no-window".

    // 10. If request’s origin is "client", then set request’s origin to request’s client’s origin.

    // 11. If all of the following conditions are true:
    //     request’s URL’s scheme is an HTTP(S) scheme
    //     request’s mode is "same-origin", "cors", or "no-cors"
    //     request’s window is an environment settings object
    //     request’s method is `GET`
    //     request’s unsafe-request flag is not set or request’s header list is empty
    //     then:

        // 1. Assert: request’s origin is same origin with request’s client’s origin.

        // 2. Let onPreloadedResponseAvailable be an algorithm that runs the following step given a response response: set fetchParams’s preloaded response candidate to response.

        // 3. Let foundPreloadedResource be the result of invoking consume a preloaded resource for request’s window, given request’s URL, request’s destination, request’s mode, request’s credentials mode, request’s integrity metadata, and onPreloadedResponseAvailable.

        // 4. If foundPreloadedResource is true and fetchParams’s preloaded response candidate is null, then set fetchParams’s preloaded response candidate to "pending".

    // 12. If request’s policy container is "client", then:

        // 1. If request’s client is non-null, then set request’s policy container to a clone of request’s client’s policy container. [HTML]

        // 2. Otherwise, set request’s policy container to a new policy container.

    // 13. If request’s header list does not contain `Accept`, then:
    saufsi possède_entête(request, "Accept") {
        // 1. Let value be `*/*`.
        value := "*/*"

        // 2. If request’s initiator is "prefetch", then set value to the document `Accept` header value.
        si request.initiator == "prefetch" {
            value = donne_document_accept_header_value()
        }
        // 3. Otherwise, the user agent should set value to the first matching statement, if any, switching on request’s destination:
        //     "document"
        //     "frame"
        //     "iframe"
        //         the document `Accept` header value 
        //     "image"
        //         `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
        //     "json"
        //         `application/json,*/*;q=0.5`
        //     "style"
        //         `text/css,*/*;q=0.1`
        sinon {
            discr request.destination {
                "document", "frame", "iframe" {
                    value = donne_document_accept_header_value()
                }
                "image" {
                    value = "image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5"
                }
                "json" {
                    value = "application/json,*/*;q=0.5"
                }
                "style" {
                    "text/css,*/*;q=0.1"
                }
                sinon {}
            }
        }

        // 4. Append (`Accept`, value) to request’s header list.
        ajoute_entête(request, "Accept", value)
    }

    // 14. If request’s header list does not contain `Accept-Language`, then user agents should append (`Accept-Language, an appropriate header value) to request’s header list.

    // 15. If request’s internal priority is null, then use request’s priority, initiator, destination, and render-blocking in an implementation-defined manner to set request’s internal priority to an implementation-defined object.

    // 16. If request is a subresource request, then:

        // 1. Let record be a new fetch record whose request is request and controller is fetchParams’s controller.

        // 2. Append record to request’s client’s fetch group list of fetch records.

    // 17. Run main fetch given fetchParams.
    _ := main_fetch(user_agent, fetch_params)

    // 18. Return fetchParams’s controller.
    retourne fetch_params.controller
}

/* https://fetch.spec.whatwg.org/#document-accept-header-value */
donne_document_accept_header_value :: fonc () -> chaine
{
    retourne "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 4.1 Main Fetch
 * https://fetch.spec.whatwg.org/#main-fetch
 * \{ */

main_fetch :: fonc (user_agent: *UserAgent, fetch_params: *FetchParams, recursive := faux) -> *Response
{
    // 1. Let request be fetchParams’s request.
    request := fetch_params.request

    // 2. Let response be null.
    response: *Response

    // 3. If request’s local-URLs-only flag is set and request’s current URL is not local, then set response to a network error.

    // 4. Run report Content Security Policy violations for request.

    // 5. Upgrade request to a potentially trustworthy URL, if appropriate.

    // 6. Upgrade a mixed content request to a potentially trustworthy URL, if appropriate.

    // 7. If should request be blocked due to a bad port, should fetching request be blocked as mixed content, or should request be blocked by Content Security Policy returns blocked, then set response to a network error.

    // 8. If request’s referrer policy is the empty string, then set request’s referrer policy to request’s policy container’s referrer policy.

    // 9. If request’s referrer is not "no-referrer", then set request’s referrer to the result of invoking determine request’s referrer. [REFERRER]

    // 10. Set request’s current URL’s scheme to "https" if all of the following conditions are true:
    //     request’s current URL’s scheme is "http"
    //     request’s current URL’s host is a domain
    //     Matching request’s current URL’s host per Known HSTS Host Domain Name Matching results in either a superdomain match with an asserted includeSubDomains directive or a congruent match (with or without an asserted includeSubDomains directive) [HSTS]; or DNS resolution for the request finds a matching HTTPS RR per section 9.5 of [SVCB]. [HSTS] [SVCB]

    // 11. If recursive is false, then run the remaining steps in parallel.

    // 12. If response is null, then set response to the result of running the steps corresponding to the first matching statement:
    si response == nul {
        // fetchParams’s preloaded response candidate is non-null
            // Wait until fetchParams’s preloaded response candidate is not "pending".

            // Assert: fetchParams’s preloaded response candidate is a response.

            // Return fetchParams’s preloaded response candidate.

        // request’s current URL’s origin is same origin with request’s origin, and request’s response tainting is "basic"
        // request’s current URL’s scheme is "data"
        // request’s mode is "navigate" or "websocket"
        si request.mode == "navigate" || request.mode == "websocket" {
            // Set request’s response tainting to "basic".
            request.response_tainting = "basic"

            // Return the result of running scheme fetch given fetchParams.
            response = scheme_fetch(user_agent, fetch_params)
        }

        // request’s mode is "same-origin"
            // Return a network error.

        // request’s mode is "no-cors"
        sinon si request.mode == "no-cors" {
            // If request’s redirect mode is not "follow", then return a network error.
            si request.redirect_mode != "follow" {
                response = network_error()
            }
            sinon {
                // Set request’s response tainting to "opaque".
                request.response_tainting = "opaque"

                // Return the result of running scheme fetch given fetchParams.
                response = scheme_fetch(user_agent, fetch_params)
            }
        }

        // request’s current URL’s scheme is not an HTTP(S) scheme
            // Return a network error.

        // request’s use-CORS-preflight flag is set
        // request’s unsafe-request flag is set and either request’s method is not a CORS-safelisted method or CORS-unsafe request-header names with request’s header list is not empty
            // Set request’s response tainting to "cors".

            // Let corsWithPreflightResponse be the result of running HTTP fetch given fetchParams and true.
        
            // If corsWithPreflightResponse is a network error, then clear cache entries using request.

            // Return corsWithPreflightResponse.

        // Otherwise
            // Set request’s response tainting to "cors".

            // Return the result of running HTTP fetch given fetchParams.
    }

    // 13. If recursive is true, then return response.
    si recursive {
        retourne response
    }

    // 14. If response is not a network error and response is not a filtered response, then:

        // 1. If request’s response tainting is "cors", then:

            // 1. Let headerNames be the result of extracting header list values given `Access-Control-Expose-Headers` and response’s header list.

            // 2. If request’s credentials mode is not "include" and headerNames contains `*`, then set response’s CORS-exposed header-name list to all unique header names in response’s header list.

            // 3. Otherwise, if headerNames is non-null or failure, then set response’s CORS-exposed header-name list to headerNames.

        // 2. Set response to the following filtered response with response as its internal response, depending on request’s response tainting:
                // "basic"
                // basic filtered response
                // "cors"
                // CORS filtered response
                // "opaque"
                // opaque filtered response

    // 15. Let internalResponse be response, if response is a network error; otherwise response’s internal response.

    // 16. If internalResponse’s URL list is empty, then set it to a clone of request’s URL list.

    // 17. If request has a redirect-tainted origin, then set internalResponse’s has-cross-origin-redirects to true.

    // 18. If request’s timing allow failed flag is unset, then set internalResponse’s timing allow passed flag.

    // 19. If response is not a network error and any of the following returns blocked
    //     should internalResponse to request be blocked as mixed content
    //     should internalResponse to request be blocked by Content Security Policy
    //     should internalResponse to request be blocked due to its MIME type
    //     should internalResponse to request be blocked due to nosniff
    //     then set response and internalResponse to a network error.

    // 20. If response’s type is "opaque", internalResponse’s status is 206, internalResponse’s range-requested flag is set, and request’s header list does not contain `Range`, then set response and internalResponse to a network error.

    // 21. If response is not a network error and either request’s method is `HEAD` or `CONNECT`, or internalResponse’s status is a null body status, set internalResponse’s body to null and disregard any enqueuing toward it (if any).

    // 22. If request’s integrity metadata is not the empty string, then:

        // 1. Let processBodyError be this step: run fetch response handover given fetchParams and a network error.

        // 2. If response’s body is null, then run processBodyError and abort these steps.

        // 3. Let processBody given bytes be these steps:

            // 1. If bytes do not match request’s integrity metadata, then run processBodyError and abort these steps. [SRI]

            // 2. Set response’s body to bytes as a body.

            // 3. Run fetch response handover given fetchParams and response.

        // 4. Fully read response’s body given processBody and processBodyError.

    // 23. Otherwise, run fetch response handover given fetchParams and response.
    response_handover(fetch_params, response)

    // Non-spécifié
    retourne response
}

/* https://fetch.spec.whatwg.org/#fetch-finale */
response_handover :: fonc (fetch_params: *FetchParams, response: *Response)
{
    // À FAIRE : implémente
    si fetch_params.process_response {
        fetch_params.process_response.sur_rappel(fetch_params.process_response, response)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 4.2 Scheme Fetch
 * https://fetch.spec.whatwg.org/#scheme-fetch
 * \{ */

scheme_fetch :: fonc (user_agent: *UserAgent, fetch_params: *FetchParams) -> *Response
{
    // À FAIRE 1. If fetchParams is canceled, then retun the appropriate network error for fetchParams.

    // 2. Let request be fetchParams’s request.
    request := fetch_params.request

    // 3. Switch on request’s current URL’s scheme and run the associated steps:
    schéma := request.donne_url_courant().schéma

    si schéma == "about" {
        panique("about non-implémenté")
    }
    sinon si schéma == "blob" {
        panique("blob non-implémenté")
    }
    sinon si schéma == "data" {
        // 1. Let dataURLStruct be the result of running the data: URL processor on request’s current URL.
        opt_data_url_struct := data_url_processor(request.donne_url_courant())

        // 2. If dataURLStruct is failure, then return a network error.
        saufsi opt_data_url_struct.possède_valeur() {
            retourne network_error()
        }

        data_url_struct := opt_data_url_struct.Quelque

        // À FAIRE 3. Let mimeType be dataURLStruct’s MIME type, serialized.
        mime_type := data_url_struct.mime_type

        // 4. Return a new response whose status message is `OK`, header list is « (`Content-Type`, mimeType) », and body is dataURLStruct’s body as a body.
        // À FAIRE : entêtes pour les réponses.
        contenu := data_url_struct.body

        response := loge(Response)
        response.status = 200

        body_info := loge(ResponseBodyInfo)
        body_info.decodede_size = contenu.taille comme z32
        body_info.content_type = copie_chaine(mime_type)

        response.body_info = body_info
        response.body = contenu

        retourne response
    }
    sinon si schéma == "file" {
        chemin := CheminFichier(request.donne_url_courant().chemin)

        /* À FAIRE : permissions. */
        si est_un_fichier_régulier(chemin) {
            si chemin.extension() == ".html" {
                contenu := contenu_fichier_texte(chemin)

                response := loge(Response)
                response.status = 200

                body_info := loge(ResponseBodyInfo)
                body_info.decodede_size = contenu.taille comme z32
                body_info.content_type = "text/html"

                response.body_info = body_info
                response.body = contenu

                retourne response
            }

            si chemin.extension() == ".png" || chemin.extension() == ".jpg" || chemin.extension() == ".jpeg" {
                contenu := contenu_fichier_texte(chemin)

                response := loge(Response)
                response.status = 200

                body_info := loge(ResponseBodyInfo)
                body_info.decodede_size = contenu.taille comme z32
                body_info.content_type = "image/png" // XXX par extension

                response.body_info = body_info
                response.body = contenu

                retourne response
            }

            si chemin.extension() == ".css" {
                contenu := contenu_fichier_texte(chemin)

                response := loge(Response)
                response.status = 200

                body_info := loge(ResponseBodyInfo)
                body_info.decodede_size = contenu.taille comme z32
                body_info.content_type = "text/css"

                response.body_info = body_info
                response.body = contenu

                retourne response
            }
        }

        retourne network_error()
    }
    sinon si schéma == "http" || schéma == "https" {
        retourne user_agent.lance_requête(request)
    }

    retourne network_error()
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom 6. Data URLs
 * https://fetch.spec.whatwg.org/#data-urls
 * \{ */

/* https://fetch.spec.whatwg.org/#data-url-struct */
DataURLStruct :: struct {
    mime_type: chaine
    body: chaine
}

/* https://fetch.spec.whatwg.org/#data-url-processor */
data_url_processor :: fonc (url: URI) -> Optionnel(DataURLStruct)
{
    // 1. Assert: dataURL’s scheme is "data".
    assert(url.schéma == "data")

    // 2. Let input be the result of running the URL serializer on dataURL with exclude fragment set to true.
    input := recompose_uri(*url)
    input_orig := input
    diffère déloge(input_orig)

    // 3. Remove the leading "data:" from input.
    input = avance(input, 5)

    // 4. Let position point at the start of input.
    position : z64 = 0

    // 5. Let mimeType be the result of collecting a sequence of code points that are not equal to U+002C (,), given position.
    position_virgule := trouve_caractère_depuis_le_début(input, ',')
    si position_virgule == -1 {
        position_virgule = input.taille
    }
    mimetype := input.sous_chaine(position, position_virgule)
    position = position_virgule

    // 6. Strip leading and trailing ASCII whitespace from mimeType.
    mimetype = supprime_espaces_blancs(mimetype)

    // 7. If position is past the end of input, then return failure.
    si position >= input.taille {
        retourne
    }

    // 8. Advance position by 1.
    position += 1

    // 9. Let encodedBody be the remainder of input.
    encoded_body := avance(input, position)

    // 10. Let body be the percent-decoding of encodedBody.
    body := résoud_échappement_url(encoded_body)
    diffère déloge(body)

    // 11. If mimeType ends with U+003B (;), followed by zero or more U+0020 SPACE, followed by an ASCII case-insensitive match for "base64", then:
    si mime_type_fini_par_base64(mimetype) {
        // À FAIRE 1. Let stringBody be the isomorphic decode of body.
        string_body := body

        // 2. Set body to the forgiving-base64 decode of stringBody.
        nouveau_body := décode_base64(string_body)
        déloge(body)
        body = nouveau_body

        // À FAIRE : 3. If body is failure, then return failure.

        // 4. Remove the last 6 code points from mimeType.
        mimetype.taille -= 6

        // 5. Remove trailing U+0020 SPACE code points from mimeType, if any.
        mimetype = supprime_espaces_blancs_à_la_fin(mimetype)

        // 6. Remove the last U+003B (;) from mimeType.
        mimetype.taille -= 1
    }

    // À FAIRE : 12. If mimeType starts with ";", then prepend "text/plain" to mimeType.
    // si mime_type.taille > 0 && mime_type[0] == ';' {
    // }

    // À FAIRE : 13. Let mimeTypeRecord be the result of parsing mimeType.

    // À FAIRE : 14. If mimeTypeRecord is failure, then set mimeTypeRecord to text/plain;charset=US-ASCII.

    // 15. Return a new data: URL struct whose MIME type is mimeTypeRecord and body is body.
    résultat: DataURLStruct
    résultat.mime_type = copie_chaine(mimetype)
    résultat.body = copie_chaine(body)
    retourne résultat
}

mime_type_fini_par_base64 :: fonc (mime_type: chaine) -> bool
{
    position_point_virgule := trouve_caractère_depuis_la_fin(mime_type, ';')
    si position_point_virgule == -1 {
        retourne faux
    }

    dernier_paramètre := mime_type.sous_chaine(position_point_virgule + 1, mime_type.taille)
    dernier_paramètre = supprime_espaces_blancs_au_début(dernier_paramètre)
    retourne compare_ascii_insensible_à_la_casse(dernier_paramètre, "base64")
}

/** \} */
