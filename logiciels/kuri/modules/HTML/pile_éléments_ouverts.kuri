
PileÉlémentsOuverts :: struct {
    éléments: []*Élément
}

noeud_courant :: fonc (pile: *PileÉlémentsOuverts) -> *Élément
{
    retourne pile.éléments[pile.éléments.taille - 1]
}

noeud_précédent :: fonc (pile: *PileÉlémentsOuverts) -> *Élément
{
    retourne pile.éléments[pile.éléments.taille - 2]
}

empile :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément)
{
    tableau_ajoute(*pile.éléments, élément)
}

dépile :: fonc (pile: *PileÉlémentsOuverts)
{
    pile.éléments.taille -= 1
}

taille :: fonc (pile: *PileÉlémentsOuverts) -> z64
{
    retourne pile.éléments.taille
}

possède_dans_portée_ex :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine, liste: ...chaine) -> bool
{
    index := pile.éléments.taille - 1

    boucle {
        noeud := pile.éléments[index]

        si noeud.texte == nom_tag {
            retourne vrai
        }

        si fait_partie_de(noeud.texte, ...liste) {
            retourne faux
        }

        index -= 1
    }

    retourne faux
}

// À FAIRE : gestion des espaces de nom
possède_dans_portée_button :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine) -> bool
{
    retourne possède_dans_portée_ex(pile, nom_tag, "button", "applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title")
}

possède_dans_portée_list_item :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine) -> bool
{
    retourne possède_dans_portée_ex(pile, nom_tag, "ol", "ul", "applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title")
}

possède_dans_portée_table :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine) -> bool
{
    retourne possède_dans_portée_ex(pile, nom_tag, "html", "table", "template")
}

possède_dans_portée_select :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine) -> bool
{
    retourne possède_dans_portée_ex(pile, nom_tag, "optgroup", "option")
}

possède_dans_portée :: fonc (pile: *PileÉlémentsOuverts, nom_tag: chaine) -> bool
{
    retourne possède_dans_portée_ex(pile, nom_tag, "applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title")
}

possède_dans_portée :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément) -> bool
{
    pour pile.éléments {
        si it == élément {
            retourne vrai
        }
    }

    retourne faux
}

possède :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément) -> bool
{
    pour pile.éléments {
        si it == élément {
            retourne vrai
        }
    }

    retourne faux
}

supprime_élément :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément)
{
    index : z64 = 0

    pour pile.éléments {
        si it == élément {
            index = index_it
            arrête
        }
    }

    tableau_supprime_index(*pile.éléments, index)
}

élément_précédent :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément) -> *Élément
{
    élément_préc : *Élément = nul

    pour pile.éléments {
        si it == élément {
            arrête
        }

        élément_préc = it
    }

    retourne élément_préc
}

élément_spécial_précédent :: fonc (pile: *PileÉlémentsOuverts, élément: *Élément) -> *Élément
{
    élément_préc : *Élément = nul

    pour pile.éléments {
        si it == élément {
            arrête
        }

        si fait_partie_de_catégorie_spécial(it.texte) {
            élément_préc = it
        }
    }

    retourne élément_préc
}
