importe Fondation
importe Ensemble

est_espace_blanc_html :: fonc (c: z8) -> bool
{
    retourne c == ' ' || c == '\t' || c == 0x0C || c == '\n'
}

est_espace_blanc_html :: fonc (c: n32) -> bool
{
    retourne c == 0x20 || c == 0x09 || c == 0x0C || c == 0x0A
}

GenreLexème :: énum {
    Doctype
    DébutTag
    FinTag
    Commentaire
    Caractère
    FinDeFichier
}

Lexème :: struct {
    genre: GenreLexème

    // général
    nom: chaine

    // doctype
    identifiant_public_doctype: chaine
    identifiant_système_doctype: chaine
    drapeau_force_quirks := faux

    // tag début ou fin
    auto_fermant := faux
    drapeau_auto_fermant_reconnu := faux
    attributs: []Attribut

    // caractère
    point_de_code: n32

    // commentaire
    données: chaine

    attribut_courant : *Attribut
}

cherche_attribut :: fonc (lexème: *Lexème, nom: chaine) -> *Attribut
{
    pour lexème.attributs {
        si it.nom == nom {
            retourne *lexème.attributs[index_it]
        }
    }

    retourne nul
}

reconnait_drapeau_auto_fermant :: fonc (lexème: *Lexème)
{
    lexème.drapeau_auto_fermant_reconnu = lexème.auto_fermant
}

ajoute_attribut :: fonc (lexème: *Lexème)
{
    attribut : Attribut
    tableau_ajoute(*lexème.attributs, attribut)
    lexème.attribut_courant = *lexème.attributs[lexème.attributs.taille - 1]
}

copie_lexème :: fonc (lexème: *Lexème) -> Lexème
{
    nouveau_lexème : Lexème
    nouveau_lexème.genre = lexème.genre
    nouveau_lexème.nom = copie_chaine(lexème.nom)

    pour lexème.attributs {
        ajoute_attribut(*nouveau_lexème)
        nouveau_lexème.attribut_courant.nom = copie_chaine(it.nom)
        nouveau_lexème.attribut_courant.valeur = copie_chaine(it.valeur)
    }

    retourne nouveau_lexème
}

détruit_lexème :: fonc (lexème: *Lexème)
{
    discr lexème.genre {
        Doctype {
            déloge lexème.nom
            déloge lexème.identifiant_public_doctype
            déloge lexème.identifiant_système_doctype
        }
        DébutTag {
            déloge lexème.nom

            pour lexème.attributs {
                déloge it.nom
                déloge it.valeur
            }

            déloge lexème.attributs
        }
        FinTag {
            déloge lexème.nom
        }
        Commentaire {
            déloge lexème.données
        }
        Caractère {
            // RÀF
        }
        FinDeFichier {
            // RÀF
        }
    }
}

FileLexème :: struct {
    lexèmes : []Lexème
}

enfile :: fonc (file: *FileLexème, lexème: Lexème)
{
    tableau_ajoute(*file.lexèmes, lexème)
}

défile :: fonc (file: *FileLexème) -> Lexème
{
    lexème := file.lexèmes[0]

    pour 1 ... file.lexèmes.taille - 1 {
        file.lexèmes[index_it] = file.lexèmes[it]
    }

    file.lexèmes.taille -= 1

    retourne lexème
}

est_vide :: fonc (file: *FileLexème) -> bool
{
    retourne file.lexèmes.taille == 0
}

// --------------------------------------------

FIN_DE_FICHIER :: 0xffffffff comme n32

ÉtatLexage :: énum {
    Data
    RCDATA
    RAWTEXT
    ScriptData
    PLAINTEXT
    TagOpen
    EndTagOpen
    TagName
    RCDATALessThanSign
    RCDATAEndTagOpen
    RCDATAEndTagName
    RAWTEXTLessThanSign
    RAWTEXTEndTagOpen
    RAWTEXTEndTagName
    ScriptDataLessThanSign
    ScriptDataEndTagOpen
    ScriptDataEndTagName
    ScriptDataEscapeStart
    ScriptDataEscapeStartDash
    ScriptDataEscaped
    ScriptDataEscapedDash
    ScriptDataEscapedDashDash
    ScriptDataEscapedLessThanSign
    ScriptDataEscapedEndTagOpen
    ScriptDataEscapedEndTagName
    ScriptDataDoubleEscapeStart
    ScriptDataDoubleEscaped
    ScriptDataDoubleEscapedDash
    ScriptDataDoubleEscapedDashDash
    ScriptDataDoubleEscapedLessThanSign
    ScriptDataDoubleEscapeEnd
    BeforeAttributeName
    AttributeName
    AfterAttributeName
    BeforeAttributeValue
    AttributeValueDoubleQuoted
    AttributeValueSingleQuoted
    AttributeValueUnquoted
    AfterAttributeValueQuoted
    SelfClosingStartTag
    BogusComment
    MarkupDeclarationOpen
    CommentStart
    CommentStartDash
    Comment
    CommentLessThanSign
    CommentLessThanSignBang
    CommentLessThanSignBangDash
    CommentLessThanSignBangDashDash
    CommentEndDash
    CommentEnd
    CommentEndBang
    DOCTYPE
    BeforeDOCTYPEName
    DOCTYPEName
    AfterDOCTYPEName
    AfterDOCTYPEPublicKeyword
    BeforeDOCTYPEPublicIdentifier
    DOCTYPEPublicIdentifierDoubleQuoted
    DOCTYPEPublicIdentifierSingleQuoted
    AfterDOCTYPEPublicIdentifier
    BetweenDOCTYPEPublicAndSystemIdentifiers
    AfterDOCTYPESystemKeyword
    BeforeDOCTYPESystemIdentifier
    DOCTYPESystemIdentifierDoubleQuoted
    DOCTYPESystemIdentifierSingleQuoted
    AfterDOCTYPESystemIdentifier
    BogusDOCTYPE
    CDATASection
    CDATASectionBracket
    CDATASectionEnd
    CharacterReference
    NamedCharacterReference
    AmbiguousAmpersand
    NumericCharacterReference
    HexadecimalCharacterReferenceStart
    DecimalCharacterReferenceStart
    HexadecimalCharacterReference
    DecimalCharacterReference
    NumericCharacterReferenceEnd
}

Lexeuse :: struct {
    état := ÉtatLexage.Data
    état_retour := ÉtatLexage.Data

    document: chaine
    curseur := 0

    lexème_courant : Lexème

    tampon_temporaire : ChaineUTF32

    nom_dernier_tag_début : chaine

    code_référence_caractère : n32

    file_lexèmes : FileLexème
}

initialise_lexeuse :: fonc (document: chaine) -> Lexeuse
{
    retourne Lexeuse(document = document)
}

détruit_lexeuse :: fonc (lexeuse: *Lexeuse)
{
    détruit_chaine(*lexeuse.tampon_temporaire)
    déloge lexeuse.nom_dernier_tag_début
    déloge lexeuse.file_lexèmes.lexèmes
}

point_de_code_suivant :: fonc (lexeuse: *Lexeuse) -> n32
{
    si lexeuse.a_fini() {
        retourne 0xffffffff
    }

    position := lexeuse.curseur

    no := nombre_octets_utf8_rapide(*lexeuse.document[position])

    si no == 0 {
        lexeuse.curseur += 1
        retourne 0x0
    }

    lexeuse.curseur += no comme z32
    retourne converti_utf8_utf32(*lexeuse.document[position]) comme n32
}

a_fini :: fonc (lexeuse: *Lexeuse) -> bool
{
    retourne lexeuse.curseur >= lexeuse.document.taille
}

crée_lexème :: fonc (lexeuse: *Lexeuse, genre : GenreLexème)
{
    lexeuse.lexème_courant = Lexème(genre = genre)
}

émet_lexème :: fonc (lexeuse: *Lexeuse) -> Lexème
{
    si lexeuse.lexème_courant.genre == GenreLexème.DébutTag {
        déloge lexeuse.nom_dernier_tag_début
        lexeuse.nom_dernier_tag_début = copie_chaine(lexeuse.lexème_courant.nom)
    }

    retourne lexeuse.lexème_courant
}

imprime_et_détruit_lexème :: fonc (lexème_courant: *Lexème)
{
    discr lexème_courant.genre {
        Doctype {
            imprime("DOCTYPE { nom : % }\n", lexème_courant.nom)
        }
        DébutTag {
            imprime("Début Tag { nom : %", lexème_courant.nom)

            si lexème_courant.attributs {
                imprime(", attributs : ")
                virgule := "{ "

                pour lexème_courant.attributs {
                    imprime("%% = %", virgule, it.nom, it.valeur)
                    virgule = ", "
                }

                imprime(" }")
            }

            imprime(" }\n")
        }
        FinTag {
            imprime("Fin Tag { nom : % }\n", lexème_courant.nom)
        }
        Commentaire {
            imprime("Commentaire\n")
        }
        Caractère {
            imprime("Caractère\n")
        }
        FinDeFichier {
            imprime("FinDeFichier\n")
        }
    }

    détruit_lexème(lexème_courant)
}

émet_lexème_fin_de_fichier :: fonc (lexeuse: *Lexeuse) -> Lexème
{
    lexeuse.crée_lexème(GenreLexème.FinDeFichier)
    retourne lexeuse.lexème_courant
}

émet_lexème_caractère :: fonc (lexeuse: *Lexeuse, point_de_code: n32) -> Lexème
{
    lexeuse.crée_lexème(GenreLexème.Caractère)
    lexeuse.lexème_courant.point_de_code = point_de_code
    retourne lexeuse.lexème_courant
}

lexème_suivant :: fonc (lexeuse: *Lexeuse) -> Lexème
{
    si !est_vide(*lexeuse.file_lexèmes) {
        retourne défile(*lexeuse.file_lexèmes)
    }

    // À FAIRE : nous devrions vérifier si la parseuse est en pause, si oui, retourner

    boucle {
        c := lexeuse.point_de_code_suivant()

        discr lexeuse.état {
            Data {
                si c == ESPERLUETTE {
                    lexeuse.état_retour = ÉtatLexage.Data
                    lexeuse.état = ÉtatLexage.CharacterReference
                }
                sinon si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.TagOpen
                }
                sinon si c == NUL {
                    // @erreur unexpected-null-character parse error
                    retourne lexeuse.émet_lexème_caractère(c)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            TagOpen {
                si c == POINT_EXCLAMATION {
                    lexeuse.état = ÉtatLexage.MarkupDeclarationOpen
                }
                sinon si c == SLASH {
                    lexeuse.état = ÉtatLexage.EndTagOpen
                }
                sinon si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.DébutTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.TagName)
                }
                sinon si c == POINT_INTERROGATION {
                    // @erreur unexpected-question-mark-instead-of-tag-name parse error
                    lexeuse.crée_lexème(GenreLexème.Commentaire)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusComment)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    // @erreur invalid-first-character-of-tag-name parse error
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Data)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
            }
            TagName {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeAttributeName
                }
                sinon si c == SLASH {
                    lexeuse.état = ÉtatLexage.SelfClosingStartTag
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                }
                sinon si c == NUL {
                    // @erreur unexpected-null-character parse error
                    chaine_ajoute(*lexeuse.lexème_courant.nom, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                }
            }
            EndTagOpen {
                si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.FinTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.TagName)
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-end-tag-name parse error
                    lexeuse.état = ÉtatLexage.Data
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-before-tag-name parse error.
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur invalid-first-character-of-tag-name parse error
                    lexeuse.crée_lexème(GenreLexème.Commentaire)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusComment)
                }
            }
            BogusComment {
                si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.données, CARACTÈRE_REMPLACEMENT)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, CARACTÈRE_REMPLACEMENT)
                }
            }
            MarkupDeclarationOpen {
                // ne consomme pas
                lexeuse.curseur -= 1

                si lexeuse.apparie("DOCTYPE") {
                    lexeuse.curseur += 7
                    lexeuse.état = ÉtatLexage.DOCTYPE
                }
                sinon si lexeuse.apparie("--") {
                    lexeuse.curseur += 2
                    lexeuse.état = ÉtatLexage.CommentStart
                    lexeuse.crée_lexème(GenreLexème.Commentaire)
                }
                sinon {
                    panique("gestion caractère non implémenté")
                }
            }
            DOCTYPE {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeDOCTYPEName
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BeforeDOCTYPEName)
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-whitespace-before-doctype-name parse error
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BeforeDOCTYPEName)
                }
            }
            BeforeDOCTYPEName {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                    lexeuse.état = ÉtatLexage.DOCTYPEName
                }
                sinon si c == NUL {
                    // @erreur unexpected-null-character parse error
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    chaine_ajoute(*lexeuse.lexème_courant.nom, CARACTÈRE_REMPLACEMENT)
                    lexeuse.état = ÉtatLexage.DOCTYPEName
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-doctype-name parse error
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    lexeuse.crée_lexème(GenreLexème.Doctype)
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                    lexeuse.état = ÉtatLexage.DOCTYPEName
                }
            }
            DOCTYPEName {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.AfterDOCTYPEName
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                }
            }
            AfterDOCTYPEName {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    lexeuse.curseur -= 1

                    si lexeuse.apparie("PUBLIC") {
                        lexeuse.curseur += 6
                        lexeuse.état = ÉtatLexage.AfterDOCTYPEPublicKeyword
                    }
                    sinon si lexeuse.apparie("SYSTEM") {
                        lexeuse.curseur += 6
                        lexeuse.état = ÉtatLexage.AfterDOCTYPESystemKeyword
                    }
                    sinon {
                        // @erreur invalid-character-sequence-after-doctype-name parse error
                        lexeuse.lexème_courant.drapeau_force_quirks = vrai
                        lexeuse.état = ÉtatLexage.BogusDOCTYPE
                    }
                }
            }
            AfterDOCTYPEPublicKeyword {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeDOCTYPEPublicIdentifier
                }
                sinon si c == GUILLEMET {
                    // @erreur missing-whitespace-after-doctype-public-keyword
                    déloge lexeuse.lexème_courant.identifiant_public_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPEPublicIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    // @erreur missing-whitespace-after-doctype-public-keyword
                    déloge lexeuse.lexème_courant.identifiant_public_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPEPublicIdentifierSingleQuoted
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-doctype-public-identifier
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-public-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            BeforeDOCTYPEPublicIdentifier {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == GUILLEMET {
                    déloge lexeuse.lexème_courant.identifiant_public_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPEPublicIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    déloge lexeuse.lexème_courant.identifiant_public_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPEPublicIdentifierSingleQuoted
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-doctype-public-identifier
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-public-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            DOCTYPEPublicIdentifierDoubleQuoted {
                si c == GUILLEMET {
                    lexeuse.état = ÉtatLexage.AfterDOCTYPEPublicIdentifier
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_public_doctype, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_public_doctype, c)
                }
            }
            DOCTYPEPublicIdentifierSingleQuoted {
                si c == APOSTROPHE {
                    lexeuse.état = ÉtatLexage.AfterDOCTYPEPublicIdentifier
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_public_doctype, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_public_doctype, c)
                }
            }
            AfterDOCTYPEPublicIdentifier {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BetweenDOCTYPEPublicAndSystemIdentifiers
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == GUILLEMET {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierSingleQuoted
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-système-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            BetweenDOCTYPEPublicAndSystemIdentifiers {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == GUILLEMET {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierSingleQuoted
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-système-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            AfterDOCTYPESystemKeyword {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeDOCTYPESystemIdentifier
                }
                sinon si c == GUILLEMET {
                    // @erreur missing-whitespace-after-doctype-system-keyword
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    // @erreur missing-whitespace-after-doctype-system-keyword
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierSingleQuoted
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-doctype-system-identifier
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-system-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            BeforeDOCTYPESystemIdentifier {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == GUILLEMET {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    déloge lexeuse.lexème_courant.identifiant_système_doctype
                    lexeuse.état = ÉtatLexage.DOCTYPESystemIdentifierSingleQuoted
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-doctype-system-identifier
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-system-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            DOCTYPESystemIdentifierDoubleQuoted {
                si c == GUILLEMET {
                    lexeuse.état = ÉtatLexage.AfterDOCTYPESystemIdentifier
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_système_doctype, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_système_doctype, c)
                }
            }
            DOCTYPESystemIdentifierSingleQuoted {
                si c == APOSTROPHE {
                    lexeuse.état = ÉtatLexage.AfterDOCTYPESystemIdentifier
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_système_doctype, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.identifiant_système_doctype, c)
                }
            }
            AfterDOCTYPESystemIdentifier {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-doctype parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // @erreur missing-quote-before-doctype-system-identifier parse error
                    lexeuse.lexème_courant.drapeau_force_quirks = vrai
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BogusDOCTYPE)
                }
            }
            BogusDOCTYPE {
                si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == NUL {
                    // ignore
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    // ignore
                }
            }
            CDATASection {
                si c == CROCHET_FERMANT {
                    lexeuse.état = ÉtatLexage.CDATASectionBracket
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-cdata parse error
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            CDATASectionBracket {
                si c == CROCHET_FERMANT {
                    lexeuse.état = ÉtatLexage.CDATASectionEnd
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.CDATASection)
                    retourne lexeuse.émet_lexème_caractère(CROCHET_FERMANT)
                }
            }
            CDATASectionEnd {
                si c == CROCHET_FERMANT {
                    retourne lexeuse.émet_lexème_caractère(CROCHET_FERMANT)
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.CDATASection)
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CROCHET_FERMANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CROCHET_FERMANT))
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            BeforeAttributeName {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == SLASH || c == CHEVRON_FERMANT || c == FIN_DE_FICHIER {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.AfterAttributeName)
                }
                sinon si c == EGAL {
                    lexeuse.état = ÉtatLexage.AttributeName

                    ajoute_attribut(*lexeuse.lexème_courant)
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.nom, c)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.AttributeName)

                    ajoute_attribut(*lexeuse.lexème_courant)
                }
            }
            AttributeName {
                si est_espace_blanc_html(c) || c == SLASH || c == CHEVRON_FERMANT || c == FIN_DE_FICHIER {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.AfterAttributeName)
                }
                sinon si c == EGAL {
                    lexeuse.état = ÉtatLexage.BeforeAttributeValue
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.nom, c + 0x20)
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.nom, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == GUILLEMET || c == APOSTROPHE || c == CHEVRON_OUVRANT {
                    // @erreur unexpected-character-in-attribute-name parse error, ajoute quand même
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.nom, c)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.nom, c)
                }

                /* À FAIRE: quand nous quittons cet état, nous devons vérifier qu'un autre attribut
                 * de même nom n'existe pas déjà. Si c'est le cas, le nouvel attribut de même nom sera supprimé
                 * de la liste d'attribut, mais conservera quand même le status d'attribut courant
                 */
            }
            AfterAttributeName {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == SLASH {
                    lexeuse.état = ÉtatLexage.SelfClosingStartTag
                }
                sinon si c == EGAL {
                    lexeuse.état = ÉtatLexage.BeforeAttributeValue
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-tag parse error
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    ajoute_attribut(*lexeuse.lexème_courant)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.AttributeName)
                }
            }
            BeforeAttributeValue {
                si est_espace_blanc_html(c) {
                    // ignore
                }
                sinon si c == GUILLEMET {
                    lexeuse.état = ÉtatLexage.AttributeValueDoubleQuoted
                }
                sinon si c == APOSTROPHE {
                    lexeuse.état = ÉtatLexage.AttributeValueSingleQuoted
                }
                sinon si c == CHEVRON_FERMANT {
                    // @erreur missing-attribute-value parse error
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.AttributeValueUnquoted)
                }
            }
            AttributeValueDoubleQuoted {
                si c == GUILLEMET {
                    lexeuse.état = ÉtatLexage.AfterAttributeValueQuoted
                }
                sinon si c == ESPERLUETTE {
                    lexeuse.état = ÉtatLexage.CharacterReference
                    lexeuse.état_retour = ÉtatLexage.AttributeValueDoubleQuoted
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, c)
                }
            }
            AttributeValueSingleQuoted {
                si c == APOSTROPHE {
                    lexeuse.état = ÉtatLexage.AfterAttributeValueQuoted
                }
                sinon si c == ESPERLUETTE {
                    lexeuse.état = ÉtatLexage.CharacterReference
                    lexeuse.état_retour = ÉtatLexage.AttributeValueSingleQuoted
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, c)
                }
            }
            AttributeValueUnquoted {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeAttributeName
                }
                sinon si c == ESPERLUETTE {
                    lexeuse.état = ÉtatLexage.CharacterReference
                    lexeuse.état_retour = ÉtatLexage.AttributeValueUnquoted
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == NUL {
                    // @erreur unexpected-null-character parse error
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-tag parse error
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon si c == APOSTROPHE || c == GUILLEMET || c == ACCENT_GRAVE || c == CHEVRON_OUVRANT || c == EGAL {
                    // @erreur unexpected-character-in-unquoted-attribute-value parse error
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, c)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, c)
                }
            }
            AfterAttributeValueQuoted {
                si est_espace_blanc_html(c) {
                    lexeuse.état = ÉtatLexage.BeforeAttributeName
                }
                sinon si c == SLASH {
                    lexeuse.état = ÉtatLexage.SelfClosingStartTag
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-tag parse error
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    // @erreur missing-whitespace-between-attributes parse error, reconsomme
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BeforeAttributeName)
                }
            }
            SelfClosingStartTag {
                si c == CHEVRON_FERMANT {
                    lexeuse.lexème_courant.auto_fermant = vrai
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    // @erreur eof-in-tag parse error
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    // @erreur unexpected-solidus-in-tag parse error, reconsomme
                    lexeuse.reconsomme_dans_état(ÉtatLexage.BeforeAttributeName)
                }
            }
            RCDATA {
                si c == ESPERLUETTE {
                    lexeuse.état_retour = ÉtatLexage.RCDATA
                    lexeuse.état = ÉtatLexage.CharacterReference
                }
                sinon si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.RCDATALessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(0xFFFD)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            RAWTEXT {
                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.RAWTEXTLessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(0xFFFD)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            RCDATALessThanSign {
                si c == SLASH {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.état = ÉtatLexage.RCDATAEndTagOpen
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RCDATA)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
            }
            RCDATAEndTagOpen {
                si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.FinTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RCDATAEndTagName)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RCDATA)
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            RCDATAEndTagName {
                si lexeuse.nom_dernier_tag_début == lexeuse.lexème_courant.nom {
                    si est_espace_blanc_html(c) {
                        lexeuse.état = ÉtatLexage.BeforeAttributeName
                        continue
                    }
                    sinon si c == SLASH {
                        lexeuse.état = ÉtatLexage.SelfClosingStartTag
                        continue
                    }
                    sinon si c == CHEVRON_FERMANT {
                        lexeuse.état = ÉtatLexage.Data
                        retourne lexeuse.émet_lexème()
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }

                déloge lexeuse.lexème_courant.nom

                lexeuse.reconsomme_dans_état(ÉtatLexage.RCDATA)

                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                lexeuse.enfile_lexèmes_pour_tampon_temporaire()
                retourne défile(*lexeuse.file_lexèmes)
            }
            RAWTEXTLessThanSign {
                si c == SLASH {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.état = ÉtatLexage.RAWTEXTEndTagOpen
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RAWTEXT)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
            }
            RAWTEXTEndTagOpen {
                si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.FinTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RAWTEXTEndTagName)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.RAWTEXT)
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            RAWTEXTEndTagName {
                si lexeuse.nom_dernier_tag_début == lexeuse.lexème_courant.nom {
                    si est_espace_blanc_html(c) {
                        lexeuse.état = ÉtatLexage.BeforeAttributeName
                        continue
                    }
                    sinon si c == SLASH {
                        lexeuse.état = ÉtatLexage.SelfClosingStartTag
                        continue
                    }
                    sinon si c == CHEVRON_FERMANT {
                        lexeuse.état = ÉtatLexage.Data
                        retourne lexeuse.émet_lexème()
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }

                déloge lexeuse.lexème_courant.nom

                lexeuse.reconsomme_dans_état(ÉtatLexage.RAWTEXT)

                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                lexeuse.enfile_lexèmes_pour_tampon_temporaire()
                retourne défile(*lexeuse.file_lexèmes)
            }
            CommentStart {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentStartDash
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CommentStartDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentEnd
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, '-')
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            Comment {
                si c == CHEVRON_OUVRANT {
                    chaine_ajoute(*lexeuse.lexème_courant.données, c)
                    lexeuse.état = ÉtatLexage.CommentLessThanSign
                }
                sinon si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentEndDash
                }
                sinon si c == NUL {
                    chaine_ajoute(*lexeuse.lexème_courant.données, CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, c)
                }
            }
            CommentLessThanSign {
                si c == POINT_EXCLAMATION {
                    chaine_ajoute(*lexeuse.lexème_courant.données, c)
                    lexeuse.état = ÉtatLexage.CommentLessThanSignBang
                }
                sinon si c == CHEVRON_OUVRANT {
                    chaine_ajoute(*lexeuse.lexème_courant.données, c)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CommentLessThanSignBang {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentLessThanSignBangDash
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CommentLessThanSignBangDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentLessThanSignBangDashDash
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.CommentEndDash)
                }
            }
            CommentLessThanSignBangDashDash {
                si c == CHEVRON_FERMANT || c == FIN_DE_FICHIER {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.CommentEnd)
                }
                sinon {
                    // @erreur nested-comment parse error
                    lexeuse.reconsomme_dans_état(ÉtatLexage.CommentEnd)
                }
            }
            CommentEndDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.CommentEnd
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, '-')
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CommentEnd {
                si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == POINT_EXCLAMATION {
                    lexeuse.état = ÉtatLexage.CommentEndBang
                }
                sinon si c == MOINS {
                    chaine_ajoute(*lexeuse.lexème_courant.données, '-')
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, "--")
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CommentEndBang {
                si c == MOINS {
                    chaine_ajoute(*lexeuse.lexème_courant.données, "--!")
                    lexeuse.état = ÉtatLexage.CommentEndDash
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.Data
                    retourne lexeuse.émet_lexème()
                }
                sinon si c == FIN_DE_FICHIER {
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème())
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_fin_de_fichier())
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    chaine_ajoute(*lexeuse.lexème_courant.données, "--!")
                    lexeuse.reconsomme_dans_état(ÉtatLexage.Comment)
                }
            }
            CharacterReference {
                détruit_chaine(*lexeuse.tampon_temporaire)
                chaine_ajoute(*lexeuse.tampon_temporaire, ESPERLUETTE)

                si est_ascii_alphanumérique(c) {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.NamedCharacterReference)
                }
                sinon si c == SIGNE_NOMBRE {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    lexeuse.état  = ÉtatLexage.NumericCharacterReference
                }
                sinon {
                    lexeuse.reconsomme_dans_état(lexeuse.état_retour)

                    si flush_points_de_code_référence_caractère(lexeuse) {
                        retourne défile(*lexeuse.file_lexèmes)
                    }
                }
            }
            NamedCharacterReference {
                // ne consomme pas
                lexeuse.curseur -= 1

                si cherche_référence_caractère_nommé(lexeuse) {
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            AmbiguousAmpersand {
                si est_ascii_alphanumérique(c) {
                    si nous_sommes_dans_attribut(lexeuse) {
                        chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, c)
                    }
                    sinon {
                        retourne lexeuse.émet_lexème_caractère(c)
                    }
                }
                sinon si c == POINT_VIRGULE {
                    // @erreur unknown-named-character-reference parse error
                    lexeuse.reconsomme_dans_état(lexeuse.état_retour)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(lexeuse.état_retour)
                }
            }
            NumericCharacterReference {
                lexeuse.code_référence_caractère = 0

                si c == X_MINUSCULE || c == X_MAJUSCULE {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    lexeuse.état = ÉtatLexage.HexadecimalCharacterReferenceStart
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.DecimalCharacterReferenceStart)
                }
            }
            HexadecimalCharacterReferenceStart {
                si est_ascii_hexadecimal(c) {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.HexadecimalCharacterReference)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(lexeuse.état_retour)

                    si flush_points_de_code_référence_caractère(lexeuse) {
                        retourne défile(*lexeuse.file_lexèmes)
                    }
                }
            }
            DecimalCharacterReferenceStart {
                si est_ascii_chiffre(c) {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.DecimalCharacterReference)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(lexeuse.état_retour)

                    si flush_points_de_code_référence_caractère(lexeuse) {
                        retourne défile(*lexeuse.file_lexèmes)
                    }
                }
            }
            HexadecimalCharacterReference {
                si est_ascii_chiffre(c) {
                    lexeuse.code_référence_caractère *= 16
                    lexeuse.code_référence_caractère += (c - 0x30)
                }
                sinon si est_ascii_chiffre_hex_maj(c) {
                    lexeuse.code_référence_caractère *= 16
                    lexeuse.code_référence_caractère += (c - 0x37)
                }
                sinon si est_ascii_chiffre_hex_min(c) {
                    lexeuse.code_référence_caractère *= 16
                    lexeuse.code_référence_caractère += (c - 0x57)
                }
                sinon si c == POINT_VIRGULE {
                    lexeuse.état = ÉtatLexage.NumericCharacterReferenceEnd
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.NumericCharacterReferenceEnd)
                }
            }
            DecimalCharacterReference {
                si est_ascii_chiffre(c) {
                    lexeuse.code_référence_caractère *= 10
                    lexeuse.code_référence_caractère += (c - 0x30)
                }
                sinon si c == POINT_VIRGULE {
                    lexeuse.état = ÉtatLexage.NumericCharacterReferenceEnd
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.NumericCharacterReferenceEnd)
                }
            }
            NumericCharacterReferenceEnd {
                // ne consomme pas
                lexeuse.curseur -= 1

                si lexeuse.code_référence_caractère == 0x0 {
                    lexeuse.code_référence_caractère = CARACTÈRE_REMPLACEMENT
                }
                sinon si lexeuse.code_référence_caractère > 0x10FFFF {
                    lexeuse.code_référence_caractère = CARACTÈRE_REMPLACEMENT
                }
                sinon si 0xD800 <= lexeuse.code_référence_caractère <= 0xDFFF {
                    // surrogate
                    lexeuse.code_référence_caractère = CARACTÈRE_REMPLACEMENT
                }
                sinon si est_noncaractère(c) {
                    panique("état partiellement implémenté")
                }
                sinon si c == 0x0D || (est_controle(lexeuse.code_référence_caractère) && !est_ascii_espace_blanc(lexeuse.code_référence_caractère)) {
                    panique("état partiellement implémenté")
                }

                détruit_chaine(*lexeuse.tampon_temporaire)
                chaine_ajoute(*lexeuse.tampon_temporaire, lexeuse.code_référence_caractère)

                lexeuse.état = lexeuse.état_retour

                si flush_points_de_code_référence_caractère(lexeuse) {
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            ScriptData {
                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataLessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            ScriptDataLessThanSign {
                si c == SLASH {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.état = ÉtatLexage.ScriptDataEndTagOpen
                }
                sinon si c == POINT_EXCLAMATION {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapeStart
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(POINT_EXCLAMATION))
                    retourne défile(*lexeuse.file_lexèmes)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptData)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
            }
            ScriptDataEndTagOpen {
                si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.FinTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEndTagName)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptData)
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            ScriptDataEndTagName {
                si lexeuse.nom_dernier_tag_début == lexeuse.lexème_courant.nom {
                    si est_espace_blanc_html(c) {
                        lexeuse.état = ÉtatLexage.BeforeAttributeName
                        continue
                    }
                    sinon si c == SLASH {
                        lexeuse.état = ÉtatLexage.SelfClosingStartTag
                        continue
                    }
                    sinon si c == CHEVRON_FERMANT {
                        lexeuse.état = ÉtatLexage.Data
                        retourne lexeuse.émet_lexème()
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }

                déloge lexeuse.lexème_courant.nom

                lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptData)

                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                lexeuse.enfile_lexèmes_pour_tampon_temporaire()
                retourne défile(*lexeuse.file_lexèmes)
            }
            ScriptDataEscapeStart {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapeStartDash
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptData)
                }
            }
            ScriptDataEscapeStartDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedDashDash
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptData)
                }
            }
            ScriptDataEscaped {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedDash
                }
                sinon si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedLessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            ScriptDataEscapedDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedDashDash
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }
                sinon si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedLessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    lexeuse.état = ÉtatLexage.ScriptDataEscaped
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            ScriptDataEscapedDashDash {
                si c == MOINS {
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }
                sinon si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedLessThanSign
                }
                sinon si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.ScriptData
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_FERMANT)
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    lexeuse.état = ÉtatLexage.ScriptDataEscaped
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
            ScriptDataEscapedLessThanSign {
                si c == SLASH {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.état = ÉtatLexage.ScriptDataEscapedEndTagOpen
                }
                sinon si est_ascii_alpha(c) {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataDoubleEscapeStart)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEscaped)
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }
            }
            ScriptDataEscapedEndTagOpen {
                si est_ascii_alpha(c) {
                    lexeuse.crée_lexème(GenreLexème.FinTag)
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEscapedEndTagName)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEscaped)
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                    enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                    retourne défile(*lexeuse.file_lexèmes)
                }
            }
            ScriptDataEscapedEndTagName {
                si lexeuse.nom_dernier_tag_début == lexeuse.lexème_courant.nom {
                    si est_espace_blanc_html(c) {
                        lexeuse.état = ÉtatLexage.BeforeAttributeName
                        continue
                    }
                    sinon si c == SLASH {
                        lexeuse.état = ÉtatLexage.SelfClosingStartTag
                        continue
                    }
                    sinon si c == CHEVRON_FERMANT {
                        lexeuse.état = ÉtatLexage.Data
                        retourne lexeuse.émet_lexème()
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c + 0x20)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.lexème_courant.nom, c)
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    continue
                }

                déloge lexeuse.lexème_courant.nom

                lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEscaped)

                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT))
                enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(SLASH))
                lexeuse.enfile_lexèmes_pour_tampon_temporaire()
                retourne défile(*lexeuse.file_lexèmes)
            }
            ScriptDataDoubleEscapeStart {
                si est_espace_blanc_html(c) || c == SLASH || c == CHEVRON_FERMANT {
                    si compare_avec_chaine(lexeuse.tampon_temporaire, "script") {
                        lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                    }
                    sinon {
                        lexeuse.état = ÉtatLexage.ScriptDataEscaped
                        retourne lexeuse.émet_lexème_caractère(c)
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c + 0x20)
                    retourne lexeuse.émet_lexème_caractère(c)
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    retourne lexeuse.émet_lexème_caractère(c)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataEscaped)
                }
            }
            ScriptDataDoubleEscaped {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapedDash
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }

                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapedLessThanSign
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }

                si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }

                retourne lexeuse.émet_lexème_caractère(c)
            }
            ScriptDataDoubleEscapedDash {
                si c == MOINS {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapedDashDash
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }

                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapedLessThanSign
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }

                si c == NUL {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }

                si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }

                lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                retourne lexeuse.émet_lexème_caractère(c)
            }
            ScriptDataDoubleEscapedDashDash {
                si c == MOINS {
                    retourne lexeuse.émet_lexème_caractère(MOINS)
                }

                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapedLessThanSign
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }

                si c == CHEVRON_FERMANT {
                    lexeuse.état = ÉtatLexage.ScriptData
                    retourne lexeuse.émet_lexème_caractère(CHEVRON_OUVRANT)
                }

                si c == NUL {
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }

                si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }

                lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                retourne lexeuse.émet_lexème_caractère(c)
            }
            ScriptDataDoubleEscapedLessThanSign {
                si c == SLASH {
                    détruit_chaine(*lexeuse.tampon_temporaire)
                    lexeuse.état = ÉtatLexage.ScriptDataDoubleEscapeEnd
                    retourne lexeuse.émet_lexème_caractère(SLASH)
                }

                lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataDoubleEscaped)
            }
            ScriptDataDoubleEscapeEnd {
                si est_espace_blanc_html(c) || c == SLASH || c == CHEVRON_FERMANT {
                    si compare_avec_chaine(lexeuse.tampon_temporaire, "script") {
                        lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                    }
                    sinon {
                        lexeuse.état = ÉtatLexage.ScriptDataDoubleEscaped
                        retourne lexeuse.émet_lexème_caractère(c)
                    }
                }
                sinon si est_ascii_alpha_majuscule(c) {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c + 0x20)
                    retourne lexeuse.émet_lexème_caractère(c)
                }
                sinon si est_ascii_alpha_minuscule(c) {
                    chaine_ajoute(*lexeuse.tampon_temporaire, c)
                    retourne lexeuse.émet_lexème_caractère(c)
                }
                sinon {
                    lexeuse.reconsomme_dans_état(ÉtatLexage.ScriptDataDoubleEscaped)
                }
            }
            PLAINTEXT {
                si c == CHEVRON_OUVRANT {
                    lexeuse.état = ÉtatLexage.ScriptDataLessThanSign
                }
                sinon si c == NUL {
                    retourne lexeuse.émet_lexème_caractère(CARACTÈRE_REMPLACEMENT)
                }
                sinon si c == FIN_DE_FICHIER {
                    retourne lexeuse.émet_lexème_fin_de_fichier()
                }
                sinon {
                    retourne lexeuse.émet_lexème_caractère(c)
                }
            }
        }
    }

    retourne lexeuse.émet_lexème_fin_de_fichier()
}

enfile_lexèmes_pour_tampon_temporaire :: fonc (lexeuse: *Lexeuse)
{
    pour lexeuse.tampon_temporaire.points_de_code {
        enfile(*lexeuse.file_lexèmes, lexeuse.émet_lexème_caractère(it))
    }
}

reconsomme_dans_état :: fonc (lexeuse: *Lexeuse, état_cible: ÉtatLexage)
{
    lexeuse.curseur -= 1
    lexeuse.état = état_cible
}

apparie :: fonc (lexeuse: *Lexeuse, chn: chaine) -> bool
{
    pour chn {
        index := lexeuse.curseur + index_it

        si index >= lexeuse.document.taille {
            retourne faux
        }

        c := lexeuse.document[index]

        si 'a' <= c <= 'z' {
            c -= 0x20
        }

        si it != c {
            retourne faux
        }
    }

    retourne vrai
}

nous_sommes_dans_attribut :: fonc (lexeuse: *Lexeuse) -> bool
{
    retourne lexeuse.état_retour == ÉtatLexage.AttributeValueDoubleQuoted || lexeuse.état_retour == ÉtatLexage.AttributeValueSingleQuoted || lexeuse.état == ÉtatLexage.AttributeValueUnquoted
}

flush_points_de_code_référence_caractère :: fonc (lexeuse: *Lexeuse) -> bool
{
    // détermine si nous somme dans un attribut
    si nous_sommes_dans_attribut(lexeuse) {
        pour lexeuse.tampon_temporaire.points_de_code {
            chaine_ajoute(*lexeuse.lexème_courant.attribut_courant.valeur, it)
        }

        retourne faux
    }

    lexeuse.enfile_lexèmes_pour_tampon_temporaire()

    retourne vrai
}

cherche_référence_caractère_nommé :: fonc (lexeuse: *Lexeuse) -> bool
{
    dernier_résultat : RésultatRecherche
    dernier_caractère_apparié : n32

    boucle {
        caractère_suivant := lexeuse.point_de_code_suivant()
        chaine_ajoute(*lexeuse.tampon_temporaire, caractère_suivant)

        // XXX - À FAIRE
        chn_temp := converti_vers_chaine(lexeuse.tampon_temporaire)

        résultat := ensemble_possède_rappel_si_possible(*symboles_entités, chn_temp, commence_par)

        déloge chn_temp

        si !résultat.trouvé {
            lexeuse.curseur -= 1
            arrête
        }

        dernier_caractère_apparié = caractère_suivant
        dernier_résultat = résultat
    }

    si !dernier_résultat.trouvé {
        lexeuse.état = ÉtatLexage.AmbiguousAmpersand
        retourne flush_points_de_code_référence_caractère(lexeuse)
    }

    si nous_sommes_dans_attribut(lexeuse) && dernier_caractère_apparié != POINT_VIRGULE {
        caractère_suivant := lexeuse.point_de_code_suivant()
        lexeuse.curseur -= 1

        si caractère_suivant == EGAL || est_ascii_alphanumérique(caractère_suivant) {
            lexeuse.état = lexeuse.état_retour
            retourne flush_points_de_code_référence_caractère(lexeuse)
        }
    }

    si dernier_caractère_apparié != POINT_VIRGULE {
        // @erreur missing-semicolon-after-character-reference parse error.
    }

    détruit_chaine(*lexeuse.tampon_temporaire)

    points_de_code := points_de_code_entités[dernier_résultat.index]

    chaine_ajoute(*lexeuse.tampon_temporaire, points_de_code[0] comme n32)

    si points_de_code[1] != 0x0 {
        chaine_ajoute(*lexeuse.tampon_temporaire, points_de_code[1] comme n32)
    }

    lexeuse.état = lexeuse.état_retour
    retourne flush_points_de_code_référence_caractère(lexeuse)
}
