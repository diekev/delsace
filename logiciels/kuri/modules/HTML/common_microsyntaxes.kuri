importe Chaine
importe Couleur
importe Fondation
importe Unicode

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.1 Signed integers
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-integers */
parse_an_integer :: fonc (string: DOMString) -> Optionnel(z32)
{
    // 1. Let input be the string being parsed.
    input := string.donne_chaine_utf16()

    // 2. Let position be a pointer into input, initially pointing at the start of the string.
    position := PositionVariable(input.unités.pointeur)

    // 3. Let sign have the value "positive".
    sign := faux

    // 4. Skip ASCII whitespace within input given position.
    skip_ascii_whitespace(input, *position)

    // 5. If position is past the end of input, return an error.
    fin := input.unités.pointeur + input.taille()
    si position.position >= fin {
        retourne
    }

    // 6. If the character indicated by position (the first character) is a U+002D HYPHEN-MINUS character (-):
    si mémoire(position.position) == 0x20 {
        // 1. Let sign be "negative".
        sign = vrai

        // 2. Advance position to the next character.
        position.position += 1

        // 3. If position is past the end of input, return an error.
        si position.position >= fin {
            retourne
        }
    }
    // 7. Otherwise, if the character indicated by position (the first character) is a U+002B PLUS SIGN character (+):
    sinon si mémoire(position.position) == 0x2B {
        // 1. Advance position to the next character. (The "+" is ignored, but it is not conforming.)
        position.position += 1

        // 2. If position is past the end of input, return an error.
        si position.position >= fin {
            retourne
        }
    }

    // 8. If the character indicated by position is not an ASCII digit, then return an error.
    saufsi est_chiffre_ascii(mémoire(position.position)) {
        retourne
    }

    // 9. Collect a sequence of code points that are ASCII digits from input given position, and interpret the resulting sequence as a base-ten integer. Let value be that integer.
    sequence := collect_a_sequence_of_code_points(input, *position, est_chiffre_ascii_n16)

    value: z32
    pour sequence.unités {
        value *= 10
        value += (it - 0x30) comme z32
    }

    // 10. If sign is "positive", return value, otherwise return the result of subtracting value from zero.
    si sign {
        retourne -value
    }

    retourne value
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.2 Non-negative integers
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-non-negative-integers */
parse_a_non_negative_integer :: fonc (string: DOMString) -> Optionnel(n32)
{
    // 1. Let input be the string being parsed.
    input := string

    // 2. Let value be the result of parsing input using the rules for parsing integers.
    opt_value := parse_an_integer(input)

    // If value is an error, return an error.
    saufsi opt_value.possède_valeur() {
        retourne
    }

    value := opt_value.Quelque

    // If value is less than zero, return an error.
    si value < 0 {
        retourne
    }

    // Return value.
    retourne value comme n32
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.4 Percentages and lengths
 * \{ */

DimensionValue :: union {
    Percentage: r64
    Length: r64
}

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-dimension-values */
parse_a_dimension_value :: fonc (string: DOMString) -> Optionnel(DimensionValue)
{
    // 1. Let input be the string being parsed.
    input := string.donne_chaine_utf16()

    // 2. Let position be a position variable for input, initially pointing at the start of input.
    position := PositionVariable(input.unités.pointeur)

    // 3. Skip ASCII whitespace within input given position.
    skip_ascii_whitespace(input, *position)

    // 4. If position is past the end of input or the code point at position within input is not an ASCII digit, then return failure.
    fin := input.unités.pointeur + input.taille()
    si position.position >= fin || !est_chiffre_ascii(mémoire(position.position)) {
        retourne
    }

    // 5. Collect a sequence of code points that are ASCII digits from input given position, and interpret the resulting sequence as a base-ten integer. Let value be that number.
    sequence := collect_a_sequence_of_code_points(input, *position, est_chiffre_ascii_n16)

    value: r64
    pour sequence.unités {
        value *= 10.0
        value += (it - 0x30) comme r64
    }

    // 6. If position is past the end of input, then return value as a length.
    si position.position > fin {
        retourne DimensionValue(Length = value)
    }

    // 7. If the code point at position within input is U+002E (.), then:
    si mémoire(position.position) == 0x2E {
        // 1. Advance position by 1.
        position.position += 1

        // 2. If position is past the end of input or the code point at position within input is not an ASCII digit, then return the current dimension value with value, input, and position.
        si position.position >= fin || !est_chiffre_ascii(mémoire(position.position)) {
            retourne current_dimension_value(value, input, *position)
        }

        // 3. Let divisor have the value 1.
        divisor := 1.0

        // 4. While true:
        boucle {
            // 1. Multiply divisor by ten.
            divisor *= 10.0

            // 2. Add the value of the code point at position within input, interpreted as a base-ten digit (0..9) and divided by divisor, to value.
            value += (mémoire(position.position) - 0x30) comme r64 / divisor

            // 3. Advance position by 1.
            position.position += 1

            // 4. If position is past the end of input, then return value as a length.
            si position.position >= fin {
                retourne DimensionValue(Length = value)
            }

            // 5. If the code point at position within input is not an ASCII digit, then break.
            saufsi est_chiffre_ascii(mémoire(position.position)) {
                arrête
            }
        }
    }

    // 8. Return the current dimension value with value, input, and position.
    retourne current_dimension_value(value, input, *position)
}

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#current-dimension-value */
current_dimension_value :: fonc (value: r64, input: ChaineUTF16, position: *PositionVariable) -> DimensionValue
{
    // 1. If position is past the end of input, then return value as a length.
    fin := input.unités.pointeur + input.taille()
    si position.position >= fin {
        retourne DimensionValue(Length = value)
    }

    // 2. If the code point at position within input is U+0025 (%), then return value as a percentage.
    si mémoire(position.position) == 0x25 {
        retourne DimensionValue(Percentage = value)
    }

    // 3. Return value as a length.
    retourne DimensionValue(Length = value)
}

PositionVariable :: struct {
    position: *n16
}

/* https://infra.spec.whatwg.org/#skip-ascii-whitespace */
skip_ascii_whitespace :: fonc (input: ChaineUTF16, position: *PositionVariable)
{
    // To skip ASCII whitespace within a string input given a position variable position,
    // collect a sequence of code points that are ASCII whitespace from input given position.
    // The collected code points are not used, but position is still updated. 
    _ := collect_a_sequence_of_code_points(input, position, est_espace_blanche_ascii)
}

/* https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points */
collect_a_sequence_of_code_points :: fonc (input: ChaineUTF16, position: *PositionVariable, condition: fonc(n16)(bool)) -> ChaineUTF16
{
    // 1. Let result be the empty string.
    result: ChaineUTF16
    result.unités.pointeur = position.position

    // 2. While position doesn’t point past the end of input and the code point at position within input meets the condition condition:
    fin := input.unités.pointeur + input.taille()

    tantque position.position < fin && condition(mémoire(position.position)) {
        // 1. Append that code point to the end of result.
        result.unités.taille += 1

        // 2. Advance position by 1.
        position.position += 1
    }

    // 3. Return result.
    retourne result
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.5 Nonzero percentages and lengths
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-non-zero-dimension-values */
parse_a_non_zero_dimension :: fonc (string: DOMString) -> Optionnel(DimensionValue)
{
    // 1. Let input be the string being parsed.
    // 2. Let value be the result of parsing input using the rules for parsing dimension values.
    value := parse_a_dimension_value(string)

    // 3. If value is an error, return an error.
    saufsi value.possède_valeur() {
        retourne
    }

    // 4. If value is zero, return an error.
    // 5. If value is a percentage, return value as a percentage.
    // 6. Return value as a length.
    discr value.Quelque {
        Length(l) {
            si l == 0.0 {
                retourne
            }
            retourne value
        }
        Percentage(p) {
            si p == 0.0 {
                retourne
            }
            retourne value
        }
        sinon {
            retourne value
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.6 Colors
 * https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#colours
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value */
parse_a_legacy_colour_value :: fonc (string: DOMString) -> Optionnel(CouleurRVBAN8)
{
    // 1. Let input be the string being parsed.
    input := string.donne_chaine_utf16()

    // 2. If input is the empty string, then return an error.
    si input.est_vide() {
        retourne
    }

    // 3. Strip leading and trailing ASCII whitespace from input.
    input = supprime_espace_blanches_autour(input)

    // 4. If input is an ASCII case-insensitive match for the string "transparent", then return an error.
    si compare_ascii_insensible_à_la_casse(input, "transparent") {
        retourne
    }

    // 5. If input is an ASCII case-insensitive match for one of the named colors, then return the simple color corresponding to that keyword. [CSSCOLOR]
    // À FAIRE : n'utilise que les mots-clés appropriés
    opt_couleur := CSS.trouve_couleur_pour_mot_clé(crée_chaine_utf16_unique(input))
    si opt_couleur.possède_valeur() {
        retourne opt_couleur
    }

    // 6. If input's code point length is four, and the first character in input is U+0023 (#), and the last three characters of input are all ASCII hex digits, then:
    si input.taille() == 4 && input.unités[0] == 0x23 && est_chiffre_hexadecimal_ascii(input.unités[1]) && est_chiffre_hexadecimal_ascii(input.unités[2]) && est_chiffre_hexadecimal_ascii(input.unités[3]) {
        // 1. Let result be a simple color.
        result: CouleurRVBAN8
        result.a = 255

        // 2. Interpret the second character of input as a hexadecimal digit; let the red component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[1]) * 17

        // 3. Interpret the third character of input as a hexadecimal digit; let the green component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[2]) * 17

        // 4. Interpret the fourth character of input as a hexadecimal digit; let the blue component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[3]) * 17

        // 5. Return result.
        retourne result
    }

    // À FAIRE : 7. Replace any code points greater than U+FFFF in input (i.e., any characters that are not in the basic multilingual plane) with the two-character string "00".

    // 8. If input's code point length is greater than 128, truncate input, leaving only the first 128 characters.
    // À FAIRE : utilise la taille en point de code
    si input.taille() > 128 {
        input.unités.taille = 128
    }

    // 9. If the first character in input is a U+0023 NUMBER SIGN character (#), remove it.
    si input.unités[0] == 0x23 {
        input.unités.pointeur += 1
        input.unités.taille -= 1
    }

    // 10. Replace any character in input that is not an ASCII hex digit with the character U+0030 DIGIT ZERO (0).
    pour & input.unités {
        point_de_code : n16 = it
        saufsi est_chiffre_hexadecimal_ascii(point_de_code) {
            it = 0x30
        }
    }

    // À FAIRE : continue
    assert(input.taille() == 6)

    // 11. While input's code point length is zero or not a multiple of three, append a U+0030 DIGIT ZERO (0) character to input.

    // 12. Split input into three strings of equal code point length, to obtain three components. Let length be the code point length that all of those components have (one third the code point length of input).

    // 13. If length is greater than 8, then remove the leading length-8 characters in each component, and let length be 8.

    // 14. While length is greater than two and the first character in each component is a U+0030 DIGIT ZERO (0) character, remove that character and reduce length by one.

    // 15. If length is still greater than two, truncate each component, leaving only the first two characters in each.

    // 16. Let result be a simple color.
    result: CouleurRVBAN8
    result.a = 255

    // 17. Interpret the first component as a hexadecimal number; let the red component of result be the resulting number.
    result.r = CSS.valeur_hex_depuis_unité(input.unités[0]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[1])

    // 18. Interpret the second component as a hexadecimal number; let the green component of result be the resulting number.
    result.v = CSS.valeur_hex_depuis_unité(input.unités[2]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[3])

    // 19. Interpret the third component as a hexadecimal number; let the blue component of result be the resulting number.
    result.b = CSS.valeur_hex_depuis_unité(input.unités[4]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[5])

    // 20. Return result.
    retourne result
}

/** \} */
