importe Chaine
importe Couleur
importe Fondation
importe Numérique
importe Unicode

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.1 Signed integers
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-integers */
parse_an_integer :: fonc (string: DOMString) -> Optionnel(z32)
{
    // À FAIRE : standardise
    chn := converti_vers_chaine(string.donne_chaine_utf16())
    diffère déloge(chn)

    résultat := tente extrait_z32(chn) piège _ {
        retourne
    }

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.2 Non-negative integers
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-non-negative-integers */
parse_a_non_negative_integer :: fonc (string: DOMString) -> Optionnel(n32)
{
    // 1. Let input be the string being parsed.
    input := string

    // 2. Let value be the result of parsing input using the rules for parsing integers.
    opt_value := parse_an_integer(input)

    // If value is an error, return an error.
    saufsi opt_value.possède_valeur() {
        retourne
    }

    value := opt_value.Quelque

    // If value is less than zero, return an error.
    si value < 0 {
        retourne
    }

    // Return value.
    retourne value comme n32
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.4.5 Nonzero percentages and lengths
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-non-zero-dimension-values */
parse_a_non_zero_dimension :: fonc (string: DOMString) -> Optionnel(r64)
{
    // À FAIRE : standardise

    chn := converti_vers_chaine(string.donne_chaine_utf16())
    diffère déloge(chn)

    chiffres := chn
    chiffres.taille = 0
    pour chn {
        si '0' <= it <= '9' {
            chiffres.taille += 1
            continue
        }

        arrête
    }

    résultat := tente extrait_r64(chiffres) piège _ {
        retourne
    }

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 2.3.6 Colors
 * https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#colours
 * \{ */

/* https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value */
parse_a_legacy_colour_value :: fonc (string: DOMString) -> Optionnel(CouleurRVBAN8)
{
    // 1. Let input be the string being parsed.
    input := string.donne_chaine_utf16()

    // 2. If input is the empty string, then return an error.
    si input.est_vide() {
        retourne
    }

    // 3. Strip leading and trailing ASCII whitespace from input.
    input = supprime_espace_blanches_autour(input)

    // 4. If input is an ASCII case-insensitive match for the string "transparent", then return an error.
    si compare_ascii_insensible_à_la_casse(input, "transparent") {
        retourne
    }

    // 5. If input is an ASCII case-insensitive match for one of the named colors, then return the simple color corresponding to that keyword. [CSSCOLOR]
    // À FAIRE : n'utilise que les mots-clés appropriés
    opt_couleur := CSS.trouve_couleur_pour_mot_clé(crée_chaine_utf16_unique(input))
    si opt_couleur.possède_valeur() {
        retourne opt_couleur
    }

    // 6. If input's code point length is four, and the first character in input is U+0023 (#), and the last three characters of input are all ASCII hex digits, then:
    si input.taille() == 4 && input.unités[0] == 0x23 && est_chiffre_hexadecimal_ascii(input.unités[1]) && est_chiffre_hexadecimal_ascii(input.unités[2]) && est_chiffre_hexadecimal_ascii(input.unités[3]) {
        // 1. Let result be a simple color.
        result: CouleurRVBAN8
        result.a = 255

        // 2. Interpret the second character of input as a hexadecimal digit; let the red component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[1]) * 17

        // 3. Interpret the third character of input as a hexadecimal digit; let the green component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[2]) * 17

        // 4. Interpret the fourth character of input as a hexadecimal digit; let the blue component of result be the resulting number multiplied by 17.
        result.r = CSS.valeur_hex_depuis_unité(input.unités[3]) * 17

        // 5. Return result.
        retourne result
    }

    // À FAIRE : 7. Replace any code points greater than U+FFFF in input (i.e., any characters that are not in the basic multilingual plane) with the two-character string "00".

    // 8. If input's code point length is greater than 128, truncate input, leaving only the first 128 characters.
    // À FAIRE : utilise la taille en point de code
    si input.taille() > 128 {
        input.unités.taille = 128
    }

    // 9. If the first character in input is a U+0023 NUMBER SIGN character (#), remove it.
    si input.unités[0] == 0x23 {
        input.unités.pointeur += 1
        input.unités.taille -= 1
    }

    // 10. Replace any character in input that is not an ASCII hex digit with the character U+0030 DIGIT ZERO (0).
    pour & input.unités {
        point_de_code : n16 = it
        saufsi est_chiffre_hexadecimal_ascii(point_de_code) {
            it = 0x30
        }
    }

    // À FAIRE : continue
    assert(input.taille() == 6)

    // 11. While input's code point length is zero or not a multiple of three, append a U+0030 DIGIT ZERO (0) character to input.

    // 12. Split input into three strings of equal code point length, to obtain three components. Let length be the code point length that all of those components have (one third the code point length of input).

    // 13. If length is greater than 8, then remove the leading length-8 characters in each component, and let length be 8.

    // 14. While length is greater than two and the first character in each component is a U+0030 DIGIT ZERO (0) character, remove that character and reduce length by one.

    // 15. If length is still greater than two, truncate each component, leaving only the first two characters in each.

    // 16. Let result be a simple color.
    result: CouleurRVBAN8
    result.a = 255

    // 17. Interpret the first component as a hexadecimal number; let the red component of result be the resulting number.
    result.r = CSS.valeur_hex_depuis_unité(input.unités[0]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[1])

    // 18. Interpret the second component as a hexadecimal number; let the green component of result be the resulting number.
    result.v = CSS.valeur_hex_depuis_unité(input.unités[2]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[3])

    // 19. Interpret the third component as a hexadecimal number; let the blue component of result be the resulting number.
    result.b = CSS.valeur_hex_depuis_unité(input.unités[4]) * 16 + CSS.valeur_hex_depuis_unité(input.unités[5])

    // 20. Return result.
    retourne result
}

/** \} */
