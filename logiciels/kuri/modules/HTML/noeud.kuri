importe Chaine
importe CSS
importe Fondation
importe #inemployé JavaScript

/* ------------------------------------------------------------------------- */
/** \nom Noeud
 * https://dom.spec.whatwg.org/#node
 * \{ */

#portée_module

TableVirtuelleNoeud :: struct {
    empl base_event_target: TableVirtuelleEventTarget

    /* Appelé quand le noeud est insérer dans un noeud parent. */
    sur_insertion: fonc(*Noeud)(rien)
    /* Appelé quand le noeud devinent connecté. */
    sur_connexion: fonc(*Noeud)(rien)
    /* Appelé quand le noeud devinent déconnecté. */
    sur_déconnexion: fonc(*Noeud)(rien)
    /* Appelé quand les enfants sont changés. */
    sur_changement_enfants: fonc(*Noeud)(rien)
}

#portée_export

/* Ces valeurs sont tirées de la spécification. */
ELEMENT_NODE : n16 : 1
ATTRIBUTE_NODE : n16 : 2
TEXT_NODE : n16 : 3
CDATA_SECTION_NODE : n16 : 4
ENTITY_REFERENCE_NODE : n16 : 5 // legacy
ENTITY_NODE : n16 : 6 // legacy
PROCESSING_INSTRUCTION_NODE : n16 : 7
COMMENT_NODE : n16 : 8
DOCUMENT_NODE : n16 : 9
DOCUMENT_TYPE_NODE : n16 : 10
DOCUMENT_FRAGMENT_NODE : n16 : 11
NOTATION_NODE : n16 : 12 // legacy

GenreNoeud :: énum n16 {
    Élément :: ELEMENT_NODE
    Attr :: ATTRIBUTE_NODE
    Texte :: TEXT_NODE
    Section_CDATA :: CDATA_SECTION_NODE
    ProcessingInstruction :: PROCESSING_INSTRUCTION_NODE
    Commentaire :: COMMENT_NODE
    Document :: DOCUMENT_NODE
    TypeDocument :: DOCUMENT_TYPE_NODE
    FragmentDocument :: DOCUMENT_FRAGMENT_NODE
}

Noeud :: struct {
    empl event_target: EventTarget

    genre: GenreNoeud

    parent: *Noeud
    enfants: [..]*Noeud

    attributs: [..]*Attr

    document: *Document
}

#portée_module

noeud_sur_destruction :: fonc (base: *JavaScript.Cellule)
{
    noeud := base comme *Noeud
    noeud_détruit_données(noeud)
}

#portée_export

noeud_détruit_données :: fonc (noeud: *Noeud)
{
    event_target_détruit_données(noeud)
    déloge(noeud.attributs)
    déloge(noeud.enfants)
}

est_document :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.Document
}

est_élément :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.Élément
}

est_élément_type :: fonc (noeud: *Noeud, type: chaine) -> *Élément
{
    saufsi est_élément(noeud) {
        retourne nul
    }

    élément := noeud comme *Élément

    si élément.local_name == type {
        retourne élément
    }

    retourne nul
}

est_élément_type :: fonc (noeud: *Noeud, tag: DOMString) -> *Élément
{
    saufsi est_élément(noeud) {
        retourne nul
    }

    élément := noeud comme *Élément

    si élément.local_name == tag {
        retourne élément
    }

    retourne nul
}

est_élément_script :: fonc (noeud: *Noeud) -> bool
{
    retourne est_élément_type(noeud, TAG_script) != nul
}

est_doctype :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.TypeDocument
}

est_texte :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.Texte || noeud.genre == GenreNoeud.Section_CDATA
}

/* https://dom.spec.whatwg.org/#exclusive-text-node */
est_texte_exclusif :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.Texte
}

est_commentaire :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.genre == GenreNoeud.Commentaire
}

possède_enfants :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.enfants.taille != 0
}

dernier_enfant :: fonc (noeud: *Noeud) -> *Noeud
{
    retourne noeud.enfants[noeud.enfants.taille - 1]
}

/* À FAIRE : implémente proprement https://dom.spec.whatwg.org/#concept-node-insert */
ajoute_enfant :: fonc (parent: *Noeud, enfant: *Noeud)
{
    enfant.parent = parent
    tableau_ajoute(*parent.enfants, enfant)

    si enfant.est_élément() {
        premier_élément_rencontré := faux

        pour parent.enfants {
            saufsi it.est_élément() {
                continue
            }

            élément := it comme *Élément
            saufsi premier_élément_rencontré {
                premier_élément_rencontré = vrai
                élément.ajoute_pseudo_classe(CSS.PseudoClasses.FirstChild)
            }
            sinon {
                élément.enlève_pseudo_classe(CSS.PseudoClasses.FirstChild)
            }

            élément.enlève_pseudo_classe(CSS.PseudoClasses.LastChild)
        }

        élément := enfant comme *Élément
        élément.ajoute_pseudo_classe(CSS.PseudoClasses.LastChild)
    }

    table := enfant.table comme *TableVirtuelleNoeud
    si table {
        si table.sur_insertion {
            table.sur_insertion(enfant)
        }
        si table.sur_connexion && enfant.est_connecté() {
            table.sur_connexion(enfant)
        }
    }

    table = parent.table comme *TableVirtuelleNoeud
    si table && table.sur_changement_enfants {
        table.sur_changement_enfants(parent)
    }
}

ajoute_attribut :: fonc (noeud: *Noeud, nom: DOMString, valeur: DOMString) -> *Attr
{
    résultat := crée_noeud_attr(noeud.document, nom, valeur)
    tableau_ajoute(*noeud.attributs, résultat)
    retourne résultat
}

possède_attribut :: fonc (noeud: *Noeud, nom: DOMString) -> bool
{
    retourne cherche_attribut(noeud.attributs, nom) != nul
}

cherche_attribut :: fonc (noeud: *Noeud, nom: DOMString) -> *Attr
{
    retourne cherche_attribut(noeud.attributs, nom)
}

donne_attribut :: fonc (noeud: *Noeud, nom_qualifié: DOMString) -> Optionnel(DOMString)
{
    attribut := cherche_attribut(noeud, nom_qualifié)
    saufsi attribut {
        retourne
    }
    retourne attribut.valeur
}

donne_attribut_ou_chaine_vide :: fonc (noeud: *Noeud, nom_qualifié: DOMString) -> DOMString
{
    attribut := cherche_attribut(noeud, nom_qualifié)
    saufsi attribut {
        retourne crée_chaine_utf16_unique_vide()
    }
    retourne attribut.valeur
}

/* https://dom.spec.whatwg.org/#concept-node-document */
donne_node_document :: fonc (noeud: *Noeud) -> *Document #enligne
{
    retourne noeud.document
}

/* Retourne le premier enfant ayant le tag donné, ou nul si le noeud n'a pas
 * d'enfants ou aucun enfant du tag donné. */
donne_premier_enfant_taggé :: fonc (noeud: *Noeud, tag: DOMString) -> *Noeud
{
    saufsi noeud {
        retourne nul
    }

    pour noeud.enfants {
        si it.est_élément_type(tag) {
            retourne it
        }
    }

    retourne nul
}

/* https://dom.spec.whatwg.org/#connected */
est_connecté :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.donne_racine_shadow_including().est_document()
}

/* https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable */
donne_node_navigable :: fonc (noeud: *Noeud) -> *Navigable
{
    document := noeud.document
    saufsi document {
        retourne nul
    }
    browsing_context := document.browsing_context
    saufsi browsing_context {
        retourne nul
    }

    assert(browsing_context.group != nul)
    assert(browsing_context.group.user_agent != nul)
    user_agent := browsing_context.group.user_agent

    /* À FAIRE : il nous faut tous les navigables. */
    pour user_agent.top_level_traversables {
        si it.donne_active_document() == document {
            retourne it
        }
    }

    retourne nul
}

/* https://dom.spec.whatwg.org/#concept-tree-root */
donne_racine :: fonc (noeud: *Noeud) -> *Noeud
{
    résultat := noeud
    tantque résultat.parent != nul {
        résultat = résultat.parent
    }
    retourne résultat
}

/* https://dom.spec.whatwg.org/#concept-shadow-including-root */
donne_racine_shadow_including :: fonc (noeud: *Noeud) -> *Noeud
{
    racine := noeud.donne_racine()
    /* INCOMPLET : shadow root */
    retourne racine
}

rassemble_texte_noeud :: fonc (noeud: *Noeud, rappel_pour_texte: fonc(*NoeudTexte, eini)(rien), données: eini)
{
    pour noeud.enfants {
        si it.est_texte() {
            texte := it comme *NoeudTexte
            rappel_pour_texte(texte, données)
        }
        sinon {
            rassemble_texte_noeud(it, rappel_pour_texte, données)
        }
    }
}

/* Fonction auxillaire pour extraire le texte d'un noeud et de ses enfants. */
extrait_texte_noeud :: fonc (noeud: *Noeud) -> chaine
{
    ExtractriceTexte :: struct {
        texte: ChaineUTF16
    }

    rappel_pour_extraction_texte :: fonc (noeud_texte: *NoeudTexte, données: eini)
    {
        extractrice := mémoire(données.pointeur comme **ExtractriceTexte)

        tableau_réserve(*extractrice.texte.unités, noeud_texte.données.taille())

        pour noeud_texte.données.unités {
            tableau_ajoute(*extractrice.texte.unités, it)
        }
    }

    extractrice: ExtractriceTexte
    diffère détruit_chaine(extractrice.texte)

    rassemble_texte_noeud(noeud, rappel_pour_extraction_texte, *extractrice)

    retourne imprime_chaine("%", extractrice.texte)
}

/* https://dom.spec.whatwg.org/#concept-child-text-content */
donne_contenu_texte_enfant :: fonc (noeud: *Noeud) -> ChaineUTF16
{
    enchaineuse: EnchaineuseUTF16
    initialise_enchaineuse(enchaineuse)
    diffère détruit_tampons(enchaineuse)

    pour noeud.enfants {
        saufsi it.est_texte() {
            continue
        }

        texte := noeud comme *NoeudTexte
        ajoute(enchaineuse, texte.données)
    }

    retourne chaine_depuis_enchaineuse(enchaineuse)
}

/* https://dom.spec.whatwg.org/#concept-descendant-text-content */
donne_contenu_texte_descandants :: fonc (noeud: *Noeud) -> ChaineUTF16
{
    rappel_pour_extraction_texte_descandants :: fonc (noeud: *Noeud, enchaineuse: &EnchaineuseUTF16) -> DécisionTraversée
    {
        si noeud.est_texte() {
            texte := noeud comme *NoeudTexte
            ajoute(enchaineuse, texte.données)
        }

        retourne DécisionTraversée.CONTINUE
    }

    enchaineuse: EnchaineuseUTF16
    initialise_enchaineuse(enchaineuse)
    diffère détruit_tampons(enchaineuse)

    traverse_noeud(noeud, rappel_pour_extraction_texte_descandants, enchaineuse)

    retourne chaine_depuis_enchaineuse(enchaineuse)
}

/* https://dom.spec.whatwg.org/#concept-node-length */
donne_longueur :: fonc (noeud: *Noeud) -> z64
{
    discr noeud.genre {
        TypeDocument {
            retourne 0
        }
        Commentaire,
        Texte,
        Section_CDATA,
        ProcessingInstruction {
            retourne texte.données.taille
        }
        sinon {
            retourne noeud.enfants.taille
        }
    }
}

/* https://dom.spec.whatwg.org/#concept-node-empty */
est_vide :: fonc (noeud: *Noeud) -> bool
{
    retourne noeud.donne_longueur() == 0
}

/* https://dom.spec.whatwg.org/#ref-for-dom-nonelementparentnode-getelementbyid%E2%91%A1 */
get_element_by_id :: fonc (noeud: *Noeud, chn: DOMString) -> *Élément
{
    retourne get_element_by_id_recursive(noeud, chn)
}

get_element_by_id_recursive :: fonc (noeud: *Noeud, chn: DOMString) -> *Élément
{
    si noeud.est_élément() {
        valeur := noeud.donne_attribut(ATTR_id)
        si valeur.possède_valeur() && valeur.Quelque == chn {
            retourne noeud comme *Élément
        }
    }

    pour noeud.enfants {
        élément := get_element_by_id_recursive(it, chn)
        si élément {
            retourne élément
        }
    }

    retourne nul
}

/** \} */
