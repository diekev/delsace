importe Chaine
importe Ensemble
importe Fondation
importe #inemployé JavaScript

/* https://dom.spec.whatwg.org/#concept-ordered-set-parser */
run_ordered_set_parser :: fonc (chn: DOMString) -> [..]DOMString
{
    // Let inputTokens be the result of splitting input on ASCII whitespace.
    input_tokens := divise_sur_espaces_blanches_ascii(chn)
    diffère déloge(input_tokens)

    // Let tokens be a new ordered set.
    tokens: [..]DOMString

    // For each token in inputTokens, append token to tokens.
    pour input_tokens {
        ensemble_ajoute(*tokens, it)
    }

    // Return tokens.
    retourne tokens
}

/* ------------------------------------------------------------------------- */
/** \nom HTMLCollectionFilter
 * Filtre pour les HTMLCollections.
 * \{ */

HTMLCollectionFilter :: struct {
    sur_filtre: fonc(*HTMLCollectionFilter, *HTMLCollection, *Élément)(bool)
    sur_destruction: fonc(*HTMLCollectionFilter)(rien)
}

crée_filtre_pour_class_name :: fonc (classes: [..]DOMString) -> *HTMLCollectionFilter
{
    ClassesFilter :: struct {
        empl base: HTMLCollectionFilter
        classes: [..]DOMString
    }

    sur_filtre :: fonc (base: *HTMLCollectionFilter, collection: *HTMLCollection, élément: *Élément) -> bool
    {
        si élément == collection.root {
            retourne faux
        }
        filtre := base comme *ClassesFilter
        valeur := élément.donne_attribut(ATTR_class)
        saufsi valeur.possède_valeur() {
            retourne faux
        }

        document := collection.root.document
        classes_élément := divise_sur_espaces_blanches_ascii(valeur.Quelque)
        diffère déloge(classes_élément)

        pour classe_élément dans classes_élément {
            pour class dans filtre.classes {
                si document.mode == ModeDocument.QUIRKS {
                    si compare_ascii_insensible_à_la_casse(class, classe_élément) {
                        arrête
                    }
                }
                sinon si class == classe_élément {
                    arrête
                }
            }
            sansarrêt {
                retourne faux
            }
        }

        retourne vrai
    }

    sur_destruction :: fonc (base: *HTMLCollectionFilter)
    {
        filtre := base comme *ClassesFilter
        déloge(filtre.classes)
        déloge(filtre)
    }

    résultat := loge(ClassesFilter)
    résultat.classes = classes
    résultat.sur_filtre = sur_filtre
    résultat.sur_destruction = sur_destruction
    retourne résultat
}

crée_filtre_pour_tag_name :: fonc (tag_name: DOMString) -> *HTMLCollectionFilter
{
    TagNameFilter :: struct {
        empl base: HTMLCollectionFilter
        tag_name: DOMString
    }

    sur_filtre :: fonc (base: *HTMLCollectionFilter, collection: *HTMLCollection @inutilisée, élément: *Élément) -> bool
    {
        filtre := base comme *TagNameFilter
        // À FAIRE : qualified name
        retourne élément.local_name == filtre.tag_name
    }

    sur_destruction :: fonc (base: *HTMLCollectionFilter)
    {
        filtre := base comme *TagNameFilter
        déloge(filtre)
    }

    résultat := loge(TagNameFilter)
    résultat.tag_name = tag_name
    résultat.sur_filtre = sur_filtre
    résultat.sur_destruction = sur_destruction
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HTMLCollection
 * https://dom.spec.whatwg.org/#htmlcollection
 * \{ */

#portée_fichier

table_virtuelle_html_collection := TableVirtuellePlatformObject(
    classe = HTMLCollection,
    sur_destruction = html_collection_sur_destruction
)

html_collection_sur_destruction :: fonc (base: *JavaScript.Cellule)
{
    collection := base comme *HTMLCollection
    détruit_collection(collection)
}

#portée_export

HTMLCollection :: struct {
    empl platform_object: PlatformObject
    table = *table_virtuelle_html_collection

    // À FAIRE : la collection est vivante
    root: *Noeud
    filter: *HTMLCollectionFilter

    éléments: [..]*Élément
}

crée_html_collection :: fonc (élément: *Élément) -> *HTMLCollection
{
    résultat := crée_platform_object(élément, HTMLCollection)
    JavaScript.ajoute_propriété(résultat, crée_chaine_utf16_unique("length"), htmlcollection_length_getter, nul, JavaScript.DrapeauxPropriété.zéro)
    JavaScript.ajoute_fonction_native(résultat, "item", fonction_native_item)
    retourne résultat
}

ajoute_élément :: fonc (collection: *HTMLCollection, élément: *Élément)
{
    tableau_ajoute(*collection.éléments, élément)
}

initialise_collection_pour_filtre :: fonc (collection: *HTMLCollection)
{
    assert(collection.filter != nul)
    initialise_collection_pour_filtre_récursif(collection.root, collection)
}

initialise_collection_pour_filtre_récursif :: fonc (racine: *Noeud, collection: *HTMLCollection)
{
    si racine.est_élément() {
        élément := racine comme *Élément

        si collection.filter.sur_filtre(collection.filter, collection, élément) {
            ajoute_élément(collection, élément)
        }
    }

    pour racine.enfants {
        initialise_collection_pour_filtre_récursif(it, collection)
    }
}

détruit_collection :: fonc (collection: *HTMLCollection)
{
    si collection.filter && collection.filter.sur_destruction {
        collection.filter.sur_destruction(collection.filter)
    }

    déloge(collection.éléments)
}

donne_length :: fonc (collection: *HTMLCollection) -> z64
{
    retourne collection.éléments.taille
}

donne_index :: fonc (collection: *HTMLCollection, index: z64) -> *Élément
{
    retourne collection.éléments[index]
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Interface JavaScript
 * \{ */

#portée_fichier

fonction_native_item :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille != 1 {
        retourne JavaScript.lance_type_error(interpréteuse, "item requiers 1 argument")
    }

    completion_index := JavaScript.vers_nombre(interpréteuse, arguments[0])
    saufsi JavaScript.est_normal(completion_index) {
        retourne completion_index
    }
    index := completion_index.valeur.V.Number comme z64

    collection := JavaScript.donne_objet(this_value) comme *HTMLCollection

    si index < 0 || index >= collection.éléments.taille {
        retourne JavaScript.normal_completion(JavaScript.js_null)
    }

    élément := collection.éléments[index]
    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = élément))
}

htmlcollection_length_getter :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    collection := JavaScript.donne_objet(this_value) comme *HTMLCollection
    retourne JavaScript.normal_completion(JavaScript.Valeur(Number = collection.éléments.taille comme r64))
}

/** \} */
