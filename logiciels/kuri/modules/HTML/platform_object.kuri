importe Chaine
importe Fondation
JS :: importe JavaScript

/* ------------------------------------------------------------------------- */
/** \nom PlatformObject
 * https://webidl.spec.whatwg.org/#dfn-platform-object
 * https://webidl.spec.whatwg.org/#es-platform-objects
 * \{ */

#portée_module

TableVirtuellePlatformObject :: struct {
    empl object: JS.TableVirtuelleObject

    sur_destruction = platform_object_sur_destruction
}

platform_object_sur_destruction :: fonc (base: *JS.Cellule)
{
    JS.sur_destruction_objet(base)
}

#portée_export

PlatformObject :: struct {
    empl objet: JS.Object
    realm: *JS.Realm
}

donne_tas_de_mémoire :: fonc (object: *PlatformObject) -> *JS.TasDeMémoire
{
    retourne JS.donne_tas_de_mémoire(object)
}

crée_platform_object :: fonc (référence: *PlatformObject, $T: type_de_données) -> *T
{
    retourne crée_platform_object(référence.donne_tas_de_mémoire(), référence.realm, T)
}

crée_platform_object :: fonc (tas_de_mémoire: *JS.TasDeMémoire, realm: *JS.Realm, $T: type_de_données) -> *T
{
    résultat := JS.alloue(tas_de_mémoire, T)
    résultat.realm = realm
    définis_prototype(résultat, T)
    retourne résultat
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#isplatformobjectsameorigin-(-o-) */
is_platform_object_same_origin :: fonc (object: *PlatformObject) -> bool
{
    // 1. Return true if the current settings object's origin is same origin-domain with O's relevant settings object's origin, and false otherwise.
    current := donne_current_settings_object(object)
    relevant := donne_relevant_settings_object(object)
    retourne sont_même_domaine_origine(current.donne_origin(), relevant.donne_origin())
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.3.3.3 Current
 * https://html.spec.whatwg.org/multipage/webappapis.html#relevant
 * \{ */

donne_current_realm :: fonc (platform_object: *PlatformObject) -> *JS.Realm
{
    mv := JS.donne_mv(platform_object.realm)
    retourne JS.donne_current_realm(mv)
}

donne_current_settings_object :: fonc (platform_object: *PlatformObject) -> *EnvironmentSettings
{
    realm := platform_object.donne_current_realm()
    saufsi realm {
        retourne nul
    }
    retourne JS.donne_données(realm.host_defined, EnvironmentSettings)
}

donne_current_global_object :: fonc (platform_object: *PlatformObject) -> *JS.Object
{
    realm := platform_object.donne_current_realm()
    saufsi realm {
        retourne nul
    }
    retourne realm.global_object
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.3.3.4 Relevant
 * https://html.spec.whatwg.org/multipage/webappapis.html#relevant
 * \{ */

donne_relevant_realm :: fonc (platform_object: *PlatformObject) -> *JS.Realm
{
    retourne platform_object.realm
}

donne_relevant_settings_object :: fonc (platform_object: *PlatformObject) -> *EnvironmentSettings
{
    realm := platform_object.donne_relevant_realm()
    saufsi realm {
        retourne nul
    }
    retourne JS.donne_données(realm.host_defined, EnvironmentSettings)
}

donne_relevant_global_object :: fonc (platform_object: *PlatformObject) -> *JS.Object
{
    realm := platform_object.donne_relevant_realm()
    saufsi realm {
        retourne nul
    }
    retourne realm.global_object
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Environment
 * https://html.spec.whatwg.org/multipage/webappapis.html#environments
 * \{ */

Environment :: struct {
    creation_url: *URL
    top_level_creation_url: *URL
    top_level_origin: Origin
    execution_ready: bool
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EnvironmentSettings
 * https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-objects
 * \{ */

EnvironmentSettings :: struct {
    empl base: Environment

    sur_donne_realm_execution_context: fonc(*EnvironmentSettings)(*JS.ExecutionContext)
    // sur_donne_module_map
    sur_donne_api_base_url: fonc(*EnvironmentSettings)(*URL)
    sur_donne_origin: fonc(*EnvironmentSettings)(Origin)
    sur_donne_policy_container: fonc(*EnvironmentSettings)(*PolicyContainer)
    sur_donne_cross_origin_isolated_capability: fonc(*EnvironmentSettings)(bool)
    sur_donne_time_origin: fonc(*EnvironmentSettings)(r64)
}

donne_realm :: fonc (environment: *EnvironmentSettings) -> *JS.Realm
{
    ctx := environment.donne_realm_execution_context()
    saufsi ctx {
        retourne nul
    }
    retourne ctx.realm
}

donne_global_object :: fonc (environment: *EnvironmentSettings) -> *JS.Object
{
    realm := environment.donne_realm()
    saufsi realm {
        retourne nul
    }
    retourne realm.global_object
}

donne_realm_execution_context :: fonc (environment: *EnvironmentSettings) -> *JS.ExecutionContext
{
    retourne environment.sur_donne_realm_execution_context(environment)
}

donne_api_base_url :: fonc (environment: *EnvironmentSettings) -> *URL
{
    retourne environment.sur_donne_api_base_url(environment)
}

donne_origin :: fonc (environment: *EnvironmentSettings) -> Origin
{
    retourne environment.sur_donne_origin(environment)
}

donne_policy_container :: fonc (environment: *EnvironmentSettings) -> *PolicyContainer
{
    retourne environment.sur_donne_policy_container(environment)
}

donne_cross_origin_isolated_capability :: fonc (environment: *EnvironmentSettings) -> bool
{
    retourne environment.sur_donne_cross_origin_isolated_capability(environment)
}

donne_time_origin :: fonc (environment: *EnvironmentSettings) -> r64
{
    retourne environment.sur_donne_time_origin(environment)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.3.4 Enabling and disabling scripting
 * https://html.spec.whatwg.org/multipage/webappapis.html#enabling-and-disabling-scripting
 * \{ */

scripting_est_activé :: fonc (user_agent: *UserAgent, environment: *EnvironmentSettings) -> bool
{
    // The user agent supports scripting.
    saufsi user_agent.supporte_scripting {
        retourne faux
    }

    // À FAIRE : The user has not disabled scripting for settings at this time. (User agents may provide users with the option to disable scripting globally, or in a finer-grained manner, e.g., on a per-origin basis, down to the level of individual environment settings objects.)

    // Either settings's global object is not a Window object, or settings's global object's associated Document's active sandboxing flag set does not have its sandboxed scripts browsing context flag set.
    global_object := donne_global_object(environment)
    saufsi global_object {
        retourne faux
    }

    window := global_object comme *Window
    retourne (global_object.table.classe != Window) || window.document.active_sandboxing_flags.Scripts == faux
}

scripting_est_désactivé :: fonc (user_agent: *UserAgent, environment: *EnvironmentSettings) -> bool
{
    retourne scripting_est_activé(user_agent, environment) == faux
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#concept-n-noscript */
scripting_est_activé :: fonc (noeud: *Noeud) -> bool
{
    node_document := noeud.donne_node_document()
    saufsi node_document {
        retourne faux
    }
    saufsi node_document.browsing_context {
        retourne faux
    }
    settings := noeud.donne_relevant_settings_object()
    saufsi settings {
        retourne faux
    }
    retourne scripting_est_activé(node_document.donne_user_agent(), settings)
}

scripting_est_désactivé :: fonc (noeud: *Noeud) -> bool
{
    retourne scripting_est_activé(noeud) == faux
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Initialisation interface
 * \{ */

initialise_host_intrinsics :: fonc (realm: *JS.Realm)
#corps_texte {
    retourne compile_interfaces_idl()
}

#portée_module

donne_prototype :: fonc (realm: *JS.Realm, index: z64) -> *JS.Object
{
    saufsi realm {
        retourne nul
    }
    retourne realm.intrinsics.host_intrinsics[index]
}

/* Table pour mapper le type d'un objet Kuri à l'index de son prototype dans realm.intrinsics.host_intrinsics. */
IndexPrototype :: struct {
    type: type_de_données
    index: z64
}

__table_indexage_prototypes: [..]IndexPrototype

détermine_index_prototype :: fonc (type: type_de_données) -> z64
{
    résultat := donne_index_prototype(type)
    si résultat != -1 {
        retourne résultat
    }

    types_à_essayer := type_de_données.[HTMLElement, Élément, Noeud, EventTarget]

    infos := __table_des_types[type] comme *InfoTypeStructure

    pour types_à_essayer {
        infos_à_essayer := __table_des_types[it] comme *InfoTypeStructure
        saufsi est_struct_ou_employeuse_de(infos, infos_à_essayer) {
            continue
        }

        résultat = donne_index_prototype(it)
        si résultat != -1 {
            retourne résultat
        }
    }

    retourne -1
}

donne_index_prototype :: fonc (type: type_de_données) -> z64
{
    pour __table_indexage_prototypes {
        si it.type == type {
            retourne it.index
        }
    }
    retourne -1
}

définis_prototype :: fonc (object: *PlatformObject, type: type_de_données)
{
    index := détermine_index_prototype(type)
    si index == -1 {
        retourne
    }
    object.prototype = donne_prototype(object.realm, index)
}

donne_platform_object :: fonc (interpréteuse: *JS.Interpréteuse, value: JS.Valeur, $Type: type_de_données) -> *Type
{
    object := JS.to_object(interpréteuse, value)
    si JS.possède_exception(interpréteuse) {
        retourne nul
    }
    info_type := info_de(Type)
    saufsi est_struct_ou_employeuse_de(JS.donne_info_type_cellule(object), info_type) {
        message := imprime_chaine("object is not a '%'", info_type.nom)
        diffère déloge(message)
        _ := JS.lance_type_error(interpréteuse, message)
        retourne nul
    }
    retourne object comme *Type
}

InfoConstructor :: struct {
    index: z64
    nom: DOMString
}

__table_constructors: [..]InfoConstructor

initialise_constructors :: fonc (global: *JS.Object, realm: *JS.Realm)
{
    pour __table_constructors {
        constructor := realm.intrinsics.host_intrinsics[it.index]

        desc: JS.PropertyDescriptor
        JS.initialise_property_descriptor(*desc, JS.Valeur(Object = constructor), JS.DrapeauxPropriété.zéro)

        JS.define_property_or_throw(global, it.nom, desc)
    }
}

/** \} */
