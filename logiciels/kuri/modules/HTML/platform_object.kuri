importe Chaine
importe Fondation
importe #inemployé JavaScript

/* ------------------------------------------------------------------------- */
/** \nom PlatformObject
 * https://webidl.spec.whatwg.org/#dfn-platform-object
 * https://webidl.spec.whatwg.org/#es-platform-objects
 * \{ */

#portée_module

TableVirtuellePlatformObject :: struct {
    empl object: JavaScript.TableVirtuelleObject

    sur_destruction = platform_object_sur_destruction
    sur_initialisation_interface: fonc(*PlatformObject)(rien)
}

platform_object_sur_destruction :: fonc (base: *JavaScript.Cellule)
{
    JavaScript.sur_destruction_objet(base)
}

#portée_export

PlatformObject :: struct {
    empl objet: JavaScript.Object
    realm: *JavaScript.Realm
}

donne_tas_de_mémoire :: fonc (object: *PlatformObject) -> *JavaScript.TasDeMémoire
{
    retourne JavaScript.donne_tas_de_mémoire(object)
}

crée_platform_object :: fonc (référence: *PlatformObject, $T: type_de_données) -> *T
{
    retourne crée_platform_object(référence.donne_tas_de_mémoire(), référence.realm, T)
}

crée_platform_object :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, realm: *JavaScript.Realm, $T: type_de_données) -> *T
{
    résultat := JavaScript.alloue(tas_de_mémoire, T)
    résultat.realm = realm
    table := résultat.table comme *TableVirtuellePlatformObject
    si table && table.sur_initialisation_interface {
        table.sur_initialisation_interface(résultat)
    }
    retourne résultat
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#isplatformobjectsameorigin-(-o-) */
is_platform_object_same_origin :: fonc (object: *JavaScript.Object @inutilisée) -> bool
{
    // 1. Return true if the current settings object's origin is same origin-domain with O's relevant settings object's origin, and false otherwise.
    imprime("À FAIRE : [%]\n", #nom_de_cette_fonction)
    retourne faux
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.3.3.4 Relevant
 * https://html.spec.whatwg.org/multipage/webappapis.html#relevant
 * \{ */

donne_relevant_realm :: fonc (platform_object: *PlatformObject) -> *JavaScript.Realm
{
    retourne platform_object.realm
}

donne_relevant_settings_object :: fonc (platform_object: *PlatformObject) -> *EnvironmentSettings
{
    realm := platform_object.donne_relevant_realm()
    saufsi realm {
        retourne nul
    }
    retourne JavaScript.donne_données(realm.host_defined, EnvironmentSettings)
}

donne_relevant_global_object :: fonc (platform_object: *PlatformObject) -> *JavaScript.Object
{
    realm := platform_object.donne_relevant_realm()
    saufsi realm {
        retourne nul
    }
    retourne realm.global_object
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Environment
 * https://html.spec.whatwg.org/multipage/webappapis.html#environments
 * \{ */

Environment :: struct {
    creation_url: *URL
    top_level_creation_url: *URL
    top_level_origin: Origin
    execution_ready: bool
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EnvironmentSettings
 * https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-objects
 * \{ */

EnvironmentSettings :: struct {
    empl base: Environment

    sur_donne_realm_execution_context: fonc(*EnvironmentSettings)(*JavaScript.ExecutionContext)
    // sur_donne_module_map
    sur_donne_api_base_url: fonc(*EnvironmentSettings)(*URL)
    sur_donne_origin: fonc(*EnvironmentSettings)(Origin)
    sur_donne_policy_container: fonc(*EnvironmentSettings)(*PolicyContainer)
    sur_donne_cross_origin_isolated_capability: fonc(*EnvironmentSettings)(bool)
    sur_donne_time_origin: fonc(*EnvironmentSettings)(r64)
}

donne_realm :: fonc (environment: *EnvironmentSettings) -> *JavaScript.Realm
{
    ctx := environment.donne_realm_execution_context()
    saufsi ctx {
        retourne nul
    }
    retourne ctx.realm
}

donne_global_object :: fonc (environment: *EnvironmentSettings) -> *JavaScript.Object
{
    realm := environment.donne_realm()
    saufsi realm {
        retourne nul
    }
    retourne realm.global_object
}

donne_realm_execution_context :: fonc (environment: *EnvironmentSettings) -> *JavaScript.ExecutionContext
{
    retourne environment.sur_donne_realm_execution_context(environment)
}

donne_api_base_url :: fonc (environment: *EnvironmentSettings) -> *URL
{
    retourne environment.sur_donne_api_base_url(environment)
}

donne_origin :: fonc (environment: *EnvironmentSettings) -> Origin
{
    retourne environment.sur_donne_origin(environment)
}

donne_policy_container :: fonc (environment: *EnvironmentSettings) -> *PolicyContainer
{
    retourne environment.sur_donne_policy_container(environment)
}

donne_cross_origin_isolated_capability :: fonc (environment: *EnvironmentSettings) -> bool
{
    retourne environment.sur_donne_cross_origin_isolated_capability(environment)
}

donne_time_origin :: fonc (environment: *EnvironmentSettings) -> r64
{
    retourne environment.sur_donne_time_origin(environment)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 8.1.3.4 Enabling and disabling scripting
 * https://html.spec.whatwg.org/multipage/webappapis.html#enabling-and-disabling-scripting
 * \{ */

scripting_est_activé :: fonc (user_agent: *UserAgent, environment: *EnvironmentSettings) -> bool
{
    // The user agent supports scripting.
    saufsi user_agent.supporte_scripting {
        retourne faux
    }

    // À FAIRE : The user has not disabled scripting for settings at this time. (User agents may provide users with the option to disable scripting globally, or in a finer-grained manner, e.g., on a per-origin basis, down to the level of individual environment settings objects.)

    // Either settings's global object is not a Window object, or settings's global object's associated Document's active sandboxing flag set does not have its sandboxed scripts browsing context flag set.
    global_object := donne_global_object(environment)
    saufsi global_object {
        retourne faux
    }

    window := global_object comme *Window
    retourne (global_object.table.classe != Window) || window.document.active_sandboxing_flags.Scripts == faux
}

scripting_est_désactivé :: fonc (user_agent: *UserAgent, environment: *EnvironmentSettings) -> bool
{
    retourne scripting_est_activé(user_agent, environment) == faux
}

/* https://html.spec.whatwg.org/multipage/webappapis.html#concept-n-noscript */
scripting_est_activé :: fonc (script: *HTMLScriptElement) -> bool
{
    node_document := script.donne_node_document()
    saufsi node_document {
        retourne faux
    }
    saufsi node_document.browsing_context {
        retourne faux
    }
    settings := script.donne_relevant_settings_object()
    saufsi settings {
        retourne faux
    }
    retourne scripting_est_activé(node_document.donne_user_agent(), settings)
}

scripting_est_désactivé :: fonc (script: *HTMLScriptElement) -> bool
{
    retourne scripting_est_activé(script) == faux
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Initialisation interface
 * \{ */

initialise_host_intrinsics :: fonc (realm: *JavaScript.Realm)
{
    tas_de_mémoire := JavaScript.donne_tas_de_mémoire(realm)

    event_target_prototype := crée_event_target_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    node_prototype := crée_node_prototype(tas_de_mémoire, event_target_prototype)
    document_prototype := crée_document_prototype(tas_de_mémoire, node_prototype)
    element_prototype := crée_element_prototype(tas_de_mémoire, node_prototype)
    html_image_element_prototype := crée_html_image_element_prototype(tas_de_mémoire, element_prototype)
    window_prototype := crée_window_prototype(tas_de_mémoire, event_target_prototype)

    tableau_redimensionne(realm.intrinsics.host_intrinsics, PrototypesPlatformObject.nombre_éléments)
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.EventTarget] = event_target_prototype
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.Document] = document_prototype
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.Node] = node_prototype
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.Element] = element_prototype
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.HTMLImageElement] = html_image_element_prototype
    realm.intrinsics.host_intrinsics[PrototypesPlatformObject.Window] = window_prototype
}

#portée_module

PrototypesPlatformObject :: énum {
    EventTarget
    Document
    Node
    Element
    HTMLImageElement
    Window
}

donne_prototype :: fonc (realm: *JavaScript.Realm, index: PrototypesPlatformObject) -> *JavaScript.Object
{
    saufsi realm {
        retourne nul
    }
    retourne realm.intrinsics.host_intrinsics[index]
}

définis_prototype :: fonc (object: *PlatformObject, index: PrototypesPlatformObject)
{
    object.prototype = donne_prototype(object.realm, index)
}

#portée_fichier

/* Event Target */

crée_event_target_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_fonction_native(résultat, crée_chaine_utf16_unique("addEventListener"), fonction_native_add_event_listener);
    retourne résultat
}

fonction_native_add_event_listener :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille < 2 {
        retourne JavaScript.lance_type_error(interpréteuse, "addEventListener doit prendre au moins 2 arguments")
    }

    saufsi JavaScript.est_chaine(arguments[0]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument 0 n'est pas une chaine")
    }

    saufsi JavaScript.is_callable(arguments[1]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument 1 n'est pas callable")
    }

    arg0 := arguments[0].String.texte
    arg1 := JavaScript.donne_objet(arguments[1])

    chn_arg0 := converti_vers_chaine(arg0.donne_chaine_utf16())
    diffère déloge(chn_arg0)

    valeur_type, trouvé := donne_valeur_énum_pour_nom(info_de(EventType), chn_arg0)
    saufsi trouvé {
        retourne JavaScript.lance_type_error(interpréteuse, "argument 0 n'est pas un type d'évènement")
    }

    event_type : EventType = valeur_type

    event_listener := loge(EventListener)
    event_listener.function = arg1

    event_target := JavaScript.donne_objet(this_value) comme *EventTarget

    event_target.add_event_listener(event_type , event_listener)

    retourne JavaScript.normal_completion(JavaScript.js_undefined)
}

/* Node */

crée_node_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_propriété(résultat, crée_chaine_utf16_unique("nodeName"), node_node_name_getter, nul, JavaScript.DrapeauxPropriété.zéro)
    retourne résultat
}

node_node_name_getter :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    noeud := JavaScript.donne_objet(this_value) comme *Noeud
    node_name := donne_node_name(noeud)
    str_node_name := JavaScript.crée_chaine(noeud.donne_tas_de_mémoire(), node_name)
    retourne JavaScript.normal_completion(JavaScript.Valeur(String = str_node_name))
}

/* Document */

crée_document_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_fonction_native(résultat, "getElementById", fonction_native_get_element_by_id)
    retourne résultat
}

fonction_native_get_element_by_id :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille == 0 {
        retourne JavaScript.lance_type_error(interpréteuse, "getElementByID requiers 1 argument")
    }

    saufsi JavaScript.est_chaine(arguments[0]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument n'est pas une chaine")
    }

    texte := arguments[0].String.texte
    document := JavaScript.donne_objet(this_value) comme *Document
    élément := document.get_element_by_id(texte)

    saufsi élément {
        retourne JavaScript.normal_completion(JavaScript.js_null)
    }

    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = élément))
}

/* Element */

crée_element_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_fonction_native(résultat, "getElementsByClassName", fonction_native_get_element_by_class_name)
    JavaScript.ajoute_fonction_native(résultat, "getElementsByTagName", fonction_native_get_element_by_tag_name)
    JavaScript.ajoute_propriété(résultat, crée_chaine_utf16_unique("innerHTML"), element_innerhtml_getter, element_innerhtml_setter, JavaScript.DrapeauxPropriété.zéro)
    retourne résultat
}

fonction_native_get_element_by_class_name :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille == 0 {
        retourne JavaScript.lance_type_error(interpréteuse, "getElementsByClassName requiers 1 argument")
    }

    saufsi JavaScript.est_chaine(arguments[0]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument n'est pas une chaine")
    }

    texte := arguments[0].String.texte
    élément := JavaScript.donne_objet(this_value) comme *Élément
    collection := élément.get_elements_by_class_name(texte)
    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = collection))
}

fonction_native_get_element_by_tag_name :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille != 1 {
        retourne JavaScript.lance_type_error(interpréteuse, "getElementsByTagName requiers 1 argument")
    }

    saufsi JavaScript.est_chaine(arguments[0]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument n'est pas une chaine")
    }

    texte := arguments[0].String.texte
    élément := JavaScript.donne_objet(this_value) comme *Élément
    collection := élément.get_elements_by_tag_name(texte)
    retourne JavaScript.normal_completion(JavaScript.Valeur(Object = collection))
}

element_innerhtml_getter :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    élément := JavaScript.donne_objet(this_value) comme *Élément

    chn_innerhtml := élément.donne_innerhtml()
    diffère détruit_chaine(chn_innerhtml)

    résultat := JavaScript.crée_chaine(élément.donne_tas_de_mémoire(), crée_chaine_utf16_unique(chn_innerhtml))
    retourne JavaScript.normal_completion(JavaScript.Valeur(String = résultat))
}

element_innerhtml_setter :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    si arguments.taille != 1 {
        retourne JavaScript.lance_type_error(interpréteuse, "set innerHTML requiers 1 argument")
    }

    saufsi JavaScript.est_chaine(arguments[0]) {
        retourne JavaScript.lance_type_error(interpréteuse, "argument n'est pas une chaine")
    }

    texte := arguments[0].String.texte
    élément := JavaScript.donne_objet(this_value) comme *Élément
    élément.définis_innerhtml(texte)

    retourne JavaScript.normal_completion(JavaScript.js_undefined)
}

/* HTMLImageElement */

crée_html_image_element_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_propriété(résultat, ATTR_src, fonction_get_pour_attribut_src, nul, JavaScript.DrapeauxPropriété.zéro)
    retourne résultat
}

fonction_get_pour_attribut_src :: fonc (empl params: *JavaScript.ParamètresObjectCall) -> JavaScript.CompletionRecord
{
    élément := JavaScript.donne_objet(this_value) comme *Élément
    src := donne_attribut_ou_chaine_vide(élément, ATTR_src)
    str_src := JavaScript.crée_chaine(élément.donne_tas_de_mémoire(), src)
    retourne JavaScript.normal_completion(JavaScript.Valeur(String = str_src))
}

/* Window */

crée_window_prototype :: fonc (tas_de_mémoire: *JavaScript.TasDeMémoire, prototype: *JavaScript.Object) -> *JavaScript.Object
{
    résultat := JavaScript.crée_objet(tas_de_mémoire, prototype)
    JavaScript.ajoute_fonction_native(résultat, "alert", fonction_native_alert)
    retourne résultat
}

/** \} */
