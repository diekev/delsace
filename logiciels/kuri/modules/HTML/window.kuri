importe Chaine
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom Window
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#window
 * \{ */

#portée_fichier

table_virtuelle_window := TableVirtuelleEventTarget(
    classe = Window,
    sur_destruction = window_sur_destruction
)

window_sur_destruction :: fonc (base: *JS.Cellule)
{
    event_target_sur_destruction(base)
    window := base comme *Window
    déloge(window.chronomètres)
    déloge(window.animation_frames)
}

#portée_export

Window :: struct {
    empl event_target: EventTarget
    table = *table_virtuelle_window

    document: *Document
    navigator: *Navigator
    location: *Location
    screen: *Screen

    Chronomètres :: struct {
        id: z32
        time_out: z32
        algorithm: *Algorithm
        handler: *JS.Object
    }

    chronomètres: [..]Chronomètres

    AnimationFrame :: struct {
        id: z32
        callback: *JS.Object
    }

    animation_frames: [..]AnimationFrame
    id_suivant_animation_frame: z32
}

exécute_animation_frames :: fonc (window: *Window)
{
    animation_frames := window.animation_frames
    diffère déloge(animation_frames)

    window.animation_frames.pointeur = nul
    window.animation_frames.taille = 0
    window.animation_frames.capacité = 0

    pour animation_frames {
        callback := it.callback

        realm := window.realm
        settings := JS.donne_données(realm.host_defined, EnvironmentSettings)

        prepare_to_run_script(settings)

        this_arg := JS.js_undefined
        value := JS.Valeur(Object = callback)

        _ := JS.call(JS.donne_mv(realm), value, this_arg)
        si JS.possède_exception(realm) {
            imprime("[%] %\n", #nom_de_cette_fonction, JS.donne_exception(realm))
        }

        cleanup_after_running_script(settings)
    }
}

#portée_module

crée_objet_window :: fonc (user_agent: *UserAgent, tas_de_mémoire: *JS.TasDeMémoire, realm: *JS.Realm) -> *Window
{
    résultat := crée_platform_object(tas_de_mémoire, realm, Window)
    crée_navigator(résultat, user_agent)
    crée_location(résultat)
    crée_screen(résultat, user_agent)

    FluxSortieConsole :: struct {
        empl flux: JS.FluxSortieConsole

        user_agent: *UserAgent
        window: *Window
    }

    flux_sortie_sur_destruction :: fonc (flux: *FluxSortieConsole)
    {
        déloge(flux)
    }

    flux_sortie_sur_log :: fonc (empl flux: *FluxSortieConsole, texte: chaine)
    {
        user_agent.rapporte_log(window.document, copie_chaine(texte))
    }

    flux_sortie_sur_efface :: fonc (base: *JS.FluxSortieConsole @inutilisée)
    {
    }

    flux := loge(FluxSortieConsole)
    flux.sur_destruction = flux_sortie_sur_destruction
    flux.sur_log = flux_sortie_sur_log
    flux.sur_efface = flux_sortie_sur_efface
    flux.user_agent = user_agent
    flux.window = résultat

    console := JS.crée_console(tas_de_mémoire, flux, nul)

    JS.ajoute_propriété(résultat, crée_chaine_utf16_unique("console"), JS.Valeur(Object = console), JS.Enumerable | JS.Configurable | JS.Writable)

    initialise_constructors(résultat, realm)

    retourne résultat
}

donne_document :: fonc (window: *Window) -> *Document
{
    retourne window.document
}

donne_window :: fonc (window: *Window) -> *Window
{
    retourne window
}

donne_frames :: fonc (window: *Window) -> *Window
{
    retourne window
}

donne_self :: fonc (window: *Window) -> *Window
{
    retourne window
}

/* https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-alert-noargs */
alert :: fonc (window: *Window, message: DOMString)
{
    user_agent := window.document.donne_user_agent()
    saufsi user_agent {
        retourne
    }

    user_agent.affiche_alerte(message)
}

set_timeout :: fonc (window: *Window, handler: *JS.Object, time_out: z32) -> z32
{
    retourne crée_chronomètre(window, handler, time_out, faux)
}

clear_timeout :: fonc (window: *Window, id: z32)
{
    user_agent := window.document.donne_user_agent()
    saufsi user_agent {
        retourne
    }

    pour window.chronomètres {
        si it.id == id {
            si it.algorithm.sur_destruction {
                it.algorithm.sur_destruction(it.algorithm)
            }
            tableau_supprime_index(*window.chronomètres, index_it)
            retourne
        }
    }

    user_agent.détruit_timeout(id)
}

set_interval :: fonc (window: *Window, handler: *JS.Object, time_out: z32) -> z32
{
    retourne crée_chronomètre(window, handler, time_out, vrai)
}

clear_interval :: fonc (window: *Window, id: z32)
{
    clear_timeout(window, id)
}

request_animation_frame :: fonc (window: *Window, callback: *JS.Object) -> z32
{
    user_agent := window.document.donne_user_agent()
    saufsi user_agent {
        retourne -1
    }

    animation_frame := tableau_ajoute_élément(*window.animation_frames)
    animation_frame.callback = callback
    animation_frame.id = window.id_suivant_animation_frame
    window.id_suivant_animation_frame += 1

    user_agent.request_animation_frame()

    retourne animation_frame.id
}

clear_animation_frame :: fonc (window: *Window, id: z32)
{
    pour window.animation_frames {
        si it.id == id {
            tableau_supprime_index(*window.animation_frames, index_it)
            retourne
        }
    }
}

crée_chronomètre :: fonc (window: *Window, handler: *JS.Object, time_out: z32, se_répète: bool) -> z32
{
    user_agent := window.document.donne_user_agent()
    saufsi user_agent {
        retourne -1
    }

    algorithm := crée_algorithm_pour_timeout(window, handler)

    chronomètre: Window.Chronomètres
    chronomètre.handler = handler
    chronomètre.time_out = time_out
    chronomètre.id = user_agent.crée_timeout(algorithm, time_out, se_répète)
    tableau_ajoute(*window.chronomètres, chronomètre)
    retourne chronomètre.id
}

crée_algorithm_pour_timeout :: fonc (window: *Window, handler: *JS.Object) -> *Algorithm
{
    SurTimeout :: struct {
        empl base: Algorithm

        window: *Window
        handler: *JS.Object
    }

    sur_run :: fonc (base: *Algorithm)
    {
        sur_timeout := base comme *SurTimeout
        window := sur_timeout.window
        handler := sur_timeout.handler

        realm := window.realm
        settings := JS.donne_données(realm.host_defined, EnvironmentSettings)

        prepare_to_run_script(settings)

        this_arg := JS.js_undefined
        value := JS.Valeur(Object = handler)

        _ := JS.call(JS.donne_mv(realm), value, this_arg)
        saufsi JS.possède_exception(realm) {
            imprime("[%] %\n", #nom_de_cette_fonction, JS.donne_exception(realm))
        }

        cleanup_after_running_script(settings)
    }

    résultat := crée_algorithm(sur_run, SurTimeout)
    résultat.window = window
    résultat.handler = handler
    retourne résultat
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom WindowProxy
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy
 * À FAIRE : implémente les fonctions virtuelles
 * \{ */

#portée_fichier

table_virtuelle_window_proxy := JS.TableVirtuelleObject(
    classe = WindowProxy,
    sur_get_prototype_of = window_proxy_ordinary_get_prototype_of,
    sur_get = window_proxy_sur_get,
    sur_get_own_property = window_proxy_sur_get_own_property
)

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy-getprototypeof */
window_proxy_ordinary_get_prototype_of :: fonc (object: *JS.Object) -> *JS.Object
{
    proxy := object comme *WindowProxy

    // 1. Let W be the value of the [[Window]] internal slot of this.
    w := proxy.window

    // 2. If IsPlatformObjectSameOrigin(W) is true, then return ! OrdinaryGetPrototypeOf(W).
    si is_platform_object_same_origin(w) {
        retourne JS.ordinary_get_prototype_of(w)
    }

    // 3. Return null.
    retourne nul
}

// 7.2.3.2 [[SetPrototypeOf]] ( V )
// 7.2.3.3 [[IsExtensible]] ( )
// 7.2.3.4 [[PreventExtensions]] ( )

/* 7.2.3.5 [[GetOwnProperty]] ( P )
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy-getownproperty */
window_proxy_sur_get_own_property :: fonc (object: *JS.Object, property_key: JS.PropertyKey) -> Optionnel(JS.PropertyDescriptor)
{
    proxy := object comme *WindowProxy

    // 1. Let W be the value of the [[Window]] internal slot of this.
    w := proxy.window

    // À FAIRE 2. If P is an array index property name, then:

        // 1. Let index be ! ToUint32(P).

        // 2. Let children be the document-tree child navigables of W's associated Document.

        // 3. Let value be undefined.

        // 4. If index is less than children's size, then:

            // 1. Sort children in ascending order, with navigableA being less than navigableB if navigableA's container was inserted into W's associated Document earlier than navigableB's container was.

            // 2. Set value to children[index]'s active WindowProxy.

        // 5. If value is undefined, then:

            // 1. If IsPlatformObjectSameOrigin(W) is true, then return undefined.

            // 2. Throw a "SecurityError" DOMException.

        // 6. Return PropertyDescriptor{ [[Value]]: value, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true }.

    // 3. If IsPlatformObjectSameOrigin(W) is true, then return ! OrdinaryGetOwnProperty(W, P).
    si is_platform_object_same_origin(w) {
        retourne JS.ordinary_get_own_property(w, property_key)
    }

    // 4. Let property be CrossOriginGetOwnPropertyHelper(W, P).
    panique("window_proxy_sur_get_own_property non-implémenté")

    // 5. If property is not undefined, then return property.

    // 6. If property is undefined and P is in W's document-tree child navigable target name property set, then:

        // 1. Let value be the active WindowProxy of the named object of W with the name P.

        // 2. Return PropertyDescriptor{ [[Value]]: value, [[Enumerable]]: false, [[Writable]]: false, [[Configurable]]: true }.

    // 7. Return ? CrossOriginPropertyFallback(P).
}

// 7.2.3.6 [[DefineOwnProperty]] ( P, Desc )

/* 7.2.3.7 [[Get]] ( P, Receiver )
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#windowproxy-get */
window_proxy_sur_get :: fonc (object: *JS.Object, property_key: JS.PropertyKey, receiver: JS.Valeur) -> JS.Valeur
{
    proxy := object comme *WindowProxy

    // 1. Let W be the value of the [[Window]] internal slot of this.
    w := proxy.window

    // À FAIRE : 2. Check if an access between two browsing contexts should be reported, given the current global object's browsing context, W's browsing context, P, and the current settings object.

    // 3. If IsPlatformObjectSameOrigin(W) is true, then return ? OrdinaryGet(this, P, Receiver).
    si is_platform_object_same_origin(w) {
        retourne JS.ordinary_get(object, property_key, receiver)
    }

    // 4. Return ? CrossOriginGet(this, P, Receiver).
    retourne cross_origin_get(object, property_key, receiver)
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#crossoriginget-(-o,-p,-receiver-) */
cross_origin_get :: fonc (object: *JS.Object, property_key: JS.PropertyKey, receiver: JS.Valeur) -> JS.Valeur
{
    // 1. Let desc be ? O.[[GetOwnProperty]](P).
    opt_desc := JS.internal_get_own_property(object, property_key)
    si JS.possède_exception(object) {
        retourne JS.js_undefined
    }

    // 2. Assert: desc is not undefined.
    assert(opt_desc.possède_valeur())
    desc := opt_desc.Quelque

    // 3. If IsDataDescriptor(desc) is true, then return desc.[[Value]].
    si JS.is_data_descriptor(desc) {
        retourne desc.value.Quelque
    }

    // 4. Assert: IsAccessorDescriptor(desc) is true.
    assert(JS.is_accessor_descriptor(desc))

    // 5. Let getter be desc.[[Get]].
    getter := desc.get

    mv := JS.donne_mv(JS.donne_tas_de_mémoire(JS.donne_objet(receiver)))

    // 6. If getter is undefined, then throw a "SecurityError" DOMException.
    saufsi getter.possède_valeur() {
        throw_dom_exception(mv.interpréteuse, "SecurityError", "")
        retourne JS.js_undefined
    }

    // 7. Return ? Call(getter, Receiver).
    retourne JS.call(mv, getter.Quelque, receiver)
}

// 7.2.3.8 [[Set]] ( P, V, Receiver )
// 7.2.3.9 [[Delete]] ( P )
// 7.2.3.10 [[OwnPropertyKeys]] ( )

#portée_export

WindowProxy :: struct {
    empl object: JS.Object
    table = *table_virtuelle_window_proxy

    /* [[Window]] */
    window: *Window
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Navigator
 * https://html.spec.whatwg.org/multipage/system-state.html#the-navigator-object
 * \{ */

#portée_fichier

table_virtuelle_navigator := TableVirtuellePlatformObject(
    classe = Navigator
)

#portée_export

Navigator :: struct {
    empl platform_object: PlatformObject
    table = *table_virtuelle_navigator

    app_code_name: DOMString
    app_name: DOMString
    platform: DOMString
    product: DOMString
    user_agent: DOMString
    vendor: DOMString
    vendor_sub: DOMString
}

#portée_fichier

crée_navigator :: fonc (window: *Window, user_agent: *UserAgent)
{
    résultat := crée_platform_object(window.donne_tas_de_mémoire(), window.realm, Navigator)
    résultat.app_code_name = crée_chaine_utf16_unique("Mozilla")
    résultat.app_name = crée_chaine_utf16_unique("Netscape")
    résultat.platform = crée_chaine_utf16_unique("Linux x86_64")
    résultat.product = crée_chaine_utf16_unique("Gecko")

    si user_agent {
        résultat.user_agent = user_agent.user_agent_string
    }
    sinon {
        résultat.user_agent = crée_chaine_utf16_unique("Mozilla/5.0 (X11; Linux x86_64) UserAgent/1.0")
    }

    résultat.vendor = crée_chaine_utf16_unique_vide()
    résultat.vendor_sub = crée_chaine_utf16_unique_vide()

    window.navigator = résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Location
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#the-location-interface
 * https://html.spec.whatwg.org/multipage/nav-history-apis.html#location
 * \{ */

#portée_fichier

table_virtuelle_location := TableVirtuellePlatformObject(
    classe = Location
)

crée_location :: fonc (window: *Window)
{
    // 1. Let location be a new Location platform object.
    location := crée_platform_object(window.donne_tas_de_mémoire(), window.realm, Location)

    // À FAIRE 2. Let valueOf be location's relevant realm.[[Intrinsics]].[[%Object.prototype.valueOf%]].

    // 3. Perform ! location.[[DefineOwnProperty]]("valueOf", { [[Value]]: valueOf, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).

    // 4. Perform ! location.[[DefineOwnProperty]](%Symbol.toPrimitive%, { [[Value]]: undefined, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).

    // 5. Set the value of the [[DefaultProperties]] internal slot of location to location.[[OwnPropertyKeys]]().

    // 6. Return location.
    window.location = location
}

#portée_export

Location :: struct {
    empl platform_object: PlatformObject
    table = *table_virtuelle_location
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#relevant-document */
donne_relevant_document :: fonc (location: *Location) -> *Document
{
    global_object := donne_relevant_global_object(location)
    assert(global_object.table.classe == Window)

    /* A Window's browsing context is its associated Document's browsing context.
     * https://html.spec.whatwg.org/multipage/nav-history-apis.html#window-bc */
    window := global_object comme *Window
    browsing_context: *BrowsingContext
    si window.document {
        browsing_context = window.document.browsing_context
    }

    saufsi browsing_context {
        retourne nul
    }

    retourne donne_active_document(browsing_context)
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url */
donne_url :: fonc (location: *Location) -> *URL
{
    document := donne_relevant_document(location)
    si document == nul {
        retourne donne_about_blank_url()
    }
    retourne document.url
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#dom-location-protocol */
donne_protocol :: fonc (location: *Location) -> DOMString
{
    // À FAIRE 1. If this's relevant Document is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a "SecurityError" DOMException.

    // 2. Return this's url's scheme, followed by ":".
    url := donne_url(location)

    chn := enchaine(url.scheme, ":")
    diffère déloge(chn)

    retourne crée_chaine_utf16_unique(chn)
}

/* https://html.spec.whatwg.org/multipage/nav-history-apis.html#dom-location-hostname */
donne_hostname :: fonc (location: *Location) -> DOMString
{
    // À FAIRE 1. If this's relevant Document is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a "SecurityError" DOMException.

    // 2. If this's url's host is null, return the empty string.
    url := donne_url(location)
    saufsi url.host.possède_valeur() {
        retourne crée_chaine_utf16_unique_vide()
    }

    // 3. Return this's url's host, serialized.
    retourne crée_chaine_utf16_unique(url.host.Quelque)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Screen
 * \{ */

#portée_fichier

table_virtuelle_screen := TableVirtuellePlatformObject(
    classe = Screen
)

crée_screen :: fonc (window: *Window, user_agent: *UserAgent)
{
    screen := crée_platform_object(window.donne_tas_de_mémoire(), window.realm, Screen)
    screen.user_agent = user_agent
    window.screen = screen
}

#portée_export

Screen :: struct {
    empl platform_object: PlatformObject
    table = *table_virtuelle_screen

    user_agent: *UserAgent
}

donne_width :: fonc (screen: *Screen) -> z64
{
    retourne screen.user_agent.donne_taille_écran().largeur comme z64
}

donne_height :: fonc (screen: *Screen) -> z64
{
    retourne screen.user_agent.donne_taille_écran().hauteur comme z64
}

/** \} */
