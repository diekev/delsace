importe Géométrie
importe Math
importe Observation

Caméra2D :: struct {
    /* Dimension de la fenêtre en pixels. */
    hauteur := 0
    largeur := 0

    /* Position mondiale. */
    pos_x := 0.0
    pos_y := 0.0

    /* Zoom. */
    zoom := 1.0

    monde_vers_caméra: Mat4r
    projection: Mat4r

    besoin_ajournement := vrai
}

ajourne_matrice :: fonc (empl caméra: *Caméra2D)
{
    saufsi besoin_ajournement {
        retourne
    }

    position := Vec3(pos_x, pos_y, 1.0)
    cible := Vec3(pos_x, pos_y, 0.0)
    vecteur_haut := Vec3(0.0, 1.0, 0.0)

    monde_vers_caméra = mire(position, cible, vecteur_haut)

    largeur_ := largeur comme r32 / zoom
    hauteur_ := hauteur comme r32 / zoom
    projection = crée_matrice_projection_orthographique(0.0, largeur_, 0.0, hauteur_, -1.0, 1.0)

    besoin_ajournement = faux
}

modèle_vue_projection :: fonc (empl caméra: *Caméra2D) -> Mat4r
{
    retourne projection * monde_vers_caméra
}

définis_dimension_fenêtre :: fonc (caméra: *Caméra2D, largeur: z32, hauteur: z32)
{
    si caméra.largeur != largeur || caméra.hauteur != hauteur {
        caméra.largeur = largeur
        caméra.hauteur = hauteur
        caméra.besoin_ajournement = vrai
    }
}

ratio_d_aspect :: fonc (caméra: *Caméra2D) -> r32
{
    retourne (caméra.largeur comme r32) / (caméra.hauteur comme r32)
}

applique_zoom :: fonc (empl caméra: *Caméra2D, delta: r32, où: Point2D(z32))
{
    quantité := si delta >= 0.0 {
        Constantes(r32).PHI
    }
    sinon {
        Constantes(r32).PHI_INV
    }

    /* Zoom vers la souris. */
    vieux_zoom := caméra.zoom
    neuf_zoom := vieux_zoom * quantité

    taille_vue := Vec2(caméra.largeur comme r32, caméra.hauteur comme r32)
    souris := Vec2(où.x comme r32, où.y comme r32)

    différence_pixels := taille_vue / vieux_zoom - taille_vue / neuf_zoom
    ratio := souris / taille_vue

    delta_position := différence_pixels * ratio

    définis_position(caméra, pos_x + delta_position.x, pos_y + delta_position.y)
    définis_zoom(caméra, neuf_zoom)
}

définis_position :: fonc (empl caméra: *Caméra2D, px: r32, py: r32)
{
    si caméra.pos_x != px || caméra.pos_y != py {
        caméra.pos_x = px
        caméra.pos_y = py
        besoin_ajournement = vrai
    }
}

définis_zoom :: fonc (empl caméra: *Caméra2D, nouveau_zoom: r32)
{
    si zoom != nouveau_zoom {
        zoom = nouveau_zoom
        besoin_ajournement = vrai
    }
}

applique_pan :: fonc (empl caméra: *Caméra2D, dx: r32, dy: r32)
{
    si zoom != 0.0 {
        définis_position(pos_x - dx / zoom)
        définis_position(pos_y - dy / zoom)
    }
}

/* Retourne le niveau MIP d'une image qui devrait être affiché selon les paramètres de la caméra.
 * Le niveau 0 est considéré comme étant l'image de base (2^0 = 1). */
donne_niveau_image_mip :: fonc (empl caméra: *Caméra2D) -> z32
{
    si largeur == 0 || zoom == 0.0 || zoom >= 1.0 {
        retourne 0
    }

    niveau_mip_map := (1.0 / zoom + 0.5) comme z32
    retourne 31 - intrinsèque_compte_zéros_en_tête(niveau_mip_map comme n32)
}

centre_sur_image :: fonc (empl caméra: *Caméra2D, largeur_image: z32, hauteur_image: z32, bordure := 0)
{
    largeur_image += 2 * bordure
    hauteur_image += 2 * bordure

    si largeur_image < largeur && hauteur_image < hauteur {
        définis_zoom(caméra, 1.0)
    }
    sinon si largeur_image > hauteur_image {
        définis_zoom(caméra, largeur comme r32 / largeur_image comme r32)
    }
    sinon {
        définis_zoom(caméra, hauteur comme r32 / hauteur_image comme r32)
    }

    centre_x_image := (largeur_image / 2 - bordure) comme r32
    centre_x_caméra := (largeur / 2) comme r32

    centre_y_image := (hauteur_image / 2 - bordure) comme r32
    centre_y_caméra := (hauteur / 2) comme r32

    si zoom != 0.0 {
        définis_position(caméra, centre_x_image - centre_x_caméra / zoom, centre_y_image - centre_y_caméra / zoom)
    }
}

donne_position_écran_vers_monde :: fonc (caméra: *Caméra2D, x: r32, y: r32) -> Point2D(r32)
{
    xr := (x / (caméra.largeur comme r32)) * 2.0 - 1.0
    yr := (y / (caméra.hauteur comme r32)) * 2.0 - 1.0

    // À FAIRE : supprime l'inversion
    mvp := caméra.modèle_vue_projection()
    mvp_inv := inverse(mvp)

    résultat := transforme(mvp_inv, Vec3(xr, yr))
    retourne Point2D(r32)(résultat.x, résultat.y)
}

donne_position_sur_écran :: fonc (caméra: *Caméra2D, x: r32, y: r32) -> Point2D(r32)
{
    mvp := caméra.modèle_vue_projection()
    v := transforme(mvp, Vec3(x, y, 0.0))

    v *= 0.5
    v.x += 0.5
    v.y += 0.5

    v.x *= (caméra.largeur comme r32)
    v.y *= (caméra.hauteur comme r32)

    retourne Point2D(r32)(v.x, v.y)
}

donne_rect_sur_écran :: fonc (caméra: *Caméra2D, rect: RectanglePosDim(r32)) -> RectanglePosDim(r32)
{
    p0 := donne_position_sur_écran(caméra, rect.x, rect.y)
    p1 := donne_position_sur_écran(caméra, rect.x + rect.largeur, rect.y + rect.hauteur)

    résultat : RectanglePosDim(r32) = ---
    résultat.x = p0.x
    résultat.y = p0.y
    résultat.largeur = p1.x - p0.x
    résultat.hauteur = p1.y - p0.y
    retourne résultat
}

/* ------------------------------------------------------------------------- */
/** \nom Enveloppe autour de Vision.Caméra2D pour l'observation.
 * \{ */

Caméra2DObservable :: struct {
    empl base: Observable

    caméra: Caméra2D
}

initialise_caméra :: fonc (enveloppe: *Caméra2DObservable)
{
}

détruit_caméra :: fonc (enveloppe: *Caméra2DObservable)
{
    détruit_données_observable(enveloppe)
    déloge(enveloppe)
}

donne_hauteur :: fonc (enveloppe: *Caméra2DObservable) -> z32
{
    retourne enveloppe.caméra.hauteur
}

donne_largeur :: fonc (enveloppe: *Caméra2DObservable) -> z32
{
    retourne enveloppe.caméra.largeur
}

applique_zoom :: fonc (empl enveloppe: *Caméra2DObservable, delta: r32, où: Point2D(z32))
{
    applique_zoom(*caméra, delta, où)
    envoie_message(enveloppe, MessageObservable(info_de(Caméra2DObservable), MessageCaméraPositionChangée))
}

applique_pan :: fonc (enveloppe: *Caméra2DObservable, dx: r32, dy: r32)
{
    applique_pan(*enveloppe.caméra, dx, dy)
    envoie_message(enveloppe, MessageObservable(info_de(Caméra2DObservable), MessageCaméraPositionChangée))
}

ajourne :: fonc (enveloppe: *Caméra2DObservable)
{
    ajourne_matrice(*enveloppe.caméra)
}

modèle_vue_projection :: fonc (enveloppe: *Caméra2DObservable) -> Mat4r
{
    retourne modèle_vue_projection(*enveloppe.caméra)
}

définis_dimension_fenêtre :: fonc (enveloppe: *Caméra2DObservable, largeur: z32, hauteur: z32)
{
    définis_dimension_fenêtre(*enveloppe.caméra, largeur, hauteur)
    envoie_message(enveloppe, MessageObservable(info_de(Caméra2DObservable), MessageCaméraDimensionsChangées))
}

/** \} */
