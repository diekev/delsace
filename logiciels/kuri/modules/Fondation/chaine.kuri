// Fonctions de manipulation de chaines.

charge "memoire"

// À FAIRE: ceci ne fonctionnera pas pour les chaines statiques, connues lors de la compilation
pousse :: fonc (dyn chn: *chaine, c: z8) -> rien
{
	dyn tmp := mémoire(chn)

	taille := chn.taille
	reloge tmp: chaine(taille + 1)
	tmp[taille] = c

	mémoire(chn) = tmp
}

inverse :: fonc (dyn chn: *chaine) -> rien
{
    dyn chn_tmp := mémoire(chn)

	taille := chn.taille / 2

	pour i dans 0 ... taille - 1 {
		tmp := chn_tmp[i]
		chn_tmp[i] = chn_tmp[chn.taille - i - 1]
		chn_tmp[chn.taille - i - 1] = tmp
	}

    mémoire(chn) = chn_tmp
}

copie_chaine :: fonc (chn: chaine) -> chaine
{
	dyn nchn := loge chaine(chn.taille)
	copie_mem_nonsur(src = chn.pointeur, dst = nchn.pointeur, taille = chn.taille)
	retourne nchn
}

// Retourne la taille d'une chaine C, c'est à dire nul-terminé.
#nulctx taille_chaine_c :: fonc(ch : *z8) -> z64
{
	dyn index : z64 := 0

    tantque ch[index] != '\0' {
		index += 1
    }

	retourne index
}

#nulctx construit_chaine :: fonc(ptr : *z8, taille : z64) -> chaine
{
	dyn ret : chaine
	ret.pointeur = ptr
	ret.taille = taille
	retourne ret
}

// Converti une chaine C, c'est à dire nul-terminé, en une chaine native.
#nulctx converti_chaine_c :: fonc(chaine_c : *z8) -> chaine
{
	retourne construit_chaine(chaine_c, taille_chaine_c(chaine_c))
}

// Copie le contenue de la chn native dans un tampon afin de pouvoir la terminer
// par un '\0' et l'utiliser dans les fonctions C. Le tampon est alloué dans le
// stockage temporaire, et n'a pas besoin d'être déloger manuellement.
chaine_c_temp :: fonc(chn: chaine) -> *z8
{
    dyn tampon := logement_temp(chn.taille + 1)
    copie_mem_nonsur(src = chn.pointeur, dst = tampon, taille = chn.taille)
    tampon[chn.taille] = transtype('\0': octet)

    retourne transtype(tampon: *z8)
}

// execute une fonction pour chaque ligne du texte d'entrée
pour_chaque_ligne :: fonc(texte : chaine, donnees : eini, rappel : fonc(chaine, eini)rien) -> rien
{
	dyn taille_chaine : z64 = 0
	dyn début_chaine : z64 = 0

    pour c, i dans texte {
		taille_chaine += 1

        si c == '\n' {
			ligne := construit_chaine(@texte[début_chaine], taille_chaine)
			rappel(ligne, donnees)

			début_chaine = transtype(i + 1 : z64)
			taille_chaine = 0
		}
	}

    // La dernière ligne n'a pas de retour...
	si taille_chaine != 0 {
		ligne := construit_chaine(@texte[début_chaine], taille_chaine)
		rappel(ligne, donnees)
	}
}

est_vide :: fonc(chn : chaine) -> bool
{
	retourne chn.taille == 0
}

trouve_caractère :: fonc(chn : chaine, carac : z8, pos : z64) -> z64
{
	début := pos
	fin   := chn.taille

    pour i dans début ... fin - 1 {
	    si chn[i] == carac {
			retourne i
		}
	}

	retourne transtype(-1 : z64)
}

découpe :: corout(texte : chaine, sep : z8) -> chaine
{
	dyn taille_mot : z64 = 0
	dyn début_mot : z64 = 0
	dyn mot : chaine

    pour c, i dans texte {
	    si c == sep {
			retiens construit_chaine(@texte[début_mot], taille_mot)

			début_mot = transtype(i + 1 : z64)
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		retiens construit_chaine(@texte[début_mot], taille_mot)
	}
}

divise :: fonc (ligne: chaine, séparation: z8) -> []chaine
{
    dyn taille_mot : z64 = 0
	dyn début_mot : z64 = 0
    dyn mots : []chaine

    pour c, i dans ligne {
	    si c == séparation {
			mot := construit_chaine(@ligne[début_mot], taille_mot)
            tableau_ajoute(@mots, mot)

			début_mot = transtype(i + 1 : z64)
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		mot := construit_chaine(@ligne[début_mot], taille_mot)
        tableau_ajoute(@mots, mot)
	}

    retourne mots
}

avance :: fonc (ligne: chaine, compte: z64) -> chaine
{
    retourne construit_chaine(ligne.pointeur + compte, ligne.taille - compte)
}

recule :: fonc (ligne: chaine, compte: z64) -> chaine
{
    retourne construit_chaine(ligne.pointeur, ligne.taille - compte)
}

// Converti une chaine, par exemple "5005", en un nombre entier
// La fonction présume que la chaine est entièrement composée de caractères numériques
extrait_nombre_entier :: fonc(dyn chn : chaine) -> z64
{
    dyn résultat : z64 := 0
	est_négatif := chn[0] == '-'

	si est_négatif {
		chn = avance(chn, 1)
	}
	sinon si chn[0] == '+' {
		chn = avance(chn, 1)
	}

	pour c dans chn {
        résultat = résultat * 10 + transtype(c - '0' : z64)
    }

	si est_négatif {
		retourne -résultat
	}

	retourne résultat
}

// Converti une chaine, par exemple "500.5", en un nombre réel
// La fonction présume que la chaine est entièrement composée de caractères numériques et d'un point
extrait_nombre_réel :: fonc(dyn chn : chaine) -> r64
{
    dyn résultat : r64 = 0.0
	dyn mult : r64 = 1.0
	dyn point_trouvé := faux

	est_négatif := chn[0] == '-'

	si est_négatif {
		chn = avance(chn, 1)
	}
	sinon si chn[0] == '+' {
		chn = avance(chn, 1)
	}

	pour c dans chn {
		si c == '.' {
			point_trouvé = vrai
			continue
		}

		si point_trouvé {
			mult *= 0.1
        	résultat += transtype(c - '0' : r64) * mult
		}
		sinon {
        	résultat = résultat * 10.0 + transtype(c - '0' : r64)
		}
    }

	si est_négatif {
		retourne -résultat
	}

	retourne résultat
}

est_espace_blanc :: fonc(c : z8) -> bool
{
    retourne c == ' ' || c == '\n' || c == '\t' || c == '\v' || c == '\r' || c == '\f'
}

est_nombre_binaire :: fonc(c : z8) -> bool
{
    retourne c == '0' || c == '1'
}

est_nombre_décimal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '9'
}

est_nombre_octal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '7'
}

est_nombre_hexadécimal :: fonc(c : z8) -> bool
{
    retourne ('0' <= c <= '9') || ('a' <= c <= 'f') || ('A' <= c <= 'F')
}

en_majuscule :: fonc(c: z8) -> z8
{
	si 'a' <= c <= 'z' {
		retourne c - 'a' + 'A'
	}

	retourne c
}

en_minuscule :: fonc(c: z8) -> z8
{
	si 'A' <= c <= 'Z' {
		retourne c - 'A' + 'a'
	}

	retourne c
}

en_majuscule :: fonc(dyn chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

en_minuscule :: fonc(dyn chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

commence_par :: fonc (ligne: chaine, motif: chaine) -> bool
{
    si ligne.taille < motif.taille {
        retourne faux
    }

    tmp := construit_chaine(ligne.pointeur, motif.taille)

    retourne tmp == motif
}

fini_par :: fonc (ligne: chaine, motif: chaine) -> bool
{
    si ligne.taille < motif.taille {
        retourne faux
    }

    tmp := construit_chaine(ligne.pointeur + ligne.taille - motif.taille, motif.taille)

    retourne tmp == motif
}

/*
remplace :: fonc (ligne: chaine, c: z8) -> chaine
{
	// À FAIRE
	retourne ligne
}

remplace :: fonc (ligne: chaine, motif: chaine) -> chaine
{
	// À FAIRE
	retourne ligne
}

compte :: fonc (ligne: chaine, c: z8) -> z64
{
	// À FAIRE
	retourne 0
}

compte :: fonc (ligne: chaine, motif: chaine) -> z64
{
	// À FAIRE
	retourne 0
}
*/

compte_commun :: fonc (chn1: chaine, chn2: chaine) -> z64
{
	si chn1.taille != chn2.taille {
		retourne 0
	}

	dyn compte : z64 = 0

	pour c, idx dans chn1 {
		si c != chn2[idx] {
			arrête
		}

		compte += 1
	}

	retourne compte
}

premier_n_caractère :: fonc (ligne: chaine, taille: z64) -> chaine
{
	dyn taille_min : z64 = taille

	si taille_min > ligne.taille {
		taille_min = ligne.taille
	}

	retourne construit_chaine(ligne.pointeur, taille_min)
}

dernier_n_caractère :: fonc (ligne: chaine, taille: z64) -> chaine
{
	dyn taille_min : z64 = taille

	si taille_min > ligne.taille {
		taille_min = ligne.taille
	}

	retourne construit_chaine(ligne.pointeur + ligne.taille - taille_min, taille_min)
}

distance_levenshtein :: fonc (chn1: chaine,	chn2: chaine) -> z64
{
	m := chn1.taille
	n := chn2.taille

	si m == 0 {
		retourne n
	}

	si n == 0 {
		retourne m
	}

	dyn coûts := loge [n + 1]z64

	pour c, idx dans coûts {
		c = idx
	}

	pour i dans 0 ... chn1.taille - 1 {
		coûts[0] = i + 1
		dyn coin := i

		pour j dans 0 ... chn2.taille - 1 {
			enhaut := coûts[j + 1]

			si chn1[i] == chn2[j] {
				coûts[j + 1] = coin
			}
			sinon {
				dyn t : z64

				si enhaut < coin {
					t = enhaut
				}
				sinon {
					t = coin
				}

				si coûts[j] < t {
					coûts[j + 1] = coûts[j] + 1
				}
				sinon {
					coûts[j + 1] = t + 1
				}
			}

			coin = enhaut
		}
	}

	retourne coûts[n]
}
