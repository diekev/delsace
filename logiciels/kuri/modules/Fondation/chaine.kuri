// Fonctions de manipulation de chaines.

// À FAIRE: ceci ne fonctionnera pas pour les chaines statiques, connues lors de la compilation
chaine_ajoute :: fonc (chn: *chaine, c: z8)
{
    tmp := mémoire(chn)

	taille := chn.taille
	reloge tmp: chaine(taille + 1)
	tmp[taille] = c

	mémoire(chn) = tmp
}

chaine_ajoute :: fonc (chn: *chaine, point_de_code: n32)
{
    tmp := mémoire(chn)

	séquence : [4]n8
	nombre_octets := point_de_code_vers_utf8(point_de_code, *séquence[0])

	si nombre_octets == 0 {
		// À FAIRE : que faire ici ?
		retourne
	}

	taille := chn.taille
	reloge tmp: chaine(taille + nombre_octets)

	pour 0 ... nombre_octets - 1 {
		tmp[taille + it] = séquence[it] comme z8
	}

	mémoire(chn) = tmp
}

chaine_ajoute :: fonc (chn: *chaine, donnée: chaine)
{
    si !donnée {
        retourne
    }

    tmp := mémoire(chn)

	taille := chn.taille
	reloge tmp: chaine(taille + donnée.taille)

    pour donnée {
        tmp[taille + index_it] = it
    }

	mémoire(chn) = tmp
}

inverse :: fonc (chn: *chaine) -> rien
{
    chn_tmp := mémoire(chn)

	taille := chn.taille / 2

	pour i dans 0 ... taille - 1 {
		tmp := chn_tmp[i]
		chn_tmp[i] = chn_tmp[chn.taille - i - 1]
		chn_tmp[chn.taille - i - 1] = tmp
	}

    mémoire(chn) = chn_tmp
}

copie_chaine :: fonc (chn: chaine) -> chaine
{
	nchn := loge chaine(chn.taille)
	copie_mem_nonsur(src = chn.pointeur, dst = nchn.pointeur, taille = chn.taille)
	retourne nchn
}

// Retourne la taille d'une chaine C, c'est à  dire nul-terminé.
taille_chaine_c :: fonc(ch : *z8) -> z64 #nulctx
{
	index : z64 = 0

    tantque ch[index] != '\0' {
		index += 1
    }

	retourne index
}

construit_chaine :: fonc(ptr : *z8, taille : z64) -> chaine #nulctx
{
	ret : chaine
	ret.pointeur = ptr
	ret.taille = taille
	retourne ret
}

// Converti une chaine C, c'est à dire nul-terminé, en une chaine native.
// À FAIRE: ceci ne fait que copier le pointeur, il faudrait remplacer ceci par une copie profonde.
converti_chaine_c :: fonc(chaine_c : *z8) -> chaine #nulctx
{
	retourne construit_chaine(chaine_c, taille_chaine_c(chaine_c))
}

copie_chaine_c :: fonc (chaine_c: *z8) -> chaine
{
	si !chaine_c || chaine_c[0] == '\0' {
		retourne ""
	}

	taille := taille_chaine_c(chaine_c)
	chn := loge chaine(taille)

	copie_mem_nonsur(src = chaine_c, dst = chn.pointeur, taille = taille)

	retourne chn
}

// Copie le contenue de la chn native dans un tampon afin de pouvoir la terminer
// par un '\0' et l'utiliser dans les fonctions C. Le tampon est alloué dans le
// stockage temporaire, et n'a pas besoin d'être déloger manuellement.
chaine_c_temp :: fonc(chn: chaine) -> *z8
{
    tampon := logement_temp(chn.taille + 1)
    copie_mem_nonsur(src = chn.pointeur, dst = tampon, taille = chn.taille)
    tampon[chn.taille] = '\0' comme octet

    retourne tampon comme *z8
}

crée_chaine_c :: fonc (chn: chaine) -> chaine
{
	tampon := loge chaine(chn.taille + 1)
    copie_mem_nonsur(src = chn.pointeur, dst = tampon.pointeur, taille = chn.taille)
    tampon[chn.taille] = '\0'
	retourne tampon
}

// execute une fonction pour chaque ligne du texte d'entrée
pour_chaque_ligne :: fonc(texte : chaine, donnees : eini, rappel : fonc(chaine, eini)(rien)) -> rien
{
	taille : z64 = 0
	début_chaine : z64 = 0

    pour c, i dans texte {
		taille += 1

        si c == '\n' {
			ligne := construit_chaine(*texte[début_chaine], taille)
			rappel(ligne, donnees)

			début_chaine = i + 1 comme z64
			taille = 0
		}
	}

    // La dernière ligne n'a pas de retour...
	si taille != 0 {
		ligne := construit_chaine(*texte[début_chaine], taille)
		rappel(ligne, donnees)
	}
}

est_vide :: fonc(chn : chaine) -> bool
{
	retourne chn.taille == 0
}

trouve_caractère :: fonc(chn : chaine, carac : z8, pos : z64) -> z64
{
	début := pos
	fin   := chn.taille

    pour i dans début ... fin - 1 {
	    si chn[i] == carac {
			retourne i
		}
	}

	retourne -1 comme z64
}

découpe :: corout(texte : chaine, sep : z8) -> chaine
{
	taille_mot : z64 = 0
	début_mot : z64 = 0
	mot : chaine

    pour c, i dans texte {
	    si c == sep {
			retiens construit_chaine(*texte[début_mot], taille_mot)

			début_mot = i + 1 comme z64
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		retiens construit_chaine(*texte[début_mot], taille_mot)
	}
}

divise :: fonc (ligne: chaine, séparation: z8) -> []chaine
{
    taille_mot : z64 = 0
	début_mot : z64 = 0
    mots : []chaine

    pour c, i dans ligne {
	    si c == séparation {
			mot := construit_chaine(*ligne[début_mot], taille_mot)
            tableau_ajoute(*mots, mot)

			début_mot = i + 1 comme z64
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		mot := construit_chaine(*ligne[début_mot], taille_mot)
        tableau_ajoute(*mots, mot)
	}

    retourne mots
}

divise :: fonc (chn: chaine, séparation: chaine) -> []chaine
{
    résultat : []chaine

    index_début : z64 = 0
    index_fin : z64 = 0

    boucle {
        index_fin = trouve_motif_dans_chaine(chn, séparation, index_début)

        si index_fin == -1 {
            arrête
        }

        c := sous_chaine(chn, index_début, index_fin)
        tableau_ajoute(*résultat, c)

        index_début = index_fin + séparation.taille
    }

    si index_début < chn.taille {
        c := sous_chaine(chn, index_début, chn.taille)
        tableau_ajoute(*résultat, c)
    }

    retourne résultat
}

avance :: fonc (ligne: chaine, compte: z64) -> chaine
{
    retourne construit_chaine(ligne.pointeur + compte, ligne.taille - compte)
}

recule :: fonc (ligne: chaine, compte: z64) -> chaine
{
    retourne construit_chaine(ligne.pointeur, ligne.taille - compte)
}

// Converti une chaine, par exemple "5005", en un nombre entier
// La fonction présume que la chaine est entièrement composée de caractères numériques
extrait_nombre_entier :: fonc(chn : chaine) -> z64
{
    résultat : z64 = 0
	est_négatif := chn[0] == '-'

	si est_négatif {
		chn = avance(chn, 1)
	}
	sinon si chn[0] == '+' {
		chn = avance(chn, 1)
	}

	pour c dans chn {
        résultat = résultat * 10 + c - '0' comme z64
    }

	si est_négatif {
		retourne -résultat
	}

	retourne résultat
}

// Converti une chaine, par exemple "500.5", en un nombre réel
// La fonction présume que la chaine est entièrement composée de caractères numériques et d'un point
extrait_nombre_réel :: fonc(chn : chaine) -> r64
{
    résultat : r64 = 0.0
	mult : r64 = 1.0
	point_trouvé := faux

	est_négatif := chn[0] == '-'

	si est_négatif {
		chn = avance(chn, 1)
	}
	sinon si chn[0] == '+' {
		chn = avance(chn, 1)
	}

	pour c dans chn {
		si c == '.' {
			point_trouvé = vrai
			continue
		}

		si point_trouvé {
			mult *= 0.1
        	résultat += (c - '0') comme r64 * mult
		}
		sinon {
        	résultat = résultat * 10.0 + (c - '0') comme r64
		}
    }

	si est_négatif {
		retourne -résultat
	}

	retourne résultat
}

est_espace_blanc :: fonc(c : z8) -> bool
{
    retourne c == ' ' || c == '\n' || c == '\t' || c == '\v' || c == '\r' || c == '\f'
}

est_nombre_binaire :: fonc(c : z8) -> bool
{
    retourne c == '0' || c == '1'
}

est_nombre_décimal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '9'
}

est_nombre_octal :: fonc(c : z8) -> bool
{
    retourne '0' <= c <= '7'
}

est_nombre_hexadécimal :: fonc(c : z8) -> bool
{
    retourne ('0' <= c <= '9') || ('a' <= c <= 'f') || ('A' <= c <= 'F')
}

en_majuscule :: fonc(c: z8) -> z8
{
	si 'a' <= c <= 'z' {
		retourne c - 'a' + 'A'
	}

	retourne c
}

en_minuscule :: fonc(c: z8) -> z8
{
	si 'A' <= c <= 'Z' {
		retourne c - 'A' + 'a'
	}

	retourne c
}

en_majuscule :: fonc(chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

en_minuscule :: fonc(chn : chaine) -> chaine
{
	pour c dans chn {
		c = en_majuscule(c)
	}

	retourne chn
}

commence_par :: fonc (ligne: chaine, motif: chaine) -> bool
{
    si ligne.taille < motif.taille {
        retourne faux
    }

    tmp := construit_chaine(ligne.pointeur, motif.taille)

    retourne tmp == motif
}

fini_par :: fonc (ligne: chaine, motif: chaine) -> bool
{
    si ligne.taille < motif.taille {
        retourne faux
    }

    tmp := construit_chaine(ligne.pointeur + ligne.taille - motif.taille, motif.taille)

    retourne tmp == motif
}

/*
remplace :: fonc (ligne: chaine, c: z8) -> chaine
{
	// À FAIRE
	retourne ligne
}

remplace :: fonc (ligne: chaine, motif: chaine) -> chaine
{
	// À FAIRE
	retourne ligne
}

compte :: fonc (ligne: chaine, c: z8) -> z64
{
	// À FAIRE
	retourne 0
}

compte :: fonc (ligne: chaine, motif: chaine) -> z64
{
	// À FAIRE
	retourne 0
}
*/

compte_commun :: fonc (chn1: chaine, chn2: chaine) -> z64
{
	si chn1.taille != chn2.taille {
		retourne 0
	}

	occurences : z64 = 0

	pour c, idx dans chn1 {
		si c != chn2[idx] {
			arrête
		}

		occurences += 1
	}

	retourne occurences
}

premier_n_caractère :: fonc (ligne: chaine, taille: z64) -> chaine
{
	taille_min : z64 = taille

	si taille_min > ligne.taille {
		taille_min = ligne.taille
	}

	retourne construit_chaine(ligne.pointeur, taille_min)
}

dernier_n_caractère :: fonc (ligne: chaine, taille: z64) -> chaine
{
	taille_min : z64 = taille

	si taille_min > ligne.taille {
		taille_min = ligne.taille
	}

	retourne construit_chaine(ligne.pointeur + ligne.taille - taille_min, taille_min)
}

sous_chaine :: fonc (chn: chaine, pos_début: z64, pos_fin: z64) -> chaine
{
	retourne construit_chaine(*chn[pos_début], pos_fin - pos_début)
}

distance_levenshtein :: fonc (chn1: chaine,	chn2: chaine) -> z64
{
	m := chn1.taille
	n := chn2.taille

	si m == 0 {
		retourne n
	}

	si n == 0 {
		retourne m
	}

	coûts := loge [n + 1]z64

	pour c, idx dans coûts {
		c = idx
	}

	pour i dans 0 ... chn1.taille - 1 {
		coûts[0] = i + 1
		coin := i

		pour j dans 0 ... chn2.taille - 1 {
			enhaut := coûts[j + 1]

			si chn1[i] == chn2[j] {
				coûts[j + 1] = coin
			}
			sinon {
				t : z64

				si enhaut < coin {
					t = enhaut
				}
				sinon {
					t = coin
				}

				si coûts[j] < t {
					coûts[j + 1] = coûts[j] + 1
				}
				sinon {
					coûts[j + 1] = t + 1
				}
			}

			coin = enhaut
		}
	}

	retourne coûts[n]
}

append :: fonc (vers: *chaine, chn: chaine) -> rien
{
    si chn.taille == 0 {
        retourne
    }

    tmp := mémoire(vers)

    taille := tmp.taille
    reloge tmp : chaine(tmp.taille + chn.taille)

    pour idx_vers, idx_chn dans taille ... tmp.taille - 1 {
        tmp[idx_vers] = chn[idx_chn]
    }

    mémoire(vers) = tmp
}

trouve_motif_dans_chaine :: fonc (chn: chaine, motif: chaine, index_début : z64 = 0) -> z64
{
    pour i dans index_début ... chn.taille - motif.taille - 1 {
        trouvé := vrai

        pour m, idx dans motif {
            si m != chn[i + idx] {
                trouvé = faux
                arrête
            }
        }

        si trouvé {
            retourne i
        }
    }

    retourne -1
}

trouve_caractère_depuis_le_début :: fonc (chn: chaine, c: z8) -> z64
{
    début : z64 = 0

    tantque début < chn.taille {
        si chn[début] == c {
            arrête
        }

        début += 1
    }

    retourne début
}

trouve_caractère_depuis_la_fin :: fonc (chn: chaine, c: z8) -> z64
{
    début := chn.taille - 1

    tantque début > 0 {
        si chn[début] == '@' {
            arrête
        }

        début -= 1
    }

    retourne début
}

trouve_position_si :: fonc (chn: chaine, condition: fonc(z8)(bool)) -> z64
{
    début : z64 = 0

    tantque début < chn.taille {
        si condition(chn[début]) {
            arrête
        }

        début += 1
    }

    retourne début
}

compte_consécutifs_si :: fonc (chn: chaine, condition: fonc(z8)(bool)) -> z64
{
    compte := 0

    tantque compte < chn.taille {
        si !condition(chn[compte]) {
            arrête
        }

        compte += 1
    }

    retourne compte
}

avance_si :: fonc (chn: chaine, condition: fonc(z8)(bool)) -> chaine
{
    début : z64 = 0

    tantque début < chn.taille {
        si !condition(chn[début]) {
            arrête
        }

        début += 1
    }

    retourne avance(chn, début)
}

recule_si :: fonc (chn: chaine, condition: fonc(z8)(bool)) -> chaine
{
    début : z64 = chn.taille - 1

    tantque début > 0 {
        si !condition(chn[début]) {
            arrête
        }

        début -= 1
    }

    retourne construit_chaine(chn.pointeur, début + 1)
}

apparie_chaine :: fonc (chn1: chaine, chn2: chaine, n: z64) -> bool
{
    i := n - 1

    si i >= chn1.taille || i >= chn2.taille {
        retourne faux
    }

    tantque chn1[i] == chn2[i] {
        si i == 0 {
            retourne vrai
        }

        i -= 1
    }

    retourne faux
}

// Algorithmes de recherche de motifs dans des chaines (« chercher une aiguille dans une botte de foin »)
//
// Why GNU grep is fast
// https://news.ycombinator.com/item?id=23923645
//
// Exact string matching algorithms
// https://www-igm.univ-mlv.fr/~lecroq/string/index.html

ChercheAiguillePar :: énum {
    ForceBrute
    BoyerMooreHorspool
}

// Algorithme de force brute
cherche_aiguille_par_force_brute :: fonc (botte_de_foin: chaine, aiguille: chaine) -> z64
{
    si aiguille.taille > botte_de_foin.taille {
        retourne -1
    }

    pour 0 ... botte_de_foin.taille - aiguille.taille {
        bdf := avance(botte_de_foin, it)

        si commence_par(bdf, aiguille) {
            retourne it
        }
    }

    retourne -1
}

// Algorithme de Boyer-Moore-Horspool
// https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm
cherche_aiguille_par_boyer_moore_horspool :: fonc (botte_de_foin: chaine, aiguille: chaine) -> z64
{
    // crée une table pour définir le nombre de caractères sûrement omissible
    table : [256]z32

    pour table {
        it = aiguille.taille comme z32
    }

    pour 0 ... aiguille.taille - 2 {
        index_pour_caractère := aiguille[it] comme n8
        table[index_pour_caractère] = (aiguille.taille - 1 - it) comme z32
    }

    // recherche
    index := 0

    tantque (botte_de_foin.taille - index) >= aiguille.taille {
        bdf := avance(botte_de_foin, index)

        si apparie_chaine(bdf, aiguille, aiguille.taille) {
            retourne index
        }

        index_pour_caractère := botte_de_foin[index + aiguille.taille - 1] comme n8
        index += table[index_pour_caractère]
    }

    retourne -1
}

cherche_aiguille :: fonc (botte_de_foin: chaine, aiguille: chaine, par: ChercheAiguillePar) -> z64
{
    discr par {
        ForceBrute {
            retourne cherche_aiguille_par_force_brute(botte_de_foin, aiguille)
        }
        BoyerMooreHorspool {
            retourne cherche_aiguille_par_boyer_moore_horspool(botte_de_foin, aiguille)
        }
    }
}
