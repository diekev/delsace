échange :: fonc(a : *$T, b : *T) -> rien #enligne
{
	temp := mémoire(a);
	mémoire(a) = mémoire(b);
	mémoire(b) = temp;
}

// Type pour représenter un résultat optionnel
Résultat :: union ($T: type_de_données) {
    v: T
    e: bool
}

valeur_ou :: fonc (résultat: Résultat($T), valeur: T) -> T #enligne
{
	discr résultat {
		v {
			retourne résultat.v
		}
		sinon {
			retourne valeur
		}
	}
}

valeur_ou_défaut :: fonc (résultat: Résultat($T)) -> T #enligne
{
    discr résultat {
        v {
            retourne résultat.v
        }
        sinon {
			valeur_défaut: T
			retourne valeur_défaut
        }
    }
}

possède_valeur :: fonc (résultat: Résultat($T)) -> bool #enligne
{
	discr résultat {
		v {
			retourne vrai
		}
		sinon {
			retourne faux
		}
	}
}
