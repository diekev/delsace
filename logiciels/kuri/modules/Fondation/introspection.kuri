// Bibliothèque d'introspection.

charge "chaine"

possède_membre :: fonc(arg : eini, nom : chaine) -> bool
{
	info := arg.info

    si info.id != id_info.STRUCTURE {
		retourne faux
	}

	info_arg := transtype(info : *InfoTypeStructure)

    pour membre dans info_arg.membres {
        si membre.nom == nom {
			retourne vrai
        }
    }

	retourne faux
}

membres :: corout(arg : eini) -> chaine
{
	info := arg.info

    si info.id != id_info.STRUCTURE {
		retourne
	}

	info_arg := transtype(info : *InfoTypeStructure)

    pour membre dans info_arg.membres {
		retiens membre.nom
	}
}

trouve_info_membre :: fonc (structure: eini, nom: chaine) -> *InfoTypeMembreStructure
{
    info := transtype(structure.info: *InfoTypeStructure)

    pour membre dans info.membres {
        si membre.nom == nom {
            retourne membre
        }
    }

    retourne nul
}

eini_depuis_info_membre :: fonc (structure: eini, info_membre: *InfoTypeMembreStructure) -> eini
{
    dyn e : eini
    e.pointeur = structure.pointeur + info_membre.décalage
    e.info = info_membre.id

    retourne e
}

valeur_min :: fonc (taille_en_octet: n32, est_signé: bool) -> z64
{
    si !est_signé {
        retourne 0
    }

    si taille_en_octet == 1 {
        retourne -128
    }

    si taille_en_octet == 2 {
        retourne -32768
    }

    si taille_en_octet == 4 {
        retourne -2147483648
    }

    retourne 0x8000_0000_0000_0000
}

valeur_max :: fonc (taille_en_octet: n32, est_signé: bool) -> n64
{
    si !est_signé {
        si taille_en_octet == 1 {
            retourne transtype(0xff: n64)
        }

        si taille_en_octet == 2 {
            retourne transtype(0xffff: n64)
        }

        si taille_en_octet == 4 {
            retourne transtype(0xffff_ffff: n64)
        }

        retourne transtype(0xffff_ffff_ffff_ffff: n64)
    }

    si taille_en_octet == 1 {
        retourne transtype(0x7f: n64)
    }

    si taille_en_octet == 2 {
        retourne transtype(0x7fff: n64)
    }

    si taille_en_octet == 4 {
        retourne transtype(0x7fff_ffff: n64)
    }

    retourne transtype(0x7fff_ffff_ffff_ffff: n64)
}

hors_limite :: fonc (valeur: z64, taille_en_octet: n32, est_signé: bool) -> bool
{
    si !est_signé {
        si taille_en_octet == 1 {
            retourne valeur > 255
        }

        si taille_en_octet == 2 {
            retourne valeur > 65535
        }

        si taille_en_octet == 4 {
            retourne valeur > 0xffffffff
        }

        retourne faux
    }

    si taille_en_octet == 1 {
        retourne valeur > 127 || valeur < -128
    }

    si taille_en_octet == 2 {
        retourne valeur > 32767 || valeur < -32768
    }

    si taille_en_octet == 4 {
        retourne valeur > 2147483647 || valeur < -2147483648
    }

    retourne faux
}
