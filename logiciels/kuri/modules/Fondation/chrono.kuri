// Bibliothèque de chronométrage.
// À FAIRE : regarde les bibliothèques de temps/date des différents langages

importe GlibC

maintenant_sec :: fonc() -> r64
{
	heure : timeval
	gettimeofday(@heure, nul)

	s := heure.tv_sec comme r64

    // À FAIRE : 1e-6
	retourne s + heure.tv_usec comme r64 * 0.000001
}

maintenant_local :: fonc() -> r64
{
	heure : timeval
	fuseau : timezone
	gettimeofday(@heure, @fuseau)

	s := heure.tv_sec comme r64
	s += fuseau.tz_minuteswest comme r64 * 60.0

    // À FAIRE : 1e-6
	retourne s + heure.tv_usec comme r64 * 0.000001
}

delta_sec :: fonc(temps : r64) -> r64
{
	retourne maintenant_sec() - temps
}

compte_ticks_ms :: fonc() -> z64
{
	heure : timeval
	gettimeofday(@heure, nul)
	retourne heure.tv_sec * 1000 + heure.tv_usec / 1000
}

compte_ticks_microsecondes :: fonc() -> z64
{
	heure : timeval
	gettimeofday(@heure, nul)
	retourne heure.tv_sec * 1000000 + heure.tv_usec
}

DonnéesTemps :: struct {
	heures : z32
	minutes : z32
	secondes : z32
}

calcule_temps :: fonc() -> DonnéesTemps
{
	maint := maintenant_local()

	dt : DonnéesTemps
	dt.minutes = (maint / 60.0) comme z32 % 60
	dt.heures = (maint / 60.0 / 60.0) comme z32 % 24
	dt.secondes = maint comme z32 % 60

	retourne dt
}
