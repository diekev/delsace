// Bibliothèque de travail sur le boutisme des nombres binaires.

#enligne commute_boutisme :: fonc(val : *n16) -> rien
{
    v := mémoire(val)
    v = (v >> 8) | (v << 8)
    mémoire(val) = v
}

#enligne commute_boutisme :: fonc(val : *n32) -> rien
{
    v := mémoire(val)

    v = (v >> 24) |
        ((v << 8) & 0x00FF0000) |
        ((v >> 8) & 0x0000FF00) |
        (v << 24);

    mémoire(val) = v
}

#enligne commute_boutisme :: fonc(val : *n64) -> rien
{
    v := mémoire(val)

    v = (v >> 56) |
        ((v << 40) & 0x00FF000000000000) |
        ((v << 24) & 0x0000FF0000000000) |
        ((v << 8) & 0x000000FF00000000) |
        ((v >> 8) & 0x00000000FF000000) |
        ((v >> 24) & 0x0000000000FF0000) |
        ((v >> 40) & 0x000000000000FF00) |
        (v << 56);

    mémoire(val) = v
}

#enligne commute_boutisme :: fonc(val : *z16) -> rien
{
    commute_boutisme(transtype(val: *n16))
}

#enligne commute_boutisme :: fonc(val : *z32) -> rien
{
    commute_boutisme(transtype(val: *n32))
}

#enligne commute_boutisme :: fonc(val : *z64) -> rien
{
    commute_boutisme(transtype(val: *n64))
}

#enligne commute_boutisme :: fonc(val : *r32) -> rien
{
    commute_boutisme(transtype(val: *n32))
}

#enligne commute_boutisme :: fonc(val : *r64) -> rien
{
    commute_boutisme(transtype(val: *n64))
}

commute_boutisme :: fonc(tabl : []$T) -> rien
{
    pour val dans tabl {
        commute_boutisme(@val)
    }
}

petit_boutisme :: fonc () -> bool
{
    UN := 1
    retourne mémoire(transtype(@UN: *z8)) == '\1'
}

grand_boutisme :: fonc () -> bool
{
    retourne !petit_boutisme()
}
