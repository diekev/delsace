/* Fonctions basiques pour les tableaux */

loge_tableau :: fonc ($T: type_de_données, taille: z64, pos := PositionCodeSource()) -> [..]T
{
    taille_en_octets := taille * (taille_de(T) comme z64)
    ptr := loge_mémoire(taille_en_octets, info_de([..]T), pos)

    résultat : [..]T = ---
    résultat.pointeur = ptr
    résultat.taille = 0
    résultat.capacité = taille

    retourne résultat
}

reloge_tableau :: fonc (tableau: &[..]$T, nouvelle_taille: z64, pos := PositionCodeSource())
{
    ancienne_taille_en_octets := tableau.capacité * (taille_de(T) comme z64)
    nouvelle_taille_en_octets := nouvelle_taille * (taille_de(T) comme z64)

    ptr := reloge_mémoire(ancienne_taille_en_octets, nouvelle_taille_en_octets, tableau.pointeur, info_de([..]T), pos)

    tableau.pointeur = ptr
    tableau.capacité = nouvelle_taille
}

déloge :: fonc (tableau: &[..]$T, pos := PositionCodeSource())
{
    ancienne_taille_en_octets := tableau.capacité * (taille_de(T) comme z64)
    déloge_mémoire(ancienne_taille_en_octets, tableau.pointeur, info_de([..]T), pos)
    tableau.pointeur = nul
    tableau.capacité = 0
    tableau.taille = 0
}

tableau_ajoute :: fonc (tabl: *[..]$T, valeur: T) -> rien #enligne
{
    tmp := mémoire(tabl)

    si tmp.taille == tmp.capacité {
        capacité := tmp.capacité

        si capacité == 0 {
            capacité = 8
        }
        sinon si capacité == 1 {
            capacité = 2
        }
        sinon {
            /* Agrandis par un facteur de 1.5.
             * Voir https://github.com/facebook/folly/blob/main/folly/docs/FBVector.md */
            capacité += capacité >> 1
        }

        reloge_tableau(tmp, capacité)
    }

    tmp.taille += 1
    tmp[tmp.taille - 1] = valeur

    mémoire(tabl) = tmp
}

/* À FAIRE(langage) : récursion infinie (rapportée par C). */
// tableau_ajoute :: fonc (tableau: *[..]$T, valeurs: []T)
// {
//     tableau_ajoute(tableau, ...valeurs)
// }

tableau_ajoute :: fonc (tableau: *[..]$T, valeurs: ...T)
{
    tmp := mémoire(tableau)
    diffère mémoire(tableau) = tmp
    ancienne_taille := tmp.taille
    tableau_redimensionne(tmp, tmp.taille + valeurs.taille)
    copie_mem_nonsur(src = valeurs.pointeur, dst = tmp.pointeur + ancienne_taille, taille = valeurs.taille * taille_de(T) comme z64)
}

tableau_ajoute_élément :: fonc (tableau: *[..]$T) -> *T
{
    valeur: T
    tableau_ajoute(tableau, valeur)
    /* Utilise ".pointeur" car [..] s'applique au pointeur du tableau. */
    retourne *tableau.pointeur[tableau.taille - 1]
}

élément_tableau_indice_relatif :: fonc (tabl: [..]$T, indice: z64) -> *T
{
    si indice >= 0 {
        retourne *tabl[indice]
    }

    indice = tabl.taille + indice
    retourne *tabl[indice]
}

tableau_réserve :: fonc (tabl: *[..]$T, taille: z64) -> rien
{
    si taille <= tabl.capacité {
        retourne
    }

    tmp := mémoire(tabl)

    reloge_tableau(tmp, taille)

    mémoire(tabl) = tmp
}

tableau_redimensionne_sans_init :: fonc (tabl: &[..]$T, taille: z64) -> rien
{
    si taille == tabl.capacité {
        tabl.taille = tabl.capacité
        retourne
    }

    si taille < tabl.capacité {
        tabl.taille = taille
        retourne
    }

    reloge_tableau(tabl, taille)
    tabl.taille = taille
}

tableau_redimensionne :: fonc (tabl: &[..]$T, taille: z64) -> rien
{
    ancienne_taille := tabl.taille
    tableau_redimensionne_sans_init(tabl, taille)

    pour ancienne_taille ... tabl.taille - 1 {
        init_de(T)(*tabl.pointeur[it])
    }
}

tableau_redimensionne_défaut :: fonc (tabl: &[..]$T, taille: z64, défaut: T) -> rien
{
    ancienne_taille := tabl.taille
    tableau_redimensionne_sans_init(tabl, taille)

    pour ancienne_taille ... tabl.taille - 1 {
        tabl.pointeur[it] = défaut
    }
}

tableau_copie :: fonc (tabl: [..]$T) -> [..]T
{
    tmp := loge_tableau(T, tabl.taille)
    //copie_mem_nonsur(src = tabl.pointeur, dst = tabl.pointeur, taille = tabl.taille * taille_de(z64) comme z64)

    pour tabl {
        tmp.pointeur[index_it] = it
    }

    tmp.taille = tabl.taille
    retourne tmp
}

tableau_copie :: fonc (tabl: []$T) -> [..]T
{
    tmp := loge_tableau(T, tabl.taille)

    pour tabl {
        tmp.pointeur[index_it] = it
    }

    tmp.taille = tabl.taille
    retourne tmp
}

tableau_copie :: fonc (tabl: [..]$T, fonction_de_copie: fonc(T)(T)) -> [..]T
{
    résultat: [..]T
    tableau_réserve(*résultat, tabl.taille)

    pour tabl {
        tableau_ajoute(*résultat, fonction_de_copie(it))
    }

    retourne résultat
}

tableau_insère_indice :: fonc (tabl: *[..]$T, valeur: T, où: z64) -> rien
{
    tmp := mémoire(tabl)

    reloge_tableau(tmp, tmp.taille + 1)
    tmp.taille += 1

    pour > où + 1 ... tmp.taille - 1 {
        tmp[it] = tmp[it - 1]
    }

    tmp[où] = valeur

    mémoire(tabl) = tmp
}

tableau_supprime :: fonc (tabl: *[..]$T, indice: z32) -> rien
{
    si indice < 0 || indice >= tabl.taille {
        retourne
    }

    tmp := mémoire(tabl)

    taille := tabl.taille

    pour i dans indice comme z64 ... taille - 2 {
        tmp[i] = tmp[i + 1]
    }

    reloge_tableau(tmp, taille - 1)

    mémoire(tabl) = tmp
}

tableau_supprime_indice :: fonc (tabl: *[..]$T, indice: z64) -> rien
{
    tmp := mémoire(tabl)

    pour i dans indice ... tmp.taille - 2 {
        tmp[i] = tmp[i + 1]
    }

    tmp.taille -= 1

    mémoire(tabl) = tmp
}

tableau_supprime_entre :: fonc (tableau: *[..]$T, indice_début: z64, indice_fin: z64)
{
    si indice_début >= indice_fin {
        retourne
    }

    si indice_début < 0 {
        indice_début = 0
    }

    si indice_fin > tableau.taille {
        indice_fin = tableau.taille
    }

    pointeur_début := tableau.pointeur + indice_début
    pointeur_fin := tableau.pointeur + indice_fin
    fin := tableau.pointeur + tableau.taille

    tantque pointeur_fin < fin {
        mémoire(pointeur_début) = mémoire(pointeur_fin)
        pointeur_début += 1
        pointeur_fin += 1
    }

    tableau.taille = pointeur_début - tableau.pointeur
}

tableau_supprime_si :: fonc (tableau: *[..]$T, prédicat: fonc(T)(bool))
{
    temp := mémoire(tableau)

    nouveau_tableau: [..]T
    tableau_réserve(*nouveau_tableau, tableau.taille)

    pour temp {
        si prédicat(it) {
            continue
        }

        tableau_ajoute(*nouveau_tableau, it)
    }

    déloge(temp)

    mémoire(tableau) = nouveau_tableau
}

tableau_supprime_valeur :: fonc (tabl: *[..]$T, valeur: T)
{
    tmp := mémoire(tabl)

    pour tmp {
        si it == valeur {
            tableau_supprime_indice(tabl, index_it)
            arrête
        }
    }
}

/**
 * Retourne un tableau ayant les mêmes valeurs que le tableau en paramètre, et réinitialise
 * ce dernier. Ceci est utile pour transférer la propriété d'un tableau.
 */
tableau_vole_mémoire :: fonc (tableau: &[..]$T) -> [..]T
{
    résultat := tableau
    tableau.pointeur = nul
    tableau.taille = 0
    tableau.capacité = 0
    retourne résultat
}

tableau_remplis_avec :: fonc (tableau: [..]$T, valeur: T)
{
    pour & v dans tableau {
        v = valeur
    }
}

est_adresse_borne_tableau :: fonc (tableau: [..]$T, adresse: *T) -> bool #enligne
{
    si adresse == tableau.pointeur {
        retourne vrai
    }

    si adresse == (tableau.pointeur + tableau.taille - 1) {
        retourne vrai
    }

    retourne faux
}

/* Retourne vrai si l'adresse est celle d'un élément se trouvant dans le tableau,
 * en incluant le premier et le dernier élément. */
est_adresse_élément_bornes_incluses :: fonc (tableau: [..]$T, adresse: *T) -> bool #enligne
{
    premier := tableau.pointeur
    dernier := premier + tableau.taille - 1
    retourne premier <= adresse <= dernier
}

/* Retourne vrai si l'adresse est celle d'un élément se trouvant dans le tableau,
 * en excluant le premier et le dernier élément. */
est_adresse_élément_bornes_excluses :: fonc (tableau: [..]$T, adresse: *T) -> bool #enligne
{
    premier := tableau.pointeur
    dernier := premier + tableau.taille
    retourne premier < adresse < dernier
}

indice_élement :: fonc (tableau: [..]$T, adresse: *T) -> z64 #enligne
{
    retourne (adresse - tableau.pointeur)
}

tableau_détruit :: fonc (tableau: &[..]$T)
{
    déloge(tableau)
}

mémoire_utilisée_tableau :: fonc (tableau: [..]$T) -> z64
{
    retourne tableau.taille * (taille_de(T) comme z64)
}

déloge_tableau_et_ses_éléments :: fonc (tableau: &[..]$T)
{
    /* À FAIRE(langage) : déréférencement automatique */
    pour tableau.taille {
        déloge(tableau.pointeur[it])
    }
    déloge(tableau)
}

déloge_tableau_et_ses_éléments :: fonc (tableau: &[..]$T, rappel_déloge_élément: fonc(T)(rien))
{
    /* À FAIRE(langage) : déréférencement automatique */
    pour tableau.taille {
        rappel_déloge_élément(tableau.pointeur[it])
    }
    déloge(tableau)
}

déloge_tableau_et_ses_éléments :: fonc (tableau: &[..]$T, rappel_déloge_élément: fonc(&T)(rien))
{
    /* À FAIRE(langage) : déréférencement automatique */
    pour tableau.taille {
        rappel_déloge_élément(tableau.pointeur[it])
    }
    déloge(tableau)
}

déloge_tableau_et_ses_éléments :: fonc (tableau: &[..]$T, rappel_déloge_élément: fonc(*T)(rien))
{
    /* À FAIRE(langage) : déréférencement automatique */
    pour tableau.taille {
        rappel_déloge_élément(*tableau.pointeur[it])
    }
    déloge(tableau)
}

tableau_trouve_indice_élément :: fonc (tableau: [..]$T, valeur: T) -> Optionnel(z64)
{
    pour tableau {
        si it == valeur {
            retourne index_it
        }
    }
}

tableaux_sont_égaux :: fonc (tableau1: [..]$T, tableau2: [..]T) -> bool
{
    saufsi tableau1.taille == tableau2.taille {
        retourne faux
    }

    pour tableau1 {
        si tableau2[index_it] != it {
            retourne faux
        }
    }

    retourne vrai
}

tranche :: fonc (tableau: []$T, début: z64, fin: z64) -> [..]T
{
    résultat: [..]T

    si début > fin {
        retourne résultat
    }

    si début >= tableau.taille {
        retourne résultat
    }

    si fin >= tableau.taille {
        retourne résultat
    }

    résultat.pointeur = *tableau.pointeur[début]
    résultat.taille = fin - début + 1
    résultat.capacité = résultat.taille
    retourne résultat
}

tableau_donne_tranche :: fonc (tableau: []$T, début: z64, fin: z64) -> []T
{
    résultat: []T

    si début > fin {
        retourne résultat
    }

    si début >= tableau.taille {
        retourne résultat
    }

    si fin >= tableau.taille {
        retourne résultat
    }

    résultat.pointeur = *tableau.pointeur[début]
    résultat.taille = fin - début + 1
    retourne résultat
}

dernier_élément :: fonc (tableau: [..]$T) -> *T
{
    si tableau.taille == 0 {
        retourne nul
    }
    retourne *tableau.pointeur[tableau.taille - 1]
}

tableau_iota :: fonc (tableau: []$T, valeur_initiale: T)
{
    pour & tableau {
        it = valeur_initiale
        valeur_initiale += (1 comme T)
    }
}

tableau_taille_mémoire :: fonc (tableau: []$T) -> z64
{
    retourne tableau.taille * taille_de(T) comme z64
}

tableau_avance :: fonc (tableau: []$T) -> []T
{
    si tableau.taille != 0 {
        tableau.pointeur += 1
        tableau.taille -= 1
    }
    retourne tableau
}

tableau_donne_indice :: fonc (tableau: []$T, valeur: T) -> z64
{
    pour tableau {
        si it == valeur {
            retourne index_it
        }
    }
    retourne -1
}

enlève_dernier_élément :: fonc (tableau: *[..]$T) -> T
{
    résultat := mémoire(tableau)[tableau.taille - 1]
    tableau.taille -= 1
    retourne résultat
}

tableau_remplace :: fonc (tableau: *[..]$T, valeur: T, nouvelle_valeur: T)
{
    tmp := mémoire(tableau)
    pour tmp {
        si it != valeur {
            continue
        }
        tmp.pointeur[index_it] = nouvelle_valeur
    }
}

tableau_possède_élément :: fonc (tableau: []$T, valeur: T) -> bool
{
    pour tableau {
        si it == valeur {
            retourne vrai
        }
    }
    retourne faux
}
