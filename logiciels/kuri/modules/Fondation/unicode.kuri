// Bibliothèque de travail sur des chaines de caractères encodées en utilisant le
// standard Unicode

importe Fondation

est_continuation :: fonc (c: n8) -> bool #enligne
{
	retourne 0x80 <= c <= 0xBF
}

// Retourne le nombre d'octets du caractère en début de la séquence encodée en Unicode
nombre_octets_utf8 :: fonc(caractère : *z8) -> z32
{
    si caractère == nul {
        retourne 0
    }

	s0 := caractère[0] comme n8

	si 0x00 <= s0 <= 0x7F {
		retourne 1
	}

	s1 := caractère[1] comme n8

	si 0xC2 <= s0 <= 0xDF {
		si !est_continuation(s1) {
			retourne 0
		}

		retourne 2
	}

	s2 := caractère[2] comme n8

	si 0xE0 <= s0 <= 0xEF {
		si s0 == 0xE0 && !(0xA0 <= s1 <= 0xBF) {
			retourne 0
		}

		si s0 == 0xED && !(0x80 <= s1 <= 0x9F) {
			retourne 0
		}

		si !est_continuation(s1) || !est_continuation(s2) {
			retourne 0
		}

		retourne 3
	}

	s3 := caractère[3] comme n8

	si 0xF0 <= s0 <= 0xF4 {
		si s0 == 0xF0 && !(0x90 <= s1 <= 0xBF) {
			retourne 0
		}

		si s0 == 0xF4 && !(0x80 <= s1 <= 0x8F) {
			retourne 0
		}

		si !est_continuation(s1) || !est_continuation(s2) || !est_continuation(s3) {
			retourne 0
		}

		retourne 4
	}

	retourne 0
}

// Similaire à celle au dessus, avec moins de comparaisons
nombre_octets_utf8_rapide :: fonc(caractère : *z8) -> z64
{
	si caractère == nul {
		retourne 0
	}

	test_char := caractère[0]
	result : z64 = 0

	si (test_char & 128) == 0 {
		retourne 1
	}

	tantque (test_char & 128) != 0 {
		test_char <<= 1
		result += 1
	}

	retourne result
}

décalage_pour_caractère :: fonc(chn : chaine, i : z64) -> z32
{
	décalage := 0
	n := nombre_octets_utf8(*chn[i])

	tantque (n == 0 && i < chn.taille) {
		++décalage
		++i
		n = nombre_octets_utf8(*chn[i])
	}

	décalage += n

	retourne décalage
}

// Converti un caractère encodé en UTF-8 vers son équivalent UTF-32 LE
converti_utf8_utf32 :: fonc(caractère : *z8, n : z64) -> z32
{
	s0 := caractère[0] comme n8

	si (n == 1) {
		retourne s0 comme z32 & 0b01111111
	}

	s1 := caractère[1] comme n8

	si (n == 2) {
        v := (s0 & 0b00011111) << 6 | (s1 & 0b00111111)
		retourne v comme z32
	}

	s2 := caractère[2] comme n8

	si (n == 3) {
		v := (s0 & 0b00001111) << 12 | (s1 & 0b00111111) << 6 | (s2 & 0b00111111)
		retourne v comme z32
	}

	s3 := caractère[3] comme n8

	si (n == 4) {
		v := (s0 & 0b00000111) << 18 | (s1 & 0b00111111) << 12 | (s2 & 0b00111111) << 6 | (s3 & 0b00111111)
		retourne v comme z32
	}

	retourne 0
}

converti_utf8_utf32 :: fonc(caractère : *z8) -> z32
{
    si caractère == nul {
        retourne -1
    }

    résultat : z32

    c0 := caractère[0] comme z32

    si (c0 & 0x80) == 0x0 {
		résultat = c0
	}

	si (c0 & 0xC0) == 0xC0 {
        c1 := caractère[1] comme z32
        c2 := caractère[2] comme z32
		résultat = ((c0 & 0x3F) << 6) | (c1 & 0x3F)
	}

	si (c0 & 0xE0) == 0xE0 {
        c1 := caractère[1] comme z32
        c2 := caractère[2] comme z32
		résultat = ((c0 & 0x1F) << 12) | ((c1 & 0x3F) << 6) | (c2 & 0x3F)
	}

	si (c0 & 0xF0) == 0xF0 {
        c1 := caractère[1] comme z32
        c2 := caractère[2] comme z32
        c3 := caractère[3] comme z32
		résultat = ((c0 & 0x0F) << 18) | ((c1 & 0x3F) << 12) | ((c2 & 0x3F) << 6) | (c3 & 0x3F)
	}

	si (c0 & 0xF8) == 0xF8 {
        c1 := caractère[1] comme z32
        c2 := caractère[2] comme z32
        c3 := caractère[3] comme z32
        c4 := caractère[4] comme z32
		résultat = ((c0 & 0x07) << 24) | ((c1 & 0x3F) << 18) | ((c2 & 0x3F) << 12) | ((c3 & 0x3F) << 6) | (c4 & 0x3F)
	}

    retourne résultat
}

point_de_code_vers_utf8 :: fonc (point_de_code: n32, séquence: *n8) -> z32
{
	/* caractère ASCII */
	si point_de_code <= 0x7F {
		séquence[0] = (point_de_code) comme n8
		retourne 1;
	}

	/* Plan universel. */
	si point_de_code <= 0x7FF {
		séquence[0] = ((point_de_code >> 6) + 192) comme n8
		séquence[1] = ((point_de_code & 63) + 128) comme n8
		retourne 2
	}

	/* Substituts, nous pourrions avoir une assertion ici. */
	si 0xd800 <= point_de_code <= 0xdfff {
		retourne 0
	}

	si point_de_code <= 0xFFFF {
		séquence[0] = ((point_de_code >> 12) + 224) comme n8
		séquence[1] = (((point_de_code >> 6) & 63) + 128) comme n8
		séquence[2] = ((point_de_code & 63) + 128) comme n8
		retourne 3;
	}

	/* ceci n'est pas nécessaire si nous savons que le point de code est valide */
	si point_de_code <= 0x10FFFF {
		séquence[0] = ((point_de_code >> 18) + 240) comme n8
		séquence[1] = (((point_de_code >> 12) & 63) + 128) comme n8
		séquence[2] = (((point_de_code >> 6) & 63) + 128) comme n8
		séquence[3] = ((point_de_code & 63) + 128) comme n8
		retourne 4
	}

	/* Le point de code est trop large. */
	retourne 0
}

// Retourne le nombre de caractères Unicode (UTF-8) distincts de la chaine.
taille_unicode :: fonc(chn : chaine) -> z64
{
    taille : z64 = 0
    i := 0

    tantque i < chn.taille {
        pointeur := *chn[i]
        n := nombre_octets_utf8(pointeur)

        si n == 0 {
            retourne -1
        }

        i += n
        taille += 1
    }

    retourne taille
}
