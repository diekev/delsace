// Module d'analyse statique du code selon différents modèles (NASA, Linux, Google, etc.)
// À FAIRE : préserve l'information qu'une fonction est marquée comme enlignée

importe Compilatrice
importe Fondation

/*

    Lignes directrices de la NASA :

    https://andrewbanks.com/wp-content/uploads/2019/07/JPL_Coding_Standard_C.pdf

    1. pas de goto, setjmp, longjmp, récursion directe ou indirecte

    2. toutes les boucles doivent avoir une limite
       on doit pouvoir vérifier qu'il ne sera jamais possible d'avoir un dépassement de limite

    3. pas d'allocation dynamique après l'initialisation (en dehors de principale)

    4. pas plus de 60 lignes de code par fonction

    5. minimum de deux assertions par fonction
       les assertions ne doivent pas avoir d'effets secondaires
       les assertions doivent avoir des actions associées en cas d'erreur (= si cond { } ?)

    6. les déclarations doivent avoir lieu au plus près de leurs utilisations

    7. la valeur de retour des fonctions doit être vérifiée par les appelants
       les paramètres des fonctions doivent être vérifées dans la fonction

    8. The use of the preprocessor must be limited to the inclusion of header files and simple macro definitions. Token pasting, variable argument lists (ellipses), and recursive macro calls are not allowed. All macros must expand into complete syntactic units. The use of conditional compilation directives is often also dubious, but cannot always be avoided. This means that there should rarely be justification for more than one or two conditional compilation directives even in large software development efforts, beyond the standard boilerplate that avoids multiple inclusion of the same header file. Each such use should be flagged by a tool-based checker and justified in the code.

    9. The use of pointers should be restricted.
       no more than one level of dereferencing is allowed.
       Pointer dereference operations may not be hidden in macro definitions or inside typedef declarations.
       Function pointers are not permitted.

    10. All code must be compiled, from the first day of development, with all compiler warnings enabled at the compiler’s most pedantic setting. All code must compile with these setting without any warnings. All code must be checked daily with at least one, but preferably more than one, state-of-the-art static source code analyzer and should pass the analyses with zero warnings.

*/

VérificatriceNasa :: struct {
    GenreViolation :: énum {
        FONCTION_LONGUE
        POINTEUR_FONCTION_UTILISÉ
    }

    Violation :: struct {
        code: *NoeudCode
        genre: GenreViolation
    }

    espace: *EspaceDeTravail
    avertissement_est_erreur := faux

    violations_directives: []Violation
}

ajoute_violation :: fonc (vérificatrice: *VérificatriceNasa, code: *NoeudCode, genre: VérificatriceNasa.GenreViolation)
{
    élément := tableau_ajoute_élément(*vérificatrice.violations_directives)
    élément.code = code
    élément.genre = genre
}

imprime_diagnostique :: fonc (vérificatrice: *VérificatriceNasa)
{
    pour vérificatrice.violations_directives {
        discr it.genre {
            FONCTION_LONGUE {
                vérificatrice.avertis(it.code, "La fonction possède plus de 60 lignes, violation de la ligne directrice de la NASA n° 4")
            }
            POINTEUR_FONCTION_UTILISÉ {
                vérificatrice.avertis(it.code, "Utilisation d'un pointeur de fonction, violation de la ligne directrice n°9 de la NASA")
            }
        }
    }

    imprime("% violations\n", vérificatrice.violations_directives.taille)
}

initialise_vérificatrice :: fonc (vérificatrice: *VérificatriceNasa, espace: *EspaceDeTravail)
{
    vérificatrice.espace = espace
}

vérifie_code :: fonc (vérificatrice: *VérificatriceNasa, code: *NoeudCode)
{
    vérifie_utilisation_fonction_pointeur(vérificatrice, code)

    si code.genre == GenreNoeud.DÉCLARATION_CORPS_FONCTION {
        corps := code comme *NoeudCodeCorpsFonction
        bloc := corps.bloc

        vérifie_longueur_fonction(vérificatrice, corps)
        vérifie_bloc_fonction(vérificatrice, bloc)
    }
}

vérifie_utilisation_fonction_pointeur :: fonc (vérificatrice: *VérificatriceNasa, code: *NoeudCode)
{
    type := code.type
    saufsi type {
        /* À FAIRE(langage) : dépendance des noeuds codes sur les types pour
         * éviter d'avoir des types nuls. */
        retourne
    }

    discr type.id {
        STRUCTURE {
            type_structure := type comme *InfoTypeStructure

            pour type_structure.membres {
                si it.id.id == id_info.FONCTION {
                    ajoute_violation(vérificatrice, code, VérificatriceNasa.GenreViolation.POINTEUR_FONCTION_UTILISÉ)
                }
            }
        }
        FONCTION {
            type_fonction := type comme *InfoTypeFonction

            pour type_fonction.types_entrée {
                si it.id == id_info.FONCTION {
                    ajoute_violation(vérificatrice, code, VérificatriceNasa.GenreViolation.POINTEUR_FONCTION_UTILISÉ)
                }
            }

            pour type_fonction.types_sortie {
                si it.id == id_info.FONCTION {
                    ajoute_violation(vérificatrice, code, VérificatriceNasa.GenreViolation.POINTEUR_FONCTION_UTILISÉ)
                }
            }
        }
        OPAQUE {}
        POINTEUR {}
        UNION {}
        RIEN {}
        ENTIER {}
        RÉEL {}
        BOOLÉEN {}
        OCTET {}
        TYPE_DE_DONNÉES {}
        TABLEAU {}
        ÉNUM {}
        CHAINE {}
        EINI {}
    }
}

vérifie_longueur_fonction :: fonc (vérificatrice: *VérificatriceNasa, corps: *NoeudCodeCorpsFonction)
{
    bloc := corps.bloc
    saufsi bloc && bloc.expressions {
        retourne
    }

    dernière_expression := bloc.expressions[bloc.expressions.taille - 1]
    début_bloc := bloc.numéro_ligne
    fin_bloc := dernière_expression.numéro_ligne

    si (fin_bloc - début_bloc) <= 60 {
        retourne
    }

    entête := corps.entête
    pour entête.annotations {
        si it.nom == "FonctionLongue" {
            retourne
        }
    }

    ajoute_violation(vérificatrice, entête, VérificatriceNasa.GenreViolation.FONCTION_LONGUE)
}

vérifie_bloc_fonction :: fonc (vérificatrice: *VérificatriceNasa, code: *NoeudCode)
{
    saufsi code {
        retourne
    }

    discr code.genre {
        DÉCLARATION_VARIABLE {
            code_déclaration := code comme *NoeudCodeDéclarationVariable

            si code_déclaration.expression {
                vérifie_bloc_fonction(vérificatrice, code_déclaration.expression)
            }
        }
        EXPRESSION_ASSIGNATION_VARIABLE {
            assignation := code comme *NoeudCodeAssignation
            vérifie_bloc_fonction(vérificatrice, assignation.variable)
            vérifie_bloc_fonction(vérificatrice, assignation.expression)
        }
        OPÉRATEUR_BINAIRE {
            binaire := code comme *NoeudCodeExpressionBinaire
            vérifie_bloc_fonction(vérificatrice, binaire.opérande_gauche)
            vérifie_bloc_fonction(vérificatrice, binaire.opérande_droite)
        }
        OPÉRATEUR_UNAIRE {
            unaire := code comme *NoeudCodeExpressionUnaire
            vérifie_bloc_fonction(vérificatrice, unaire.opérande)
        }
        INSTRUCTION_SI {
            code_si := code comme *NoeudCodeSi

            vérifie_bloc_fonction(vérificatrice, code_si.condition)
            vérifie_bloc_fonction(vérificatrice, code_si.bloc_si_vrai)

            si code_si.bloc_si_faux {
                vérifie_bloc_fonction(vérificatrice, code_si.bloc_si_faux)
            }
        }
        INSTRUCTION_COMPOSÉE {
            bloc := code comme *NoeudCodeBloc

            pour bloc.expressions {
                vérifie_bloc_fonction(vérificatrice, it)
            }
        }
        INSTRUCTION_RETOUR {
            ret := code comme *NoeudCodeExpressionUnaire
            si ret.opérande {
                // @Incomplet : vérifie si nous avons une assignation
                vérifie_bloc_fonction(vérificatrice, ret.opérande)
            }
        }
        INSTRUCTION_BOUCLE {
            code_boucle := code comme *NoeudCodeBoucle
            vérifie_bloc_fonction(vérificatrice, code_boucle.bloc)
        }
        INSTRUCTION_TANTQUE {
            code_boucle := code comme *NoeudCodeBoucle
            vérifie_bloc_fonction(vérificatrice, code_boucle.bloc)
        }
        INSTRUCTION_RÉPÈTE {
            code_boucle := code comme *NoeudCodeBoucle
            vérifie_bloc_fonction(vérificatrice, code_boucle.bloc)
        }
        EXPRESSION_RÉFÉRENCE_DÉCLARATION {
        }
        EXPRESSION_PARENTHÈSE {
            paren := code comme *NoeudCodeExpressionUnaire
            vérifie_bloc_fonction(vérificatrice, paren.opérande)
        }
        EXPRESSION_APPEL {
            // appel := code comme *NoeudCodeAppel

            // ident := appel.expression comme *NoeudCodeRéférenceDéclaration

            // si appel.expression.genre == GenreNoeud.EXPRESSION_RÉFÉRENCE_DÉCLARATION {

            // }

            // vérifie_bloc_fonction(vérificatrice, appel.expression)

            // pour appel.params {
            //    vérifie_bloc_fonction(vérificatrice, it)
            //}
        }
        EXPRESSION_CONSTRUCTION_STRUCTURE {
            appel := code comme *NoeudCodeAppel
            pour appel.paramètres {
                // @Incomplet : vérifie si nous avons une assignation
                vérifie_bloc_fonction(vérificatrice, it)
            }
        }
        EXPRESSION_LITTÉRALE_NOMBRE_RÉEL {
        }
        EXPRESSION_COMME {
            expr_comme := code comme *NoeudCodeComme
            vérifie_bloc_fonction(vérificatrice, expr_comme.expression)
        }
        /*
        EXPRESSION_VIRGULE {
            virgule := code comme *NoeudCodeVirgule

            pour virgule.expressions {
                vérifie_bloc_fonction(vérificatrice, it)
            }
        }
        EXPRESSION_REFERENCE_MEMBRE {
            membre := code comme *NoeudCodeOpérationBinaire

            vérifie_bloc_fonction(vérificatrice, membre.opérande_gauche)
            vérifie_bloc_fonction(vérificatrice, membre.opérande_droite)
        }
        */
        sinon {

        }
    }

    retourne
}

avertis :: fonc (vérificatrice: *VérificatriceNasa, site: *NoeudCode, message: chaine)
{
    si vérificatrice.avertissement_est_erreur {
        compilatrice_rapporte_erreur(vérificatrice.espace, site, message)
        retourne
    }

    compilatrice_rapporte_avertissement(vérificatrice.espace, site, message)
}

/*

    Lignes directrices du kernel Linux
    https://www.kernel.org/doc/html/v4.10/process/coding-style.html

    1. pas plus de 80 caractères par lignes

    2. pas plus de 3 niveaux d'indentations (de profondeur, switch/case compte pour 1)

    3. pas d'expressions multiples sur une même ligne

    4. pas d'assignations multiples sur une même ligne

    5. pas de typedefs pour les structures et les pointeurs

    6. les fonctions ne doivent pas dépassée 24-48 lignes (en fonction de leurs complexité)

    7. entre 5 et 10 variables locales par fonction (7 est une bonne moyenne)

    8. utilisation de « inline » uniquement sur les fonctions courtes (3 lignes)

*/

/*
    Lignes directrices de Google
    https://google.github.io/styleguide/cppguide.html

    1. « inline » uniquement sur les fonctions courtes (10 lignes)
       à éviter sur les fonctions ayant des boucles ou des switchs

    2. Place a function's variables in the narrowest scope possible, and initialize variables in the declaration.

    3. éviter les opérateurs template

    4. fonctions < 40 lignes de préférence

    5. surcharge de fonctions uniquement si la sémantique de valeur est préservée
*/

/*

    Lignes directrices de Sean Parent

    1. no raw loops
       si la fonction possède plusieurs boucles

    2. no raw synchronization primitives

    3. avoid incident data structures

    4. human interfaces

*/
