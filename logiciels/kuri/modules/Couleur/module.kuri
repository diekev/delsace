importe Algorithmes // pour permute
importe Fondation
importe Math

charge "mélange"

/* ------------------------------------------------------------------------- */
/** \nom CouleurRVBA
 * \{ */

CouleurRVBA :: struct {
    r := 0.0 @mutable
    v := 0.0 @mutable
    b := 0.0 @mutable
    a := 0.0 @mutable
}

init_couleur_pour_python :: fonc (couleur: *CouleurRVBA) -> bool
{
    init_de(CouleurRVBA)(couleur)
    retourne vrai
} @Python "new"

opérateur == :: fonc (couleur1: CouleurRVBA, couleur2: CouleurRVBA) -> bool
{
    si couleur1.r != couleur2.r {
        retourne faux
    }

    si couleur1.v != couleur2.v {
        retourne faux
    }

    si couleur1.b != couleur2.b {
        retourne faux
    }

    si couleur1.a != couleur2.a {
        retourne faux
    }

    retourne vrai
}

opérateur != :: fonc (couleur1: CouleurRVBA, couleur2: CouleurRVBA) -> bool
{
    retourne !(couleur1 == couleur2)
}

restreint :: fonc (couleur: CouleurRVBA, min: r32, max: r32) -> CouleurRVBA
{
    résultat := couleur
    restreint(*résultat.r, min, max)
    restreint(*résultat.v, min, max)
    restreint(*résultat.b, min, max)
    restreint(*résultat.a, min, max)
    retourne résultat
}

/**
 * Luminance calculée selon la recommandation ITU-R BT.709
 * https://en.wikipedia.org/wiki/Relative_luminance
 *
 * Les vraies valeurs sont :
 * ``Y = 0.2126390059(R) + 0.7151686788(V) + 0.0721923154(B)``
 * selon : "Derivation of Basic Television Color Equations", RP 177-1993
 *
 * Puisque ces valeurs ont une somme supérieure à 1.0, nous utilisons une des
 * valeurs tronquées pour que le résultat ne dépasse pas 1.0.
 */
luminance :: fonc (c: CouleurRVBA) -> r32
{
    retourne c.r * 0.212671 + c.v * 0.715160 + c.b * 0.072169
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom CouleurRVBA sur 8-bit
 * \{ */

CouleurRVBAN8 :: struct {
    r: n8
    v: n8
    b: n8
    a: n8
}

opérateur == :: fonc (a: CouleurRVBAN8, b: CouleurRVBAN8) -> bool
{
    retourne a.r == b.r && a.v == b.v && a.b == b.b && a.a == b.a
}

couleur_rouge := CouleurRVBAN8(255, 0, 0, 255)
couleur_vert := CouleurRVBAN8(0, 255, 0, 255)
couleur_bleu := CouleurRVBAN8(0, 0, 255, 255)
couleur_blanche := CouleurRVBAN8(255, 255, 255, 255)
couleur_noire := CouleurRVBAN8(0, 0, 0, 255)
couleur_grise_claire := CouleurRVBAN8(192, 192, 192, 255)
couleur_grise := CouleurRVBAN8(128, 128, 128, 255)
couleur_grise_foncée := CouleurRVBAN8(64, 64, 64, 255)

interpole_linéaire :: fonc (c0: CouleurRVBAN8, poids: r32, c1: CouleurRVBAN8) -> CouleurRVBAN8 #enligne
{
    r_c0 := (c0.r comme r32) / 255.0
    v_c0 := (c0.v comme r32) / 255.0
    b_c0 := (c0.b comme r32) / 255.0

    r_c1 := (c1.r comme r32) / 255.0
    v_c1 := (c1.v comme r32) / 255.0
    b_c1 := (c1.b comme r32) / 255.0

    alpha := poids

    r := (((1.0 - alpha) * r_c0 + alpha * r_c1) * 255.0) comme n8
    v := (((1.0 - alpha) * v_c0 + alpha * v_c1) * 255.0) comme n8
    b := (((1.0 - alpha) * b_c0 + alpha * b_c1) * 255.0) comme n8
    a := c0.a

    retourne CouleurRVBAN8(r, v, b, a)
}

vers_couleur_rvba :: fonc (couleur: CouleurRVBAN8) -> CouleurRVBA
{
    retourne CouleurRVBA(couleur.r comme r32 / 255.0, couleur.v comme r32 / 255.0, couleur.b comme r32 / 255.0, couleur.a comme r32 / 255.0)
}

depuis_couleur_rvba :: fonc (couleur: CouleurRVBA) -> CouleurRVBAN8 #enligne
{
    retourne CouleurRVBAN8((couleur.r * 255.0) comme n8, (couleur.v * 255.0) comme n8, (couleur.b * 255.0) comme n8, (couleur.a * 255.0) comme n8)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Couleur Teinte-Saturation-Valeur
 * \{ */

CouleurTSV :: struct {
    t: r32
    s: r32
    v: r32
}

rvb_vers_tsv :: fonc (couleur: CouleurRVBA) -> CouleurTSV
{
    r := couleur.r comme r64
    v := couleur.v comme r64
    b := couleur.b comme r64

    k : r64 = 0.0

    si v < b {
        permute(v, b)
        k = -1.0
    }

    min_vb := b
    si r < v {
        permute(r, v)
        k = -2.0 / 6.0 - k
        min_vb = min(v, b)
    }

    chroma := r - min_vb

    résultat : CouleurTSV = ---
    résultat.t = (abs(k + (v - b) / (6.0 * chroma + 1e-20))) comme r32
    résultat.s = (chroma / (r + 1e-20)) comme r32
    résultat.v = r comme r32
    retourne résultat
}

tsv_vers_rvb :: fonc (couleur: CouleurTSV) -> CouleurRVBA
{
    h := couleur.t
    s := couleur.s
    v := couleur.v

    nr := abs(h * 6.0 - 3.0) - 1.0
    nv := 2.0 - abs(h * 6.0 - 2.0)
    nb := 2.0 - abs(h * 6.0 - 4.0)

    restreint(*nr, 0.0, 1.0)
    restreint(*nb, 0.0, 1.0)
    restreint(*nv, 0.0, 1.0)

    résultat : CouleurRVBA = ---
    résultat.r = ((nr - 1.0) * s + 1.0) * v
    résultat.v = ((nv - 1.0) * s + 1.0) * v
    résultat.b = ((nb - 1.0) * s + 1.0) * v
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Couleur Teinte-Saturation-Luminance
 * \{ */

CouleurTSL :: struct {
    t: r32 @mutable
    s: r32 @mutable
    l: r32 @mutable
}

rvb_vers_tsl :: fonc (couleur: CouleurRVBA) -> CouleurTSL
{
    r := couleur.r
    v := couleur.v
    b := couleur.b

    cmax := max(r, v, b)
    cmin := min(r, v, b)

    t := 0.0
    s := 0.0
    l := min(1.0, (cmax + cmin) * 0.5)

    si cmax == cmin {
        /* achromatic, t et s sont déjà à zéro */
    }
    sinon {
        d := cmax - cmin

        s = si l > 0.5 {
            d / (2.0 - cmax - cmin)
        }
        sinon {
            d / (cmax + cmin)
        }

        si cmax == r {
            t = (v - b) / d
            si v < b {
                t += 6.0
            }
        }
        sinon si cmax == v {
            t = (b - r) / d + 2.0
        }
        sinon {
            t = (r - v) / d + 4.0
        }
    }

    t /= 6.0

    résultat : CouleurTSL = ---
    résultat.t = t
    résultat.s = s
    résultat.l = l
    retourne résultat
}

tsl_vers_rvb :: fonc (couleur: CouleurTSL) -> CouleurRVBA
{
    h := couleur.t
    s := couleur.s
    l := couleur.l

    nr := abs(h * 6.0 - 3.0) - 1.0
    ng := 2.0 - abs(h * 6.0 - 2.0)
    nb := 2.0 - abs(h * 6.0 - 4.0)

    restreint(*nr, 0.0, 1.0)
    restreint(*nb, 0.0, 1.0)
    restreint(*ng, 0.0, 1.0)

    chroma := (1.0 - abs(2.0 * l - 1.0)) * s

    résultat : CouleurRVBA = ---
    résultat.r = (nr - 0.5) * chroma + l
    résultat.v = (ng - 0.5) * chroma + l
    résultat.b = (nb - 0.5) * chroma + l
    retourne résultat
}

/** \} */

// -------------------------------------------------------------------------

/**
 * Calcul du contraste entre une couleur de zone (avant-plan) et une couleur
 * de fond (arrière-plan).
 *
 * https://fr.wikipedia.org/wiki/Contraste
 */
calcule_contraste_local :: fonc (zone: CouleurRVBA, fond: CouleurRVBA) -> r32
{
    luminosite_fond := luminance(fond)

    si luminosite_fond == 0.0 {
        retourne 0.0
    }

    luminosite_zone := luminance(zone)

    retourne (luminosite_zone - luminosite_fond) / luminosite_fond
}

/* ------------------------------------------------------------------------- */
/** \nom Spectre
 * \{ */

Spectre :: struct {
    x: r32 @accessible
    y: r32 @accessible
    z: r32 @accessible
}

init_spectre_pour_python :: fonc (spectre: *Spectre, x: r32, y: r32, z: r32) -> bool
{
    spectre.x = x
    spectre.y = y
    spectre.z = z
    retourne vrai
} @Python "new"

spectre_rvb_vers_tsv :: fonc (spectre: Spectre) -> Spectre
{
    couleur_rvb := spectre_vers_couleur_rvba(spectre)
    couleur_tsv := rvb_vers_tsv(couleur_rvb)
    résultat : Spectre = ---
    résultat.x = couleur_tsv.t
    résultat.y = couleur_tsv.s
    résultat.z = couleur_tsv.v
    retourne résultat
} @Python

spectre_tsv_vers_rvb :: fonc (spectre: Spectre) -> Spectre
{
    couleur_tsv := spectre_vers_couleur_tsv(spectre)
    couleur_rvb := tsv_vers_rvb(couleur_tsv)
    résultat : Spectre = ---
    résultat.x = couleur_rvb.r
    résultat.y = couleur_rvb.v
    résultat.z = couleur_rvb.b
    retourne résultat
} @Python

contraste_entre :: fonc (spectre1: Spectre, spectre2: Spectre) -> r32
{
    c1 := spectre_vers_couleur_rvba(spectre1)
    c2 := spectre_vers_couleur_rvba(spectre2)
    retourne calcule_contraste_local(c1, c2)
} @Python

spectre_vers_couleur_rvba :: fonc (spectre: Spectre) -> CouleurRVBA
{
    retourne CouleurRVBA(spectre.x, spectre.y, spectre.z)
}

spectre_vers_couleur_tsv :: fonc (spectre: Spectre) -> CouleurTSV
{
    retourne CouleurTSV(spectre.x, spectre.y, spectre.z)
}

opérateur + :: fonc (s1: Spectre, s2: Spectre) -> Spectre
{
    retourne Spectre(s1.x + s2.x, s1.y + s2.y, s1.z + s2.z)
}

opérateur * :: fonc (s1: Spectre, s2: Spectre) -> Spectre
{
    retourne Spectre(s1.x * s2.x, s1.y * s2.y, s1.z * s2.z)
}

opérateur * :: fonc (s1: r32, s2: Spectre) -> Spectre
{
    retourne Spectre(s1 * s2.x, s1 * s2.y, s1 * s2.z)
}

/* Conversion d'espaces colorimétriques. */

linéaire_vers_srgb :: fonc (spectre: Spectre) -> Spectre
{
    résultat : Spectre = ---

    résultat.x = linéaire_vers_srgb(spectre.x) comme r32 / 255.0
    résultat.y = linéaire_vers_srgb(spectre.y) comme r32 / 255.0
    résultat.z = linéaire_vers_srgb(spectre.z) comme r32 / 255.0

    retourne résultat
}

linéaire_vers_srgb :: fonc (value: r32) -> z32
{
    v := max(0.0, min(1.0, value))

    si v <= 0.0031308 {
        retourne (v * 12.92 * 255.0 + 0.5) comme z32
    }

    retourne ((1.055 * puissance(v, 1.0 / 2.4) - 0.055) * 255.0 + 0.5) comme z32
}

srgb_vers_linéaire :: fonc (valeur: r32) -> r32
{
    si valeur > 0.04045 {
        retourne puissance((valeur + 0.055) / 1.055, 2.4)
    }
    retourne valeur / 12.92
}

/** \} */
