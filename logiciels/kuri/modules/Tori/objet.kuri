importe Fondation

TypeObjet :: énum z32 {
	NUL :: 0
	ENTIER :: 1
	RÉEL :: 2
	LISTE :: 3
	DICTIONNAIRE :: 4
	CHAINE :: 5
}

//#######################################################################

Objet :: struct {
	id : TypeObjet
}

//#######################################################################

ObjetEntier :: struct {
	empl objet : Objet
	valeur : z64
}

//#######################################################################

ObjetRéel :: struct {
	empl objet : Objet
	valeur : r64
}

//#######################################################################

ObjetChaine :: struct {
	empl objet : Objet
	valeur : chaine
}

//#######################################################################

ObjetListe :: struct {
	empl objet : Objet
	valeur : []*Objet
}

//#######################################################################

ObjetDictionnaire :: struct {
	empl objet : Objet
	noms : []chaine
	valeurs : []*Objet
}

insère :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine, objet : *Objet) -> rien
{
	pour nom, idx dans dico.noms {
		si nom != nom_objet {
			continue
		}

		dico.valeurs[idx] = objet
		retourne
	}

	tableau_ajoute(@dico.noms, nom_objet)
	tableau_ajoute(@dico.valeurs, objet)
}

trouve_objet :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *Objet
{
	pour nom, idx dans dico.noms {
		si nom != nom_objet {
			continue
		}

		retourne dico.valeurs[idx]
	}

	retourne nul
}

trouve_objet :: fonc(
	dico : *ObjetDictionnaire,
	nom_objet : chaine,
	type : TypeObjet) -> *Objet
{
	pour nom, idx dans dico.noms {
		si nom != nom_objet {
			continue
		}

		objet := dico.valeurs[idx]

		si objet.id != type {
			retourne nul
		}

		retourne objet
	}

	retourne nul
}

trouve_entier :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *ObjetEntier
{
	objet := trouve_objet(dico, nom_objet, TypeObjet.ENTIER)

	si objet != nul {
		retourne transtype(objet : *ObjetEntier)
	}

	retourne nul
}

trouve_réel :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *ObjetRéel
{
	objet := trouve_objet(dico, nom_objet, TypeObjet.RÉEL)

	si objet != nul {
		retourne transtype(objet : *ObjetRéel)
	}

	retourne nul
}

trouve_liste :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *ObjetListe
{
	objet := trouve_objet(dico, nom_objet, TypeObjet.LISTE)

	si objet != nul {
		retourne transtype(objet : *ObjetListe)
	}

	retourne nul
}

trouve_chaine :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *ObjetChaine
{
	objet := trouve_objet(dico, nom_objet, TypeObjet.CHAINE)

	si objet != nul {
		retourne transtype(objet : *ObjetChaine)
	}

	retourne nul
}

trouve_dico :: fonc(dico : *ObjetDictionnaire, nom_objet : chaine) -> *ObjetDictionnaire
{
	objet := trouve_objet(dico, nom_objet, TypeObjet.DICTIONNAIRE)

	si objet != nul {
		retourne transtype(objet : *ObjetDictionnaire)
	}

	retourne nul
}

//#######################################################################

GestionnaireObjet :: struct {
	objets : []*Objet
}

crée_dictionnaire :: fonc(gestionnaire : *GestionnaireObjet) -> *ObjetDictionnaire
{
	objet := loge ObjetDictionnaire
	objet.id = TypeObjet.DICTIONNAIRE
	objet.noms.taille = 0
	objet.noms.pointeur = nul
	objet.valeurs.taille = 0
	objet.valeurs.pointeur = nul

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

crée_liste :: fonc(gestionnaire : *GestionnaireObjet) -> *ObjetListe
{
	objet := loge ObjetListe
	objet.id = TypeObjet.LISTE
	objet.valeur.taille = 0
	objet.valeur.pointeur = nul

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

crée_entier :: fonc(gestionnaire : *GestionnaireObjet) -> *ObjetEntier
{
	objet := loge ObjetEntier
	objet.id = TypeObjet.ENTIER
	objet.valeur = 0

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

crée_réel :: fonc(gestionnaire : *GestionnaireObjet) -> *ObjetRéel
{
	objet := loge ObjetRéel
	objet.id = TypeObjet.RÉEL
	objet.valeur = 0.0

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

crée_chaine :: fonc(gestionnaire : *GestionnaireObjet) -> *ObjetChaine
{
	objet := loge ObjetChaine
	objet.id = TypeObjet.CHAINE
	objet.valeur = ""

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

crée_nul :: fonc(gestionnaire : *GestionnaireObjet) -> *Objet
{
	objet := loge Objet
	objet.id = TypeObjet.NUL

	tableau_ajoute(@gestionnaire.objets, objet)

	retourne objet
}

détruit_objet :: fonc(objet : *Objet) -> rien
{
	discr objet.id {
		NUL {
			déloge objet
		}
		ENTIER {
			obj := transtype(objet : *ObjetEntier)
			déloge obj
		}
		RÉEL {
			obj := transtype(objet : *ObjetRéel)
			déloge obj
		}
		CHAINE {
			obj := transtype(objet : *ObjetChaine)
			déloge obj
		}
		LISTE {
			obj := transtype(objet : *ObjetListe)

			déloge obj.valeur
			déloge obj
		}
		DICTIONNAIRE {
			obj := transtype(objet : *ObjetDictionnaire)

			déloge obj.noms
			déloge obj.valeurs
			déloge obj
		}
	}
}

détruit :: fonc(gestionnaire : *GestionnaireObjet) -> rien
{
	pour obj dans gestionnaire.objets {
		détruit_objet(obj)
	}

	déloge gestionnaire.objets
}

imprime_tab :: fonc(n : z32) -> rien
{
	pour i dans 0 ... n - 1 {
		imprime("  ")
	}
}

imprime_json :: fonc(objet : *Objet, tab : z32) -> rien
{
	discr objet.id {
		NUL {
			imprime("nul,\n")
		}
		DICTIONNAIRE {
			imprime_tab(tab)
			imprime("{\n")

			dico := transtype(objet : *ObjetDictionnaire)

			pour nom, idx dans dico.noms {
				obj := dico.valeurs[idx]

				imprime_tab(tab + 1)
				imprime("% : ", nom)
				imprime_json(obj, tab + 1)
			}

			imprime_tab(tab)
			imprime("},\n")
		}
		LISTE {
			imprime("[\n")

			liste := transtype(objet : *ObjetListe)

			pour valeur dans liste.valeur {
				imprime_json(valeur, tab + 1)
			}

			imprime_tab(tab)
			imprime("],\n")
		}
		CHAINE {
			obj := transtype(objet : *ObjetChaine)
			imprime("\"%\"\n", obj.valeur)
		}
		ENTIER {
			obj := transtype(objet : *ObjetEntier)
			imprime("%,\n", obj.valeur)
		}
		RÉEL {
			obj := transtype(objet : *ObjetRéel)
			imprime("%,\n", obj.valeur)
		}
	}
}

test_tori :: fonc() -> rien
{
    diffère { imprime("mémoire utilisée : %o\n", mémoire_utilisée()) }

	gestionnaire : GestionnaireObjet
	diffère { détruit(@gestionnaire) }

	dico := crée_dictionnaire(@gestionnaire)

	obj1 := crée_liste(@gestionnaire)
	obj2 := crée_entier(@gestionnaire)
	obj3 := crée_réel(@gestionnaire)
	obj4 := crée_nul(@gestionnaire)
	obj5 := crée_chaine(@gestionnaire)

	insère(dico, "liste", obj1)
	insère(dico, "entier", obj2)
	insère(dico, "réel", obj3)
	insère(dico, "nul", obj4)
	insère(dico, "chaine", obj5)

	imprime_json(dico, 0)
}
