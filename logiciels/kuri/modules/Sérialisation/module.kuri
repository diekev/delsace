importe Fondation

// -----------------------------------------------------------------
// Désérialisation de données depuis un tampon d'octets

désérialise_chaine :: fonc (ligne: []octet, décalage: z64) -> chaine
{
    ptr := ligne.pointeur + décalage

    taille := mémoire(ptr comme *z32)

    ptr = ligne.pointeur + décalage + 4

    retourne construit_chaine(ptr comme *z8, taille)
}

désérialise_entier :: fonc (ligne: []octet, décalage: z64) -> z32
{
    ptr := ligne.pointeur + décalage
    retourne mémoire(ptr comme *z32)
}

désérialise_entier :: fonc (octets: []octet, décalage: z64, entier: *z32)
{
    slot := (octets.pointeur + décalage) comme *z32
    mémoire(entier) = mémoire(slot)
}

désérialise_entier :: fonc (octets: []octet, décalage: z64, entier: *z64)
{
    slot := (octets.pointeur + décalage) comme *z64
    mémoire(entier) = mémoire(slot)
}

désérialise_chaine :: fonc (octets: []octet, décalage: z64, chn: *chaine)
{
    désérialise_entier(octets, décalage, *chn.taille)
    chn.pointeur = (octets.pointeur + décalage + taille_de(z64) comme z32) comme *z8
}

désérialise_chaine_sans_taille :: fonc (octets: []octet, décalage: z64, chn: *chaine)
{
    chn.pointeur = (octets.pointeur + décalage) comme *z8
}

// -----------------------------------------------------------------
// Sérialisation de données dans un tampon d'octets

sérialise_chaine :: fonc (ligne: []octet, décalage: z64, chn: chaine) -> rien
{
    slot_taille := (ligne.pointeur + décalage) comme *z32
    mémoire(slot_taille) = chn.taille comme z32

    slot_données := (ligne.pointeur + décalage + 4) comme *z8

    pour c, idx dans chn {
        slot_données[idx] = c
    }
}

sérialise_chaine_sans_taille :: fonc (octets: []octet, décalage: z64, chn: chaine)
{
    slot_données := (octets.pointeur + décalage) comme *z8

    pour c, idx dans chn {
        slot_données[idx] = c
    }
}

sérialise_entier :: fonc (octets: []octet, décalage: z64, entier: z32)
{
    slot := (octets.pointeur + décalage) comme *z32
    mémoire(slot) = entier
}

sérialise_entier :: fonc (octets: []octet, décalage: z64, entier: z64)
{
    slot := (octets.pointeur + décalage) comme *z64
    mémoire(slot) = entier
}
