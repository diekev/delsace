importe Fondation

// -----------------------------------------------------------------
// Désérialisation de données depuis un tampon d'octets

désérialise_chaine :: fonc (ligne: [..]octet, décalage: z64) -> chaine
{
    ptr := ligne.pointeur + décalage

    taille := mémoire(ptr comme *z32)

    ptr = ligne.pointeur + décalage + 4

    retourne construit_chaine(ptr comme *z8, taille)
}

désérialise_entier :: fonc (ligne: [..]octet, décalage: z64) -> z32
{
    ptr := ligne.pointeur + décalage
    retourne mémoire(ptr comme *z32)
}

désérialise_entier :: fonc (octets: [..]octet, décalage: z64, entier: *z32)
{
    slot := (octets.pointeur + décalage) comme *z32
    mémoire(entier) = mémoire(slot)
}

désérialise_entier :: fonc (octets: [..]octet, décalage: z64, entier: *z64)
{
    slot := (octets.pointeur + décalage) comme *z64
    mémoire(entier) = mémoire(slot)
}

désérialise_chaine :: fonc (octets: [..]octet, décalage: z64, chn: *chaine)
{
    désérialise_entier(octets, décalage, *chn.taille)
    chn.pointeur = (octets.pointeur + décalage + taille_de(z64) comme z32) comme *z8
}

désérialise_chaine_sans_taille :: fonc (octets: [..]octet, décalage: z64, chn: *chaine)
{
    chn.pointeur = (octets.pointeur + décalage) comme *z8
}

// -----------------------------------------------------------------
// Sérialisation de données dans un tampon d'octets

sérialise_chaine :: fonc (ligne: [..]octet, décalage: z64, chn: chaine) -> rien
{
    slot_taille := (ligne.pointeur + décalage) comme *z32
    mémoire(slot_taille) = chn.taille comme z32

    slot_données := (ligne.pointeur + décalage + 4) comme *z8

    pour c, idx dans chn {
        slot_données[idx] = c
    }
}

sérialise_chaine_sans_taille :: fonc (octets: [..]octet, décalage: z64, chn: chaine)
{
    slot_données := (octets.pointeur + décalage) comme *z8

    pour c, idx dans chn {
        slot_données[idx] = c
    }
}

sérialise_entier :: fonc (octets: [..]octet, décalage: z64, entier: $T)
{
    slot := (octets.pointeur + décalage) comme *T
    mémoire(slot) = entier
}

// -----------------------------------------------------------------
// Sérialiseuse : structure auxilliaire pour la sérialisation

Sérialiseuse :: struct {
    tampon: [..]octet
    curseur: z64
}

sérialise_entier :: fonc (sérialiseuse: &Sérialiseuse, entier: $T)
{
    sérialise_entier(sérialiseuse.tampon, sérialiseuse.curseur, entier)
    sérialiseuse.curseur += (taille_de(T) comme z64)
}

sérialise_chaine_préfixée_taille :: fonc (sérialiseuse: &Sérialiseuse, chn: chaine, $TypeTaille: type_de_données)
{
    sérialise_entier(sérialiseuse, chn.taille comme TypeTaille)
    sérialise_chaine_sans_taille(sérialiseuse.tampon, sérialiseuse.curseur, chn)
    sérialiseuse.curseur += chn.taille
}

sérialise_chaine_sans_taille :: fonc (sérialiseuse: &Sérialiseuse, chn: chaine)
{
    sérialise_chaine_sans_taille(sérialiseuse.tampon, sérialiseuse.curseur, chn)
    sérialiseuse.curseur += chn.taille
}

// -----------------------------------------------------------------
// InfosSérialisation : structure auxilliaire pour calculer la taille
// de données à sérialiser afin d'allouer un tampon suffisamment large

InfosSérialisation :: struct {
    taille_courante: z64
}

ajoute_taille :: fonc (infos: &InfosSérialisation, taille: z64)
{
    infos.taille_courante += taille
}

crée_sérialiseuse :: fonc (infos: &InfosSérialisation) -> Sérialiseuse
{
    résultat: Sérialiseuse
    tampon := loge_tableau(octet, infos.taille_courante)
    tampon.taille = infos.taille_courante
    résultat.tampon = tampon
    retourne résultat
}

// -----------------------------------------------------------------
// Désérialiseuse : structure auxilliaire pour la désérialisation

Désérialiseuse :: struct {
    tampon: [..]octet
    curseur: z64
}

crée_désérialiseuse :: fonc (tampon: [..]octet) -> Désérialiseuse
{
    retourne Désérialiseuse(tampon)
}

désérialise_chaine :: fonc (désérialiseuse: &Désérialiseuse) -> chaine
{
    résultat := désérialise_chaine(désérialiseuse.tampon, désérialiseuse.curseur)
    désérialiseuse.curseur += 4 + résultat.taille
    retourne résultat
}

désérialise_chaine :: fonc (désérialiseuse: &Désérialiseuse, chn: *chaine)
{
    désérialise_chaine(désérialiseuse.tampon, désérialiseuse.curseur, chn)
    désérialiseuse.curseur += (taille_de(z64) comme z64) + chn.taille
}

désérialise_chaine_préfixée_taille :: fonc (désérialiseuse: &Désérialiseuse, chn: *chaine, $TypeTaille: type_de_données)
{
    chn.taille = désérialise_entier(désérialiseuse, TypeTaille)
    désérialise_chaine_sans_taille(désérialiseuse.tampon, désérialiseuse.curseur, chn)
    désérialiseuse.curseur += chn.taille
}

désérialise_chaine_sans_taille :: fonc (désérialiseuse: &Désérialiseuse, chn: *chaine)
{
    désérialise_chaine_sans_taille(désérialiseuse.tampon, désérialiseuse.curseur, chn)
    désérialiseuse.curseur += chn.taille
}

désérialise_entier :: fonc (désérialiseuse: &Désérialiseuse, $T: type_de_données) -> T
{
    résultat: T
    désérialise_entier(désérialiseuse.tampon, désérialiseuse.curseur, *résultat)
    désérialiseuse.curseur += (taille_de(T) comme z64)
    retourne résultat
}

/* ------------------------------------------------------------------------- */
/** \nom Fichier binaire.
 * \{ */

FichierBinaire :: struct {
    contenu: [..]octet
    curseur: z32
}

lis_z8 :: fonc (fichier: *FichierBinaire) -> z8
{
    a := fichier.contenu[fichier.curseur] comme z8

    fichier.curseur += 1

    retourne a
}

lis_z16 :: fonc (fichier: *FichierBinaire) -> z16
{
    a := fichier.contenu[fichier.curseur] comme z16
    b := fichier.contenu[fichier.curseur + 1] comme z16

    fichier.curseur += 2

    retourne b << 8 | a
}

lis_z32 :: fonc (fichier: *FichierBinaire) -> z32
{
    a := fichier.contenu[fichier.curseur] comme z32
    b := fichier.contenu[fichier.curseur + 1] comme z32
    c := fichier.contenu[fichier.curseur + 2] comme z32
    d := fichier.contenu[fichier.curseur + 3] comme z32

    fichier.curseur += 4

    retourne d << 24 | c << 16 | b << 8 | a
}

lis_n64 :: fonc (fichier: *FichierBinaire) -> n64
{
    a := fichier.contenu[fichier.curseur] comme n64
    b := fichier.contenu[fichier.curseur + 1] comme n64
    c := fichier.contenu[fichier.curseur + 2] comme n64
    d := fichier.contenu[fichier.curseur + 3] comme n64
    e := fichier.contenu[fichier.curseur + 4] comme n64
    f := fichier.contenu[fichier.curseur + 5] comme n64
    g := fichier.contenu[fichier.curseur + 6] comme n64
    h := fichier.contenu[fichier.curseur + 7] comme n64

    fichier.curseur += 8

    retourne h << 56 | g << 48 | f << 40 | e << 32 | d << 24 | c << 16 | b << 8 | a
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TamponOctetFixe
 * \{ */

TamponOctetFixe :: struct {
    données: [512]octet
    position: z32
}

lis_n8 :: fonc (tampon: *TamponOctetFixe) -> n8
{
    tampon.position += 1
    retourne tampon.données[tampon.position - 1] comme n8
}

lis_n16 :: fonc (tampon: *TamponOctetFixe) -> n16
{
    retourne tampon.lis_n8() comme n16 << 8 | tampon.lis_n8() comme n16
}

lis_n32 :: fonc (tampon: *TamponOctetFixe) -> n32
{
    retourne tampon.lis_n8() comme n32 << 24 | tampon.lis_n8() comme n32 << 16 | tampon.lis_n8() comme n32 << 8 | tampon.lis_n8() comme n32
}

positionne :: fonc (tampon: *TamponOctetFixe, position: z32)
{
    tampon.position = position
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TamponOctetDynamique
 * \{ */

TamponOctetDynamique :: struct {
    données: [..]octet
    curseur := 0
}

détruit_tampon :: fonc (tampon: *TamponOctetDynamique)
{
    déloge(tampon.données)
}

sérialise_entier :: fonc (tampon: *TamponOctetDynamique, entier: z32)
{
    curseur := tampon.données.taille
    tableau_redimensionne(tampon.données, curseur + 4)
    sérialise_entier(tampon.données, curseur, entier)
}

sérialise_entier :: fonc (tampon: *TamponOctetDynamique, entier: z64)
{
    curseur := tampon.données.taille
    tableau_redimensionne(tampon.données, curseur + 8)
    sérialise_entier(tampon.données, curseur, entier)
}

sérialise_chaine_sans_taille :: fonc (tampon: *TamponOctetDynamique, chn: chaine)
{
    curseur := tampon.données.taille
    tableau_redimensionne(tampon.données, curseur + chn.taille)
    sérialise_chaine_sans_taille(tampon.données, curseur, chn)
}

désérialise_z32 :: fonc (tampon: *TamponOctetDynamique) -> z32
{
    résultat: z32
    désérialise_entier(tampon.données, tampon.curseur, *résultat)
    tampon.curseur += taille_de(z32) comme z32
    retourne résultat
}

désérialise_chaine :: fonc (tampon: *TamponOctetDynamique) -> chaine
{
    résultat: chaine
    désérialise_chaine(tampon.données, tampon.curseur, *résultat)
    tampon.curseur += (résultat.taille + taille_de(z64) comme z64) comme z32
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TamponFixe
 * \{ */

TamponFixe :: struct ($T: type_de_données, $N: z64) {
    données: [N]T
    curseur : z64 = 0
}

ajoute :: fonc (tampon: *TamponFixe($T, $N), v: T) #enligne
{
    tampon.données[tampon.curseur] = v
    tampon.curseur += 1
}

/** \} */
