ouvre_dossier :: fonc (chemin: &CheminFichier) -> Optionnel(TypePoignéeDossier)
{
    retourne système_ouvre_dossier(chemin)
}

chemin_pour_dossier :: fonc (dir: TypePoignéeEntréeDossier) -> CheminFichier
{
    retourne système_chemin_pour_dossier(dir)
}

/* Exploratrice de système de fichier pour visiter des dossiers depuis un chemin racine.
 * L'exploratrice peut avoir un filtre pour ignorer certains fichiers.
 * Voir aussi:
 * https://ensiwiki.ensimag.fr/index.php?title=Towards_a_better_libc_primitive_for_handling_path_names */

DonnéesDossierCourant :: struct {
    dir: TypePoignéeDossier
    chemin_complet: CheminFichier
}

ExploratriceFichier :: struct {
    // Le dossier racine où commencer l'exploration
    racine: CheminFichier

    pile_dossiers: Pile(DonnéesDossierCourant)

    filtre_chemin: fonc(CheminFichier)(bool)

    /* Pour la construction des chemins, afin de réutiliser la mémoire. */
    pile: Pile(chaine)
}

détruit :: fonc (exploratrice: &ExploratriceFichier)
{
    détruit(exploratrice.pile_dossiers)
    détruit(exploratrice.pile)
}

crée_exploratrice_fichier :: fonc (chemin: CheminFichier) -> ExploratriceFichier
{
    exploratrice: ExploratriceFichier
    si est_un_dossier(chemin) {
        exploratrice.racine = chemin
        empile_dossier(exploratrice, chemin)
    }
    retourne exploratrice
}

/* Retourne le prochain chemin dans le dossier courant de l'exploration.
 * Le chemin est alloué dynamiquement, et c'est la responsabilité de l'appelant
 * de libérer la mémoire. */
chemin_suivant :: fonc (exploratrice: &ExploratriceFichier) -> Optionnel(CheminFichier)
{
    tantque !exploration_finie(exploratrice) {
        dossier_courant := exploratrice.pile_dossiers.tête()
        entrée := système_lis_une_entrée_du_dossier(dossier_courant.dir)

        discr entrée {
            Quelque(e) {
                chemin_entrée := chemin_pour_dossier(e)

                si chemin_entrée.chn == "." || chemin_entrée.chn == ".." {
                    continue
                }

                si exploratrice.filtre_chemin && !exploratrice.filtre_chemin(chemin_entrée) {
                    continue
                }

                exploratrice.pile.données.taille = 0
                retourne crée_chemin_absolu(exploratrice.pile, dossier_courant.chemin_complet, chemin_entrée)
            }
            sinon {
                dépile_dossier(exploratrice)
            }
        }
    }
}

exploration_finie :: fonc (exploratrice: &ExploratriceFichier) -> bool
{
    retourne exploratrice.pile_dossiers.est_vide()
}

empile_dossier :: fonc (exploratrice: &ExploratriceFichier, chemin: CheminFichier)
{
    discr ouvre_dossier(chemin) {
        Quelque(dir) {
            exploratrice.pile_dossiers.empile(DonnéesDossierCourant(dir, chemin))
        }
        sinon {}
    }
}

dépile_dossier :: fonc (exploratrice: &ExploratriceFichier)
{
    données := exploratrice.pile_dossiers.dépile()
    système_ferme_dossier(données.dir)
}

// -----------------------------------------------------------------------

pour_chaque_chemin :: fonc (chemin: CheminFichier, données: *$T, rappel: fonc(CheminFichier, *T)(rien))
{
    exploratrice := crée_exploratrice_fichier(chemin)
    diffère détruit(exploratrice)

    tantque !exploratrice.exploration_finie() {
        discr exploratrice.chemin_suivant() {
            Quelque(chm) {
                rappel(chm, données)
                détruit_chemin(chm)
            }
            sinon {
            }
        }
    }
}

/* ------------------------------------------------------------------------- */

opérateur pour :: fonc (exploratrice: ExploratriceFichier) -> CheminFichier
{
    exploratrice = crée_exploratrice_fichier(exploratrice.racine)
    diffère détruit(exploratrice)

    index := 0

    tantque !exploratrice.exploration_finie() {
        chemin: CheminFichier
        discr exploratrice.chemin_suivant() {
            Quelque(chm) {
                chemin = chm
            }
            sinon {
                continue
            }
        }

        `it = chemin
        `index_it = index

        index += 1
        diffère détruit_chemin(chemin)

        #corps_boucle
    }
}

DécisionVisiteFichier :: énum {
    // Si le fichier visité est un dossier, retourner cette valeur indique que nous le visiterons.
    // Pour un fichier, la valeur est ignorée.
    Continue
    // Ignore le dossier même si la visite est récursive.
    NeDescendPasDansLeDossier
}

InfoVisiteFichier :: struct {
    chemin: chaine
    nom: chaine

    // temps_de_modification: ...

    // eu_erreur: bool

    est_dossier: bool
    // est_symbolique: bool
}

FichiersÀVisiter :: énum_drapeau {
    Fichiers
    Dossiers
}

visite_fichiers :: fonc (dossier: CheminFichier, récursif: bool, données: $T, procédure: fonc(InfoVisiteFichier, T)(DécisionVisiteFichier), fichiers_à_visiter := FichiersÀVisiter.Fichiers | FichiersÀVisiter.Dossiers)
{
    visite_fichiers(dossier.chn, récursif, données, procédure, fichiers_à_visiter)
}

visite_fichiers :: fonc (dossier: chaine, récursif: bool, données: $T, procédure: fonc(InfoVisiteFichier, T)(DécisionVisiteFichier), fichiers_à_visiter := FichiersÀVisiter.Fichiers | FichiersÀVisiter.Dossiers)
{
    dossiers_à_visiter: Pile(CheminFichier)
    diffère détruit(dossiers_à_visiter)
    dossiers_à_visiter.empile(CheminFichier(copie_chaine(dossier))) 

    info : InfoVisiteFichier = ---

    tantque !dossiers_à_visiter.est_vide() {
        dossier_courant := dossiers_à_visiter.dépile()
        diffère détruit_chemin(dossier_courant)

        pour ExploratriceFichier(dossier_courant) {
            // À FAIRE : eu_erreur
            info.chemin = it.chn
            info.nom = it.nom_fichier_avec_extension()

            si it.est_un_dossier() {
                si it.nom_fichier() == "." || it.nom_fichier() == ".." {
                    continue
                }

                descends_dans_le_dossier := récursif

                si fichiers_à_visiter.Dossiers {
                    info.est_dossier = vrai
                    décision := procédure(info, données)

                    si descends_dans_le_dossier {
                        descends_dans_le_dossier = (décision == DécisionVisiteFichier.Continue)
                    }
                }

                si descends_dans_le_dossier {
                    dossiers_à_visiter.empile(copie_chemin(it))
                }

                continue
            }

            si fichiers_à_visiter.Fichiers && it.est_un_fichier_régulier() {
                info.est_dossier = faux
                // À FAIRE : symlink
                _ := procédure(info, données)
            }
        }
    }
}

donne_fichiers_du_dossier :: fonc (dossier: CheminFichier, récursif := faux) -> [..]chaine
{
    retourne donne_fichiers_du_dossier(dossier.chn, récursif)
}

donne_fichiers_du_dossier :: fonc (dossier: chaine, récursif := faux) -> [..]chaine
{
    résultat: [..]chaine

    visite :: fonc (info: InfoVisiteFichier, fichiers: *[..]chaine) -> DécisionVisiteFichier
    {
        saufsi info.est_dossier {
            tableau_ajoute(fichiers, copie_chaine(info.chemin))
        }
        retourne DécisionVisiteFichier.Continue
    }

    visite_fichiers(dossier, récursif, *résultat, visite)

    retourne résultat
}
