importe Fondation
importe Structures

ouvre_dossier :: fonc(chemin : &CheminFichier) -> Optionnel(TypePoignéeDossier)
{
	retourne système_ouvre_dossier(chemin)
}

chemin_pour_dossier :: fonc(dir: TypePoignéeEntréeDossier) -> CheminFichier
{
    retourne système_chemin_pour_dossier(dir)
}

/* Exploratrice de système de fichier pour visiter des dossiers depuis un chemin racine.
 * L'exploratrice peut avoir un filtre pour ignorer certains fichiers.
 * Voir aussi:
 * https://ensiwiki.ensimag.fr/index.php?title=Towards_a_better_libc_primitive_for_handling_path_names */

DonnéesDossierCourant :: struct {
    dir: TypePoignéeDossier
    chemin_complet: CheminFichier
}

ExploratriceFichier :: struct {
    // Le dossier racine où commencer l'exploration
    racine: CheminFichier

    pile_dossiers: Pile(DonnéesDossierCourant)

    filtre_chemin: fonc(CheminFichier)(bool)
}

détruit :: fonc (exploratrice: &ExploratriceFichier)
{
    détruit(exploratrice.pile_dossiers)
}

crée_exploratrice_fichier :: fonc (chemin: CheminFichier) -> ExploratriceFichier
{
    exploratrice: ExploratriceFichier
    si est_un_dossier(chemin) {
        exploratrice.racine = chemin
        empile_dossier(exploratrice, chemin)
    }
    retourne exploratrice
}

/* Retourne le prochain chemin dans le dossier courant de l'exploration.
 * Le chemin est alloué dynamiquement, et c'est la responsabilité de l'appelant
 * de libérer la mémoire. */
chemin_suivant :: fonc (exploratrice: &ExploratriceFichier) -> Optionnel(CheminFichier)
{
    tantque !exploration_finie(exploratrice) {
        dossier_courant := exploratrice.pile_dossiers.tête()
        entrée := système_lis_une_entrée_du_dossier(dossier_courant.dir)

        discr entrée {
            Quelque(e) {
                chemin_entrée := chemin_pour_dossier(e)

                si chemin_entrée.chn == "." || chemin_entrée.chn == ".." {
                    continue
                }

                si exploratrice.filtre_chemin && !exploratrice.filtre_chemin(chemin_entrée) {
                    continue
                }

                retourne crée_chemin_absolu(dossier_courant.chemin_complet, chemin_entrée)
            }
            sinon {
                dépile_dossier(exploratrice)
            }
        }
    }
}

exploration_finie :: fonc (exploratrice: &ExploratriceFichier) -> bool
{
    retourne exploratrice.pile_dossiers.est_vide()
}

empile_dossier :: fonc (exploratrice: &ExploratriceFichier, chemin: CheminFichier)
{
    discr ouvre_dossier(chemin) {
        Quelque(dir) {
            exploratrice.pile_dossiers.empile(DonnéesDossierCourant(dir, chemin))
        }
        sinon {}
    }
}

dépile_dossier :: fonc (exploratrice: &ExploratriceFichier)
{
    données := exploratrice.pile_dossiers.dépile()
    système_ferme_dossier(données.dir)
}

// -----------------------------------------------------------------------

pour_chaque_chemin :: fonc (chemin : CheminFichier, données: *$T, rappel: fonc(CheminFichier, *T)(rien))
{
    exploratrice := crée_exploratrice_fichier(chemin)
    diffère détruit(exploratrice)

    tantque !exploratrice.exploration_finie() {
        discr exploratrice.chemin_suivant() {
            Quelque(chm) {
                rappel(chm, données)
                détruit_chemin(chm)
            }
            sinon {
            }
        }
    }
}

/* ------------------------------------------------------------------------- */

opérateur pour :: fonc (exploratrice: ExploratriceFichier) -> CheminFichier
{
    // À FAIRE : cas pour ExploratriceFichier temporaire
    // diffère détruit(exploratrice)

    exploratrice := crée_exploratrice_fichier(exploratrice.racine)
    index := 0

    tantque !exploratrice.exploration_finie() {
        chemin : CheminFichier
        discr exploratrice.chemin_suivant() {
            Quelque(chm) {
                chemin = chm
            }
            sinon {
                continue
            }
        }

        `it = chemin
        `index_it = index

        index += 1
        diffère détruit_chemin(chemin)

        #corps_boucle
    }
}
