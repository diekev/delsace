/* Module pour dessiner des formes dans un tampon de rendu. */

importe Algorithmes // pour permute
importe Couleur
importe Fondation
importe Géométrie
importe Image
importe Math

charge "tampon_texture"
charge "texte"

/* ------------------------------------------------------------------------- */
/** \nom Tampon de rendu.
 * \{ */

TamponDeRendu :: struct {
    rect: RectanglePosDim(z32)
    rect_ciseau: RectanglePosDim(z32)
    données: [..]CouleurRVBAN8
}

crée_tampon_de_rendu :: fonc (rect: RectanglePosDim(z32)) -> TamponDeRendu
{
    résultat: TamponDeRendu
    redimensionne_tampon_de_rendu(*résultat, rect)
    retourne résultat
}

redimensionne_tampon_de_rendu :: fonc (tampon: *TamponDeRendu, rect: RectanglePosDim(z32))
{
    tampon.rect = rect
    tampon.rect_ciseau = rect
    tableau_redimensionne(tampon.données, rect.hauteur * rect.largeur)
}

définis_rect_ciseau :: fonc (tampon: *TamponDeRendu, rect: RectanglePosDim(z32))
{
    tampon.rect_ciseau = tampon.rect
    rect = tampon.donne_rect_sûr(rect)
    tampon.rect_ciseau = rect
}

/* Ceci remplis inconditionnellement le tampon avec la couleur (pas de fusion, etc.).
 * Cette fonction est à utiliser pour réinitialiser le tampon. */
remplis_avec :: fonc (tampon: *TamponDeRendu, couleur: CouleurRVBAN8)
{
    pointeur := tampon.données.pointeur
    taille := tampon.données.taille

    /* Déroulage manuel. */
    pour taille / 8 {
        /* À FAIRE(langage) : erreur de compilation C si mémoire(pointeur + x) = y */
        pointeur[0] = couleur
        pointeur[1] = couleur
        pointeur[2] = couleur
        pointeur[3] = couleur
        pointeur[4] = couleur
        pointeur[5] = couleur
        pointeur[6] = couleur
        pointeur[7] = couleur

        pointeur += 8
    }

    pour taille % 8 {
        mémoire(pointeur) = couleur
        pointeur += 1
    }
}

détruit_tampon_de_rendu :: fonc (tampon: *TamponDeRendu)
{
    déloge(tampon.données)
}

donne_rect_sûr :: fonc (tampon: *TamponDeRendu, rect: RectanglePosDim(z32)) -> RectanglePosDim(z32)
{
    saufsi intersecte(tampon.rect_ciseau, rect) {
        retourne RectanglePosDim(z32)()
    }

    rect_tampon := tampon.rect_ciseau.donne_rectangle_pur()
    rect_pur := rect.donne_rectangle_pur()

    si rect_pur.gauche < rect_tampon.gauche {
        rect_pur.gauche = rect_tampon.gauche
    }
    si rect_pur.bas < rect_tampon.bas {
        rect_pur.bas = rect_tampon.bas
    }
    si rect_pur.haut > rect_tampon.haut {
        rect_pur.haut = rect_tampon.haut
    }
    si rect_pur.droite > rect_tampon.droite {
        rect_pur.droite = rect_tampon.droite
    }

    retourne rect_pur.donne_rectangle_pos_dim()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Utilitaires
 * \{ */

#portée_module

fusionne_pixels :: fonc (src: CouleurRVBAN8, dst: *CouleurRVBAN8)
{
    si src.a == 0 {
        retourne
    }

    si src.a == 255 {
        mémoire(dst) = src
        retourne
    }

    r_dest := (dst.r comme r32) / 255.0
    v_dest := (dst.v comme r32) / 255.0
    b_dest := (dst.b comme r32) / 255.0

    r_source := (src.r comme r32) / 255.0
    v_source := (src.v comme r32) / 255.0
    b_source := (src.b comme r32) / 255.0

    alpha := (src.a comme r32) / 255.0

    r := (((1.0 - alpha) * r_dest + alpha * r_source) * 255.0) comme n8
    v := (((1.0 - alpha) * v_dest + alpha * v_source) * 255.0) comme n8
    b := (((1.0 - alpha) * b_dest + alpha * b_source) * 255.0) comme n8
    a := 255 comme n8

    mémoire(dst) = CouleurRVBAN8(r, v, b, a)
}

#portée_export

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Ligne(z32)
 * \{ */

dessine_ligne :: fonc (tampon_de_rendu: *TamponDeRendu, ligne: Ligne(z32), couleur: CouleurRVBAN8)
{
    si ligne.p0 == ligne.p1 {
        // À FAIRE : dessine point
        retourne
    }

    x_min := ligne.p0.x
    x_max := ligne.p1.x
    y_min := ligne.p0.y
    y_max := ligne.p1.y

    restreint(*x_min, 0, tampon_de_rendu.rect.largeur - 1)
    restreint(*x_max, 0, tampon_de_rendu.rect.largeur - 1)
    restreint(*y_min, 0, tampon_de_rendu.rect.hauteur - 1)
    restreint(*y_max, 0, tampon_de_rendu.rect.hauteur - 1)

    si x_min == x_max {
        /* Ligne(z32) verticale. */
        si y_min > y_max {
            permute(y_min, y_max)
        }

        dest := tampon_de_rendu.données.pointeur + y_min * tampon_de_rendu.rect.largeur + x_min

        tantque y_min < y_max {
            fusionne_pixels(couleur, dest)
            dest += tampon_de_rendu.rect.largeur
            y_min += 1
        }
    }
    sinon si y_min == y_max {
        /* Ligne(z32) horizontale. */
        si x_min > x_max {
            permute(x_min, x_max)
        }

        dest := tampon_de_rendu.données.pointeur + y_min * tampon_de_rendu.rect.largeur + x_min

        tantque x_min < x_max {
            fusionne_pixels(couleur, dest)
            dest += 1
            x_min += 1
        }
    }
    sinon {
        /* Diagonale. */
        dessine_ligne_bresenham(tampon_de_rendu, x_min, y_min, x_max, y_max, couleur)
    }
}

/* Ceci utilise l'algorithme de Bresenham, on pourrait essayer celui de Wu :
 * https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm
 */
dessine_ligne_bresenham :: fonc (
    tampon_de_rendu: *TamponDeRendu,
    x1: z32,
    y1: z32,
    x2: z32,
    y2: z32,
    couleur: CouleurRVBAN8)
{
    dx := (x2 - x1) comme r32
    dy := (y2 - y1) comme r32
    enjambée: r32

    si abs(dx) >= abs(dy) {
        enjambée = abs(dx)
    }
    sinon {
        enjambée = abs(dy)
    }

    dx /= enjambée
    dy /= enjambée
    x := x1 comme r32
    y := y1 comme r32
    i := 0
    enjambée_i := enjambée comme z32

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    tantque i < enjambée_i {
        xi := x comme z32
        yi := y comme z32
        index := xi + yi * enjambée_dest
        fusionne_pixels(couleur, dest + index)

        x += dx
        y += dy
        i += 1
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Triangle
 * \{ */

dessine_triangle :: fonc (tampon_de_rendu: *TamponDeRendu, triangle: Triangle(z32), couleur: CouleurRVBAN8)
{
    dessine_ligne(tampon_de_rendu, Ligne(z32)(triangle.p0, triangle.p1), couleur)
    dessine_ligne(tampon_de_rendu, Ligne(z32)(triangle.p1, triangle.p2), couleur)
    dessine_ligne(tampon_de_rendu, Ligne(z32)(triangle.p2, triangle.p0), couleur)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Rectangle
 * \{ */

dessine_rectangle :: fonc (tampon_de_rendu: *TamponDeRendu, rect: RectanglePosDim(z32), couleur: CouleurRVBAN8)
{
    p0 := Point2D(z32)(rect.x, rect.y)
    p1 := Point2D(z32)(rect.x + rect.largeur, rect.y)
    p2 := Point2D(z32)(rect.x + rect.largeur, rect.y + rect.hauteur)
    p3 := Point2D(z32)(rect.x, rect.y + rect.hauteur)

    dessine_ligne(tampon_de_rendu, Ligne(z32)(p0, p1), couleur)
    dessine_ligne(tampon_de_rendu, Ligne(z32)(p1, p2), couleur)
    dessine_ligne(tampon_de_rendu, Ligne(z32)(p2, p3), couleur)
    dessine_ligne(tampon_de_rendu, Ligne(z32)(p3, p0), couleur)
}

remplis_rectangle :: fonc (tampon_de_rendu: *TamponDeRendu, rect: RectanglePosDim(z32), couleur: CouleurRVBAN8)
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    si couleur.a == 0 {
        retourne
    }

    si couleur.a == 255 {
        remplis_rectangle_couleur_opaque(tampon_de_rendu, rect_sauf, couleur)
        retourne
    }

    enjambée_dest := tampon_de_rendu.rect.largeur
    ligne_dest := tampon_de_rendu.données.pointeur + rect_sauf.y * enjambée_dest + rect_sauf.x

    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            fusionne_pixels(couleur, pixel_dest)
            pixel_dest += 1
        }

        ligne_dest += enjambée_dest
    }
}

remplis_rectangle_couleur_opaque :: fonc (tampon_de_rendu: *TamponDeRendu, rect: RectanglePosDim(z32), couleur: CouleurRVBAN8)
{
    enjambée_dest := tampon_de_rendu.rect.largeur
    ligne_dest := tampon_de_rendu.données.pointeur + rect.y * enjambée_dest + rect.x

    pour _ dans rect.y ... rect.y + rect.hauteur - 1 {
        pixel_dest := ligne_dest

        taille := rect.largeur

        /* Déroulage manuel. */
        pour taille / 8 {
            pixel_dest[0] = couleur
            pixel_dest[1] = couleur
            pixel_dest[2] = couleur
            pixel_dest[3] = couleur
            pixel_dest[4] = couleur
            pixel_dest[5] = couleur
            pixel_dest[6] = couleur
            pixel_dest[7] = couleur

            pixel_dest += 8
        }

        pour taille % 8 {
            mémoire(pixel_dest) = couleur
            pixel_dest += 1
        }

        ligne_dest += enjambée_dest
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Cercle
 * \{ */

dessine_cercle :: fonc (tampon_de_rendu: *TamponDeRendu, cercle: Cercle(z32), couleur: CouleurRVBAN8)
{
    cx := cercle.centre_x
    cy := cercle.centre_y
    r := cercle.rayon

    si r == 0 {
        retourne
    }

    // À FAIRE : intersection du rectangle
    pointeur_source := tampon_de_rendu.données.pointeur
    largeur_source := tampon_de_rendu.rect.largeur
    index_centre_cercle := cy * largeur_source + cx

    /* Boucle pour dessiner le cercle. */
    r2 := r + r

    x := r
    y := 0
    dx := r2 + r2 - 4
    dy := -2
    d := r2 - 1

    tantque y <= x {
        /* Dessine les octants du cercle dans cet ordre :
         *    7 8
         *  3     4
         *  1     2
         *    5 6
         */
        pointeur_source[index_centre_cercle - y * largeur_source - x] = couleur
        pointeur_source[index_centre_cercle - y * largeur_source + x] = couleur
        pointeur_source[index_centre_cercle + y * largeur_source - x] = couleur
        pointeur_source[index_centre_cercle + y * largeur_source + x] = couleur
        pointeur_source[index_centre_cercle - x * largeur_source - y] = couleur
        pointeur_source[index_centre_cercle - x * largeur_source + y] = couleur
        pointeur_source[index_centre_cercle + x * largeur_source - y] = couleur
        pointeur_source[index_centre_cercle + x * largeur_source + y] = couleur

        d += dy
        dy -= 4
        y += 1

        /* Version sans branche de :
         * si d < 0 {
         *     d += dx
         *     dx -= 4
         *     x -= 1
         * }
         */
        masque := (d >> 31)
        d += dx & masque
        dx -= 4 & masque
        x += masque
    }
}

remplis_cercle :: fonc (tampon_de_rendu: *TamponDeRendu, cercle: Cercle(z32), couleur: CouleurRVBAN8)
{
    cx := cercle.centre_x
    cy := cercle.centre_y
    r := cercle.rayon

    si r == 0 {
        retourne
    }

    // À FAIRE : intersection du rectangle
    pointeur_source := tampon_de_rendu.données.pointeur
    largeur_source := tampon_de_rendu.rect.largeur
    index_centre_cercle := cy * largeur_source + cx

    /* Boucle pour dessiner le cercle. */
    r2 := r + r

    x := r
    y := 0
    dx := r2 + r2 - 4
    dy := -2
    d := r2 - 1

    tantque y <= x {
        /* À FAIRE : optimise */
        pour x {
            enjambée_x := it * largeur_source
            enjambée_y := y * largeur_source
            pointeur_source[index_centre_cercle - enjambée_y - it] = couleur
            pointeur_source[index_centre_cercle - enjambée_y + it] = couleur
            pointeur_source[index_centre_cercle + enjambée_y - it] = couleur
            pointeur_source[index_centre_cercle + enjambée_y + it] = couleur
            pointeur_source[index_centre_cercle - enjambée_x - y] = couleur
            pointeur_source[index_centre_cercle - enjambée_x + y] = couleur
            pointeur_source[index_centre_cercle + enjambée_x - y] = couleur
            pointeur_source[index_centre_cercle + enjambée_x + y] = couleur
        }

        d += dy
        dy -= 4
        y += 1

        /* Version sans branche de :
         * si d < 0 {
         *     d += dx
         *     dx -= 4
         *     x -= 1
         * }
         */
        masque := (d >> 31)
        d += dx & masque
        dx -= 4 & masque
        x += masque
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Images
 * \{ */

dessine_image :: fonc (tampon_de_rendu: *TamponDeRendu, image: TamponImageGrise8Bit, rect: RectanglePosDim(z32))
{
    si image.largeur != rect.largeur || image.hauteur != rect.hauteur {
        imprime("[Dessin] dessin de TamponImageRVBA8Bit à l'échelle non supporté\n")
        retourne
    }

    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    décalage_x := rect_sauf.x - rect.x
    décalage_y := rect_sauf.y - rect.y

    enjambée_dest := tampon_de_rendu.rect.largeur
    ligne_dest := tampon_de_rendu.données.pointeur + rect_sauf.y * enjambée_dest + rect_sauf.x

    /* Dessine l'image du bas vers le haut. */
    enjambée_source := image.largeur
    ligne_source := image.données + (image.hauteur - décalage_y - 1) * enjambée_source + décalage_x

    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            valeur := mémoire(pixel_source)

            si valeur != 0 {
                mémoire(pixel_dest) = CouleurRVBAN8(valeur, valeur, valeur, 255)
            }

            pixel_source += 1
            pixel_dest += 1
        }

        ligne_source -= enjambée_source
        ligne_dest += enjambée_dest
    }
}

dessine_image :: fonc (tampon_de_rendu: *TamponDeRendu, image: TamponImageRVBA8Bit, rect: RectanglePosDim(z32))
{
    si image.largeur != rect.largeur || image.hauteur != rect.hauteur {
        imprime("[Dessin] dessin de TamponImageRVBA8Bit à l'échelle non supporté\n")
        retourne
    }

    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    décalage_x := rect_sauf.x - rect.x
    décalage_y := rect_sauf.y - rect.y

    enjambée_dest := tampon_de_rendu.rect.largeur
    ligne_dest := tampon_de_rendu.données.pointeur + rect_sauf.y * enjambée_dest + rect_sauf.x

    /* Dessine l'image du bas vers le haut. */
    enjambée_source := image.largeur
    ligne_source := image.données + (image.hauteur - décalage_y - 1) * enjambée_source + décalage_x

    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            pixel := mémoire(pixel_source)

            fusionne_pixels(pixel, pixel_dest)

            pixel_source += 1
            pixel_dest += 1
        }

        ligne_source -= enjambée_source
        ligne_dest += enjambée_dest
    }
}

dessine_image :: fonc (tampon_de_rendu: *TamponDeRendu, image: ImageIO, rect: RectanglePosDim(z32))
{
    si image.nombre_composants == 4 {
        si image.largeur == rect.largeur && image.hauteur == rect.hauteur {
            dessine_image_rvba(tampon_de_rendu, image, rect)
            retourne
        }

        dessine_image_rvba_à_l_échelle(tampon_de_rendu, image, rect)
        retourne
    }

    si image.nombre_composants != 3 {
        imprime("[Dessin] image non supportée (composants : %)\n", image.nombre_composants)
        retourne
    }

    si image.largeur == rect.largeur && image.hauteur == rect.hauteur {
        dessine_image_rvb(tampon_de_rendu, image, rect)
        retourne
    }

    dessine_image_rvb_à_l_échelle(tampon_de_rendu, image, rect)
}

dessine_image :: fonc (tampon_de_rendu: *TamponDeRendu, image: *NouvelleImage, rect: RectanglePosDim(z32))
{
    discr image.desc.format {
        Gris_8 {
            tampon: TamponImageGrise8Bit
            tampon.données = image.données comme *n8
            tampon.largeur = image.desc.largeur comme z32
            tampon.hauteur = image.desc.hauteur comme z32
            dessine_image(tampon_de_rendu, tampon, rect)
        }
        Gris_32 {
            imprime("[%] format non supporté : %\n", #nom_de_cette_fonction, image.desc.format)
        }
        RVB_8 {
            dessine_image_rvb_8(tampon_de_rendu, image, rect)
        }
        RVB_32 {
            image_io: ImageIO
            image_io.donnees = image.données comme *r32
            image_io.largeur = image.desc.largeur comme z32
            image_io.hauteur = image.desc.hauteur comme z32
            image_io.nombre_composants = 3
            dessine_image(tampon_de_rendu, image_io, rect)
        }
        RVBA_8 {
            tampon: TamponImageRVBA8Bit
            tampon.données = image.données comme *CouleurRVBAN8
            tampon.largeur = image.desc.largeur comme z32
            tampon.hauteur = image.desc.hauteur comme z32
            dessine_image(tampon_de_rendu, tampon, rect)
        }
        RVBA_32 {
            image_io: ImageIO
            image_io.donnees = image.données comme *r32
            image_io.largeur = image.desc.largeur comme z32
            image_io.hauteur = image.desc.hauteur comme z32
            image_io.nombre_composants = 4
            dessine_image(tampon_de_rendu, image_io, rect)
        }
    }
}

#portée_fichier

dessine_image_rvb_8 :: fonc (tampon_de_rendu: *TamponDeRendu, image: *NouvelleImage, rect: RectanglePosDim(z32))
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    ratio_largeur := image.desc.largeur comme r32 / rect.largeur comme r32
    ratio_hauteur := image.desc.hauteur comme r32 / rect.hauteur comme r32

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    début_dest := dest
    fin_dest := dest + tampon_de_rendu.données.taille

    source := image.données comme *n8
    enjambée_source := image.desc.largeur comme z32

    début_source := source
    fin_source := début_source + donne_taille_données(*image.desc)

    ligne_source := source
    ligne_dest := dest + (rect_sauf.hauteur + rect_sauf.y - 1) * enjambée_dest + rect_sauf.x

    y := 0.0

    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        x := 0.0
        enjambée_y := y comme z32 * enjambée_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            index := x comme z32 + enjambée_y

            assert(début_dest <= pixel_dest < fin_dest)
            assert(début_source <= (pixel_source + index * 3) < fin_source)

            copie_pixel_rvb_8(pixel_source + index * 3, pixel_dest)

            pixel_dest += 1
            x += ratio_largeur
        }

        ligne_dest -= enjambée_dest
        y += ratio_hauteur
    }
}

copie_pixel_rvb_8 :: fonc (pixel_source: *n8, pixel_dest: *CouleurRVBAN8)
{
    pixel_dest.r = pixel_source[0]
    pixel_dest.v = pixel_source[1]
    pixel_dest.b = pixel_source[2]
}

dessine_image_rvba :: fonc (tampon_de_rendu: *TamponDeRendu, image: ImageIO, rect: RectanglePosDim(z32))
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    décalage_x := rect_sauf.x - rect.x
    décalage_y := rect_sauf.y - rect.y

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    source := image.donnees
    enjambée_source := image.largeur * image.nombre_composants

    ligne_source := source + (image.hauteur - décalage_y - 1) * enjambée_source + décalage_x * image.nombre_composants

    copie_données_image_rvba(ligne_source, enjambée_source, 4, dest + rect_sauf.y * enjambée_dest + rect_sauf.x, enjambée_dest, rect_sauf)
}

dessine_image_rvba_à_l_échelle :: fonc (tampon_de_rendu: *TamponDeRendu, image: ImageIO, rect: RectanglePosDim(z32))
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    décalage_x := rect_sauf.x - rect.x
    décalage_y := rect_sauf.y - rect.y

    ratio_largeur := image.largeur comme r32 / rect.largeur comme r32
    ratio_hauteur := image.hauteur comme r32 / rect.hauteur comme r32

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    source := image.donnees
    enjambée_source := image.largeur * image.nombre_composants

    ligne_source := source + (image.hauteur - décalage_y - 1) * enjambée_source + décalage_x * image.nombre_composants

    copie_données_image_rvba(ligne_source, enjambée_source * ratio_hauteur comme z32, 4 * ratio_largeur comme z32, dest + rect_sauf.y * enjambée_dest + rect_sauf.x, enjambée_dest, rect_sauf)
}

dessine_image_rvb :: fonc (tampon_de_rendu: *TamponDeRendu, image: ImageIO, rect: RectanglePosDim(z32))
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    décalage_x := rect_sauf.x - rect.x
    décalage_y := rect_sauf.y - rect.y

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    source := image.donnees
    enjambée_source := image.largeur * image.nombre_composants

    ligne_source := source + (image.hauteur - décalage_y - 1) * enjambée_source + décalage_x * image.nombre_composants

    copie_données_image_rvb(ligne_source, enjambée_source, 3, dest + rect_sauf.y * enjambée_dest + rect_sauf.x, enjambée_dest, rect_sauf)
}

dessine_image_rvb_à_l_échelle :: fonc (tampon_de_rendu: *TamponDeRendu, image: ImageIO, rect: RectanglePosDim(z32))
{
    rect_sauf := donne_rect_sûr(tampon_de_rendu, rect)
    si rect_sauf.largeur == 0 || rect_sauf.hauteur == 0 {
        retourne
    }

    ratio_largeur := image.largeur comme r32 / rect.largeur comme r32
    ratio_hauteur := image.hauteur comme r32 / rect.hauteur comme r32

    dest := tampon_de_rendu.données.pointeur
    enjambée_dest := tampon_de_rendu.rect.largeur

    source := image.donnees
    enjambée_source := image.largeur

    copie_données_image_rvb(source, enjambée_source, ratio_largeur, ratio_hauteur, dest + (rect_sauf.hauteur - rect_sauf.y - 1) * enjambée_dest + rect_sauf.x, enjambée_dest, rect_sauf)
}

copie_données_image_rvb :: fonc (ligne_source: *r32, enjambée_source: z32, ratio_largeur: r32, ratio_hauteur: r32, ligne_dest: *CouleurRVBAN8, enjambée_dest: z32, rect_sauf: RectanglePosDim(z32))
{
    y := 0.0

    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        x := 0.0
        enjambée_y := y comme z32 * enjambée_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            index := x comme z32 + enjambée_y

            copie_pixel_rvb(pixel_source + index * 3, pixel_dest)

            pixel_dest += 1
            x += ratio_largeur
        }

        ligne_dest -= enjambée_dest
        y += ratio_hauteur
    }
}

copie_données_image_rvb :: fonc (ligne_source: *r32, enjambée_source: z32, enjambée_pixel_source: z32, ligne_dest: *CouleurRVBAN8, enjambée_dest: z32, rect_sauf: RectanglePosDim(z32))
{
    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            copie_pixel_rvb(pixel_source, pixel_dest)

            pixel_source += enjambée_pixel_source
            pixel_dest += 1
        }

        ligne_source -= enjambée_source
        ligne_dest += enjambée_dest
    }
}

copie_données_image_rvba :: fonc (ligne_source: *r32, enjambée_source: z32, enjambée_pixel_source: z32, ligne_dest: *CouleurRVBAN8, enjambée_dest: z32, rect_sauf: RectanglePosDim(z32))
{
    pour _ dans rect_sauf.y ... rect_sauf.y + rect_sauf.hauteur - 1 {
        pixel_dest := ligne_dest
        pixel_source := ligne_source

        pour _ dans rect_sauf.x ... rect_sauf.x + rect_sauf.largeur - 1 {
            copie_pixel_rvba(pixel_source, pixel_dest)

            pixel_source += enjambée_pixel_source
            pixel_dest += 1
        }

        ligne_source -= enjambée_source
        ligne_dest += enjambée_dest
    }
}

copie_pixel_rvb :: fonc (pixel_source: *r32, pixel_dest: *CouleurRVBAN8)
{
    r_source := pixel_source[0]
    v_source := pixel_source[1]
    b_source := pixel_source[2]

    pixel_dest.r = (r_source * 255.0) comme n8
    pixel_dest.v = (v_source * 255.0) comme n8
    pixel_dest.b = (b_source * 255.0) comme n8
}

copie_pixel_rvba :: fonc (pixel_source: *r32, pixel_dest: *CouleurRVBAN8)
{
    r_source := pixel_source[0]
    v_source := pixel_source[1]
    b_source := pixel_source[2]
    a_source := pixel_source[3]

    si a_source == 0.0 {
        retourne
    }

    si a_source >= 1.0 {
        pixel_dest.r = (r_source * 255.0) comme n8
        pixel_dest.v = (v_source * 255.0) comme n8
        pixel_dest.b = (b_source * 255.0) comme n8
        retourne
    }

    r_dest := (pixel_dest.r comme r32) / 255.0
    v_dest := (pixel_dest.v comme r32) / 255.0
    b_dest := (pixel_dest.b comme r32) / 255.0

    r := (((1.0 - a_source) * r_dest + a_source * r_source) * 255.0) comme n8
    v := (((1.0 - a_source) * v_dest + a_source * v_source) * 255.0) comme n8
    b := (((1.0 - a_source) * b_dest + a_source * b_source) * 255.0) comme n8
    a := 255 comme n8

    mémoire(pixel_dest) = CouleurRVBAN8(r, v, b, a)
}

/** \} */
