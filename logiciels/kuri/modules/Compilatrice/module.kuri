// Bibliothèque pour faire le pont entre le Compilateur et le programme compilé

// ----------------------------------------------------------------------------

// Ces structures doivent être tenues synchronisées avec celles dans options.hh
TypeCoulisse :: énum z32 {
    C
    LLVM
}

ArchitectureCible :: énum z32 {
    X64
    X86
}

NiveauOptimisation :: énum z32 {
    AUCUN
	O0
	O1
	O2
	Os
	Oz
	O3
}

OptionsLangage :: énum_drapeau z32 {
    ACTIVE_INTROSPECTION
    ACTIVE_COROUTINE

	//TOUT :: (ACTIVE_COROUTINE | ACTIVE_INTROSPECTION)
}

OptionsCompilation :: struct {
    nom_sortie : chaine
    type_coulisse : TypeCoulisse
    niveau_optimisation : NiveauOptimisation
    architecture_cible : ArchitectureCible
    options_langage : OptionsLangage

    crée_exécutable := vrai
}

// ----------------------------------------------------------------------------
// structures des Messages, celles-ci doivent être tenues synchronisées avec celles de message.hh

GenreMessage :: énum z32 {
    INVALIDE

    FICHIER_OUVERT
    FICHIER_FERMÉ
    MODULE_OUVERT
    MODULE_FERMÉ
    FONCTION_TYPÉE
    STRUCTURE_TYPÉE

    // ce type de message n'a pas l'air évident à géré, la compilation ne peut être marqué comme terminée tant que le métaprogramme est en cours d'exécution
    COMPILATION_TERMINÉE
}

Message :: struct {
    genre : GenreMessage
}

MessageFichier :: struct {
    empl base : Message

    chemin: chaine
}

MessageTypageFonctionTerminé :: struct {
    empl base : Message

    nom : chaine
}

MessageTypageTypeTerminé :: struct {
    empl base : Message

    nom : chaine
}

// ----------------------------------------------------------------------------

ajoute_chaine_à_la_compilation :: fonc(c: chaine) -> rien #compilatrice

ajoute_fichier_à_la_compilation :: fonc(c: chaine) -> rien #compilatrice

compilatrice_obtiens_options :: fonc () -> *OptionsCompilation #compilatrice

compilatrice_ajourne_options :: fonc (options: *OptionsCompilation) -> rien #compilatrice

compilatrice_attend_message :: fonc () -> *Message #compilatrice
