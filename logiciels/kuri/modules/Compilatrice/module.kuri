// Bibliothèque pour faire le pont entre le Compilateur et le programme compilé

importe Fondation

charge "ipa"
charge "code"
charge "lexèmes"
charge "message"
charge "options"

// ----------------------------------------------------------------------------
// Fonctions auxilliaires pour l'IPA.

compilatrice_rapporte_erreur :: fonc (message: chaine, pos := PositionCodeSource())
{
	compilatrice_rapporte_erreur(compilatrice_espace_courant(), message, pos)
}

compilatrice_rapporte_erreur :: fonc (espace: *EspaceDeTravail, message: chaine, pos := PositionCodeSource())
{
	compilatrice_rapporte_erreur(espace, pos.fichier, pos.ligne, message)
}

compilatrice_rapporte_erreur :: fonc (site: *NoeudCode, message: chaine)
{
	compilatrice_rapporte_erreur(compilatrice_espace_courant(), site.chemin_fichier, site.numero_ligne, message)
}

compilatrice_rapporte_erreur :: fonc (espace: *EspaceDeTravail, site: *NoeudCode, message: chaine)
{
	compilatrice_rapporte_erreur(espace, site.chemin_fichier, site.numero_ligne, message)
}

compilatrice_rapporte_avertissement :: fonc (message: chaine, pos := PositionCodeSource())
{
	compilatrice_rapporte_avertissement(compilatrice_espace_courant(), pos.fichier, pos.ligne, message)
}

compilatrice_rapporte_avertissement :: fonc (site: *NoeudCode, message: chaine)
{
	compilatrice_rapporte_avertissement(compilatrice_espace_courant(), site.chemin_fichier, site.numero_ligne, message)
}

compilatrice_rapporte_avertissement :: fonc (espace: *EspaceDeTravail, site: *NoeudCode, message: chaine)
{
	compilatrice_rapporte_avertissement(espace, site.chemin_fichier, site.numero_ligne, message)
}

désactive_compilation_espace_défaut :: fonc ()
{
    options := compilatrice_obtiens_options()
    options.objet_généré = ObjetGénéré.Rien
	// À FAIRE : ajourne les options manuellement
}

// ----------------------------------------------------------------------------
// Fonctions auxilliaires pour les tests unitaires

compilatrice_vérifie_égalité :: fonc (a: $T, b: T, position_code := PositionCodeSource())
{
	si a == b {
		retourne
	}

	enchaineuse : Enchaineuse
	initialise_enchaineuse(*enchaineuse)
	diffère { détruit_tampons(*enchaineuse) }

	ajoute_au_tampon(*enchaineuse, "Échec du test, les valeurs sont différentes !\n")
	imprime_dans_enchaineuse(*enchaineuse, "\tLa première valeur est : %\n", a)
	imprime_dans_enchaineuse(*enchaineuse, "\tLa deuxième valeur est : %\n", b)

	message := chaine_depuis_enchaineuse(*enchaineuse)

	espace := compilatrice_espace_courant()
	compilatrice_rapporte_erreur(espace, position_code.fichier, position_code.ligne, message)

	déloge(message) // @fuite de mémoire : la compilation s'arrêtera dès que l'erreur sera lancée
}
