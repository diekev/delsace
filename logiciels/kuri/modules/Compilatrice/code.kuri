// ----------------------------------------------------------------------------
// structures pour l'arbre syntaxique des programmes, à tenir synchronisé avec noeud_code.hh
// GenreNoeudCode est une copie carbone de l'énumération de arbre_syntaxique.hh

GenreNoeudCode :: énum z32 {
	DECLARATION_ENUM
	DECLARATION_ENTETE_FONCTION
	DECLARATION_CORPS_FONCTION
	DECLARATION_STRUCTURE
	DECLARATION_VARIABLE
	DIRECTIVE_CUISINE
	DIRECTIVE_EXECUTION
	EXPRESSION_APPEL_FONCTION
	EXPRESSION_ASSIGNATION_VARIABLE
	EXPRESSION_CONSTRUCTION_STRUCTURE
	EXPRESSION_CONSTRUCTION_TABLEAU
	EXPRESSION_INDEXAGE
	EXPRESSION_INFO_DE
	EXPRESSION_INIT_DE
	EXPRESSION_LITTERALE_BOOLEEN
	EXPRESSION_LITTERALE_CARACTERE
	EXPRESSION_LITTERALE_CHAINE
	EXPRESSION_LITTERALE_NOMBRE_REEL
	EXPRESSION_LITTERALE_NOMBRE_ENTIER
	EXPRESSION_LITTERALE_NUL
	EXPRESSION_MEMOIRE
	EXPRESSION_PARENTHESE
	EXPRESSION_PLAGE
	EXPRESSION_REFERENCE_DECLARATION
	EXPRESSION_REFERENCE_MEMBRE
	EXPRESSION_REFERENCE_MEMBRE_UNION
	EXPRESSION_REFERENCE_TYPE
	EXPRESSION_TABLEAU_ARGS_VARIADIQUES
	EXPRESSION_TAILLE_DE
	EXPRESSION_TYPE_DE
	EXPRESSION_COMME
	EXPRESSION_VIRGULE
	INSTRUCTION_BOUCLE
	INSTRUCTION_COMPOSEE
	INSTRUCTION_CONTINUE_ARRETE
	INSTRUCTION_DISCR
	INSTRUCTION_DISCR_ENUM
	INSTRUCTION_DISCR_UNION
	INSTRUCTION_NON_INITIALISATION
	INSTRUCTION_POUR
	INSTRUCTION_POUSSE_CONTEXTE
	INSTRUCTION_REPETE
	INSTRUCTION_RETIENS
	INSTRUCTION_RETOUR
	INSTRUCTION_SAUFSI
	INSTRUCTION_SI
	INSTRUCTION_SI_STATIQUE
	INSTRUCTION_TANTQUE
	INSTRUCTION_TENTE
	OPERATEUR_BINAIRE
	OPERATEUR_COMPARAISON_CHAINEE
	OPERATEUR_UNAIRE
	EXPANSION_VARIADIQUE
	INSTRUCTION_EMPL
	INSTRUCTION_IMPORTE
	INSTRUCTION_CHARGE
}

NoeudCode :: struct {
    genre : GenreNoeudCode
    type : *InfoType

	chemin_fichier : chaine
	nom_fichier : chaine
	numero_ligne := 0
	numero_colonne := 0
}

NoeudCodeEntêteFonction :: struct {
    empl base : NoeudCode

    nom: chaine

    params_entrée : []*NoeudCodeDéclaration
    params_sortie : []*NoeudCodeDéclaration

	annotations : []chaine

	est_opérateur : bool
	est_coroutine : bool
}

NoeudCodeCorpsFonction :: struct {
    empl base : NoeudCode

	entête : *NoeudCodeEntêteFonction
    bloc : *NoeudCodeBloc

	arbre_aplatis : []*NoeudCode
}

NoeudCodeAssignation :: struct {
    empl base : NoeudCode

    assigné : *NoeudCode
    expression : *NoeudCode
}

NoeudCodeDéclaration :: struct {
    empl base : NoeudCode

    valeur : *NoeudCode
    expression : *NoeudCode
}

NoeudCodeOpérationUnaire :: struct {
    empl base : NoeudCode

    opérande : *NoeudCode
	op : chaine
}

NoeudCodeOpérationBinaire :: struct {
    empl base : NoeudCode

    opérande_gauche : *NoeudCode
    opérande_droite : *NoeudCode
	op : chaine
}

NoeudCodeComme :: struct {
    empl base : NoeudCode

    expression : *NoeudCode
	expression_type : *NoeudCode
}

NoeudCodeBloc :: struct {
    empl base : NoeudCode

    expressions : []*NoeudCode
    membres : []*NoeudCodeDéclaration
}

NoeudCodeSi :: struct {
    empl base : NoeudCode

    condition : *NoeudCode
    bloc_si_vrai : *NoeudCodeBloc
    bloc_si_faux : *NoeudCodeBloc
}

NoeudCodeBoucle :: struct {
    empl base : NoeudCode

    condition : *NoeudCode
    bloc : *NoeudCodeBloc
}

NoeudCodePour :: struct {
    empl base : NoeudCode

	variable : *NoeudCode
	expression : *NoeudCode
	bloc : *NoeudCodeBloc
	bloc_sansarret : *NoeudCodeBloc
	bloc_sinon : *NoeudCodeBloc
}

NoeudCodeTente :: struct {
    empl base : NoeudCode

	expression_appel : *NoeudCode
	expression_piege : *NoeudCode
	bloc : *NoeudCodeBloc
}

NoeudCodeDiscr :: struct {
    empl base : NoeudCode

	PaireDiscr :: struct {
		expression : *NoeudCode
		bloc : *NoeudCode
	}

	expression : *NoeudCode
	bloc_sinon : *NoeudCodeBloc
	paires_discr : []PaireDiscr
}

NoeudCodePousseContexte :: struct {
    empl base : NoeudCode

	expression : *NoeudCode
	bloc : *NoeudCodeBloc
}

NoeudCodeReferenceMembre :: struct {
    empl base : NoeudCode

	accede : *NoeudCode
	membre : *NoeudCode
}

NoeudCodeAppel :: struct {
    empl base : NoeudCode

	expression : *NoeudCode
	params : []*NoeudCode
}

NoeudCodeVirgule :: struct {
	empl base : NoeudCode

	expressions : []*NoeudCode
}

NoeudCodeDirective :: struct {
	empl base : NoeudCode

	ident : chaine
	expression : *NoeudCode
}

NoeudCodeIdentifiant :: struct {
	empl base : NoeudCode

	ident : chaine
}

NoeudCodeLitteraleEntier :: struct {
	empl base : NoeudCode

	valeur : n64
}

NoeudCodeLitteraleReel :: struct {
	empl base : NoeudCode

	valeur : r64
}

NoeudCodeLitteraleCaractere :: struct {
	empl base : NoeudCode

	valeur : z8
}

NoeudCodeLitteraleChaine :: struct {
	empl base : NoeudCode

	valeur : chaine
}

NoeudCodeLitteraleBooleen :: struct {
	empl base : NoeudCode

	valeur : bool
}
