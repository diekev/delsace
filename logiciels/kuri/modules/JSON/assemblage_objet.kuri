importe Tori

//##############################################################################

PileObjet :: struct {
    données : []*Objet
    curseur := 0
}

détruit :: fonc(dyn pile : &PileObjet) -> rien
{
    déloge pile.données
}

empile :: fonc(dyn pile : &PileObjet, noeud : *Objet) -> rien
{
    si pile.curseur == pile.données.taille {
        taille := pile.données.taille
        reloge pile.données : [taille + 1]*Objet
    }

    pile.données[pile.curseur] = noeud
    pile.curseur += 1
}

dépile :: fonc(dyn pile : &PileObjet) -> *Objet
{
    ret := pile.haut()
    pile.curseur -= 1
    retourne ret
}

haut :: fonc(pile : &PileObjet) -> *Objet
{
    retourne pile.données[pile.curseur - 1]
}

taille :: fonc(pile : &PileObjet) -> z32
{
    retourne pile.curseur
}

est_vide :: fonc(pile : &PileObjet) -> bool
{
    retourne pile.curseur == 0
}

//##############################################################################

AssembleuseObjet :: struct {
    gestionnaire : GestionnaireObjet
    pile : PileObjet
}

détruit :: fonc(assembleuse: &AssembleuseObjet) -> rien
{
    détruit(assembleuse.pile)
    détruit(@assembleuse.gestionnaire)
}

empile_objet :: fonc(assembleuse: &AssembleuseObjet, objet: *Objet) -> rien
{
    //assert(objet.id == TypeObjet.DICTIONNAIRE || objet.id == TypeObjet.LISTE)
    assembleuse.pile.empile(objet)
}

dépile_objet :: fonc(assembleuse: &AssembleuseObjet) -> rien
{
    assembleuse.pile.dépile()
}

crée_objet :: fonc(assembleuse: &AssembleuseObjet, nom_objet: chaine, type: TypeObjet) -> *Objet
{
    objet := crée_objet(assembleuse, type)

    si !assembleuse.pile.est_vide() {
		dyn objet_haut := assembleuse.pile.haut()

		si objet_haut.id == TypeObjet.DICTIONNAIRE {
			dyn dico := transtype(objet_haut: *ObjetDictionnaire)
			dico.insère(nom_objet, objet)
		}
		sinon {
			dyn tabl := transtype(objet_haut: *ObjetListe)
			tableau_ajoute(@tabl.valeur, objet)
		}
	}

	retourne objet
}

crée_objet :: fonc(assembleuse: &AssembleuseObjet, type: TypeObjet) -> *Objet
{
    discr type {
        NUL {
            obj := crée_nul(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
        DICTIONNAIRE {
            obj := crée_dictionnaire(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
        ENTIER {
            obj := crée_entier(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
        RÉEL {
            obj := crée_réel(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
        CHAINE {
            obj := crée_chaine(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
        LISTE {
            obj := crée_liste(@assembleuse.gestionnaire)
            retourne transtype(obj : *Objet)
        }
    }

    retourne nul
}
