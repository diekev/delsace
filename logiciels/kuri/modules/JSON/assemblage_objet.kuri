importe Structures
importe Tori

//##############################################################################

AssembleuseObjet :: struct {
    gestionnaire : GestionnaireObjet
    pile : Pile(T = *Objet)
}

détruit :: fonc(assembleuse: &AssembleuseObjet) -> rien
{
    détruit(assembleuse.pile)
    détruit(*assembleuse.gestionnaire)
}

empile_objet :: fonc(assembleuse: &AssembleuseObjet, objet: *Objet) -> rien
{
    //assert(objet.id == TypeObjet.DICTIONNAIRE || objet.id == TypeObjet.LISTE)
    assembleuse.pile.empile(objet)
}

dépile_objet :: fonc(assembleuse: &AssembleuseObjet) -> rien
{
    _ := assembleuse.pile.dépile()
}

crée_objet :: fonc(assembleuse: &AssembleuseObjet, nom_objet: chaine, type: TypeObjet) -> *Objet
{
    objet := crée_objet(assembleuse, type)

    si !assembleuse.pile.est_vide() {
		objet_tête := assembleuse.pile.tête()

		si objet_tête.id == TypeObjet.DICTIONNAIRE {
			dico := objet_tête comme *ObjetDictionnaire
			dico.insère(nom_objet, objet)
		}
		sinon {
			tabl := objet_tête comme *ObjetListe
			tableau_ajoute(*tabl.valeur, objet)
		}
	}

	retourne objet
}

crée_objet :: fonc(assembleuse: &AssembleuseObjet, type: TypeObjet) -> *Objet
{
    discr type {
        NUL {
            retourne crée_nul(*assembleuse.gestionnaire)
        }
        DICTIONNAIRE {
            retourne crée_dictionnaire(*assembleuse.gestionnaire)
        }
        ENTIER {
            retourne crée_entier(*assembleuse.gestionnaire)
        }
        RÉEL {
            retourne crée_réel(*assembleuse.gestionnaire)
        }
        CHAINE {
            retourne crée_chaine(*assembleuse.gestionnaire)
        }
        LISTE {
            retourne crée_liste(*assembleuse.gestionnaire)
        }
    }

    retourne nul
}
