/* Module implémentant des fonctions pour travailler sur ou avec des processus. */

importe Chaine
importe Fondation
importe GlibC // pour fork et al.
importe POSIX // pour system
importe SysFichier

charge "test_de_programme"

IDProcessus :: #opaque z32

/* Retourne l'identifiant du processus courant. */
id_processus_courant :: fonc () -> IDProcessus
{
    retourne IDProcessus(getpid())
}

ProcessusParent :: #opaque z32
ProcessusEnfant :: #opaque z32

DuplicationProcessus :: union {
    Parent: ProcessusParent
    Enfant: ProcessusEnfant
    Rien
}

/* Duplique le processus courant. La valeur de retour peut être discriminée
 * pour savoir si nous sommes dans le processus parent ou enfant.
 * Si la valeur de retour est nulle, la duplication a échouée. */
duplique_processus :: fonc () -> DuplicationProcessus
{
    pid := fork()

    si pid == -1 {
        retourne
    }

    si pid == 0 {
        retourne ProcessusEnfant(pid)
    }

    retourne ProcessusParent(pid)
}

/* Remplace le processus courant par un programme. */
remplace_processus_par_programme :: fonc (programme: chaine, arguments: ...chaine)
{
    chn_c_programme := crée_chaine_c(programme)

    /* Nous devons convertir les arguments en ChaineC car ils seront utilisés
     * pour le paramètres `argv` de la fonction principale du programme. */
    arguments_chn_c : [..]ChaineC

    /* argv[0] est le programme. */
    tableau_ajoute(*arguments_chn_c, chn_c_programme)

    pour arguments {
        tableau_ajoute(*arguments_chn_c, crée_chaine_c(it))
    }

    /* argv doit finir par une chaine nulle. */
    tableau_ajoute(*arguments_chn_c, ChaineC(nul))

    /* Appelons le programme. */
    valeur_retour := execvp(chn_c_programme, *arguments_chn_c[0])

    /* Termine le processus fils, si execvp réussi, nous ne serons plus là.
     * Ceci n'est que pour les erreurs. Le processus parent devra vérifier
     * l'état du processus manuellement. */
    exit(valeur_retour)
}

// ----------------------------------------------------------------------------
// BaseCanal : structure de base pour représenter un canal unidirectionnel de
// communication. Le canal possède un point pour lire, et un point pour écrire.
// Si un canal est en mode lecture, y écrire est proscris. Inversement, en mode
// écriture, y lire est proscris.

BaseCanal :: struct {
    lecteur: Fichier
    auteur: Fichier
}

écris_avec_sortie_standarde :: fonc (canal: &BaseCanal)
{
    /* Faisons pointé la sortie du programme avec l'entrée du canal. */
    référence_fichier(canal.auteur, sortie_standarde())
    _ := ferme(*canal.lecteur)
}

lis_avec_entrée_standarde :: fonc (canal: &BaseCanal)
{
    /* Faisons pointé l'entrée du programme avec la sortie du canal. */
    référence_fichier(canal.lecteur, entrée_standarde())
    _ := ferme(*canal.auteur)
}

prépare_pour_lecture :: fonc (canal: &BaseCanal)
{
    /* Si nous voulons lire depuis un canal, la partie autrice de celui-ci doit
     * utiliser sa sortie standarde pour écrire. */
    canal.écris_avec_sortie_standarde()
}

prépare_pour_écriture :: fonc (canal: &BaseCanal)
{
    /* Si nous voulons écrire dans un canal, la partie lectrice de celui-ci
     * doit utiliser son entrée standarde pour lire. */
    canal.lis_avec_entrée_standarde()
}

écris :: fonc (canal: &BaseCanal, texte: chaine)
{
    _ := écris(*canal.auteur, texte)
}

lis :: fonc (canal: &BaseCanal) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    boucle {
        tmp := tente lis_tout(*canal.lecteur) piège err {
            retourne chaine_depuis_enchaineuse(*enchaineuse)
        }

        /* Le flux est vide, ou le fichier d'écriture fut fermé. */
        si tmp.taille == 0 {
            arrête
        }

        ajoute_au_tampon(*enchaineuse, tmp)
        déloge(tmp)
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

ouvre_canal :: fonc ($TypeCanal: type_de_données) -> Optionnel(TypeCanal)
{
    fds: [2]z32

    résultat_pipe := pipe(*fds[0])

    si résultat_pipe == -1 {
        retourne
    }

    résultat : TypeCanal = ---
    résultat.lecteur = Fichier(TypePoignéeFichier(fds[0]))
    résultat.auteur = Fichier(TypePoignéeFichier(fds[1]))
    retourne résultat
}

// ----------------------------------------------------------------------------
// CanalLecture : canal qui ne peut que être lu. Écrire dans ce canal ne fera
// rien, ou corromprera les données.

CanalLecture :: struct {
    empl base : BaseCanal
}

crée_canal_lecture :: fonc () -> Optionnel(CanalLecture)
{
    retourne ouvre_canal(CanalLecture)
}

ouvre_canal_lecture :: fonc (programme: chaine, arguments: ...chaine) -> Optionnel(CanalLecture)
{
    canal : CanalLecture
    discr crée_canal_lecture() {
        Quelque(c) {
            canal = c
        }
        sinon {
            retourne
        }
    }

    discr duplique_processus() {
        Enfant {
            /* Le processus enfant écrira. */
            canal.prépare_pour_écriture()
            remplace_processus_par_programme(programme, ...arguments)
        }
        Parent {
            /* Le processus père lira. */
            canal.prépare_pour_lecture()
        }
        sinon {
            retourne
        }
    }

    retourne canal
}

// ----------------------------------------------------------------------------
// CanalLecture : canal qui ne peut que être écris. Lire depuis ce canal ne fera
// rien, ou corromprera les données.

CanalÉcriture :: struct {
    empl base : BaseCanal
}

crée_canal_écriture :: fonc () -> Optionnel(CanalÉcriture)
{
    retourne ouvre_canal(CanalÉcriture)
}

// ----------------------------------------------------------------------------
// CanalCommunication : canal bidirectionnel où l'on peut lire les et écrire
// des données.

CanalCommunication :: struct {
    lecture: CanalLecture
    écriture: CanalÉcriture
}

ouvre_canal_de_communication :: fonc (programme: chaine, arguments: ...chaine) -> Optionnel(CanalCommunication)
{
    canal_lecture : CanalLecture
    discr crée_canal_lecture() {
        Quelque(c) {
            canal_lecture = c
        }
        sinon {
            retourne
        }
    }

    canal_écriture : CanalÉcriture
    discr crée_canal_écriture() {
        Quelque(canal) {
            canal_écriture = canal
        }
        sinon {
            retourne
        }
    }

    discr duplique_processus() {
        Enfant {
            /* Le processus enfant sera lu. */
            canal_lecture.prépare_pour_lecture()
            canal_écriture.prépare_pour_écriture()

            remplace_processus_par_programme(programme, ...arguments)
        }
        Parent {
            /* Le processus parent écrira. Fermons les descripteurs ne servant à rien. */
            _ := ferme(*canal_lecture.auteur)
            _ := ferme(*canal_écriture.lecteur)
        }
        sinon {
            retourne
        }
    }

    canal : CanalCommunication
    canal.lecture = canal_lecture
    canal.écriture = canal_écriture
    retourne canal
}

écris :: fonc (canal: &CanalCommunication, texte: chaine)
{
    canal.écriture.écris(texte)
}

lis :: fonc (canal: &CanalCommunication) -> chaine
{
    retourne canal.lecture.lis()
}

ferme_écriture :: fonc (canal: &CanalCommunication)
{
    _ := ferme(*canal.écriture.auteur)
}

exécute_commande_externe :: fonc (args: ...chaine) -> bool
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour args {
        ajoute_au_tampon(*enchaineuse, it)
        ajoute_au_tampon(*enchaineuse, " ")
    }

    ajoute_au_tampon(*enchaineuse, '\0')

    commande := chaine_depuis_enchaineuse(*enchaineuse)
    diffère { déloge(commande) }

    si system(ChaineC(commande.pointeur)) != 0 {
        retourne faux
    }

    retourne vrai
}
