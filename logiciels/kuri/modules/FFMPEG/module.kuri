importe Chaine
importe Fondation
importe GlibC

charge "interface"

FluxVidéo :: struct {
    format_ctx: *AVFormatContext
    codec_ctx: *AVCodecContext
    audio_codec_ctx: *AVCodecContext
    codec: *AVCodec
    sws_ctx: *SwsContext

    video_stream_idx: z32
    /* -1 si aucun audio. */
    audio_stream_idx: z32

    /* Frame et tampon pour l'image courante. */
    frame_rgb: *AVFrame
    tampon_image_courante: *n8

    sur_paquet_vidéo := flux_vidéo_sur_paquet_vidéo_défaut
    sur_paquet_audio: fonc(*FluxVidéo, *AVPacket)(rien)
}

détruit_données_flux_vidéo :: fonc (flux: *FluxVidéo)
{
    avcodec_free_context(*flux.codec_ctx)
    avcodec_free_context(*flux.audio_codec_ctx)
    avformat_close_input(*flux.format_ctx)
    av_frame_free(*flux.frame_rgb)
    sws_freeContext(flux.sws_ctx)
}

alloue_tampon_pour_image :: fonc (empl flux_vidéo: *FluxVidéo)
{
    si tampon_image_courante != nul {
        retourne
    }

    frame_rgb = av_frame_alloc()
    assert(frame_rgb != nul)

    // Determine required buffer size and allocate buffer
    taille := av_image_get_buffer_size(AVPixelFormat.AV_PIX_FMT_RGB24, codec_ctx.width, codec_ctx.height, 1)
    tampon_image_courante = av_malloc(taille comme n64 * taille_de(n8)) comme *n8

    // Assign appropriate parts of buffer to image planes in pFrameRGB
    // Note that pFrameRGB is an AVFrame, but AVFrame is a superset
    // of AVPicture
    av_image_fill_arrays(*frame_rgb.data[0], *frame_rgb.linesize[0], tampon_image_courante, AVPixelFormat.AV_PIX_FMT_RGB24, codec_ctx.width, codec_ctx.height, 1);
}

ouvre_flux_vidéo_depuis_fichier :: fonc (résultat: *FluxVidéo, chemin: chaine) -> bool
{
    détruit_données_flux_vidéo(résultat)

    input_file := crée_chaine_c(chemin)
    diffère détruit_chaine_c(input_file)

    // Register all available codecs, demuxers, and protocols
    av_register_all();

    // Open input file and allocate format context
    format_ctx: *AVFormatContext
    si (avformat_open_input(*format_ctx, input_file, nul, nul) < 0) {
        imprime("Could not open input file: %\n", input_file)
        retourne faux
    }

    // Retrieve stream information
    si (avformat_find_stream_info(format_ctx, nul) < 0) {
        imprime("Could not find stream information\n")
        retourne faux
    }

    // Find video stream
    video_stream_idx := -1;
    audio_stream_idx := -1
    pour format_ctx.nb_streams {
        si (format_ctx.streams[it].codecpar.codec_type == AVMediaType.AVMEDIA_TYPE_VIDEO) {
            video_stream_idx = it comme z32
            continue
        }
        si (format_ctx.streams[it].codecpar.codec_type == AVMediaType.AVMEDIA_TYPE_AUDIO) {
            audio_stream_idx = it comme z32
            continue
        }
    }

    résultat.format_ctx = format_ctx

    saufsi ouvre_composant_flux_vidéo(résultat, video_stream_idx) {
        imprime("Could not find video stream\n")
        retourne faux
    }

    si audio_stream_idx != -1 {
        saufsi ouvre_composant_flux_vidéo(résultat, audio_stream_idx) {
            retourne faux
        }
    }

    codec_ctx := résultat.codec_ctx
    imprime("codec_ctx.pix_fmt %\n", codec_ctx.pix_fmt)

    // initialize SWS context for software scaling
    sws_ctx := sws_getContext(codec_ctx.width,
        codec_ctx.height,
        codec_ctx.pix_fmt,
        codec_ctx.width,
        codec_ctx.height,
        AVPixelFormat.AV_PIX_FMT_RGB24,
        SWS_BILINEAR,
        nul,
        nul,
        nul)

    saufsi sws_ctx {
        imprime("Could not create sws_ctx\n")
        retourne faux
    }

    résultat.sws_ctx = sws_ctx
    retourne vrai
}

ouvre_composant_flux_vidéo :: fonc (flux_vidéo: *FluxVidéo, index_flux: z32) -> bool
{
    format_ctx := flux_vidéo.format_ctx

    si index_flux < 0 || index_flux >= format_ctx.nb_streams comme z32 {
        retourne faux
    }

    paramètres_codec := format_ctx.streams[index_flux].codecpar
    codec := avcodec_find_decoder(paramètres_codec.codec_id)
    saufsi codec {
        imprime("Codec non-supporté : %.\n", paramètres_codec.codec_id)
        retourne faux
    }

    codec_ctx := avcodec_alloc_context3(codec)
    avcodec_parameters_to_context(codec_ctx, paramètres_codec)

    si avcodec_open2(codec_ctx, codec, nul) < 0 {
        imprime("Could not open codec : %.\n", paramètres_codec.codec_id)
        retourne faux
    }

    discr codec_ctx.codec_type {
        AVMEDIA_TYPE_VIDEO {
            flux_vidéo.video_stream_idx = index_flux
            flux_vidéo.codec = codec
            flux_vidéo.codec_ctx = codec_ctx
        }
        AVMEDIA_TYPE_AUDIO {
            flux_vidéo.audio_stream_idx = index_flux
            flux_vidéo.audio_codec_ctx = codec_ctx
            // imprime("sample_rate : %\n", codec_ctx.sample_rate)
            // imprime("channels    : %\n", codec_ctx.channels)
        }
        sinon {
            retourne faux
        }
    }

    retourne vrai
}

lis_une_frame :: fonc (empl flux_vidéo: *FluxVidéo) -> bool
{
    résultat: bool

    alloue_tampon_pour_image(flux_vidéo)

    // Allocate frame and packet
    packet: AVPacket = ---
    av_init_packet(*packet)

    // Read frames from the video stream
    tantque (av_read_frame(format_ctx, *packet) >= 0) {
        si (packet.stream_index == video_stream_idx) && sur_paquet_vidéo {
            si sur_paquet_vidéo(flux_vidéo, *packet) {
                résultat = vrai
                arrête
            }
        }
        sinon si packet.stream_index == audio_stream_idx {
            si sur_paquet_audio {
                sur_paquet_audio(flux_vidéo, *packet)
            }
            sinon {
                av_packet_unref(*packet)
            }
        }
        sinon {
            av_packet_unref(*packet)
        }
    }

    retourne résultat
}

flux_vidéo_sur_paquet_vidéo_défaut :: fonc (flux_vidéo: *FluxVidéo, paquet: *AVPacket) -> bool
{
    empl flux_vidéo

    // Decode video frame
    ret := avcodec_send_packet(codec_ctx, paquet)
    si (ret < 0) {
        imprime("Error sending packet for decoding")
        retourne vrai
    }

    frame := av_frame_alloc()
    diffère av_frame_free(*frame)

    image_reçu := faux

    tantque (ret >= 0) {
        ret = avcodec_receive_frame(codec_ctx, frame)
        si (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) {
            arrête
        }
        sinon si (ret < 0) {
            imprime("Error during decoding")
            arrête
        }
        sinon si ret == 0 {
            image_reçu = vrai
            arrête
        }

        // Print basic frame properties
        // std::cout << "Frame " << codec_ctx->frame_number
        //           << " (type=" << av_get_picture_type_char(frame->pict_type)
        //           << ", size=" << frame->pkt_size
        //           << " bytes) pts " << frame->pts
        //           << " key_frame " << frame->key_frame
        //           << std::endl;
    }

    // Did we get a video frame?
    si image_reçu {
        // imprime("Frame : %\n", codec_ctx.frame_number)

        // Convert the image from its native format to RGB
        _ := sws_scale(sws_ctx, *frame.data[0],
                *frame.linesize[0], 0, codec_ctx.height,
                *frame_rgb.data[0], *frame_rgb.linesize[0])
    }

    av_packet_unref(paquet)
    retourne image_reçu
}
