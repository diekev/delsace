// https://www.email-standards.org/
// https://tools.ietf.org/html/rfc1521#section-3 MIME
// https://tools.ietf.org/html/rfc5321#section-2.3.1 SMTP
// https://www.netmeister.org/blog/email.html // adresses

importe Aléa
importe Alphabet
importe CodecDonnées
importe Fondation
importe GlibC
importe Réseau
importe SysFichier
importe Temps

/* Module d'envoie de courriel.
 *
 * Exemple d'utilisation :
 *
 * config : ConfigurationCourriel
 * config.serveur = "adresse.serveur.domaine"
 * config.utilisateur = "utilisateur@courri.el"
 * config.mot_de_passe = "Mot!DeP#s53"
 *
 * courriel : Courriel
 * diffère { détruit_courriel(*courriel) }
 *
 * courriel.expéditeur = "expéditeur@courri.el"
 * courriel.message = "Le Message"
 *
 * ajoute_destinataire(*courriel, "destinataire@courri.el")
 * ajoute_destinataire_cc(*courriel, "detinataire.cc@courri.el")
 *
 * retourne envoie_courriel(config, courriel)
 */

/*

    Interfaces à considérer :

    - un service client pour envoyer plusieurs courriels (travailler d'abord sur le module TCP)
    - un gestionnaire de message se basant, ou réutilisant des composants du précité service
    - nom expéditeur par défaut
    - type CorpsMessage tenant trace du l'encodage souhaité, et du type de contenu (text/plain, text/html)
    - création d'un texte depuis un texte html (à mettre plutôt dans le module HTML)
    - type PièceJointe tenant du nom, nom de fichier, type de contenu (texte, flux octet, audio, image, vidéo, etc.)
    - (base64) : compression/décompression depuis un flux (peut-être avec une table virtuelle quand nous en aurons une, mais avec des rappels, c'est bien aussi)
    - iCalendar invites

 */

/* Représentation d'une adresse courriel. Contient la chaine originelle, et ses composants de nom et d'hôte. */
AdresseCourriel :: struct {
    chn: chaine
    nom: chaine
    hôte: chaine
}

crée_adresse_courriel :: fonc (chn: chaine) -> AdresseCourriel
{
    pos_arobase := trouve_caractère_depuis_le_début(chn, '@')

    si pos_arobase <= 0 {
        retourne AdresseCourriel()
    }

    courriel : AdresseCourriel = ---
    courriel.chn = chn
    courriel.nom = chn.sous_chaine(0, pos_arobase)
    courriel.hôte = chn.sous_chaine(pos_arobase + 1, chn.taille)
    retourne courriel
}

est_valide :: fonc (courriel: &AdresseCourriel) -> bool
{
    retourne courriel.chn != ""
}

/* Fonction auxilliaire pour parser un courriel pour les FonctionParsages du module Introspection. */
parse_courriel_pour_info_type :: fonc (chn: chaine, tampon: []octet) -> bool
{
    courriel := crée_adresse_courriel(chn)

    saufsi courriel.est_valide() {
        retourne faux
    }

    copie_mem(src = courriel, dst = tampon, taille = tampon.taille)
    retourne vrai
}

// -----------------------------------------------------

génère_adresse_courriel_aléatoire :: fonc (gna: *GNA, alphabet: &Alphabet.Alphabet) -> AdresseCourriel
{
    // À FAIRE: 256 pour la part locale
    // À FAIRE: forward path @domaine1@domaine2:nom_utilisateur@domaine_final
    nom := chaine_aléatoire(gna, alphabet, 1, 64)
    // À FAIRE: domaine aléatoire: domaine valide, IPv4, ou IPv6
    hôte := chaine_aléatoire(gna, alphabet, 1, 64)
    adresse := enchaine(nom, "@", hôte)

    courriel : AdresseCourriel = ---
    courriel.chn = adresse
    courriel.nom = nom
    courriel.hôte = adresse
    retourne courriel
}

rappel_génère_adresse_courriel_aléatoire :: fonc (génératrice: &GénératriceDonnéesAléatoire, valeur: eini)
{
    alphabet := crée_alphabet_ascii_courriel()
    diffère détruit_alphabet(alphabet)

    adresse := génère_adresse_courriel_aléatoire(génératrice.gna, alphabet)

    ptr := mémoire(valeur.pointeur comme **AdresseCourriel)
    mémoire(ptr) = adresse
}

// -----------------------------------------------------

Courriel :: struct {
    expéditeur: AdresseCourriel
    destinataires: []AdresseCourriel
    destinataires_cc: []AdresseCourriel
    destinataires_bcc: []AdresseCourriel
    objet: chaine
    pièces_jointes: []chaine
    messages: []chaine
}

détruit_courriel :: fonc (courriel: &Courriel) -> rien
{
    déloge(courriel.messages)
    déloge(courriel.destinataires)
    déloge(courriel.destinataires_cc)
    déloge(courriel.destinataires_bcc)
}

ajoute_message :: fonc (courriel: &Courriel, message: chaine)
{
    tableau_ajoute(*courriel.messages, message)
}

ajoute_pièce_jointe :: fonc (courriel: &Courriel, pièce: chaine)
{
    tableau_ajoute(*courriel.pièces_jointes, pièce)
}

ajoute_destinataire :: fonc (courriel: &Courriel, destinataire: AdresseCourriel) -> rien
{
    tableau_ajoute(*courriel.destinataires, destinataire)
}

ajoute_destinataire_cc :: fonc (courriel: &Courriel, destinataire: AdresseCourriel) -> rien
{
    tableau_ajoute(*courriel.destinataires_cc, destinataire)
}

ajoute_destinataire_bcc :: fonc (courriel: &Courriel, destinataire: AdresseCourriel) -> rien
{
    tableau_ajoute(*courriel.destinataires_bcc, destinataire)
}

ConfigurationCourriel :: struct {
    serveur : chaine
    port : n16 = 25 // 465 pour ssl
    utilise_ssl := faux
    utilisateur : chaine
    mot_de_passe : chaine
}

envoie_commande_smtp :: fonc (fichier: *Fichier, format: chaine, args: ...eini) -> z32
{
    message := ""
    diffère { si message { déloge(message) } }

    si format {
        message = imprime_chaine(format, ...args)
        chaine_ajoute(*message, '\r')
        chaine_ajoute(*message, '\n')
    }

    taille_écrite := tente fichier.écris(message) piège err {
        retourne 0
    }

    // imprime("requête: %", message)

    si taille_écrite == -1 {
        imprime("impossible d'envoyer la requête !\n")
        retourne 0
    }

    réponse := tente lis_tout(fichier) piège err {
        imprime("impossible de lire la réponse !\n")
        retourne 0
    }

    // imprime("réponse: %\n", réponse)
    diffère { déloge(réponse) }

    si réponse.taille < 3 {
        retourne 0
    }

    status := extrait_nombre_entier(réponse.sous_chaine(0, 3))
    retourne status comme z32
}

// https://tools.ietf.org/html/rfc5322
crée_corps_message :: fonc (courriel: &Courriel) -> chaine
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère { détruit_tampons(*enchaineuse) }

    // À FAIRE: entêtes arbitraires
    // À FAIRE: Date

    ajoute_au_tampon(*enchaineuse, "User-Agent: courriel_kuri\r\n")
    // Date: Tue, 15 Jan 2008 16:02:43 -0500
    //ajoute_au_tampon(@enchaineuse, "Date: ")

    imprime_dans_enchaineuse(*enchaineuse, "From: <%>\r\n", courriel.expéditeur.chn)

    si courriel.destinataires {
        ajoute_au_tampon(*enchaineuse, "To: ")
        virgule := "<"

        pour & courriel.destinataires {
            ajoute_au_tampon(*enchaineuse, virgule)
            ajoute_au_tampon(*enchaineuse, it.chn)
            virgule = ">,<"
        }

        ajoute_au_tampon(*enchaineuse, ">\r\n")
    }

    si courriel.destinataires_cc {
        ajoute_au_tampon(*enchaineuse, "Cc: ")
        virgule := "<"

        pour & courriel.destinataires_cc {
            ajoute_au_tampon(*enchaineuse, virgule)
            ajoute_au_tampon(*enchaineuse, it.chn)
            virgule = ">,<"
        }

        ajoute_au_tampon(*enchaineuse, ">\r\n")
    }

    si courriel.objet {
        imprime_dans_enchaineuse(*enchaineuse, "Subject: %\r\n", courriel.objet)
    }

    séparateur_pièce_jointe := ""
    si courriel.pièces_jointes {
        ajoute_au_tampon(*enchaineuse, "MIME-Version: 1.0\r\n")

        séparateur_pièce_jointe = aléafères_zéros("=PART=SEPARATOR=_0000_0000_0000_0000_0000_0000_=")
        imprime_dans_enchaineuse(*enchaineuse, "Content-Type: multipart/mixed; boundary=\"%\"\r\n", séparateur_pièce_jointe)

        ajoute_au_tampon(*enchaineuse, "\r\nThis is a multipart message in MIME format.\r\n\r\n")
        ajoute_au_tampon(*enchaineuse, "--", séparateur_pièce_jointe, "\r\n")
    }

    séparateur_corps := ""
    si courriel.messages.taille > 1 {
        séparateur_corps = aléafères_zéros("=BODY=SEPARATOR=_0000_0000_0000_0000_0000_0000_=")
        imprime_dans_enchaineuse(*enchaineuse, "Content-Type: multipart/alternative; boundary=\"%\"\r\n", séparateur_corps)
    }

    // Création du corps
    type_mime := "text/plain"

    pour courriel.messages {
        si séparateur_corps {
            ajoute_au_tampon(*enchaineuse, "\r\n")
            ajoute_au_tampon(*enchaineuse, "--", séparateur_corps, "\r\n")
        }

        ajoute_au_tampon(*enchaineuse, "Content-Type: ", type_mime, "; charset=utf-8\r\n")
        ajoute_au_tampon(*enchaineuse, "Content-Transfer-Encoding: 8bit\r\n")
        ajoute_au_tampon(*enchaineuse, "Content-Disposition: inline\r\n\r\n")

        type_mime = "text/html"

        ajoute_au_tampon(*enchaineuse, "\r\n")
        ajoute_au_tampon(*enchaineuse, it)
    }

    si séparateur_corps {
        ajoute_au_tampon(*enchaineuse, "\r\n")
        ajoute_au_tampon(*enchaineuse, "--", séparateur_corps, "--\r\n")
    }

    type_mime = "application/octet-stream"
    nom := "ATTACHMENT"
    nom_fichier := "ATTACHMENT"

    pour courriel.pièces_jointes {
        si séparateur_pièce_jointe {
            ajoute_au_tampon(*enchaineuse, "\r\n")
            ajoute_au_tampon(*enchaineuse, "--", séparateur_pièce_jointe, "\r\n")
        }

        ajoute_au_tampon(*enchaineuse, "Content-Type: ", type_mime, "; ")
        ajoute_au_tampon(*enchaineuse, "Name=\"", nom, "\"\r\n")
        ajoute_au_tampon(*enchaineuse, "Content-Disposition: attachment; filename=\"", nom_fichier, "\"\r\n")
        ajoute_au_tampon(*enchaineuse, "Content-Transfer-Encoding: base64\r\n\r\n")

        contenu_encodé := encode_base64(it)
        ajoute_au_tampon(*enchaineuse, contenu_encodé)
        déloge(contenu_encodé)

        ajoute_au_tampon(*enchaineuse, "\r\n")
    }

    si séparateur_pièce_jointe {
        ajoute_au_tampon(*enchaineuse, "\r\n")
        ajoute_au_tampon(*enchaineuse, "--", séparateur_pièce_jointe, "--\r\n")
    }

    // Fin des données
    ajoute_au_tampon(*enchaineuse, "\r\n.\r\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

ouvre_connexion_serveur :: fonc (config: ConfigurationCourriel) -> FichierOuErreur
{
    fichier := tente ouvre_connexion_serveur(config.serveur, config.port) piège err {
        retourne err
    }

    linger_option := linger(l_onoff = -1, l_linger = 2)
    _ := setsockopt(fichier.desc, SOL_SOCKET, SO_LINGER, *linger_option, taille_de(linger))

    retourne fichier
}

CodeRéussite :: énum {
    Message :: 200
	RéponseCommdeHelp :: 214
    ServeurPrêt :: 220
	FermetureCanalTransmission :: 221
    ActionRequiseComplétée :: 250
    UtilisationNonLocaleDevraProjeté :: 251
    NePeutVérifierUtilisateurMaisDélivreraQuandMême :: 252
}

ErreurServeur :: erreur {
    ClientNeFutPasAuthentifié :: 530
}

// À FAIRE : meilleure type de retour
// À FAIRE : note les erreurs
envoie_courriel :: fonc (config: ConfigurationCourriel, courriel: &Courriel) -> z32
{
    si !courriel.expéditeur.est_valide() {
        retourne 1
    }

    saufsi courriel.destinataires {
        retourne 1
    }

    pour & courriel.destinataires {
        saufsi it.est_valide() {
            retourne 1
        }
    }

    fichier := tente ouvre_connexion_serveur(config) piège err {
        discr err {
            RésolutionHôteImpossible {
                imprime("Impossible de résoudre l'hôte selon le nom !\n")
            }
            CréationPriseImpossible {
                imprime("Impossible de créer une prise !\n")
            }
            ConnexionPriseImpossible {
                imprime("Impossible de se connecter à la prise !\n")
            }
            sinon {
                imprime("Erreur inattendue : %\n", err)
            }
        }

        retourne 1
    }

    diffère {
        _ := tente ferme(*fichier) piège nonatteignable
    }

    // 220 ok
    si envoie_commande_smtp(*fichier, "") == 0 {
        retourne 1
    }

    // 250 ok
    si envoie_commande_smtp(*fichier, "EHLO") == 0 {
        retourne 1
    }

    si envoie_commande_smtp(*fichier, "AUTH LOGIN") == 0 {
        retourne 1
    }

    // réponse : 334 VXNlcm5hbWU6
    nom_utilisateur_base64 := encode_base64(config.utilisateur)
    diffère { déloge(nom_utilisateur_base64) }
    si envoie_commande_smtp(*fichier, "%", nom_utilisateur_base64) == 0 {
        retourne 1
    }

    // réponse : 334 UGFzc3dvcmQ6
    mot_passe_base64 := encode_base64(config.mot_de_passe)
    diffère { déloge(mot_passe_base64) }
    si envoie_commande_smtp(*fichier, "%", mot_passe_base64) == 0 {
        retourne 1
    }
    // 235 2.7.0 Authentication successful

    // 530 5.7.1 Client was not authenticated
    // 250 2.1.0 Ok
    si envoie_commande_smtp(*fichier, "MAIL FROM:<%>", courriel.expéditeur.chn) == 0 {
        retourne 1
    }

    // 530 5.7.1 Client was not authenticated
    // 250 2.1.0 Ok
    pour & courriel.destinataires {
        saufsi it.est_valide() {
            continue;
        }

        si envoie_commande_smtp(*fichier, "RCPT TO:<%>", it.chn) == 0 {
            retourne 1
        }
    }

    pour & courriel.destinataires_cc {
        saufsi it.est_valide() {
            continue;
        }

        si envoie_commande_smtp(*fichier, "RCPT TO:<%>", it.chn) == 0 {
            retourne 1
        }
    }

    pour & courriel.destinataires_bcc {
        saufsi it.est_valide() {
            continue;
        }

        si envoie_commande_smtp(*fichier, "RCPT TO:<%>", it.chn) == 0 {
            retourne 1
        }
    }

    // 503 Bad sequence of commands
    // 354 End data with <CR><LF>.<CR><LF>
    si envoie_commande_smtp(*fichier, "DATA") == 0 {
        retourne 1
    }

    // 530 5.7.1 Client was not authenticated
    // 250 2.0.0 Ok: queued as ...
    message := crée_corps_message(courriel)
    diffère { déloge(message) }
    si envoie_commande_smtp(*fichier, "%", message) == 0 {
        retourne 1
    }

    si envoie_commande_smtp(*fichier, "QUIT") == 0 {
        retourne 1
    }

    retourne 0
}

aléafères_zéros :: fonc (chn: chaine) -> chaine
{
    maintenant := Temps.maintenant()

    gna := crée_gna(maintenant.nanoseconde comme n32)
    diffère { détruit_gna(gna) }

    résultat := copie_chaine(chn)

    pour & résultat {
        si it == '0' {
            it = gna.uniforme('0' comme r32, '9' comme r32) comme z8
        }
    }

    retourne résultat
}
