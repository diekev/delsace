/*

    Module de service HTTP.

    Définie une serveuse pouvant recevoir des requête HTTP.
    La serveuse dérive de ServeuseTCP.
    Si vous voulez utiliser un service se basant sur Apache, utilisez plutôt ServeuseCGI.

    Pour répondre à des requêtes, la serveuse doit connaître les routes possibles, et pour ce faire utilise une Routeuse.

 */

/*

    À FAIRE :
    - paramétrise les logs
    - gestion des fichiers statiques

 */
importe CodecDonnées
importe ConnexionTCP
importe Fondation
importe Internet
importe Numérique
importe Réseau
importe ServeuseTCP
importe SysFichier
importe Temps

ÉtatParsage :: énum {
    NON_COMMENCÉ
    MÉTHODE_OBTENUE
    REQUÊTE_OBTENUE
    VERSION_OBTENUE
    ENTÊTE_EN_COURS
    MESSAGE_TERMINÉ
    CORPS_EN_COURS // voir si content-length, ou chunked
    PARSAGE_TERMINÉ
    ERREUR
}

PositionChaine :: struct {
    début: z32
    fin: z32
}

DonnéesEntête :: struct {
    position_nom: PositionChaine
    position_valeur: PositionChaine
}

// À FAIRE : enregistre proprement les positions, nous ne pouvons utiliser des sous chaines quand une requête n'est pas encore terminée !
DonnéesMessage :: struct {
    position_méthode: PositionChaine
    position_requête: PositionChaine
    position_version: PositionChaine

    positions_entêtes: []DonnéesEntête

    position_contenu: PositionChaine
}

ajoute_entête :: fonc (données_message: &DonnéesMessage, nom: PositionChaine, valeur: PositionChaine)
{
    tableau_ajoute(*données_message.positions_entêtes, DonnéesEntête(nom, valeur))
}

/* Parseuse pour des requêtes HTTP, cette parseuse est désignée pour pouvoir accumuler les données
 * afin de prendre en compte les requêtes arrivant partiellement, soit par le type de contenu est
 * « chunked », ou encore parce que nous sommes appelés illégitimement par OpenSSL ou un thread qui
 * se réveille, ou encore car nous subissons une attaque « SlowLoris ».
 */
ParseuseHTTP :: struct {
    message_en_cours: MessageClienteHTTP
    données_message: DonnéesMessage

    données: chaine

    état_parsage: ÉtatParsage

    parseuse_chaine: ParseuseChaine

    // pour le parsage du contenu
    taille_contenu : z32
}

ajourne_données :: fonc (parseuse: *ParseuseHTTP, données: chaine)
{
    saufsi données {
        retourne
    }

    chaine_ajoute(*parseuse.données, données)

    parseuse.parseuse_chaine.chn = parseuse.données

    parse_données(parseuse)
}

parse_données :: fonc (parseuse: *ParseuseHTTP)
{
    si parseuse.état_parsage == ÉtatParsage.NON_COMMENCÉ {
        début := parseuse.parseuse_chaine.curseur

        // taille max d'une commande HTTP + 1
        si parseuse.données.taille < 8 {
            retourne
        }

        méthodes : []chaine = ["GET", "POST", "PUT", "DELETE", "HEAD", "CONNECT", "OPTIONS", "TRACE", "PATCH"]

        index := apparie_un_de(*parseuse.parseuse_chaine, ...méthodes)

        si index == -1 {
            parseuse.état_parsage = ÉtatParsage.ERREUR
            retourne
        }

        méthode := méthodes[index]

        positionne(*parseuse.parseuse_chaine, méthode.taille)

        parseuse.état_parsage = ÉtatParsage.MÉTHODE_OBTENUE
        parseuse.données_message.position_méthode = PositionChaine(début, début + méthode.taille comme z32)
    }

    si parseuse.état_parsage == ÉtatParsage.MÉTHODE_OBTENUE {
        si !consomme(*parseuse.parseuse_chaine, ' ') {
            parseuse.état_parsage = ÉtatParsage.ERREUR
            retourne
        }

        début := parseuse.parseuse_chaine.curseur

        pos_prochain_espace := trouve_prochain(*parseuse.parseuse_chaine, ' ')

        si pos_prochain_espace <= 0 {
            // recule pour revenir sur l'espace avant le chemin
            parseuse.parseuse_chaine.curseur -= 1
            retourne
        }

        requête := sous_chaine_jusque_index(*parseuse.parseuse_chaine, pos_prochain_espace)
        positionne(*parseuse.parseuse_chaine, pos_prochain_espace + 1)

        parseuse.état_parsage = ÉtatParsage.REQUÊTE_OBTENUE
        parseuse.données_message.position_requête = PositionChaine(début, début + requête.taille comme z32)
    }

    si parseuse.état_parsage == ÉtatParsage.REQUÊTE_OBTENUE {
        début := parseuse.parseuse_chaine.curseur
        pos_nouvelle_ligne := trouve_prochain(*parseuse.parseuse_chaine, "\r\n")

        si pos_nouvelle_ligne <= 0 {
            retourne
        }

        version := sous_chaine_jusque_index(*parseuse.parseuse_chaine, pos_nouvelle_ligne)
        positionne(*parseuse.parseuse_chaine, pos_nouvelle_ligne + 2)

        parseuse.état_parsage = ÉtatParsage.VERSION_OBTENUE
        parseuse.données_message.position_version = PositionChaine(début, début + version.taille comme z32)
    }

    si parseuse.état_parsage == ÉtatParsage.VERSION_OBTENUE {
        parseuse.état_parsage = ÉtatParsage.ENTÊTE_EN_COURS
    }

    si parseuse.état_parsage == ÉtatParsage.ENTÊTE_EN_COURS {
        tantque !fini(*parseuse.parseuse_chaine) && parseuse.état_parsage != ÉtatParsage.MESSAGE_TERMINÉ {
            // parse une entête
            pos_courante := parseuse.parseuse_chaine.curseur
            pos_nouvelle_ligne := trouve_prochain(*parseuse.parseuse_chaine, "\r\n")

            // une ligne vide indique la fin des entêtes
            si pos_nouvelle_ligne == parseuse.parseuse_chaine.curseur {
                avance(*parseuse.parseuse_chaine, 2)
                parseuse.état_parsage = ÉtatParsage.MESSAGE_TERMINÉ
            }
            sinon {
                pos_double_points := trouve_prochain(*parseuse.parseuse_chaine, ':')

                si pos_double_points <= 0 {
                    positionne(*parseuse.parseuse_chaine, pos_courante)
                    retourne
                }

                nom := sous_chaine_jusque_index(*parseuse.parseuse_chaine, pos_double_points)

                positionne(*parseuse.parseuse_chaine, pos_double_points + 1)

                saute_espace_blanc(*parseuse.parseuse_chaine)

                début_valeur := parseuse.parseuse_chaine.curseur

                // valeur
                si pos_nouvelle_ligne <= 0 {
                    positionne(*parseuse.parseuse_chaine, pos_courante)
                    retourne
                }

                valeur := sous_chaine_jusque_index(*parseuse.parseuse_chaine, pos_nouvelle_ligne)

                positionne(*parseuse.parseuse_chaine, pos_nouvelle_ligne + 2)

                position_nom := PositionChaine(pos_courante, pos_courante + nom.taille comme z32)
                position_valeur := PositionChaine(début_valeur, début_valeur + valeur.taille comme z32)

                parseuse.données_message.ajoute_entête(position_nom, position_valeur)
            }
        }
    }

    si parseuse.état_parsage == ÉtatParsage.MESSAGE_TERMINÉ {
        message := parseuse.prépare_message_pour_parsage_contenu()

        si possède_entête(message, "Content-Length") {
            chn_taille_contenu := entête(message, "Content-Length").valeur

            taille_contenu := tente extrait_z32(chn_taille_contenu) piège err {
                parseuse.état_parsage = ÉtatParsage.ERREUR
                retourne
            }

            parseuse.taille_contenu = taille_contenu
            parseuse.état_parsage = ÉtatParsage.CORPS_EN_COURS
            parseuse.données_message.position_contenu.début = parseuse.parseuse_chaine.curseur
            parseuse.données_message.position_contenu.fin = parseuse.parseuse_chaine.curseur
        }
        sinon {
            parseuse.état_parsage = ÉtatParsage.PARSAGE_TERMINÉ
        }
    }

    si parseuse.état_parsage == ÉtatParsage.CORPS_EN_COURS {
        // vérifie si chunked, content-length
        parseuse.données_message.position_contenu.fin = parseuse.parseuse_chaine.chn.taille comme z32

        si taille_position(parseuse.données_message.position_contenu) >= parseuse.taille_contenu {
            // tronque le contenu
            // À FAIRE : erreur ?
            parseuse.données_message.position_contenu.fin = parseuse.données_message.position_contenu.début + parseuse.taille_contenu
            parseuse.état_parsage = ÉtatParsage.PARSAGE_TERMINÉ
        }
    }
}

message_est_erroné :: fonc (parseuse: *ParseuseHTTP) -> bool
{
    retourne parseuse.état_parsage == ÉtatParsage.ERREUR
}

message_prêt_pour_finalisation :: fonc (parseuse: *ParseuseHTTP) -> bool
{
    retourne parseuse.état_parsage == ÉtatParsage.PARSAGE_TERMINÉ
}

taille_position :: fonc (position: PositionChaine) -> z32
{
    retourne position.fin - position.début
}

sous_chaine :: fonc (chn: chaine, position: PositionChaine) -> chaine
{
    résultat : chaine = ---
    résultat.pointeur = chn.pointeur + position.début
    résultat.taille = position.fin - position.début
    retourne résultat
}

prépare_message_pour_parsage_contenu :: fonc (parseuse: *ParseuseHTTP) -> MessageClienteHTTP
{
    parseuse.message_en_cours.méthode = sous_chaine(parseuse.données, parseuse.données_message.position_méthode)
    parseuse.message_en_cours.requête = sous_chaine(parseuse.données, parseuse.données_message.position_requête)
    parseuse.message_en_cours.version = sous_chaine(parseuse.données, parseuse.données_message.position_version)

    pour parseuse.données_message.positions_entêtes {
        nom := sous_chaine(parseuse.données, it.position_nom)
        valeur := sous_chaine(parseuse.données, it.position_valeur)

        ajoute_entête(*parseuse.message_en_cours, nom, valeur)
    }

    résoud_échappement_url_localement(parseuse.message_en_cours.requête)
    retourne parseuse.message_en_cours
}

finalise_message :: fonc (parseuse: *ParseuseHTTP) -> MessageClienteHTTP
{
    parseuse.message_en_cours.contenu = sous_chaine(parseuse.données, parseuse.données_message.position_contenu)
    retourne parseuse.message_en_cours
}

réinitialise :: fonc (parseuse: *ParseuseHTTP)
{
    déloge(parseuse.données)
    déloge(parseuse.données_message.positions_entêtes)
    init_de(ParseuseHTTP)(parseuse)
}

/*
    Pour mapper plusieurs port localhost via un proxy
    https://stackoverflow.com/questions/10729034/can-i-map-a-hostname-and-a-port-with-etc-hosts
    https://github.com/cristianoliveira/ergo
    https://askubuntu.com/questions/935859/hosts-file-with-port
*/

TypeRappelRoute :: fonc(*Prise, &MessageClienteHTTP)(MessageServeuseHTTP)

apparie_uri :: fonc (chemin_base: chaine, chemin_donnée: chaine) -> bool
{
    retourne chemin_base == chemin_donnée
}

Route :: struct {
    chemin: chaine
    rappel: TypeRappelRoute
}

NouvelleRouteuse :: struct {
    routes_get: []Route
    routes_post: []Route
}

apparie_route :: fonc (routeuse: &NouvelleRouteuse, chemin: chaine, méthode: chaine) -> TypeRappelRoute
{
    si méthode == "GET" {
        pour routeuse.routes_get {
            si apparie_uri(it.chemin, chemin) {
                retourne it.rappel
            }
        }

        retourne nul
    }

    si méthode == "POST" {
        pour routeuse.routes_post {
            si apparie_uri(it.chemin, chemin) {
                retourne it.rappel
            }
        }

        retourne nul
    }

    retourne nul
}

ServeuseHTTP :: struct {
    empl base: ServeuseTCP.ServeuseTCP

    nom: chaine = "test"
    routeuse: NouvelleRouteuse
}

crée_serveuse_http :: fonc (adresse_ip: AdresseIPv4, port: n16, connexions_max: z32, $T: type_de_données, $TypeDonnéesPrise: type_de_données) -> *ServeuseHTTP
{
    // À FAIRE: déduplique avec ServeuseTCP, requiers d'avoir une manière de déterminer le bon type (ServeuseTCP vs. ServeuseHTTP)
    serveuse := loge(ServeuseHTTP)

    boucle_évènements := crée_boucle()
    ctx := crée_contexte_vide(boucle_évènements, T)

    ctx.mute_serveuse(serveuse)

    prise := crée_prise_pour_écoute(ctx, adresse_ip, port, connexions_max, TypeDonnéesPrise)

    // À FAIRE erreur
    si !prise {
        détruit_serveuse(serveuse)
        retourne nul
    }

    serveuse.boucle_évènements = boucle_évènements
    serveuse.ctx = ctx
    serveuse.adresse_ip = adresse_ip
    serveuse.port = port

    serveuse.rappel_quand_ouverture(quand_ouverture)
    serveuse.rappel_quand_lecture(quand_lecture)
    serveuse.rappel_quand_fermeture(quand_fermeture)

    retourne serveuse
}

lance :: fonc (serveuse: *ServeuseHTTP)
{
    serveuse.boucle_évènements.lance()
}

détruit_serveuse :: fonc (serveuse: *ServeuseHTTP)
{
    détruit_boucle(serveuse.boucle_évènements)
    détruit_contexte(serveuse.ctx)
    déloge(serveuse)
}

ajoute_route_get :: fonc (serveuse: *ServeuseHTTP, chemin: chaine, rappel: TypeRappelRoute)
{
    route: Route = ---
    route.chemin = chemin
    route.rappel = rappel

    tableau_ajoute(*serveuse.routeuse.routes_get, route)
}

ajoute_route_post :: fonc (serveuse: *ServeuseHTTP, chemin: chaine, rappel: TypeRappelRoute)
{
    route: Route = ---
    route.chemin = chemin
    route.rappel = rappel

    tableau_ajoute(*serveuse.routeuse.routes_post, route)
}

quand_ouverture :: fonc (prise: *Prise)
{
    parseuse := loge(ParseuseHTTP)
    prise.mute_données_serveuse(parseuse)

    quand_lecture(prise)
}

quand_lecture :: fonc (prise: *Prise)
{
    contenu := tente lis_tout(*prise.fichier) piège err {
        retourne
    }

    si !contenu {
        // délai en cas de non-écriture
        prise.mute_délai(10)
        retourne
    }

    // imprime("reçu :\n%\n", contenu)

    parseuse := prise.accède_données_serveuse(ParseuseHTTP)
    parseuse.ajourne_données(contenu)

    si parseuse.message_est_erroné() {
        prise.ferme()
        retourne
    }

    si !parseuse.message_prêt_pour_finalisation() {
        // délai en cas de données partielles
        prise.mute_délai(10)
        retourne
    }

    message := parseuse.finalise_message()

    diffère parseuse.réinitialise()

    serveuse := prise.contexte_.accède_serveuse(ServeuseHTTP)
    rappel_route := apparie_route(serveuse.routeuse, message.requête, message.méthode)

    saufsi rappel_route {
        _ := écris(*prise.fichier, "HTTP/1.1 404 NOT FOUND\r\n")
        _ = écris(*prise.fichier, "Server: test\r\n")
        _ = écris(*prise.fichier, "Connection: close\r\n")
        _ = écris(*prise.fichier, "\r\n")
        prise.ferme()
        retourne
    }

    // si serveuse.intergiciel {
    //     serveuse.intergiciel(prise, message)
    //     // ...
    // }

    réponse := rappel_route(prise, message)

    écris_réponse(prise, réponse)
    // délai en cas de non-lecture
    prise.mute_délai(10)

    // À FAIRE : définis quand fermer la prise
}

quand_fermeture :: fonc (prise: *Prise)
{
    imprime("fermeture de la prise...\n")
    parseuse := prise.accède_données_serveuse(ParseuseHTTP)
    parseuse.réinitialise()
    déloge(parseuse)
}

// Entête: Cache-Control
// pour supprimer un cache, ajouter max-age=0
// https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Cache-Control
PolitiqueDeCache :: énum {
    Revalide // no-cache
    ClientsSeulement // private
    NeJamaisCacher // no-store
}

écris_réponse :: fonc (prise: *Prise, message: &MessageServeuseHTTP)
{
    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    serveuse := prise.contexte_.accède_serveuse(ServeuseHTTP)

    ajoute_au_tampon(*enchaineuse, message.version, " ", chaine_code_état_http(message.code_état), "\r\n")
    ajoute_au_tampon(*enchaineuse, "Server: ", serveuse.nom, "\r\n")

    date := hui_système()
    date_http := date_http_depuis_date(date)

    ajoute_au_tampon(*enchaineuse, "Date: ")
    imprime_date_http(*enchaineuse, date_http)
    ajoute_au_tampon(*enchaineuse, "\r\n")

    pour message.entêtes {
        ajoute_au_tampon(*enchaineuse, it.nom, ": ", it.valeur, "\r\n")
    }

    // Évite le traçage FLoC de Google
    si !possède_entête(message, "Permissions-Policy") {
        ajoute_au_tampon(*enchaineuse, "Permissions-Policy: interest-cohort=()\r\n")
    }

    // Évite le clickjacking
    // À FAIRE: https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Content-Security-Policy
    // https://www.netsparker.com/blog/web-security/clickjacking-attack-on-facebook-how-tiny-attribute-save-corporation/
    si !possède_entête(message, "X-Frame-Options") {
        ajoute_au_tampon(*enchaineuse, "X-Frame-Options: deny\r\n")
    }

    si message.contenu {
        ajoute_au_tampon(*enchaineuse, "Content-Length: ", message.contenu.taille, "\r\n")
    }

    ajoute_au_tampon(*enchaineuse, "\r\n")

    si message.contenu {
        ajoute_au_tampon(*enchaineuse, message.contenu)
    }

    _ := copie_enchaineuse_fichier(*enchaineuse, *prise.fichier)
}

chaine_pour_aujourdhui :: fonc (enchaineuse : *Enchaineuse) -> rien
{
    date := hui_système()

    ajoute_au_tampon(enchaineuse, chaine_jour_pour_tm(date.jour_semaine), ", ")

    si date.jour < 10 {
        ajoute_au_tampon(enchaineuse, '0')
    }

    ajoute_au_tampon(enchaineuse, date.jour, " ", chaine_mois_pour_tm(date.mois), " ", date.année)

    ajoute_au_tampon(enchaineuse, " ")

    heure := date.heure

    si heure < 10 {
        ajoute_au_tampon(enchaineuse, '0')
    }

    ajoute_au_tampon(enchaineuse, heure, ":")

    si date.minute < 10 {
        ajoute_au_tampon(enchaineuse, '0')
    }

    ajoute_au_tampon(enchaineuse, date.minute, ":")

    si date.seconde < 10 {
        ajoute_au_tampon(enchaineuse, '0')
    }

    ajoute_au_tampon(enchaineuse, date.seconde)

    ajoute_au_tampon(enchaineuse, " GMT")
}
