importe ConnexionTCP
importe Fondation
importe Réseau

TypeRappelRoute :: fonc(*Prise, &MessageClienteHTTP)(MessageServeuseHTTP)

DonnéesAppelRoute :: struct {
    rappel: TypeRappelRoute
    données: []DonnéesAppariement
}

Route :: struct {
    chemin: chaine
    rappel: TypeRappelRoute

    règles_routage: []RègleRoutage

    priorité : z32
}

NouvelleRouteuse :: struct {
    routes_get: []Route
    routes_post: []Route
}

ajoute_route :: fonc (routes: *[]Route, chemin: chaine, rappel: TypeRappelRoute) -> rien
{
    route : Route = ---
    route.chemin = chemin
    route.rappel = rappel

    route.règles_routage = tente parse_règles(chemin) piège err {
        retourne
    }

    route.priorité = 0
    pour route.règles_routage {
        si it.action != ActionRègleRoutage.ApparieChaineLittérale {
            route.priorité += 1
        }
    }

    tableau_ajoute(routes, route)
}

détruit_routeuse :: fonc (routeuse: &NouvelleRouteuse) -> rien
{
    pour & routeuse.routes_get {
        déloge(it.règles_routage)
    }

    pour & routeuse.routes_post {
        déloge(it.règles_routage)
    }

    déloge(routeuse.routes_get)
    déloge(routeuse.routes_post)
}

apparie_route :: fonc (routeuse: &NouvelleRouteuse, chemin: chaine, méthode: chaine) -> DonnéesAppelRoute
{
    si méthode == "GET" {
        retourne apparie_route(routeuse.routes_get, chemin)
    }

    si méthode == "POST" {
        retourne apparie_route(routeuse.routes_post, chemin)
    }

    retourne DonnéesAppelRoute()
}

// --------------------------------
// #portée_fichier

apparie_route :: fonc (routes: []Route, chemin: chaine) -> DonnéesAppelRoute
{
    résultat : DonnéesAppelRoute
    priorité := 1000

    pour routes {
        données := tente apparie_règles_et_route(it.règles_routage, chemin) piège err {
            continue
        }

        si it.priorité < priorité {
            priorité = it.priorité
            résultat.rappel = it.rappel
            résultat.données = données
        }
    }

    retourne résultat
}

divise_url :: fonc (ligne: chaine) -> []chaine
{
    taille_mot : z64 = 0
	début_mot : z64 = 0
    mots : []chaine

    premier_slash := vrai

    pour c, i dans ligne {
	    si c == '/' {
            si premier_slash {
                premier_slash = faux

                mot := ligne.sous_chaine(0, 1)
                tableau_ajoute(*mots, mot)

		    	début_mot = i + 1
			    taille_mot = 0
                continue
            }

			mot := ligne.sous_chaine(début_mot, début_mot + taille_mot)
            tableau_ajoute(*mots, mot)

			début_mot = i + 1
			taille_mot = 0
			continue
		}

		taille_mot += 1
	}

    si taille_mot != 0 {
		mot := ligne.sous_chaine(début_mot, début_mot + taille_mot)

        si mot {
            tableau_ajoute(*mots, mot)
        }
	}

    retourne mots
}

// Règles pour apparier les routes.

ActionRègleRoutage :: énum {
    Invalide
    ApparieChaineLittérale
    ApparieChaine
    ApparieNombreEntier
}

RègleRoutage :: struct {
    action: ActionRègleRoutage
    chn: chaine
    nom_données: chaine
}

ErreurParsage :: erreur {
    RègleDénuéeDeNom
    TypeActionInconnue
    NomRègleRedéfini
    ChevronFermantManquant
}

ErreurOuRèglesRoutage :: union {
    e: ErreurParsage
    r: []RègleRoutage
}

parse_règles :: fonc (route: chaine) -> ErreurOuRèglesRoutage
{
    éléments := divise_url(route)
    diffère { déloge(éléments) }

    résultat : []RègleRoutage

    pour éléments {
        règle : RègleRoutage

        si it[0] == '<' {
            pos_double_points := trouve_caractère_depuis_le_début(it, ':')

            si pos_double_points == -1 {
                déloge(résultat)
                retourne ErreurParsage.RègleDénuéeDeNom
            }

            si it[it.taille - 1] != '>' {
                déloge(résultat)
                retourne ErreurParsage.ChevronFermantManquant
            }

            nom_données := it.sous_chaine(1, pos_double_points)
            type_action := it.sous_chaine(pos_double_points + 1, it.taille - 1)

            si type_action == "entier" {
                règle.action = ActionRègleRoutage.ApparieNombreEntier
            }
            sinon si type_action == "chaine" {
                règle.action = ActionRègleRoutage.ApparieChaine
            }
            sinon {
                déloge(résultat)
                retourne ErreurParsage.TypeActionInconnue
            }

            pour r dans résultat {
                si r.nom_données == nom_données {
                    déloge(résultat)
                    retourne ErreurParsage.NomRègleRedéfini
                }
            }

            règle.nom_données = nom_données
        }
        sinon {
            // ceci est également utilisé pour la racine "/"
            règle.action = ActionRègleRoutage.ApparieChaineLittérale
            règle.chn = it
        }

        tableau_ajoute(*résultat, règle)
    }

    retourne résultat
}

est_seulement_nombre :: fonc (chn: chaine) -> bool
{
    pour chn {
        si !est_nombre_décimal(it) {
            retourne faux
        }
    }

    retourne vrai
}

ErreurAppariement :: erreur {
    RègleInvalide
    ÉlémentDoitÊtreUnNombre
    ÉlémentDoitÊtreUneChaine
    RègleEtRouteOntTaillesDifférentes
}

DonnéesAppariement :: struct {
    nom: chaine
    données: chaine
}

DonnéesRouteOuErreur :: union {
    e: ErreurAppariement
    d: []DonnéesAppariement
}

apparie_règles_et_route :: fonc (règles: []RègleRoutage, route: chaine) -> DonnéesRouteOuErreur
{
    éléments := divise_url(route)
    diffère { déloge(éléments) }

    si règles.taille != éléments.taille {
        retourne ErreurAppariement.RègleEtRouteOntTaillesDifférentes
    }

    résultat : []DonnéesAppariement

    pour éléments {
        règle := règles[index_it]

        discr règle.action {
            Invalide {
                déloge(résultat)
                retourne ErreurAppariement.RègleInvalide
            }
            ApparieChaine {
                // RÀF comme vérification, nous pourrions avoir une fonction de rappel
                données : DonnéesAppariement
                données.nom = règle.nom_données
                données.données = it

                tableau_ajoute(*résultat, données)
            }
            ApparieChaineLittérale {
                si it != règle.chn {
                    déloge(résultat)
                    retourne ErreurAppariement.ÉlémentDoitÊtreUneChaine
                }

                données : DonnéesAppariement
                données.nom = règle.nom_données
                données.données = it

                tableau_ajoute(*résultat, données)
            }
            ApparieNombreEntier {
                si !est_seulement_nombre(it) {
                    déloge(résultat)
                    retourne ErreurAppariement.ÉlémentDoitÊtreUnNombre
                }

                données : DonnéesAppariement
                données.nom = règle.nom_données
                données.données = it

                tableau_ajoute(*résultat, données)
            }
        }
    }

    retourne résultat
}
