// Encodage/Décodage de données dans certaines bases (64 seulement pour l'instant)

importe Fondation

table_défaut :: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
table_url :: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"

est_base64_url :: fonc(c : z8) -> bool
{
    retourne ('A' <= c <= 'Z') || ('a' <= c <= 'z') || ('0' <= c <= '9') || (c == '-') || (c == '_')
}

est_base64_url :: fonc (chn: chaine) -> bool
{
    saufsi chn {
        retourne faux
    }

    pour chn {
        saufsi est_base64_url(it) {
            retourne faux
        }
    }

    retourne vrai
}

est_base64 :: fonc(c : z8) -> bool
{
    retourne ('A' <= c <= 'Z') || ('a' <= c <= 'z') || ('0' <= c <= '9') || (c == '+') || (c == '/')
}

est_base64 :: fonc (chn: chaine) -> bool
{
    saufsi chn {
        retourne faux
    }

    pour chn {
        saufsi est_base64(it) {
            retourne faux
        }
    }

    retourne vrai
}

//#######################################

encode_base64_impl :: fonc(chn : chaine, table : chaine) -> chaine
{
	i := 0
	char_array_3 : [3]n8
	char_array_4 : [4]n8

    enchaineuse : Enchaineuse
	initialise_enchaineuse(*enchaineuse)
    diffère { détruit_tampons(*enchaineuse) }

    longueur := chn.taille

    pour c dans chn {
		char_array_3[i] = c comme n8

        i += 1

		si i == 3 {
			char_array_4[0] = (char_array_3[0] & 0xfc) >> 2 comme n8
			char_array_4[1] = ((char_array_3[0] & 0x03) << 4) | ((char_array_3[1] & 0xf0) >> 4)
			char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) | ((char_array_3[2] & 0xc0) >> 6)
			char_array_4[3] = char_array_3[2] & 0x3f comme n8

            pour j dans 0 ... 3 {
                ajoute_au_tampon(*enchaineuse, table[char_array_4[j]])
            }

			i = 0
		}
	}

	si i != 0 {
        pour j dans i ... 2 {
			char_array_3[j] = '\0' comme n8
        }

		char_array_4[0] = (char_array_3[0] & 0xfc) >> 2
		char_array_4[1] = ((char_array_3[0] & 0x03) << 4) | ((char_array_3[1] & 0xf0) >> 4)
		char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) | ((char_array_3[2] & 0xc0) >> 6)
		char_array_4[3] = char_array_3[2] & 0x3f

        pour j dans 0 ... i {
            ajoute_au_tampon(*enchaineuse, table[char_array_4[j]])
        }

        tantque i < 3 {
            ajoute_au_tampon(*enchaineuse, '=')
            i += 1
        }
	}

	retourne chaine_depuis_enchaineuse(*enchaineuse)
}

encode_base64 :: fonc(chn: chaine) -> chaine
{
	retourne encode_base64_impl(chn, table_défaut)
}

encode_base64_pour_url :: fonc(chn: chaine) -> chaine
{
	retourne encode_base64_impl(chn, table_url)
}

//#######################################

// implémentation tirée de https://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64
décode_base64 :: fonc(chn : chaine) -> chaine
{
    enchaineuse : Enchaineuse
	initialise_enchaineuse(*enchaineuse)
    diffère { détruit_tampons(*enchaineuse) }

    temp := 0
    curseur := chn.pointeur
    fin := chn.pointeur + chn.taille

    tantque curseur < fin {
        pour 0 ... 3 {
            temp <<= 6
            caractère := mémoire(curseur)

            si caractère >= 'A' && caractère <= 'Z' {
                temp |= caractère - 0x41
            }
            sinon si caractère >= 'a' && caractère <= 'z' {
                temp |= caractère - 0x47
            }
            sinon si caractère >= '0' && caractère <= '9' {
                temp |= caractère + 0x04
            }
            sinon si caractère == '+' || caractère == '-' {
                temp |= 0x3E
            }
            sinon si caractère == '/' || caractère == '_' {
                temp |= 0x3F
            }
            sinon si caractère == '=' {
                reste := (fin - curseur)

                si reste == 1 {
                    ajoute_au_tampon(*enchaineuse, ((temp >> 16) & 0xff) comme z8)
                    ajoute_au_tampon(*enchaineuse, ((temp >>  8) & 0xff) comme z8)
                }
                sinon si reste == 2 {
                    ajoute_au_tampon(*enchaineuse, ((temp >> 10) & 0xff) comme z8)
                }
                sinon {
                    // @erreur
                }

	            retourne chaine_depuis_enchaineuse(*enchaineuse)
            }
            sinon {
                // @erreur
            }

            curseur += 1
        }

        ajoute_au_tampon(*enchaineuse, ((temp >> 16) & 0xff) comme z8)
        ajoute_au_tampon(*enchaineuse, ((temp >>  8) & 0xff) comme z8)
        ajoute_au_tampon(*enchaineuse, ((temp      ) & 0xff) comme z8)
    }

	retourne chaine_depuis_enchaineuse(*enchaineuse)
}

CodecBase64 :: struct {
    encode: fonc (chaine)(chaine)
    décode: fonc (chaine)(chaine)
}

crée_codec_base64 :: fonc () -> CodecBase64
{
    codec : CodecBase64 = ---
    codec.encode = encode_base64
    codec.décode = décode_base64
    retourne codec
}

crée_codec_base64_url :: fonc () -> CodecBase64
{
    codec : CodecBase64 = ---
    codec.encode = encode_base64_pour_url
    codec.décode = décode_base64
    retourne codec
}

// -------------------------------------------------------------------

est_caractère_réservé_url :: fonc (c: z8) -> bool
{
    chn :: "&$+,/:;=?@"
    pour chn {
        si it == c {
            retourne vrai
        }
    }

    retourne faux
}

est_caractère_nonsûr_url :: fonc (c: z8) -> bool
{
    chn :: " \"<>#%{}|\\^~[]`"
    pour chn {
        si it == c {
            retourne vrai
        }
    }

    retourne faux
}

caractères_hex_minuscules :: "0123456789abcdef"
caractères_hex_majuscules :: "0123456789ABCDEF"

encode_format_url :: fonc (texte: chaine) -> chaine
{
    résultat : chaine


    pour texte {
        si est_caractère_réservé_url(it) || est_caractère_nonsûr_url(it) {
            chaine_ajoute(*résultat, '%')
            chaine_ajoute(*résultat, caractères_hex_minuscules[((it comme z32) / 16)])
            chaine_ajoute(*résultat, caractères_hex_minuscules[((it comme z32) % 16)])
        }
        sinon {
            chaine_ajoute(*résultat, it)
        }
    }

    retourne résultat
}

encode_format_url :: fonc (enchaineuse: *Enchaineuse, texte: chaine)
{
    //caractères_réservés := "\r\n !#$&'()*+,/:;=?@[]"

    caractères_non_réservés :: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"


    pour texte {
        si it == ' ' {
            ajoute_au_tampon(enchaineuse, "+")
        }
        sinon {
            pour c dans caractères_non_réservés {
                si c == it {
                    ajoute_au_tampon(enchaineuse, it)
                    arrête
                }
            }
            sansarrêt {
                a := (it comme n8 >> 4) & 0xff
                // À FAIRE(langage) : n8 & 0xff donne des valeurs étranges
                b := (it comme n8) % 16
                // À FAIRE(enchaineuse, langage) : type pour les caractères
                ajoute_au_tampon(enchaineuse, "%")
                ajoute_au_tampon(enchaineuse, caractères_hex_majuscules[a])
                ajoute_au_tampon(enchaineuse, caractères_hex_majuscules[b])
            }
        }
    }
}

résoud_échappement_url :: fonc (chn: chaine) -> chaine
{
    nchn : chaine

    i := 0

    tantque i < chn.taille {
        si chn[i] == '%' {
            i += 1

            si i + 2 >= chn.taille {
                arrête
            }

            c := chn[i]

            v : z8

            si 'a' <= c <= 'f' {
                v = (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v = (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v = (c - '0')
            }

            i += 1
            c = chn[i]

            v *= 16

            si 'a' <= c <= 'f' {
                v += (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v += (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v += (c - '0')
            }

            chaine_ajoute(*nchn, v)
            i += 1
        }
        sinon {
            chaine_ajoute(*nchn, chn[i])
            i += 1
        }
    }

    retourne nchn
}

résoud_échappement_url_localement :: fonc (chn: &chaine)
{
    index_d_insertion := 0
    index_courant := 0

    tantque index_courant < chn.taille {
        si chn[index_courant] == '%' {
            index_courant += 1

            si index_courant + 1 >= chn.taille {
                arrête
            }

            c := chn[index_courant]

            v : z8

            si 'a' <= c <= 'f' {
                v = (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v = (c - 'A') + 10
            }
            sinon si '0' <= c <= '9' {
                v = (c - '0')
            }

            index_courant += 1
            c = chn[index_courant]

            v *= 16

            si 'a' <= c <= 'f' {
                v += (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v += (c - 'A') + 10
            }
            sinon si '0' <= c <= '9' {
                v += (c - '0')
            }

            chn[index_d_insertion] = v
        }
        // Google utilise des + pour les espaces, à voir si c'est standard.
        sinon si chn[index_courant] == '+' {
            chn[index_d_insertion] = ' '
        }
        sinon {
            chn[index_d_insertion] = chn[index_courant]
        }

        index_courant += 1
        index_d_insertion += 1
    }

    chn.taille = index_d_insertion
}

// -------------------------------------------------------------------
// Encodage de données séquentielles par différence (delta).
// https://fr.wikipedia.org/wiki/Codage_diff%C3%A9rentiel

encode_différence :: fonc (données: []$T)
{
    précédent : T

    pour & données {
        temp := précédent
        précédent = it

        it -= temp
    }
}

décode_différence :: fonc (données: []$T)
{
    précédent : T

    pour & données {
        it += précédent
        précédent = it
    }
}

// -------------------------------------------------------------------

encode_hexadécimal :: fonc (entrée: []octet) -> chaine
{
    résultat : chaine

    pour entrée {
        a := (it >> 4) & 0xf
        b := it & 0xf

        chaine_ajoute(*résultat, caractères_hex_minuscules[a])
        chaine_ajoute(*résultat, caractères_hex_minuscules[b])
    }

    retourne résultat
}

nombre_depuis_hex :: fonc (hex: z8) -> z8
{
    si 'a' <= hex <= 'f' {
        retourne 10 + hex - 'a'
    }

    si 'A' <= hex <= 'F' {
        retourne 10 + hex - 'A'
    }

    si '0' <= hex <= '9' {
        retourne hex - '0'
    }

    retourne 255
}

décode_hexadécimal :: fonc (entrée: []octet) -> chaine
{
    résultat : chaine

    index := 0

    tantque index < entrée.taille {
        a := entrée[index]
        b := entrée[index + 1]

        na := nombre_depuis_hex(a comme z8) comme n8
        nb := nombre_depuis_hex(b comme z8) comme n8

        c := na << 4 | nb

        chaine_ajoute(*résultat, c comme z8)

        index += 2
    }

    retourne résultat
}

// -------------------------------------------------------------------

encode_base96 :: fonc (message: []octet) -> chaine
{
    base := «abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,?;.:/!%*$\\+-/=<>&~#"'{}()|@[]^` _»

    résultat : chaine
    index := 0

    pour message {
        index %= 6

        n := it comme n8

        a := (n >> 4) & 0xf
        b := n & 0xf

        ca := base[16 * index + a]
        chaine_ajoute(*résultat, ca)
        index += 1

        cb := base[16 * index + b]
        chaine_ajoute(*résultat, cb)
        index += 1
    }

    retourne résultat
}
