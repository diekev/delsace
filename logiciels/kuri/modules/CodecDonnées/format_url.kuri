importe Fondation
importe Introspection

est_caractère_réservé_url :: fonc (c: z8) -> bool
{
    chn :: "&$+,/:;=?@"
    pour chn {
        si it == c {
            retourne vrai
        }
    }

    retourne faux
}

est_caractère_nonsûr_url :: fonc (c: z8) -> bool
{
    chn :: " \"<>#%{}|\\^~[]`"
    pour chn {
        si it == c {
            retourne vrai
        }
    }

    retourne faux
}

caractères_hex_minuscules :: "0123456789abcdef"
caractères_hex_majuscules :: "0123456789ABCDEF"

encode_format_url :: fonc (texte: chaine) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    pour texte {
        si est_caractère_réservé_url(it) || est_caractère_nonsûr_url(it) {
            ajoute_au_tampon(*enchaineuse, '%')
            ajoute_au_tampon(*enchaineuse, caractères_hex_minuscules[((it comme z32) / 16)])
            ajoute_au_tampon(*enchaineuse, caractères_hex_minuscules[((it comme z32) % 16)])
        }
        sinon {
            ajoute_au_tampon(*enchaineuse, it)
        }
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

encode_format_url :: fonc (enchaineuse: *Enchaineuse, texte: chaine)
{
    //caractères_réservés := "\r\n !#$&'()*+,/:;=?@[]"

    caractères_non_réservés :: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"

    pour texte {
        si it == ' ' {
            ajoute_au_tampon(enchaineuse, "+")
        }
        sinon {
            pour c dans caractères_non_réservés {
                si c == it {
                    ajoute_au_tampon(enchaineuse, it)
                    arrête
                }
            }
            sansarrêt {
                a := (it comme n8 >> 4) & 0xf
                b := (it comme n8) & 0xf
                // À FAIRE(enchaineuse, langage) : type pour les caractères
                ajoute_au_tampon(enchaineuse, "%")
                ajoute_au_tampon(enchaineuse, caractères_hex_majuscules[a])
                ajoute_au_tampon(enchaineuse, caractères_hex_majuscules[b])
            }
        }
    }
}

résoud_échappement_url :: fonc (chn: chaine) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    i := 0

    tantque i < chn.taille {
        si chn[i] == '%' {
            i += 1

            si i + 2 >= chn.taille {
                arrête
            }

            c := chn[i]

            v : z8

            si 'a' <= c <= 'f' {
                v = (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v = (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v = (c - '0')
            }

            i += 1
            c = chn[i]

            v *= 16

            si 'a' <= c <= 'f' {
                v += (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v += (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v += (c - '0')
            }

            ajoute_au_tampon(*enchaineuse, v)
            i += 1
        }
        sinon {
            ajoute_au_tampon(*enchaineuse, chn[i])
            i += 1
        }
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

résoud_échappement_url_localement :: fonc (chn: &chaine)
{
    index_d_insertion := 0
    index_courant := 0

    tantque index_courant < chn.taille {
        si chn[index_courant] == '%' {
            index_courant += 1

            si index_courant + 1 >= chn.taille {
                arrête
            }

            c := chn[index_courant]

            v : z8

            si 'a' <= c <= 'f' {
                v = (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v = (c - 'A') + 10
            }
            sinon si '0' <= c <= '9' {
                v = (c - '0')
            }

            index_courant += 1
            c = chn[index_courant]

            v *= 16

            si 'a' <= c <= 'f' {
                v += (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v += (c - 'A') + 10
            }
            sinon si '0' <= c <= '9' {
                v += (c - '0')
            }

            chn[index_d_insertion] = v
        }
        // Google utilise des + pour les espaces, à voir si c'est standard.
        sinon si chn[index_courant] == '+' {
            chn[index_d_insertion] = ' '
        }
        sinon {
            chn[index_d_insertion] = chn[index_courant]
        }

        index_courant += 1
        index_d_insertion += 1
    }

    chn.taille = index_d_insertion
}

// -------------------------------------------------------------------

crée_flux_encodage_url_pour_enchaineuse :: fonc (enchaineuse: *Enchaineuse) -> FluxEncodage
{
    écris_chaine :: fonc (flux: &FluxEncodage, chn: chaine, doit_encoder: bool)
    {
        si doit_encoder {
            encode_format_url(flux.enchaineuse, chn)
        }
        sinon {
            ajoute_au_tampon(flux.enchaineuse, chn)
        }
    }

    écris_point_de_code_utf32 :: fonc (flux: &FluxEncodage, point_de_code: n32, doit_encoder: bool)
    {

    }

    écris_point_de_code_utf8 :: fonc (flux: &FluxEncodage, point_de_code: z8, doit_encoder: bool)
    {
        chn := construit_chaine(*point_de_code, 1)
        écris_chaine(flux, chn, doit_encoder)
    }

    retourne FluxEncodage(écris_chaine, écris_point_de_code_utf32, écris_point_de_code_utf8, enchaineuse)
}

encode_valeur :: fonc (flux_encodage: &FluxEncodage, valeur: eini)
{
    info := valeur.info

    discr info.id {
        CHAINE {
            chn := valeur.comme_chaine()
            flux_encodage.écris(chn)
        }
        STRUCTURE {
            fonction_de_formattage := Fondation.trouve_fonction_de_formattage(info)

            saufsi fonction_de_formattage {
                panique("pas de fonction de formattage pour le type dans encode_valeur")
            }

            /* À FAIRE : FluxEncodage pour les fonctions de formattage. */
            enchaineuse: Enchaineuse
            initialise_enchaineuse(*enchaineuse)
            diffère détruit_tampons(*enchaineuse)

            fonction_de_formattage.fonction(*enchaineuse, valeur)

            chn := chaine_depuis_enchaineuse(*enchaineuse)
            flux_encodage.écris(chn)

            déloge(chn)
        }
        sinon {
            panique("type non supporté dans encode_valeur")
        }
    }
}

encode_format_url :: fonc (valeur: eini) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    flux := crée_flux_encodage_url_pour_enchaineuse(*enchaineuse)
    requiers_esperluette := faux
    itératrice := crée_itératrice_membre(valeur)

    boucle {
        membre, nom := itératrice.membre_suivant()

        saufsi membre.est_valide() {
            arrête
        }

        si requiers_esperluette {
            flux.écris_sans_encodage("&")
        }

        flux.écris(nom)
        flux.écris_sans_encodage("=")

        encode_valeur(flux, membre)

        requiers_esperluette = vrai
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}
