/* Bibliothèque de parsage de données encodées au format URL.
 *
 * Le format URL est une chaine contenant des paires nom-valeur séparées par des esperluettes ('&').
 * Les noms et valeurs sont quant à séparés par un égal ('=') : la valeur est assignée au nom.
 *
 * Par exemple :
 *
 * video=IuK93dq3&temps=137
 *
 * possède un champs « video » de valeur « IuK93dq3 » et un champs « temps » de valeur « 137 ».
 */

importe Introspection

/* structure auxilliaire pour l'algorithme de parsage */
InfoDonnées :: struct {
    info: *InfoTypeMembreStructure
    ptr_résultat: *z8
    ptr_données: *bool
}

/* fonction auxilliaire pour l'algorithme de parsage */
trouve_info_données :: fonc (infos: [..]InfoDonnées, nom: chaine) -> *InfoDonnées
{
    pour * infos {
        si it.info.nom == nom {
            retourne it
        }
    }

    retourne nul
}

RésultatParsageFormatURL :: énum {
    /* Tout c'est bien passé, le texte put être parsé avec succès. */
    Succès

    /* Le texte contient un champs dont le nom ne correspond à ancun membre de la structure
     * cible. */
    MembreInconnu

    /* Aucune fonction de parsage n'existe pour le type du membre de la structure cible. */
    FonctionParsageInexistante

    /* Une valeur ne put être parsée. */
    ÉchecParsageValeur

    /* Texte malformé, une valeur peut manqué, ou le texte contient un caractère '&' final. */
    TexteMalformé

    /* Redéfinition d'un membre. */
    RenommageParamètre
}

/* Parse une chaine au format URL pour le type T précisé et retourne une structure de ce type
 * contenant les valeurs trouvées dans le texte, ainsi qu'une DonnéesRésultat pour le type T
 * contenant des renseignements sur quels membres ont été trouvés dans le texte. La fonction
 * retourne également un drapeau pour définir si une erreur est survenue.
 *
 * Les erreurs peuvent exister si le texte est malformé, ou si une valeur ne peut être parser,
 * ou encore si un nom dans le texte ne correspond pas à un membre du type T.
 *
 * Tout échappement URL du texte d'entrée est résolu avant le parsage.
 *
 * Le type T doit être une structure.
 */
parse_texte_format_url :: fonc (texte: chaine, $T: type_de_données) -> RésultatParsageFormatURL, DonnéesRésultat(T = T), T
{
    #assert info_de(T).id == GenreInfoType.STRUCTURE

    parseuse := ParseuseChaine(texte)
    // À FAIRE : vérifier que la chaine peut être surécrite
    // À FAIRE : nous ne pouvons pas libérer la mémoire car les chaines ne sont pas copiées
    // À FAIRE : erreur quand nous différons ici

    données: DonnéesRésultat(T = T)
    résultat: T

    info := info_de(T)

    pointeurs: [..]InfoDonnées
    diffère déloge(pointeurs)

    pour info.membres {
        id : InfoDonnées = ---
        id.info = it
        id.ptr_résultat = (*résultat comme *z8 + it.décalage)

        tableau_ajoute(*pointeurs, id)
    }

    info_données := info_de(type_de(données))
    pour info_données.membres {
        id := trouve_info_données(pointeurs, it.nom)

        si id {
            id.ptr_données = (*données comme *bool + it.décalage)
        }
    }

    tantque !fini(*parseuse) {
        pos := trouve_prochain(*parseuse, '=')

        si pos <= 0 {
            retourne RésultatParsageFormatURL.TexteMalformé, données, résultat
        }

        nom := sous_chaine_jusque_index(*parseuse, pos)
        résoud_échappement_url_localement(nom)

        positionne(*parseuse, pos + 1)

        si fini(*parseuse) {
            retourne RésultatParsageFormatURL.TexteMalformé, données, résultat
        }

        pos = trouve_prochain(*parseuse, '&')

        si pos <= 0 {
            pos = parseuse.chn.taille
        }

        valeur := sous_chaine_jusque_index(*parseuse, pos)
        résoud_échappement_url_localement(valeur)

        positionne(*parseuse, pos + 1)

        id := trouve_info_données(pointeurs, nom)

        saufsi id {
            retourne RésultatParsageFormatURL.MembreInconnu, données, résultat
        }

        // Vérifions que nous n'avons pas encore parsé ce membre.
        si mémoire(id.ptr_données) {
            retourne RésultatParsageFormatURL.RenommageParamètre, données, résultat
        }

        fonction_parsage := trouve_fonction_pour_type(id.info.id)

        saufsi fonction_parsage {
            retourne RésultatParsageFormatURL.FonctionParsageInexistante, données, résultat
        }

        tampon: []octet
        tampon.pointeur = id.ptr_résultat comme *octet
        tampon.taille = id.info.id.taille_en_octet comme z64

        // fonction_parsage.rappel ajournera le ptr_résultat via le tampon
        saufsi fonction_parsage.rappel(valeur, tampon) {
            retourne RésultatParsageFormatURL.ÉchecParsageValeur, données, résultat
        }

        mémoire(id.ptr_données) = vrai
    }

    retourne RésultatParsageFormatURL.Succès, données, résultat
} @FonctionLongue

/* DonnéesRésultat
 *
 * Cette structure polymorphique est monomorphée à partir du type passé en paramètre
 * et possède un membre correspond pour chaque membre de ce dernier.
 *
 * Les membres sont de types bool et leurs valeurs sont ajournées lors du parsage du
 * texte : si le texte possède une valeur dont le nom est celui d'un membre, celui-ci
 * aura pour valeur « vrai » dans le résultat du parsage ; si le texte ne possède pas
 * un tel nom, ou si la valeur ne peut être parsée, le membre aura pour valeur « faux ».
 */
DonnéesRésultat :: struct ($T: type_de_données) #corps_texte {
    info := info_de(T)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    si info.membres.taille == 0 {
        ajoute_au_tampon(*enchaineuse, "Alors que j'exécute le #corps_texte de DonnéesRésultat, j'ai obtenu un type sans membre : ")
        imprime_type(*enchaineuse, info)
        ajoute_au_tampon(*enchaineuse, "\nLe type doit avoir des membres afin de pouvoir générer le corps.")

        message := chaine_depuis_enchaineuse(*enchaineuse)
        compilatrice_rapporte_erreur(message)
    }

    pour info.membres {
        ajoute_au_tampon(*enchaineuse, it.nom)
        ajoute_au_tampon(*enchaineuse, ":= faux\n")
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

tous_les_champs_sont_renseignés :: fonc (données: DonnéesRésultat($T)) -> bool
#corps_texte {
    info := info_de(T)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour info.membres {
        ajoute_au_tampon(*enchaineuse, "si !données.", it.nom, "{\n")
        ajoute_au_tampon(*enchaineuse, "retourne faux\n")
        ajoute_au_tampon(*enchaineuse, "}\n")
    }

    ajoute_au_tampon(*enchaineuse, "retourne vrai\n")

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

/*
InformationConnexion :: struct {
    courriel: chaine
    mot_de_passe: chaine
}

#test {
    requête := "courriel=exemple@courriel.fr&mot_de_passe=M0tDeP4sS3"

    raison, résultat, info := parse_texte_format_url(requête, InformationConnexion)

    compilatrice_vérifie_égalité(raison, RésultatParsageFormatURL.Succès)

    compilatrice_vérifie_égalité(résultat.courriel, vrai)
    compilatrice_vérifie_égalité(résultat.mot_de_passe, vrai)

    compilatrice_vérifie_égalité(info.courriel, "exemple@courriel.fr")
    compilatrice_vérifie_égalité(info.mot_de_passe, "M0tDeP4sS3")
}
*/

/*

À FAIRE(tests) : les fonctions de parsages ne sont pas disponibles dans les métaprogrammes...

TransertDeFond :: struct {
    /* La personne qui envoie de l'argent. */
    de: chaine
    /* La personne qui reçoie de l'argent. */
    à: chaine
    /* Le montant de la transaction. */
    montant: n32
}

est_transfert_correcte :: fonc (texte: chaine) -> bool
{
    texte_copié := copie_chaine(texte)
    raison, champs_renseignés, résultat := parse_texte_format_url(texte_copié, TransertDeFond)

    si raison != RésultatParsageFormatURL.Succès {
        retourne faux
    }

    si !tous_les_champs_sont_renseignés(champs_renseignés) {
        retourne faux
    }

    si résultat.de != "kévin" {
        retourne faux
    }

    si résultat.à != "magdalena" {
        retourne faux
    }

    si résultat.montant != 1000 {
        retourne faux
    }

    retourne vrai
}

#test {
    // Test pour se prémunir contre les renommage de paramètres.
    // Idée tirée de https://www.paulosyibelo.com/2014/08/facebook-http-parameter-renaming-0day.html
    // Il est possible de renomer les paramètres URL pour tromper les entreprises utilisant PHP, ou une version non patchée.
    // Nous devons faire en sorte que seuls les paramètres présent dans la structure sont présent, et en un seul exemplaire.
    //
    // Ce test est pour transférer 1000 € de Kévin à Magdalena.

    saufsi est_transfert_correcte("de=kévin&à=magdalena&montant=1000") {
       compilatrice_rapporte_erreur("Erreur, ce transfert est sensé être correcte !\n")
    }

    si est_transfert_correcte("de=kévin&à=magdalena&montant=1000&de=magdalena&à=kévin") {
        compilatrice_rapporte_erreur("Erreur, ce transfert n'est pas sensé être correcte !\n")
    }

    // Une accolade ouvrante est ajoutée dans le second "de". Dans le parseur PHP, ceci était supprimé, car il n'y a pas d'accolade ouvrante.
    // Notre parseur le rejettera, car le nom ne sera pas présent dans la structure.
    // Ce test est inclus pour se prémunir de tout problème dans le future, si nous acceptons d'avoir des tableaux comme membre.
    si est_transfert_correcte("de=kévin&à=magdalena&montant=1000&d[e=magdalena&à=kévin") {
        compilatrice_rapporte_erreur("Erreur, ce transfert n'est pas sensé être correcte !\n")
    }

    // Un octet nul est ajouté dans le deuxième "de". Ceci vérifie que notre parseur comprend tous les octets.
    si est_transfert_correcte("de=kévin&à=magdalena&montant=1000&d\0e=magdalena&à=kévin") {
        compilatrice_rapporte_erreur("Erreur, ce transfert n'est pas sensé être correcte !\n")
    }

    // Une autre version, plus ancienne, où une valeur négative inverse le transfert.
    // Ce test ne fait que vérifier la sûreté de type du parseur.
    si est_transfert_correcte("de=kévin&à=magdalena&montant=-1000") {
        compilatrice_rapporte_erreur("Erreur, ce transfert n'est pas sensé être correcte !\n")
    }
}
*/

// ------------------------------------
// Fonctions de parsage

__fonctions_parsage_url: [..]FonctionParsage

/* Trouve une FonctionParsage pour l'InfoType précisé. Voir trouve_fonction_pour_type sur
 * [..]FonctionParsage pour plus de détail.
 */
trouve_fonction_pour_type :: fonc (info_type: *InfoType) -> *FonctionParsage
{
    retourne trouve_fonction_pour_type(__fonctions_parsage_url, info_type)
}

fonction_parsage_url_est_valide :: fonc (fonction: *NoeudCodeEntêteFonction) -> DonnéesFonctionPourTableFonction
{
    si fonction.params.taille != 1 {
        compilatrice_rapporte_erreur(fonction, "Impossible d'utiliser la fonction comme parseuse pour URL, elle ne doit avoir qu'un seul paramètre")
    }

    type_premier_paramètre := fonction.params[0].type
    si type_premier_paramètre != info_de(chaine) {
        compilatrice_rapporte_erreur(fonction.params[0], "Fonction de parsage URL invalide, le paramètre doit être de type « chaine ».")
    }

    si fonction.params_sorties.taille != 2 {
        compilatrice_rapporte_erreur(fonction, "Impossible d'utiliser la fonction comme parseuse pour URL, elle doit avoir deux paramètres de sortie : TypeÀFormatter et bool")
    }

    type_première_sortie := fonction.params_sorties[0].type

    si type_première_sortie != info_de(bool) {
        compilatrice_rapporte_erreur(fonction.params_sorties[0], "Fonction de parsage URL invalide, le premier paramètre de sortie doit être de type « bool ».")
    }

    résultat: DonnéesFonctionPourTableFonction
    résultat.fonction = fonction
    résultat.info_type = fonction.params_sorties[1].type
    retourne résultat
}

génère_fonction_enveloppe_parsage_url :: fonc (enchaineuse: *Enchaineuse, données: DonnéesFonctionPourTableFonction) -> chaine
{
    retourne génère_enveloppe_fonction_parsage_octets(enchaineuse, données, "parsage_url_")
}

génère_initialisation_parsage_url :: fonc ()
{
    créatrice_table_fonctions: CréatriceTableFonction
    créatrice_table_fonctions.module = compilatrice_module_courant()
    créatrice_table_fonctions.annotation_désirée = "ParsageURL"
    créatrice_table_fonctions.nom_table_fonctions = "__fonctions_parsage_url"
    créatrice_table_fonctions.données_pour_fonction = fonction_parsage_url_est_valide
    créatrice_table_fonctions.génère_fonction_enveloppe = génère_fonction_enveloppe_parsage_url
    créatrice_table_fonctions.initialise_types_de_bases = vrai
    créatrice_table_fonctions.ajoute_module("HTTP")

    crée_table_fonctions(créatrice_table_fonctions)
}
