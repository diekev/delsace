importe Chaine
importe #inemployé HTML
importe Fondation
importe Internet

charge "globales"
charge "lexage"
charge "objets"
charge "parsage"
charge "style"

lèxe_style :: fonc (contenu: chaine) -> [..]Lexème
{
    chn := crée_chaine_utf32(contenu)
    diffère détruit_chaine(chn)

    prétraite(chn)

    lexeuse: Lexeuse
    lexeuse.contenu = chn

    lexèmes: [..]Lexème

    tantque !fini(lexeuse) {
        lexème := consomme_un_lexème(lexeuse)
        tableau_ajoute(*lexèmes, lexème)
    }

    retourne lexèmes
}

/* 3.3. Preprocessing the input stream
 * https://www.w3.org/TR/css-syntax-3/#input-preprocessing */
prétraite :: fonc (chn: &ChaineUTF32)
{
    CARRIAGE_RETURN : n32 : 0x0D
    FORM_FEED : n32 : 0x0C
    LINE_FEED : n32 : 0x0A
    
    pour & chn.points_de_code {
        /* À FAIRE : \r\n => \n */
        si it == CARRIAGE_RETURN || it == FORM_FEED {
            it = LINE_FEED
        }
    }
}

collecte_les_règles_appropriées :: fonc (stylesheet: *CSSStyleSheet, élément: *HTML.Élément) -> [..]*CSSStyleRule
{
    règles: [..]*CSSStyleRule

    pour règle dans stylesheet.rules {
        si règle.type != CSSRuleType.Style {
            continue
        }

        règle_de_style := règle comme *CSSStyleRule

        pour complex dans règle_de_style.selector_list.complex_selectors {
            si apparie_sélecteur(complex.compound_selectors, complex.compound_selectors.taille - 1, élément) {
                tableau_ajoute(*règles, règle_de_style)
                arrête
            }
        }
    }

    retourne règles
}

apparie_sélecteur :: fonc (selector: []CompoundSelector, index: z64, élément: *HTML.Élément) -> bool
{
    si selector.taille != 1 {
        retourne faux
    }

    compound := selector[index]

    pour compound.simple_selectors {
        saufsi apparie_simple_selector(it, élément) {
            retourne faux
        }
    }

    retourne vrai
}

apparie_simple_selector :: fonc (simple: &SimpleSelector, élément: *HTML.Élément) -> bool
{
    si simple.type == SimpleSelector.Type.PseudoClass {
        si simple.est_fonction {
            retourne faux
        }

        retourne (élément.pseudo_classes & simple.pseudo_classe) == simple.pseudo_classe
    }

    si simple.type != SimpleSelector.Type.Type {
        retourne faux
    }

    retourne simple.ident == élément.texte
}

/* ------------------------------------------------------------------------- */
/** \nom PseudoClasses
 * Pseudo classes non-fonctionnelles possibles.
 *
 * Tirées de :
 * https://html.spec.whatwg.org/multipage/semantics-other.html#pseudo-classes
 * https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-classes
 * \{ */

PseudoClasses :: énum_drapeau n64 {
    Active
    AnyLink
    Blank
    Checked
    Current
    Default
    Defined
    Disabled
    Drop
    Empty
    Enabled
    First
    FirstChild
    FirstOfType
    Fullscreen
    Future
    Focus
    FocusVisible
    FocusWithin
    Host
    Hover
    Indeterminate
    InRange
    Invalid
    Is
    LastChild
    LastOfType
    Left
    Link
    LocalLink
    OnlyChild
    OnlyOfType
    Optional
    OutOfRange
    Past
    PlaceholderShown
    ReadOnly
    ReadWrite
    Required
    Right
    Root
    Scope
    Target
    TargetWithin
    UserInvalid
    Valid
    Visited
    Playing
    Paused
    Seeking
    Buffering
    Stalled
    Muted
    VolumeLocked
    PopoverOpen
    UserValid
    Autofill
    Modal
    Backdrop
}

donne_pseudo_classe_pour_nom :: fonc (nom: CSSOMString) -> PseudoClasses
{
    si compare_ascii_insensible_à_la_casse(nom, PC_active) {
        retourne PseudoClasses.Active
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_any_link) {
        retourne PseudoClasses.AnyLink
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_blank) {
        retourne PseudoClasses.Blank
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_checked) {
        retourne PseudoClasses.Checked
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_current) {
        retourne PseudoClasses.Current
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_default) {
        retourne PseudoClasses.Default
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_defined) {
        retourne PseudoClasses.Defined
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_disabled) {
        retourne PseudoClasses.Disabled
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_drop) {
        retourne PseudoClasses.Drop
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_empty) {
        retourne PseudoClasses.Empty
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_enabled) {
        retourne PseudoClasses.Enabled
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_first) {
        retourne PseudoClasses.First
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_first_child) {
        retourne PseudoClasses.FirstChild
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_first_of_type) {
        retourne PseudoClasses.FirstOfType
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_fullscreen) {
        retourne PseudoClasses.Fullscreen
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_future) {
        retourne PseudoClasses.Future
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_focus) {
        retourne PseudoClasses.Focus
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_focus_visible) {
        retourne PseudoClasses.FocusVisible
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_focus_within) {
        retourne PseudoClasses.FocusWithin
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_host) {
        retourne PseudoClasses.Host
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_hover) {
        retourne PseudoClasses.Hover
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_indeterminate) {
        retourne PseudoClasses.Indeterminate
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_in_range) {
        retourne PseudoClasses.InRange
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_invalid) {
        retourne PseudoClasses.Invalid
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_is) {
        retourne PseudoClasses.Is
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_last_child) {
        retourne PseudoClasses.LastChild
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_last_of_type) {
        retourne PseudoClasses.LastOfType
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_left) {
        retourne PseudoClasses.Left
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_link) {
        retourne PseudoClasses.Link
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_local_link) {
        retourne PseudoClasses.LocalLink
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_only_child) {
        retourne PseudoClasses.OnlyChild
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_only_of_type) {
        retourne PseudoClasses.OnlyOfType
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_optional) {
        retourne PseudoClasses.Optional
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_out_of_range) {
        retourne PseudoClasses.OutOfRange
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_past) {
        retourne PseudoClasses.Past
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_placeholder_shown) {
        retourne PseudoClasses.PlaceholderShown
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_read_only) {
        retourne PseudoClasses.ReadOnly
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_read_write) {
        retourne PseudoClasses.ReadWrite
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_required) {
        retourne PseudoClasses.Required
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_right) {
        retourne PseudoClasses.Right
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_root) {
        retourne PseudoClasses.Root
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_scope) {
        retourne PseudoClasses.Scope
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_target) {
        retourne PseudoClasses.Target
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_target_within) {
        retourne PseudoClasses.TargetWithin
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_user_invalid) {
        retourne PseudoClasses.UserInvalid
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_valid) {
        retourne PseudoClasses.Valid
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_visited) {
        retourne PseudoClasses.Visited
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_playing) {
        retourne PseudoClasses.Playing
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_paused) {
        retourne PseudoClasses.Paused
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_seeking) {
        retourne PseudoClasses.Seeking
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_buffering) {
        retourne PseudoClasses.Buffering
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_stalled) {
        retourne PseudoClasses.Stalled
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_muted) {
        retourne PseudoClasses.Muted
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_volume_locked) {
        retourne PseudoClasses.VolumeLocked
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_popover_open) {
        retourne PseudoClasses.PopoverOpen
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_user_valid) {
        retourne PseudoClasses.UserValid
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_autofill) {
        retourne PseudoClasses.Autofill
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_modal) {
        retourne PseudoClasses.Modal
    }
    si compare_ascii_insensible_à_la_casse(nom, PC_backdrop) {
        retourne PseudoClasses.Backdrop
    }

    imprime("pseudo classe : %\n", nom)
    panique("Pseudo classe inconnue.")
}

donne_chaine_pour_pseudo_classe :: fonc (pseudo_classe: PseudoClasses) -> CSSOMString
{
    si pseudo_classe == PseudoClasses.Active {
        retourne PC_active
    }
    si pseudo_classe == PseudoClasses.AnyLink {
        retourne PC_any_link
    }
    si pseudo_classe == PseudoClasses.Blank {
        retourne PC_blank
    }
    si pseudo_classe == PseudoClasses.Checked {
        retourne PC_checked
    }
    si pseudo_classe == PseudoClasses.Current {
        retourne PC_current
    }
    si pseudo_classe == PseudoClasses.Default {
        retourne PC_default
    }
    si pseudo_classe == PseudoClasses.Defined {
        retourne PC_defined
    }
    si pseudo_classe == PseudoClasses.Disabled {
        retourne PC_disabled
    }
    si pseudo_classe == PseudoClasses.Drop {
        retourne PC_drop
    }
    si pseudo_classe == PseudoClasses.Empty {
        retourne PC_empty
    }
    si pseudo_classe == PseudoClasses.Enabled {
        retourne PC_enabled
    }
    si pseudo_classe == PseudoClasses.First {
        retourne PC_first
    }
    si pseudo_classe == PseudoClasses.FirstChild {
        retourne PC_first_child
    }
    si pseudo_classe == PseudoClasses.FirstOfType {
        retourne PC_first_of_type
    }
    si pseudo_classe == PseudoClasses.Fullscreen {
        retourne PC_fullscreen
    }
    si pseudo_classe == PseudoClasses.Future {
        retourne PC_future
    }
    si pseudo_classe == PseudoClasses.Focus {
        retourne PC_focus
    }
    si pseudo_classe == PseudoClasses.FocusVisible {
        retourne PC_focus_visible
    }
    si pseudo_classe == PseudoClasses.FocusWithin {
        retourne PC_focus_within
    }
    si pseudo_classe == PseudoClasses.Host {
        retourne PC_host
    }
    si pseudo_classe == PseudoClasses.Hover {
        retourne PC_hover
    }
    si pseudo_classe == PseudoClasses.Indeterminate {
        retourne PC_indeterminate
    }
    si pseudo_classe == PseudoClasses.InRange {
        retourne PC_in_range
    }
    si pseudo_classe == PseudoClasses.Invalid {
        retourne PC_invalid
    }
    si pseudo_classe == PseudoClasses.Is {
        retourne PC_is
    }
    si pseudo_classe == PseudoClasses.LastChild {
        retourne PC_last_child
    }
    si pseudo_classe == PseudoClasses.LastOfType {
        retourne PC_last_of_type
    }
    si pseudo_classe == PseudoClasses.Left {
        retourne PC_left
    }
    si pseudo_classe == PseudoClasses.Link {
        retourne PC_link
    }
    si pseudo_classe == PseudoClasses.LocalLink {
        retourne PC_local_link
    }
    si pseudo_classe == PseudoClasses.OnlyChild {
        retourne PC_only_child
    }
    si pseudo_classe == PseudoClasses.OnlyOfType {
        retourne PC_only_of_type
    }
    si pseudo_classe == PseudoClasses.Optional {
        retourne PC_optional
    }
    si pseudo_classe == PseudoClasses.OutOfRange {
        retourne PC_out_of_range
    }
    si pseudo_classe == PseudoClasses.Past {
        retourne PC_past
    }
    si pseudo_classe == PseudoClasses.PlaceholderShown {
        retourne PC_placeholder_shown
    }
    si pseudo_classe == PseudoClasses.ReadOnly {
        retourne PC_read_only
    }
    si pseudo_classe == PseudoClasses.ReadWrite {
        retourne PC_read_write
    }
    si pseudo_classe == PseudoClasses.Required {
        retourne PC_required
    }
    si pseudo_classe == PseudoClasses.Right {
        retourne PC_right
    }
    si pseudo_classe == PseudoClasses.Root {
        retourne PC_root
    }
    si pseudo_classe == PseudoClasses.Scope {
        retourne PC_scope
    }
    si pseudo_classe == PseudoClasses.Target {
        retourne PC_target
    }
    si pseudo_classe == PseudoClasses.TargetWithin {
        retourne PC_target_within
    }
    si pseudo_classe == PseudoClasses.UserInvalid {
        retourne PC_user_invalid
    }
    si pseudo_classe == PseudoClasses.Valid {
        retourne PC_valid
    }
    si pseudo_classe == PseudoClasses.Visited {
        retourne PC_visited
    }
    si pseudo_classe == PseudoClasses.Playing {
        retourne PC_playing
    }
    si pseudo_classe == PseudoClasses.Paused {
        retourne PC_paused
    }
    si pseudo_classe == PseudoClasses.Seeking {
        retourne PC_seeking
    }
    si pseudo_classe == PseudoClasses.Buffering {
        retourne PC_buffering
    }
    si pseudo_classe == PseudoClasses.Stalled {
        retourne PC_stalled
    }
    si pseudo_classe == PseudoClasses.Muted {
        retourne PC_muted
    }
    si pseudo_classe == PseudoClasses.VolumeLocked {
        retourne PC_volume_locked
    }
    si pseudo_classe == PseudoClasses.PopoverOpen {
        retourne PC_popover_open
    }
    si pseudo_classe == PseudoClasses.UserValid {
        retourne PC_user_valid
    }
    si pseudo_classe == PseudoClasses.Autofill {
        retourne PC_autofill
    }
    si pseudo_classe == PseudoClasses.Modal {
        retourne PC_modal
    }
    retourne crée_chaine_utf16_unique("pseudo classe inconnue")
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Selectors
 * https://www.w3.org/TR/selectors-4/
 * \{ */

SelectorList :: struct {
    complex_selectors: [..]ComplexSelector
}

détruit_données_selector_list :: fonc (selector: *SelectorList)
{
    pour * selector.complex_selectors {
        détruit_données_complex_selector(it)
    }

    déloge(selector.complex_selectors)
}

imprime_selector_list :: fonc (enchaineuse: *Enchaineuse, selector_list: *SelectorList)
{
    saufsi selector_list {
        retourne
    }

    pour * selector_list.complex_selectors {
        si index_it > 0 {
            ajoute_au_tampon(enchaineuse, ", ")
        }

        imprime_complex_selector(enchaineuse, it)
    }
} @FormattageImpression

ComplexSelector :: struct {
    compound_selectors: [..]CompoundSelector
}

détruit_données_complex_selector :: fonc (selector: *ComplexSelector)
{
    pour * selector.compound_selectors {
        détruit_données_compound_selector(it)
    }

    déloge(selector.compound_selectors)
}

imprime_complex_selector :: fonc (enchaineuse: *Enchaineuse, complex_selectors: *ComplexSelector)
{
    saufsi complex_selectors {
        retourne
    }

    pour * complex_selectors.compound_selectors {
        si index_it > 0 {
            discr it.combinateur {
                DESCENDANT {
                    ajoute_au_tampon(enchaineuse, " ")
                }
                NEXT_SIBLING {
                    ajoute_au_tampon(enchaineuse, " + ")
                }
                CHILD {
                    ajoute_au_tampon(enchaineuse, " > ")
                }
                SUBSEQUENT_SIBLING {
                    ajoute_au_tampon(enchaineuse, " ~ ")
                }
                COLUMN {
                    ajoute_au_tampon(enchaineuse, " || ")
                }
            }
        }

        imprime_compound_selector(enchaineuse, it)
    }
} @FormattageImpression

Combinator :: énum {
    DESCENDANT  // " "
    NEXT_SIBLING    // "+"
    CHILD // ">"
    SUBSEQUENT_SIBLING // "~"
    COLUMN // "||"
}

CompoundSelector :: struct {
    simple_selectors: [..]SimpleSelector
    combinateur: Combinator
}

détruit_données_compound_selector :: fonc (selector: *CompoundSelector)
{
    pour * selector.simple_selectors {
        détruit_données_simple_selector(it)
    }

    déloge(selector.simple_selectors)
}

imprime_compound_selector :: fonc (enchaineuse: *Enchaineuse, compound_selectors: *CompoundSelector)
{
    saufsi compound_selectors {
        retourne
    }

    pour * compound_selectors.simple_selectors {
        imprime_simple_selector(enchaineuse, it)
    }
} @FormattageImpression

SimpleSelector :: struct {
    Type :: énum {
        Type
        Universal
        ID
        Class
        Attrib
        PseudoElement
        PseudoClass
    }

    AttributeMatcher :: énum {
        EST_ÉGAL /* = */
        INCLUS /* ~= */
        DASHMATCH /* |= */
        PREFIXMATCH /* ^= */
        SUFFIXMATCH /* $= */
        SUBSTRINGMATCH /* *= */
    }

    AttributeModifier :: énum {
        I
        S
    }

    type: Type
    namespace_prefix := crée_chaine_utf16_unique_vide()
    ident := crée_chaine_utf16_unique_vide()

    /* Pour Attrib. */
    matcher: Optionnel(AttributeMatcher)
    /* Valeur pour AttributeMatcher. */
    attribute_value := crée_chaine_utf16_unique_vide()
    attribute_modifier: Optionnel(AttributeModifier)

    /* Pour les pseudos-classes non-fonctionnelles.
     * Ne doit pas avoir plus que 1 bit actif. */
    pseudo_classe: PseudoClasses

    /* Pour les pseudos-classes fonctionnelles. */
    est_fonction: bool
    selector_list: SelectorList

    /* Pour :dir. */
    arg := crée_chaine_utf16_unique_vide()
}

détruit_données_simple_selector :: fonc (selector: *SimpleSelector)
{
    détruit_données_selector_list(*selector.selector_list)
}

imprime_simple_selector :: fonc (enchaineuse: *Enchaineuse, selector: *SimpleSelector)
{
    saufsi selector {
        ajoute_au_tampon(enchaineuse, "nul")
        retourne
    }

    // ajoute_au_tampon(enchaineuse, selector.type, " : ")
    discr selector.type {
        Type {
            saufsi selector.namespace_prefix.est_vide() {
                ajoute_au_tampon(enchaineuse, selector.namespace_prefix, "|")
            }
            ajoute_au_tampon(enchaineuse, selector.ident)
        }
        Universal {
            saufsi selector.namespace_prefix.est_vide() {
                ajoute_au_tampon(enchaineuse, selector.namespace_prefix, "|")
            }
            ajoute_au_tampon(enchaineuse, "*")
        }
        PseudoClass {
            saufsi selector.est_fonction {
                ajoute_au_tampon(enchaineuse, ":", donne_chaine_pour_pseudo_classe(selector.pseudo_classe))
            }
            sinon {
                ajoute_au_tampon(enchaineuse, ":", selector.ident, "(")

                si selector.ident == PROP_dir {
                    ajoute_au_tampon(enchaineuse, selector.arg)
                }
                sinon {
                    imprime_selector_list(enchaineuse, *selector.selector_list)
                }

                ajoute_au_tampon(enchaineuse, ")")
                retourne
            }
        }
        PseudoElement {
            ajoute_au_tampon(enchaineuse, "::", selector.ident)
        }
        ID {
            ajoute_au_tampon(enchaineuse, "#", selector.ident)
        }
        Class {
            ajoute_au_tampon(enchaineuse, ".", selector.ident)
        }
        Attrib {
            ajoute_au_tampon(enchaineuse, "[", selector.ident)

            si selector.matcher.possède_valeur() {
                matcher := selector.matcher.Quelque

                discr matcher {
                    EST_ÉGAL {
                        ajoute_au_tampon(enchaineuse, "=")
                    }
                    INCLUS {
                        ajoute_au_tampon(enchaineuse, "~=")
                    }
                    DASHMATCH {
                        ajoute_au_tampon(enchaineuse, "|=")
                    }
                    PREFIXMATCH {
                        ajoute_au_tampon(enchaineuse, "^=")
                    }
                    SUFFIXMATCH {
                        ajoute_au_tampon(enchaineuse, "$=")
                    }
                    SUBSTRINGMATCH {
                        ajoute_au_tampon(enchaineuse, "*=")
                    }
                }

                ajoute_au_tampon(enchaineuse, selector.attribute_value)

                si selector.attribute_modifier.possède_valeur() {
                    modifier := selector.attribute_modifier.Quelque

                    si modifier == SimpleSelector.AttributeModifier.I {
                        ajoute_au_tampon(enchaineuse, " i")
                    }
                    sinon {
                        ajoute_au_tampon(enchaineuse, " s")
                    }
                }
            }
            ajoute_au_tampon(enchaineuse, "]")
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "IMPRESSION À FAIRE")
        }
    }
} @FormattageImpression

crée_type_selector :: fonc (namespace_prefix: CSSOMString, ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.Type, namespace_prefix, ident)
}

crée_universal_selector :: fonc (namespace_prefix: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.Universal, namespace_prefix)
}

crée_id_selector :: fonc (ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.ID, crée_chaine_utf16_unique_vide(), ident)
}

crée_class_selector :: fonc (ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.Class, crée_chaine_utf16_unique_vide(), ident)
}

crée_attribute_selector :: fonc (ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.Attrib, crée_chaine_utf16_unique_vide(), ident)
}

crée_attribute_selector :: fonc (ident: CSSOMString, matcher: SimpleSelector.AttributeMatcher, value: CSSOMString, modifier: Optionnel(SimpleSelector.AttributeModifier)) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.Attrib, crée_chaine_utf16_unique_vide(), ident, matcher, value, modifier)
}

crée_pseudo_class_selector :: fonc (ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.PseudoClass, crée_chaine_utf16_unique_vide(), pseudo_classe = donne_pseudo_classe_pour_nom(ident))
}

crée_pseudo_element_selector :: fonc (ident: CSSOMString) -> SimpleSelector
{
    retourne SimpleSelector(SimpleSelector.Type.PseudoElement, crée_chaine_utf16_unique_vide(), ident)
}

crée_function_selector :: fonc (ident: CSSOMString, arguments: SelectorList) -> SimpleSelector
{
    résultat: SimpleSelector
    résultat.type = SimpleSelector.Type.PseudoClass
    résultat.ident = ident
    résultat.est_fonction = vrai
    résultat.selector_list = arguments
    retourne résultat
}

/* Pour :dir et peut-être d'autres. */
crée_function_selector :: fonc (ident: CSSOMString, arg: CSSOMString) -> SimpleSelector
{
    résultat: SimpleSelector
    résultat.type = SimpleSelector.Type.PseudoClass
    résultat.ident = ident
    résultat.est_fonction = vrai
    résultat.arg = arg
    retourne résultat
}

/** \} */
