importe Aléa
importe Chaine
importe Couleur
importe Fondation
importe Géométrie
importe Image
importe Typographie

/* ------------------------------------------------------------------------- */
/** \nom CommandesDeRendu
 * \{ */

TypeCommandeDeRendu :: énum {
    REMPLIS_RECTANGLE_ID
    REMPLIS_RECTANGLE
    REMPLIS_RECTANGLE_ARRONDI
    DESSINE_RECTANGLE
    DESSINE_RECTANGLE_ARRONDI
    DESSINE_CERCLE
    REMPLIS_CERCLE
    DESSINE_BORDURE
    DESSINE_IMAGE
    DESSINE_TAMPON_IMAGE
    DESSINE_TEXTE
    DÉBUTE_STACKING_CONTEXT
    TERMINE_STACKING_CONTEXT
    DÉBUTE_CISELAGE
    TERMINE_CISELAGE
}

CommandesDeRendu :: struct {
    commandes: [..]octet
}

détruit_commandes :: fonc (commandes: *CommandesDeRendu)
{
    saufsi commandes {
        retourne
    }

    déloge(commandes.commandes)
    déloge(commandes)
}

réinitialise :: fonc (commandes: *CommandesDeRendu)
{
    commandes.commandes.taille = 0
}

crée_commande :: fonc (commandes: *CommandesDeRendu, $T: type_de_données) -> *T
{
    décalage := commandes.commandes.taille
    tableau_redimensionne(commandes.commandes, décalage + (taille_de(T) comme z64))

    résultat := *commandes.commandes[décalage] comme *T
    init_de(T)(résultat)
    résultat.taille_type = taille_de(T)
    retourne résultat
}

BaseCommande :: struct {
    type: TypeCommandeDeRendu
    taille_type: n32
    rect: RectanglePosDim(r32)
}

CommandeRemplisRectangleID :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.REMPLIS_RECTANGLE_ID

    id: n32
}

remplis_rectangle_id :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), id: n32)
{
    résultat := crée_commande(commandes, CommandeRemplisRectangleID)
    résultat.rect = rect
    résultat.id = id
}

CommandeRemplisRectangle :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.REMPLIS_RECTANGLE

    couleur: CouleurRVBAN8
}

remplis_rectangle :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), couleur: CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeRemplisRectangle)
    résultat.rect = rect
    résultat.couleur = couleur
}

remplis_rectangle :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), couleur: CouleurRVBA)
{
    résultat := crée_commande(commandes, CommandeRemplisRectangle)
    résultat.rect = rect
    résultat.couleur = depuis_couleur_rvba(couleur)
}

CommandeRemplisRectangleArrondi :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.REMPLIS_RECTANGLE_ARRONDI

    couleur: CouleurRVBAN8
    rayons: [4]r32
}

remplis_rectangle_arrondi :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), rayons: [4]r32, couleur: CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeRemplisRectangleArrondi)
    résultat.rect = rect
    résultat.rayons = rayons
    résultat.couleur = couleur
}

CommandeDessineRectangle :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_RECTANGLE

    couleur: CouleurRVBAN8
}

dessine_rectangle :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), couleur: CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeDessineRectangle)
    résultat.rect = rect
    résultat.couleur = couleur
}

CommandeDessineRectangleArrondi :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_RECTANGLE_ARRONDI

    couleur: CouleurRVBAN8
}

CommandeDessineBordure :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_BORDURE

    largeurs: [4]r32
    couleurs: [4]CouleurRVBAN8
}

dessine_bordure :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), largeurs: [4]r32, couleurs: [4]CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeDessineBordure)
    résultat.rect = rect
    résultat.largeurs = largeurs
    résultat.couleurs = couleurs
}

CommandeDessineImage :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_IMAGE

    image_data: ImageIO
    rect_image: RectanglePosDim(r32)
    répétition: RépétitionImage
}

dessine_image :: fonc (commandes: *CommandesDeRendu, image_data: ImageIO, rect_image: RectanglePosDim(r32))
{
    dessine_image(commandes, image_data, rect_image, rect_image, RépétitionImage())
}

dessine_image :: fonc (commandes: *CommandesDeRendu, image_data: ImageIO, rect_image: RectanglePosDim(r32), rect: RectanglePosDim(r32), répétition: RépétitionImage)
{
    résultat := crée_commande(commandes, CommandeDessineImage)
    résultat.image_data = image_data
    résultat.rect_image = rect_image
    résultat.rect = rect
    résultat.répétition = répétition
}

CommandeDessineImageTampon :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_TAMPON_IMAGE

    image_data: TamponImageRVBA8Bit
}

dessine_image :: fonc (commandes: *CommandesDeRendu, image_data: TamponImageRVBA8Bit, rect: RectanglePosDim(r32))
{
    résultat := crée_commande(commandes, CommandeDessineImageTampon)
    résultat.image_data = image_data
    résultat.rect = rect
}

CommandeDessineTexte :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_TEXTE

    fonte: *Fonte
    texte: ChaineUTF16
    couleur: CouleurRVBAN8
    effets: EffetsTexte
}

dessine_texte :: fonc (commandes: *CommandesDeRendu, fonte: *Fonte, texte: ChaineUTF16, rect: RectanglePosDim(r32), couleur: CouleurRVBAN8, effets: *EffetsTexte)
{
    résultat := crée_commande(commandes, CommandeDessineTexte)
    résultat.fonte = fonte
    résultat.texte = texte
    résultat.rect = rect
    résultat.couleur = couleur
    si effets {
        résultat.effets = mémoire(effets)
    }
}

CommandeDébuteStackingContexte :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DÉBUTE_STACKING_CONTEXT
}

débute_stacking_context :: fonc (commandes: *CommandesDeRendu)
{
    _ := crée_commande(commandes, CommandeDébuteStackingContexte)
}

CommandeTermineStackingContexte :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.TERMINE_STACKING_CONTEXT

    opacité: r32
}

termine_stacking_context :: fonc (commandes: *CommandesDeRendu, opacité: r32)
{
    résultat := crée_commande(commandes, CommandeTermineStackingContexte)
    résultat.opacité = opacité
}

CommandeDébuteCiselage :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DÉBUTE_CISELAGE
}

débute_ciselage :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32))
{
    résultat := crée_commande(commandes, CommandeDébuteCiselage)
    résultat.rect = rect
}

CommandeTermineCiselage :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.TERMINE_CISELAGE
}

termine_ciselage :: fonc (commandes: *CommandesDeRendu)
{
    _ := crée_commande(commandes, CommandeTermineCiselage)
}

CommandeDessineCercle :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.DESSINE_CERCLE

    couleur: CouleurRVBAN8
}

dessine_cercle :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), couleur: CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeDessineCercle)
    résultat.rect = rect
    résultat.couleur = couleur
}

CommandeRemplisCercle :: struct {
    empl base: BaseCommande
    type = TypeCommandeDeRendu.REMPLIS_CERCLE

    couleur: CouleurRVBAN8
}

remplis_cercle :: fonc (commandes: *CommandesDeRendu, rect: RectanglePosDim(r32), couleur: CouleurRVBAN8)
{
    résultat := crée_commande(commandes, CommandeRemplisCercle)
    résultat.rect = rect
    résultat.couleur = couleur
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ContexteDessin
 * \{ */

ContexteDessin :: struct {
    document: *HTML.Document
    globales: *GlobalesDessin
    commandes: *CommandesDeRendu
    arbre: *ArbreDeDisposition

    hauteur_vue: z32
    largeur_vue: z32

    décalage_y: r32
    id_stacking_context: n32

    tampon_id_couleur: bool
    est_fixé: bool
}

donne_rectangle_corrigé :: fonc (ctx: *ContexteDessin, rect: RectanglePosDim(r32)) -> RectanglePosDim(r32)
{
    /* Nous disposons les noeuds comme si leur origine était leur coin du haut
     * gauche mais nous devons les dessiner comme si leur origine était leur
     * coin du bas gauche.
     * De plus, nous devons nous assurer que l'origine du document est le bas
     * gauche de la page et non le haut gauche. */
    rect.y = ctx.hauteur_vue comme r32 - rect.y - rect.hauteur
    saufsi ctx.est_fixé {
        rect.y += ctx.décalage_y
    }
    retourne rect
}

dessine :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    dessine_stacking_context(arbre.stacking_context, ctx)
    // imprime("---------------------------------------------\n")
    // dessine_stacking_context_standard(arbre.stacking_context, ctx)

    // imprime_et_réinitialise_fut_dessiné(arbre.stacking_context)

    // pour arbre.noeuds {
    //     si it.fut_dessiné {
    //         it.fut_dessiné = faux
    //         continue
    //     }

    //     saufsi it.propriétés {
    //         continue
    //     }

    //     position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
    //     float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
    //     display := it.donne_display()
    //     imprime("noeud non dessiné : % (position : %, float : %, outer : %, inner : %) ", it.donne_nom_classe(), position, float, display.outer_type, display.inner_type)
    //     imprime_élément(it, "")
    // }

    retourne ctx.commandes
}

dessine_tampon_id_couleur :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    ctx.tampon_id_couleur = vrai

    dessine_stacking_context_tampon_id(arbre.stacking_context, ctx)

    ctx.tampon_id_couleur = faux

    retourne ctx.commandes
}

dessine_tampon_id :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    assert(ctx.tampon_id_couleur == faux)

    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    dessine_stacking_context_tampon_id(arbre.stacking_context, ctx)

    définis_taille_tampon_id(arbre, ctx.largeur_vue, ctx.hauteur_vue)

    retourne ctx.commandes
}

dessine :: fonc (noeud: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    si noeud.id_stacking_context != ctx.id_stacking_context {
        retourne
    }

    si noeud.table_virtuelle.sur_dessin {
        noeud.table_virtuelle.sur_dessin(noeud, ctx)
    }
}

dessine_fragment :: fonc (noeud: *NoeudDeDisposition, fragment: *Fragment, lignes_tenante: *LignesTenante, ctx: *ContexteDessin)
{
    si noeud.table_virtuelle.sur_dessin_fragment {
        noeud.table_virtuelle.sur_dessin_fragment(noeud, fragment, lignes_tenante, ctx)
    }
    sinon {
        noeud.dessine(ctx)
    }
}

dessine_tampon_id :: fonc (noeud: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    si noeud.id_stacking_context != ctx.id_stacking_context {
        retourne
    }

    si noeud.table_virtuelle.sur_dessin_tampon_id {
        noeud.table_virtuelle.sur_dessin_tampon_id(noeud, ctx)
    }
}

dessine_fragment_tampon_id :: fonc (noeud: *NoeudDeDisposition, fragment: *Fragment, ctx: *ContexteDessin)
{
    saufsi noeud.table_virtuelle.sur_dessin_fragment_tampon_id {
        ctx.remplis_rectangle_id(noeud, fragment.donne_rectangle())

        pour noeud.enfants {
            noeud.dessine_tampon_id(ctx)
        }

        retourne
    }

    noeud.table_virtuelle.sur_dessin_fragment_tampon_id(noeud, fragment, ctx)
}

dessine_enfants_block :: fonc (noeud: *NoeudDeDispositionBloc, ctx: *ContexteDessin)
{
    // overflow_x := noeud.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    // overflow_y := noeud.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    // saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
    //     rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_rembourrage())
    //     ctx.commandes.débute_ciselage(rect)
    // }

    pour noeud.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        saufsi position.est_mot_clé(PROP_static) {
            continue
        }
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        saufsi float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    pour noeud.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        si position.est_mot_clé(PROP_static) {
            continue
        }
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        saufsi float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    pour noeud.enfants {
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        si float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    // saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
    //     ctx.commandes.termine_ciselage()
    // }
}

dessine_tampon_id_enfants_block :: fonc (noeud: *NoeudDeDispositionBloc, ctx: *ContexteDessin)
{
    pour noeud.enfants {
        dessine_tampon_id(it, ctx)
    }
}

dessine_enfants_inline :: fonc (noeud: *NoeudDeDispositionBloc, ctx: *ContexteDessin)
{
    saufsi noeud.lignes_tenante {
        retourne
    }

    // overflow_x := noeud.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    // overflow_y := noeud.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    // saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
    //     rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_rembourrage())
    //     ctx.commandes.débute_ciselage(rect)
    // }

    pour * noeud.lignes_tenante.fragments {
        dessine_fragment(it.noeud, it, noeud.lignes_tenante, ctx)
    }

    // saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
    //     ctx.commandes.termine_ciselage()
    // }
}

dessine_tampon_id_enfants_inline :: fonc (noeud: *NoeudDeDispositionBloc, ctx: *ContexteDessin)
{
    saufsi noeud.lignes_tenante {
        retourne
    }

    pour * noeud.lignes_tenante.fragments {
        dessine_fragment_tampon_id(it.noeud, it, ctx)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions de dessin des noeuds.
 * \{ */

noeud_disposition_bloc_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionBloc

    si noeud.est_noeud_non_anonyme() || noeud.est_pseudo_element {
        dessine_arrière_plan(ctx, noeud)
        dessine_bordure(ctx, noeud)
    }

    saufsi noeud.est_disposition_inline {
        dessine_enfants_block(noeud, ctx)
    }
    sinon {
        dessine_enfants_inline(noeud, ctx)
    }
}

noeud_disposition_inline_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionInline

    si noeud.est_inline_block() {
        noeud_disposition_bloc_sur_dessin(noeud, ctx)
        retourne
    }

    dessine_enfants_inline(noeud, ctx)
}

noeud_disposition_inline_sur_dessin_fragment :: fonc (base: *NoeudDeDisposition, fragment: *Fragment, lignes_tenante: *LignesTenante, ctx: *ContexteDessin)
{
    si fragment.type == Fragment.Type.InlineBlock {
        noeud_disposition_bloc_sur_dessin(base, ctx)
        retourne
    }

    si fragment.type == Fragment.Type.MargeDébut || fragment.type == Fragment.Type.MargeFin {
        retourne
    }

    si fragment.type == Fragment.Type.RembourrageDébut {
        propriétés := base.propriétés

        background_color := propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).couleur

        /* Le rembourrage vertical n'affecte pas la taille mais doit être inclus dans le dessin. */
        padding_top := propriétés.donne_valeur_utilisée(IDPropriété.PaddingTop).pixels comme r32
        padding_bottom := propriétés.donne_valeur_utilisée(IDPropriété.PaddingBottom).pixels comme r32

        si background_color.a != 0 {
            border_radius_top_left := propriétés.donne_valeur_utilisée(IDPropriété.BorderTopLeftRadius).pixels comme r32
            border_radius_top_right := propriétés.donne_valeur_utilisée(IDPropriété.BorderTopRightRadius).pixels comme r32
            border_radius_bottom_right := propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomRightRadius).pixels comme r32
            border_radius_bottom_left := propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomLeftRadius).pixels comme r32

            premier_fragment := fragment
            dernier_fragment := lignes_tenante.fragments.pointeur + lignes_tenante.fragments.taille
            tantque fragment != dernier_fragment {
                rect_noeud := ctx.donne_rectangle_corrigé(fragment.donne_rectangle())
                rect_noeud.y -= padding_top
                rect_noeud.hauteur += padding_top + padding_bottom

                est_premier_fragment := fragment == premier_fragment
                est_dernier_fragment := fragment.type == Fragment.Type.RembourrageFin && fragment.noeud == base

                si est_premier_fragment {
                    rayons := [border_radius_top_left, 0.0, 0.0, border_radius_bottom_left]
                    ctx.commandes.remplis_rectangle_arrondi(rect_noeud, rayons, background_color)
                }
                sinon si est_dernier_fragment {
                    rayons := [0.0, border_radius_top_right, border_radius_bottom_right, 0.0]
                    ctx.commandes.remplis_rectangle_arrondi(rect_noeud, rayons, background_color)
                }
                sinon {
                    ctx.commandes.remplis_rectangle(rect_noeud, background_color)
                }

                si est_dernier_fragment {
                    arrête
                }

                fragment += 1
            }
        }
    }
}

noeud_disposition_texte_sur_dessin_fragment :: fonc (base: *NoeudDeDisposition, fragment: *Fragment, lignes_tenante: *LignesTenante @inutilisée, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionTexte

    propriétés := donne_propriété_parent(noeud)

    effets: EffetsTexte

    line := propriétés.donne_valeur_utilisée(IDPropriété.TextDecorationLine)
    saufsi line.est_mot_clé(PROP_none) {
        decoration := line.text_decoration_line
        couleur := vers_couleur_rvba(propriétés.donne_valeur_utilisée(IDPropriété.TextDecorationColor).couleur)

        si decoration.UNDERLINE {
            effets.souslignage = vrai
            effets.couleur_souslignage = couleur
        }
        si decoration.OVERLINE {
            effets.surlignage = vrai
            effets.couleur_surlignage = couleur
        }
        si decoration.LINE_THROUGH {
            effets.barrage = vrai
            effets.couleur_barrage = couleur
        }
    }

    commandes := ctx.commandes
    fonte := noeud.fonte
    assert(fonte != nul)

    couleur := propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur

    rect := ctx.donne_rectangle_corrigé(fragment.donne_rectangle())

    texte := noeud.fragments[fragment.index_début].texte

    commandes.dessine_texte(fonte, texte, rect, couleur, *effets)
}

noeud_disposition_remplacement_sur_dessin_fragment :: fonc (base: *NoeudDeDisposition, fragment: *Fragment @inutilisée, lignes_tenante: *LignesTenante @inutilisée, ctx: *ContexteDessin)
{
    base.table_virtuelle.sur_dessin(base, ctx)
}

noeud_image_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    dessine_arrière_plan(ctx, base)
    dessine_bordure(ctx, base)
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_img)
    image := noeud.élément comme *HTML.HTMLImageElement
    dessine_image(ctx, image.image_data, noeud.donne_rectangle_contenu())
}

noeud_object_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    dessine_arrière_plan(ctx, base)
    dessine_bordure(ctx, base)
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_object)
    object := noeud.élément comme *HTML.HTMLObjectElement
    dessine_image(ctx, object.image_data, noeud.donne_rectangle_contenu())
}

noeud_text_input_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_input)

    dessine_arrière_plan(ctx, noeud)
    dessine_bordure(ctx, noeud)

    élément := noeud.élément comme *HTML.HTMLInputElement
    couleur := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur
    value := HTML.donne_value(élément)

    si value.est_vide() {
        value = HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_placeholder).donne_chaine_utf16()
        couleur.a = 128
    }

    saufsi value.est_vide() {
        rect_texte := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())
        ctx.commandes.dessine_texte(noeud.fonte, value, rect_texte, couleur, nul)
    }

    éditrice := élément.éditrice
    si éditrice && éditrice.curseur_est_affiché {
        rect_curseur := donne_rectangle_contenu(noeud)

        texte_avant_curseur := éditrice.texte_à_éditer
        texte_avant_curseur.points_de_code.taille = éditrice.curseur.fin

        curseur_x := éditrice.fonte.donne_largeur_texte(texte_avant_curseur)

        rect_curseur.x = rect_curseur.x + curseur_x comme r32
        rect_curseur.largeur = 1.0

        rect_curseur = ctx.donne_rectangle_corrigé(rect_curseur)

        ctx.commandes.remplis_rectangle(rect_curseur, CouleurRVBAN8(0, 0, 0, 255))
    }
}

noeud_button_input_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_input)

    dessine_arrière_plan(ctx, noeud)
    dessine_bordure(ctx, noeud)

    élément := noeud.élément comme *HTML.HTMLInputElement
    couleur := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur
    value := HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_value).donne_chaine_utf16()

    saufsi value.est_vide() {
        rect_texte := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())
        ctx.commandes.dessine_texte(noeud.fonte, value, rect_texte, couleur, nul)
    }
}

noeud_radio_button_input_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_input)

    input := noeud.élément comme *HTML.HTMLInputElement

    rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())

    remplis_cercle(ctx.commandes, rect, CouleurRVBAN8(255, 255, 255, 255))

    si input.checkedness {
        couleur := CouleurRVBAN8(0x92, 0xb3, 0x72, 255)
        dessine_cercle(ctx.commandes, rect, couleur)

        rect.x += 3
        rect.y += 3
        rect.largeur -= 6
        rect.hauteur -= 6
        remplis_cercle(ctx.commandes, rect, couleur)
    }
    sinon {
        dessine_cercle(ctx.commandes, rect, CouleurRVBAN8(0x8f, 0x8f, 0x9d, 255))
    }
}

noeud_textarea_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    assert(noeud.élément.local_name == HTML.TAG_textarea)

    dessine_arrière_plan(ctx, noeud)
    dessine_bordure(ctx, noeud)

    élément := noeud.élément comme *HTML.HTMLTextAreaElement
    couleur := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur
    value := HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_value).donne_chaine_utf16()

    si value.est_vide() {
        value = HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_placeholder).donne_chaine_utf16()
        couleur.a = 128
    }

    saufsi value.est_vide() {
        rect_texte := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())
        ctx.commandes.dessine_texte(noeud.fonte, value, rect_texte, couleur, nul)
    }
}

noeud_canvas_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    élément := noeud.élément comme *HTML.HTMLCanvasElement
    assert(noeud.élément.local_name == HTML.TAG_canvas)

    dessine_arrière_plan(ctx, noeud)
    dessine_bordure(ctx, noeud)

    tampon_de_rendu := HTML.donne_tampon_de_rendu(élément)

    image: TamponImageRVBA8Bit
    image.données = tampon_de_rendu.données.pointeur
    image.largeur = tampon_de_rendu.rect.largeur
    image.hauteur = tampon_de_rendu.rect.hauteur
    
    rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())
    ctx.commandes.dessine_image(image, rect)
}

noeud_select_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionSelect
    dessine_arrière_plan(ctx, noeud)

    commandes := ctx.commandes
    fonte := noeud.fonte
    assert(fonte != nul)

    couleur := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur

    rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_contenu())

    pour noeud.fragments {
        commandes.dessine_texte(fonte, it.texte, rect, couleur, nul)

        rect.x += donne_largeur_texte(fonte, it.texte) comme r32
    }
}

table_box_sur_dessin :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    table := base comme *TableBox
    pour table.enfants {
        si it.table_virtuelle.type == TableRowBox {
            row := it comme *TableRowBox

            dessine_arrière_plan(ctx, row)

            pour enfant_row dans row.enfants {
                saufsi enfant_row.table_virtuelle.type == TableCellBox {
                    continue
                }

                dessine(enfant_row, ctx)
            }

            continue
        }

        saufsi est_row_group_box(it) {
            continue
        }

        group_box := it comme *NoeudDeDispositionBloc
        dessine_arrière_plan(ctx, group_box)

        pour enfant_row_group dans it.enfants {
            saufsi enfant_row_group.table_virtuelle.type == TableRowBox {
                continue
            }

            row := enfant_row_group comme *TableRowBox

            dessine_arrière_plan(ctx, row)

            pour enfant_row dans row.enfants {
                saufsi enfant_row.table_virtuelle.type == TableCellBox {
                    continue
                }

                dessine(enfant_row, ctx)
            }
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions de dessin des ids des noeuds.
 * \{ */

noeud_disposition_bloc_sur_dessin_tampon_id :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionBloc

    ctx.remplis_rectangle_id(noeud)

    saufsi noeud.est_disposition_inline {
        dessine_tampon_id_enfants_block(noeud, ctx)
    }
    sinon {
        dessine_tampon_id_enfants_inline(noeud, ctx)
    }
}

noeud_disposition_inline_sur_dessin_tampon_id :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionInline
    ctx.remplis_rectangle_id(noeud)
    si noeud.est_inline_block() {
        dessine_tampon_id_enfants_block(noeud, ctx)
    }
    sinon {
        dessine_tampon_id_enfants_inline(noeud, ctx)
    }
}

noeud_disposition_remplacement_sur_dessin_tampon_id :: fonc (base: *NoeudDeDisposition, ctx: *ContexteDessin)
{
    noeud := base comme *NoeudDeDispositionRemplacement
    ctx.remplis_rectangle_id(noeud)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Utilitaires
 * \{ */

remplis_rectangle_id :: fonc (ctx: *ContexteDessin, noeud: *NoeudDeDisposition)
{
    remplis_rectangle_id(ctx, noeud, noeud.donne_rectangle_bordure())
}

remplis_rectangle_id :: fonc (ctx: *ContexteDessin, noeud: *NoeudDeDisposition, rect: RectanglePosDim(r32))
{
    commandes := ctx.commandes
    rect = ctx.donne_rectangle_corrigé(rect)

    si ctx.tampon_id_couleur {
        entropie := graine_aléatoire(noeud.id + 1)

        couleur: CouleurRVBA
        couleur.r = aléatoire_unilatérale(entropie)
        couleur.v = aléatoire_unilatérale(entropie)
        couleur.b = aléatoire_unilatérale(entropie)
        couleur.a = 1.0
        commandes.remplis_rectangle(rect, couleur)
        retourne
    }

    commandes.remplis_rectangle_id(rect, noeud.id)
}

dessine_image :: fonc (ctx: *ContexteDessin, image: ImageIO, rect: RectanglePosDim(r32))
{
    rect = ctx.donne_rectangle_corrigé(rect)
    commandes := ctx.commandes

    si image.donnees {
        commandes.dessine_image(image, rect)
    }
    sinon {
        /* À FAIRE : image nulle */
        commandes.remplis_rectangle(rect, CouleurRVBA(1.0, 0.0, 1.0, 1.0))
    }
}

dessine_arrière_plan :: fonc (ctx: *ContexteDessin, noeud: *NoeudDeDisposition)
{
    commandes := ctx.commandes

    background_color := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).couleur
    si background_color.a != 0 {
        rect_noeud: RectanglePosDim(r32)
        si noeud.parent == nul {
            /* L'arrière plan de l'élément racine doit s'appliquer au cannevas. */
            rect_noeud.hauteur = ctx.hauteur_vue comme r32
            rect_noeud.largeur = ctx.largeur_vue comme r32
        }
        sinon {
            rect_noeud = ctx.donne_rectangle_corrigé(noeud.donne_rectangle_bordure())
        }

        border_radius_top_left := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BorderTopLeftRadius).pixels comme r32
        border_radius_top_right := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BorderTopRightRadius).pixels comme r32
        border_radius_bottom_right := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomRightRadius).pixels comme r32
        border_radius_bottom_left := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomLeftRadius).pixels comme r32

        rayons := [ border_radius_top_left, border_radius_top_right, border_radius_bottom_right, border_radius_bottom_left ]
        commandes.remplis_rectangle_arrondi(rect_noeud, rayons, background_color)
    }
    sinon si noeud.parent == nul {
        dessine_arrière_plan_racine_html(ctx, noeud)
    }

    image := noeud.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundImage)
    si image.est_none() {
        retourne
    }

    opt_image_data := ctx.donne_image_pour_url(image.url_absolu)
    saufsi opt_image_data.possède_valeur() {
        retourne
    }

    background_attachment := noeud.propriétés.donne_valeur_calculée(IDPropriété.BackgroundAttachment)
    si background_attachment.est_mot_clé(PROP_fixed) {
        /* À FAIRE : dessine l'image mais avec des ciseaux pour le rect. */
        retourne
    }

    background_repeat := noeud.propriétés.donne_valeur_calculée(IDPropriété.BackgroundRepeat).background_repeat
    // imprime("background_repeat : %\n", background_repeat)
    répétition: RépétitionImage
    répétition.x = convertis_genre_répétition_image(background_repeat.horizontal)
    répétition.y = convertis_genre_répétition_image(background_repeat.vertical)

    image_data := opt_image_data.Quelque
    /* À FAIRE : background-clip */
    rect := noeud.donne_rectangle_bordure()

    rect_image := rect
    rect_image.largeur = image_data.largeur comme r32
    rect_image.hauteur = image_data.hauteur comme r32

    rect = ctx.donne_rectangle_corrigé(rect)
    rect_image = ctx.donne_rectangle_corrigé(rect_image)
    commandes.dessine_image(image_data, rect_image, rect, répétition)
}

dessine_arrière_plan_racine_html :: fonc (ctx: *ContexteDessin, noeud: *NoeudDeDisposition)
{
    élément := noeud.donne_élément()
    saufsi élément {
        retourne
    }

    saufsi élément.local_name == HTML.TAG_html {
        retourne
    }

    /* Hérite de l'arrière-plan du "body".
     * https://www.w3.org/TR/CSS21/colors.html#background */
    body := HTML.donne_élément_body(élément.document)
    saufsi body && body.noeud_de_disposition {
        retourne
    }

    background_color := body.noeud_de_disposition.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).couleur
    si background_color.a != 0 {
        /* À FAIRE : ne peint pas l'arrière-plan du "body" dans ce cas. */
        rect_noeud: RectanglePosDim(r32)
        rect_noeud.hauteur = ctx.hauteur_vue comme r32
        rect_noeud.largeur = ctx.largeur_vue comme r32
        ctx.commandes.remplis_rectangle(rect_noeud, background_color)
    }
}

convertis_genre_répétition_image :: fonc (mot_clé: CSSOMString) -> GenreRépétitionImage
{
    si mot_clé == PROP_repeat {
        retourne GenreRépétitionImage.Normale
    }
    si mot_clé == PROP_round {
        retourne GenreRépétitionImage.Arrondis
    }
    si mot_clé == PROP_space {
        retourne GenreRépétitionImage.Espacé
    }
    retourne GenreRépétitionImage.Aucune
}

dessine_bordure :: fonc (ctx: *ContexteDessin, noeud: *NoeudDeDisposition)
{
    bordure := donne_bordure(*noeud.propriétés.style)

    largeurs: [4]r32
    couleurs: [4]CouleurRVBAN8

    nombre_de_cotés := 0

    pour bordure.style {
        si it == LineStyle.None || it == LineStyle.Hidden {
            continue
        }

        nombre_de_cotés += 1

        coté := index_it comme z32 comme BorderEdge

        couleur: CouleurRVBAN8

        si it == LineStyle.Inset {
            si coté == BorderEdge.Top || coté == BorderEdge.Left {
                couleur = CouleurRVBAN8(154, 154, 154, 255)
            }
            sinon {
                couleur = CouleurRVBAN8(238, 238, 238, 255)
            }
        }
        sinon si it == LineStyle.Outset {
            si coté == BorderEdge.Top || coté == BorderEdge.Left {
                couleur = CouleurRVBAN8(238, 238, 238, 255)
            }
            sinon {
                couleur = CouleurRVBAN8(154, 154, 154, 255)
            }
        }
        sinon {
            /* À FAIRE : ce n'est pas calculé pour css_testsuites/chapter_08_-_box_model/border-bottom-width-092.html */
            couleur_bordure := bordure.color[coté]
            si couleur_bordure.est_mot_clé(PROP_currentColor) {
                couleur = noeud.propriétés.donne_valeur_utilisée(IDPropriété.Color).couleur
            }
            sinon {
                couleur = bordure.color[coté].couleur
            }
        }

        largeur := bordure.width[coté].pixels comme r32

        couleurs[coté] = couleur
        largeurs[coté] = largeur
    }

    si nombre_de_cotés == 0 {
        retourne
    }

    rect := ctx.donne_rectangle_corrigé(noeud.donne_rectangle_bordure())
    ctx.commandes.dessine_bordure(rect, largeurs, couleurs)
}

/** \} */
