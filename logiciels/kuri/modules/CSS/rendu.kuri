importe Aléa
importe CommandesRendu
importe InfosInterface

/* ------------------------------------------------------------------------- */
/** \nom ContexteDessin
 * \{ */

ContexteDessin :: struct {
    document: *HTML.Document
    globales: *GlobalesDessin
    commandes: *CommandesDeRendu
    arbre: *ArbreDeDisposition

    hauteur_vue: z32
    largeur_vue: z32

    décalage_y: r32
    id_stacking_context: n32

    tampon_id_couleur: bool
    est_fixé: bool
}

donne_rectangle_corrigé :: fonc (ctx: *ContexteDessin, rect: RectanglePosDim(r32)) -> RectanglePosDim(r32)
{
    /* Nous disposons les boxes comme si leur origine était leur coin du haut
     * gauche mais nous devons les dessiner comme si leur origine était leur
     * coin du bas gauche.
     * De plus, nous devons nous assurer que l'origine du document est le bas
     * gauche de la page et non le haut gauche. */
    rect.y = ctx.hauteur_vue comme r32 - rect.y - rect.hauteur
    saufsi ctx.est_fixé {
        rect.y += ctx.décalage_y
    }
    retourne rect
}

dessine :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    dessine_stacking_context(arbre.stacking_context, ctx)
    // imprime("---------------------------------------------\n")
    // dessine_stacking_context_standard(arbre.stacking_context, ctx)

    // imprime_et_réinitialise_fut_dessiné(arbre.stacking_context)

    // pour arbre.boxes {
    //     si it.fut_dessiné {
    //         it.fut_dessiné = faux
    //         continue
    //     }

    //     saufsi it.propriétés {
    //         continue
    //     }

    //     position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
    //     float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
    //     display := it.donne_display()
    //     imprime("box non dessiné : % (position : %, float : %, outer : %, inner : %) ", it.donne_nom_classe(), position, float, display.outer_type, display.inner_type)
    //     imprime_élément(it, "")
    // }

    retourne ctx.commandes
}

dessine_tampon_id_couleur :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    ctx.tampon_id_couleur = vrai

    dessine_stacking_context_tampon_id(arbre.stacking_context, ctx)

    ctx.tampon_id_couleur = faux

    retourne ctx.commandes
}

dessine_tampon_id :: fonc (arbre: *ArbreDeDisposition, ctx: *ContexteDessin) -> *CommandesDeRendu
{
    assert(ctx.tampon_id_couleur == faux)

    ctx.arbre = arbre
    ctx.commandes = arbre.donne_commandes_de_rendu()
    réinitialise(ctx.commandes)

    dessine_stacking_context_tampon_id(arbre.stacking_context, ctx)

    définis_taille_tampon_id(arbre, ctx.largeur_vue, ctx.hauteur_vue)

    retourne ctx.commandes
}

dessine :: fonc (box: *Box, ctx: *ContexteDessin)
{
    si box.id_stacking_context != ctx.id_stacking_context {
        retourne
    }

    si box.table_virtuelle.sur_dessin {
        box.table_virtuelle.sur_dessin(box, ctx)
    }
}

dessine_fragment :: fonc (box: *Box, fragment: *Fragment, lignes_tenante: *LignesTenante, ctx: *ContexteDessin)
{
    si box.table_virtuelle.sur_dessin_fragment {
        box.table_virtuelle.sur_dessin_fragment(box, fragment, lignes_tenante, ctx)
    }
    sinon {
        box.dessine(ctx)
    }
}

dessine_tampon_id :: fonc (box: *Box, ctx: *ContexteDessin)
{
    si box.id_stacking_context != ctx.id_stacking_context {
        retourne
    }

    si box.table_virtuelle.sur_dessin_tampon_id {
        box.table_virtuelle.sur_dessin_tampon_id(box, ctx)
    }
}

dessine_fragment_tampon_id :: fonc (box: *Box, fragment: *Fragment, ctx: *ContexteDessin)
{
    saufsi box.table_virtuelle.sur_dessin_fragment_tampon_id {
        ctx.remplis_rectangle_id(box, fragment.donne_rectangle())

        pour box.enfants {
            box.dessine_tampon_id(ctx)
        }

        retourne
    }

    box.table_virtuelle.sur_dessin_fragment_tampon_id(box, fragment, ctx)
}

dessine_enfants_block :: fonc (box: *BlockBox, ctx: *ContexteDessin)
{
    overflow_x := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    overflow_y := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_rembourrage())
        ctx.commandes.débute_ciselage(rect)
    }

    pour box.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        saufsi position.est_mot_clé(PROP_static) {
            continue
        }
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        saufsi float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    pour box.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        si position.est_mot_clé(PROP_static) {
            continue
        }
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        saufsi float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    pour box.enfants {
        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        si float.est_none() {
            continue
        }
        dessine(it, ctx)
    }

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        ctx.commandes.termine_ciselage()
    }
}

dessine_tampon_id_enfants_block :: fonc (box: *BlockBox, ctx: *ContexteDessin)
{
    overflow_x := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    overflow_y := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_rembourrage())
        ctx.commandes.débute_ciselage(rect)
    }

    pour box.enfants {
        dessine_tampon_id(it, ctx)
    }

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        ctx.commandes.termine_ciselage()
    }
}

dessine_enfants_inline :: fonc (box: *BlockBox, ctx: *ContexteDessin)
{
    saufsi box.lignes_tenante {
        retourne
    }

    overflow_x := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    overflow_y := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_rembourrage())
        ctx.commandes.débute_ciselage(rect)
    }

    pour * box.lignes_tenante.fragments {
        dessine_fragment(it.box, it, box.lignes_tenante, ctx)
    }

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        ctx.commandes.termine_ciselage()
    }
}

dessine_tampon_id_enfants_inline :: fonc (box: *BlockBox, ctx: *ContexteDessin)
{
    saufsi box.lignes_tenante {
        retourne
    }

    overflow_x := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)
    overflow_y := box.propriétés.donne_valeur_utilisée(IDPropriété.OverflowX)

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_rembourrage())
        ctx.commandes.débute_ciselage(rect)
    }

    pour * box.lignes_tenante.fragments {
        dessine_fragment_tampon_id(it.box, it, ctx)
    }

    saufsi overflow_x.est_mot_clé(PROP_visible) && overflow_y.est_mot_clé(PROP_visible) {
        ctx.commandes.termine_ciselage()
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions de dessin des boxes.
 * \{ */

block_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *BlockBox

    si box.est_box_non_anonyme() || box.est_pseudo_element {
        dessine_arrière_plan(ctx, box)
        dessine_bordure(ctx, box)
    }

    saufsi box.est_disposition_inline {
        dessine_enfants_block(box, ctx)
    }
    sinon {
        dessine_enfants_inline(box, ctx)
    }
}

inline_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *InlineBox

    si box.est_inline_block() {
        block_box_sur_dessin(box, ctx)
        retourne
    }

    dessine_enfants_inline(box, ctx)
}

inline_box_sur_dessin_fragment :: fonc (base: *Box, fragment: *Fragment, lignes_tenante: *LignesTenante, ctx: *ContexteDessin)
{
    si fragment.type == Fragment.Type.InlineBlock {
        block_box_sur_dessin(base, ctx)
        retourne
    }

    si fragment.type == Fragment.Type.MargeDébut || fragment.type == Fragment.Type.MargeFin {
        retourne
    }

    si fragment.type == Fragment.Type.RembourrageDébut {
        propriétés := base.propriétés

        background_color := propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).donne_couleur()

        /* Le rembourrage vertical n'affecte pas la taille mais doit être inclus dans le dessin. */
        padding_top := propriétés.donne_valeur_utilisée(IDPropriété.PaddingTop).donne_pixels() comme r32
        padding_bottom := propriétés.donne_valeur_utilisée(IDPropriété.PaddingBottom).donne_pixels() comme r32

        si background_color.a != 0 {
            border_radius_top_left := propriétés.donne_valeur_utilisée(IDPropriété.BorderTopLeftRadius).donne_pixels() comme r32
            border_radius_top_right := propriétés.donne_valeur_utilisée(IDPropriété.BorderTopRightRadius).donne_pixels() comme r32
            border_radius_bottom_right := propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomRightRadius).donne_pixels() comme r32
            border_radius_bottom_left := propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomLeftRadius).donne_pixels() comme r32

            premier_fragment := fragment
            dernier_fragment := lignes_tenante.fragments.pointeur + lignes_tenante.fragments.taille
            tantque fragment != dernier_fragment {
                rect_box := ctx.donne_rectangle_corrigé(fragment.donne_rectangle())
                rect_box.y -= padding_top
                rect_box.hauteur += padding_top + padding_bottom

                est_premier_fragment := fragment == premier_fragment
                est_dernier_fragment := fragment.type == Fragment.Type.RembourrageFin && fragment.box == base

                si est_premier_fragment {
                    rayons: RayonsRectangle
                    rayons.haut_gauche = border_radius_top_left
                    rayons.bas_gauche =  border_radius_bottom_left
                    ctx.commandes.remplis_rectangle_arrondi(rect_box, rayons, background_color)
                }
                sinon si est_dernier_fragment {
                    rayons: RayonsRectangle
                    rayons.haut_droite = border_radius_top_right
                    rayons.bas_droite = border_radius_bottom_right
                    ctx.commandes.remplis_rectangle_arrondi(rect_box, rayons, background_color)
                }
                sinon {
                    ctx.commandes.remplis_rectangle(rect_box, background_color)
                }

                si est_dernier_fragment {
                    arrête
                }

                fragment += 1
            }
        }
    }
}

text_box_sur_dessin_fragment :: fonc (base: *Box, fragment: *Fragment, lignes_tenante: *LignesTenante @inutilisée, ctx: *ContexteDessin)
{
    box := base comme *TextBox

    propriétés := donne_propriétés(box)

    effets: EffetsTexte

    line := propriétés.donne_valeur_utilisée(IDPropriété.TextDecorationLine)
    saufsi line.est_mot_clé(PROP_none) {
        decoration := line.donne_text_decoration_line()
        couleur := vers_couleur_rvba(propriétés.donne_valeur_utilisée(IDPropriété.TextDecorationColor).donne_couleur())

        si decoration.UNDERLINE {
            effets.souslignage = vrai
            effets.couleur_souslignage = couleur
        }
        si decoration.OVERLINE {
            effets.surlignage = vrai
            effets.couleur_surlignage = couleur
        }
        si decoration.LINE_THROUGH {
            effets.barrage = vrai
            effets.couleur_barrage = couleur
        }
    }

    commandes := ctx.commandes
    fonte := box.fonte
    assert(fonte != nul)

    couleur := propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()

    rect := ctx.donne_rectangle_corrigé(fragment.donne_rectangle())

    texte := box.fragments[fragment.indice_début].texte

    commandes.dessine_texte(fonte, texte, rect, couleur, *effets)
}

replaced_box_sur_dessin_fragment :: fonc (base: *Box, fragment: *Fragment @inutilisée, lignes_tenante: *LignesTenante @inutilisée, ctx: *ContexteDessin)
{
    base.table_virtuelle.sur_dessin(base, ctx)
}

image_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    dessine_arrière_plan(ctx, base)
    dessine_bordure(ctx, base)
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_img)
    image := box.donne_élément() comme *HTML.HTMLImageElement
    dessine_image(ctx, image.image_data, box.donne_rectangle_contenu())
}

object_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    dessine_arrière_plan(ctx, base)
    dessine_bordure(ctx, base)
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_object)
    object := box.donne_élément() comme *HTML.HTMLObjectElement
    dessine_image(ctx, object.image_data, box.donne_rectangle_contenu())
}

text_input_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_input)

    dessine_arrière_plan(ctx, box)
    dessine_bordure(ctx, box)

    élément := box.donne_élément() comme *HTML.HTMLInputElement
    couleur := box.propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()
    value := HTML.donne_value(élément)
    state := HTML.donne_state(élément)

    si value.est_vide() {
        value = HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_placeholder).donne_chaine_utf16()
        couleur.a = 128
    }
    sinon si state == HTML.HTMLInputElement.State.Password {
        /* U+002A ASTERISK (*) or U+25CF BLACK CIRCLE (●) */
        élément.texte_mot_de_passe.unités.taille = 0

        pour value.taille() {
            tableau_ajoute(*élément.texte_mot_de_passe.unités, 0x25CF)
        }

        value = élément.texte_mot_de_passe
    }

    saufsi value.est_vide() {
        rect_texte := donne_rect_texte_pour_input(box)
        rect_texte = ctx.donne_rectangle_corrigé(rect_texte)
        ctx.commandes.dessine_texte(box.fonte, value, rect_texte, couleur, nul)
    }

    éditrice := élément.éditrice
    si éditrice && éditrice.curseur_est_affiché {
        rect_curseur := donne_rect_texte_pour_input(box)

        curseur_x: r32
        si state == HTML.HTMLInputElement.State.Password {
            texte_avant_curseur := value
            texte_avant_curseur.unités.taille = éditrice.curseur.fin
            curseur_x = éditrice.fonte.donne_largeur_texte(texte_avant_curseur)
        }
        sinon {
            texte_avant_curseur := éditrice.texte_à_éditer
            texte_avant_curseur.points_de_code.taille = éditrice.curseur.fin
            curseur_x = éditrice.fonte.donne_largeur_texte(texte_avant_curseur)
        }

        rect_curseur.x = rect_curseur.x + curseur_x
        rect_curseur.largeur = 1.0

        rect_curseur = ctx.donne_rectangle_corrigé(rect_curseur)

        ctx.commandes.remplis_rectangle(rect_curseur, CouleurRVBAN8(0, 0, 0, 255))
    }
}

button_input_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_input)

    dessine_arrière_plan(ctx, box)
    dessine_bordure(ctx, box)

    élément := box.donne_élément() comme *HTML.HTMLInputElement
    couleur := box.propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()
    value := HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_value).donne_chaine_utf16()

    saufsi value.est_vide() {
        rect_texte := donne_rect_texte_pour_input(box)
        rect_texte = ctx.donne_rectangle_corrigé(rect_texte)
        ctx.commandes.dessine_texte(box.fonte, value, rect_texte, couleur, nul)
    }
}

donne_rect_texte_pour_input :: fonc (box: *ReplacedBox) -> RectanglePosDim(r32)
{
    rect_texte := box.donne_rectangle_contenu()
    
    /* Centre le texte dans le rectangle. Le centrage se fait en centrant les minuscules. */
    métriques := donne_métriques_fonte(box.fonte)
    taille_minuscule := donne_hauteur_glyph(box.fonte, 'x' comme n32).Quelque comme r32

    taille_disponible := (rect_texte.hauteur - taille_minuscule)
    déplacement := taille_disponible * 0.5

    position_y_ligne_de_base := rect_texte.y + rect_texte.hauteur - déplacement
    position_y := position_y_ligne_de_base - métriques.jambage_supérieur

    rect_texte.y = position_y
    rect_texte.hauteur = métriques.donne_hauteur_ligne()
    retourne rect_texte
}

radio_button_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_input)

    input := box.donne_élément() comme *HTML.HTMLInputElement

    rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_contenu())

    remplis_cercle(ctx.commandes, rect, CouleurRVBAN8(255, 255, 255, 255))

    si input.checkedness {
        couleur := CouleurRVBAN8(0x92, 0xb3, 0x72, 255)
        dessine_cercle(ctx.commandes, rect, couleur)

        rect.x += 3
        rect.y += 3
        rect.largeur -= 6
        rect.hauteur -= 6
        remplis_cercle(ctx.commandes, rect, couleur)
    }
    sinon {
        dessine_cercle(ctx.commandes, rect, CouleurRVBAN8(0x8f, 0x8f, 0x9d, 255))
    }
}

checkbox_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_input)

    input := box.donne_élément() comme *HTML.HTMLInputElement

    rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_contenu())

    remplis_rectangle(ctx.commandes, rect, CouleurRVBAN8(255, 255, 255, 255))
    dessine_rectangle(ctx.commandes, rect, CouleurRVBAN8(0x8f, 0x8f, 0x9d, 255))

    si input.checkedness {
        rect_image := rect
        rect_image.x += 2
        rect_image.y += 2
        rect_image.hauteur -= 4
        rect_image.largeur -= 4
        dessine_image(ctx.commandes, ctx.globales.image_checkbox, rect)
    }
}

textarea_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    assert(box.donne_élément().local_name == HTML.TAG_textarea)

    dessine_arrière_plan(ctx, box)
    dessine_bordure(ctx, box)

    élément := box.donne_élément() comme *HTML.HTMLTextAreaElement
    couleur := box.propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()
    value := HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_value).donne_chaine_utf16()

    si value.est_vide() {
        value = HTML.donne_attribut_ou_chaine_vide(élément, HTML.ATTR_placeholder).donne_chaine_utf16()
        couleur.a = 128
    }

    saufsi value.est_vide() {
        rect_texte := ctx.donne_rectangle_corrigé(box.donne_rectangle_contenu())
        ctx.commandes.dessine_texte(box.fonte, value, rect_texte, couleur, nul)
    }
}

canvas_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    élément := box.donne_élément() comme *HTML.HTMLCanvasElement
    assert(box.donne_élément().local_name == HTML.TAG_canvas)

    dessine_arrière_plan(ctx, box)
    dessine_bordure(ctx, box)

    tampon_de_rendu := HTML.donne_tampon_de_rendu(élément)

    image: TamponImageRVBA8Bit
    image.données = tampon_de_rendu.données.pointeur
    image.largeur = tampon_de_rendu.rect.largeur
    image.hauteur = tampon_de_rendu.rect.hauteur
    
    rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_contenu())
    ctx.commandes.dessine_image(image, rect)
}

select_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *SelectBox
    dessine_arrière_plan(ctx, box)

    commandes := ctx.commandes
    fonte := box.fonte
    assert(fonte != nul)

    couleur := box.propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()

    rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_contenu())

    pour box.fragments {
        commandes.dessine_texte(fonte, it.texte, rect, couleur, nul)

        rect.x += donne_largeur_texte(fonte, it.texte)
    }
}

table_box_sur_dessin :: fonc (base: *Box, ctx: *ContexteDessin)
{
    table := base comme *TableBox
    pour table.enfants {
        si it.table_virtuelle.type == TableRowBox {
            row := it comme *TableRowBox

            dessine_arrière_plan(ctx, row)

            pour enfant_row dans row.enfants {
                saufsi enfant_row.table_virtuelle.type == TableCellBox {
                    continue
                }

                dessine(enfant_row, ctx)
            }

            continue
        }

        saufsi est_row_group_box(it) {
            continue
        }

        group_box := it comme *BlockBox
        dessine_arrière_plan(ctx, group_box)

        pour enfant_row_group dans it.enfants {
            saufsi enfant_row_group.table_virtuelle.type == TableRowBox {
                continue
            }

            row := enfant_row_group comme *TableRowBox

            dessine_arrière_plan(ctx, row)

            pour enfant_row dans row.enfants {
                saufsi enfant_row.table_virtuelle.type == TableCellBox {
                    continue
                }

                dessine(enfant_row, ctx)
            }
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions de dessin des ids des boxes.
 * \{ */

block_box_sur_dessin_tampon_id :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *BlockBox

    ctx.remplis_rectangle_id(box)

    saufsi box.est_disposition_inline {
        dessine_tampon_id_enfants_block(box, ctx)
    }
    sinon {
        dessine_tampon_id_enfants_inline(box, ctx)
    }
}

inline_box_sur_dessin_tampon_id :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *InlineBox
    ctx.remplis_rectangle_id(box)
    si box.est_inline_block() {
        dessine_tampon_id_enfants_block(box, ctx)
    }
    sinon {
        dessine_tampon_id_enfants_inline(box, ctx)
    }
}

inline_box_sur_dessin_fragment_id :: fonc (base: *Box, fragment: *Fragment, ctx: *ContexteDessin)
{
    si fragment.type == Fragment.Type.InlineBlock {
        block_box_sur_dessin_tampon_id(base, ctx)
        retourne
    }

    si fragment.type == Fragment.Type.MargeDébut || fragment.type == Fragment.Type.MargeFin {
        retourne
    }

    rect_box := ctx.donne_rectangle_corrigé(fragment.donne_rectangle())
    ctx.remplis_rectangle_id(base, rect_box)
}

replaced_box_sur_dessin_tampon_id :: fonc (base: *Box, ctx: *ContexteDessin)
{
    box := base comme *ReplacedBox
    ctx.remplis_rectangle_id(box)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Utilitaires
 * \{ */

remplis_rectangle_id :: fonc (ctx: *ContexteDessin, box: *Box)
{
    remplis_rectangle_id(ctx, box, box.donne_rectangle_bordure())
}

remplis_rectangle_id :: fonc (ctx: *ContexteDessin, box: *Box, rect: RectanglePosDim(r32))
{
    commandes := ctx.commandes
    rect = ctx.donne_rectangle_corrigé(rect)

    si ctx.tampon_id_couleur {
        entropie := graine_aléatoire(box.id + 1)

        couleur: CouleurRVBA
        couleur.r = aléatoire_unilatérale(entropie)
        couleur.v = aléatoire_unilatérale(entropie)
        couleur.b = aléatoire_unilatérale(entropie)
        couleur.a = 1.0
        commandes.remplis_rectangle(rect, couleur)
        retourne
    }

    commandes.remplis_rectangle_id(rect, box.id)
}

dessine_image :: fonc (ctx: *ContexteDessin, image: NouvelleImage, rect: RectanglePosDim(r32))
{
    rect = ctx.donne_rectangle_corrigé(rect)
    commandes := ctx.commandes

    si image.données {
        commandes.dessine_image(image, rect)
    }
    sinon {
        /* À FAIRE : image nulle */
        commandes.remplis_rectangle(rect, CouleurRVBA(1.0, 0.0, 1.0, 1.0))
    }
}

dessine_arrière_plan :: fonc (ctx: *ContexteDessin, box: *Box)
{
    commandes := ctx.commandes

    background_color := box.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).donne_couleur()
    si background_color.a != 0 {
        rect_box: RectanglePosDim(r32)
        si box.parent == nul {
            /* L'arrière plan de l'élément racine doit s'appliquer au canevas. */
            rect_box.hauteur = ctx.hauteur_vue comme r32
            rect_box.largeur = ctx.largeur_vue comme r32
        }
        sinon {
            rect_box = ctx.donne_rectangle_corrigé(box.donne_rectangle_bordure())
        }

        border_radius_top_left := box.propriétés.donne_valeur_utilisée(IDPropriété.BorderTopLeftRadius).donne_pixels() comme r32
        border_radius_top_right := box.propriétés.donne_valeur_utilisée(IDPropriété.BorderTopRightRadius).donne_pixels() comme r32
        border_radius_bottom_right := box.propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomRightRadius).donne_pixels() comme r32
        border_radius_bottom_left := box.propriétés.donne_valeur_utilisée(IDPropriété.BorderBottomLeftRadius).donne_pixels() comme r32

        rayons: RayonsRectangle = ---
        rayons.haut_gauche = border_radius_top_left
        rayons.bas_gauche = border_radius_bottom_left
        rayons.haut_droite = border_radius_top_right
        rayons.bas_droite = border_radius_bottom_right

        commandes.remplis_rectangle_arrondi(rect_box, rayons, background_color)
    }
    sinon si box.parent == nul {
        dessine_arrière_plan_racine_html(ctx, box)
    }

    image := box.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundImage)
    si image.est_none() {
        retourne
    }

    opt_image_data := ctx.donne_image_pour_url(image.donne_url_absolu())
    saufsi opt_image_data.possède_valeur() {
        retourne
    }

    background_attachment := box.propriétés.donne_valeur_calculée(IDPropriété.BackgroundAttachment)
    si background_attachment.est_mot_clé(PROP_fixed) {
        /* À FAIRE : dessine l'image mais avec des ciseaux pour le rect. */
        retourne
    }

    background_repeat := box.propriétés.donne_valeur_calculée(IDPropriété.BackgroundRepeat).donne_background_repeat()
    // imprime("background_repeat : %\n", background_repeat)
    paramètres: ParamètresRenduImage
    paramètres.répétition.x = convertis_genre_répétition_image(background_repeat.horizontal)
    paramètres.répétition.y = convertis_genre_répétition_image(background_repeat.vertical)

    image_data := opt_image_data.Quelque
    /* À FAIRE : background-clip */
    rect := box.donne_rectangle_bordure()

    rect_image := rect
    rect_image.largeur = image_data.desc.largeur comme r32
    rect_image.hauteur = image_data.desc.hauteur comme r32

    position := box.propriétés.donne_valeur_calculée(IDPropriété.BackgroundPosition).donne_background_position()

    // À FAIRE : pourcentages, mots-clés
    si position.décalage_horizontal.est_pixels() {
        rect_image.x += position.décalage_horizontal.donne_pixels() comme r32
    }
    si position.décalage_vertical.est_pixels() {
        rect_image.y += position.décalage_vertical.donne_pixels() comme r32
    }

    rect = ctx.donne_rectangle_corrigé(rect)
    rect_image = ctx.donne_rectangle_corrigé(rect_image)
    commandes.dessine_image(image_data, rect_image, rect, paramètres)
}

dessine_arrière_plan_racine_html :: fonc (ctx: *ContexteDessin, box: *Box)
{
    élément := box.donne_élément()
    saufsi élément {
        retourne
    }

    saufsi élément.local_name == HTML.TAG_html {
        retourne
    }

    /* Hérite de l'arrière-plan du "body".
     * https://www.w3.org/TR/CSS21/colors.html#background */
    body := HTML.donne_élément_body(élément.document)
    saufsi body && body.box {
        retourne
    }

    background_color := body.box.propriétés.donne_valeur_utilisée(IDPropriété.BackgroundColor).donne_couleur()
    si background_color.a != 0 {
        /* À FAIRE : ne peint pas l'arrière-plan du "body" dans ce cas. */
        rect_box: RectanglePosDim(r32)
        rect_box.hauteur = ctx.hauteur_vue comme r32
        rect_box.largeur = ctx.largeur_vue comme r32
        ctx.commandes.remplis_rectangle(rect_box, background_color)
    }
}

convertis_genre_répétition_image :: fonc (mot_clé: CSSOMString) -> GenreRépétitionImage
{
    si mot_clé == PROP_repeat {
        retourne GenreRépétitionImage.Normale
    }
    si mot_clé == PROP_round {
        retourne GenreRépétitionImage.Arrondis
    }
    si mot_clé == PROP_space {
        retourne GenreRépétitionImage.Espacé
    }
    retourne GenreRépétitionImage.Aucune
}

dessine_bordure :: fonc (ctx: *ContexteDessin, box: *Box)
{
    bordure := donne_bordure(*box.propriétés.style)

    largeurs: [4]r32
    couleurs: [4]CouleurRVBAN8

    nombre_de_cotés := 0

    pour bordure.style {
        si it == LineStyle.None || it == LineStyle.Hidden {
            continue
        }

        nombre_de_cotés += 1

        coté := indice_it comme z32 comme BorderEdge

        couleur: CouleurRVBAN8

        si it == LineStyle.Inset {
            si coté == BorderEdge.Top || coté == BorderEdge.Left {
                couleur = CouleurRVBAN8(154, 154, 154, 255)
            }
            sinon {
                couleur = CouleurRVBAN8(238, 238, 238, 255)
            }
        }
        sinon si it == LineStyle.Outset {
            si coté == BorderEdge.Top || coté == BorderEdge.Left {
                couleur = CouleurRVBAN8(238, 238, 238, 255)
            }
            sinon {
                couleur = CouleurRVBAN8(154, 154, 154, 255)
            }
        }
        sinon {
            /* À FAIRE : ce n'est pas calculé pour css_testsuites/chapter_08_-_box_model/border-bottom-width-092.html */
            couleur_bordure := bordure.color[coté]
            si couleur_bordure.est_mot_clé(PROP_currentColor) {
                couleur = box.propriétés.donne_valeur_utilisée(IDPropriété.Color).donne_couleur()
            }
            sinon {
                couleur = bordure.color[coté].donne_couleur()
            }
        }

        largeur := bordure.width[coté].donne_pixels() comme r32

        couleurs[coté] = couleur
        largeurs[coté] = largeur
    }

    si nombre_de_cotés == 0 {
        retourne
    }

    largeurs_bordure: LargeursBordureRectangle
    largeurs_bordure.haut = largeurs[BorderEdge.Top]
    largeurs_bordure.bas = largeurs[BorderEdge.Bottom]
    largeurs_bordure.gauche = largeurs[BorderEdge.Left]
    largeurs_bordure.droite = largeurs[BorderEdge.Right]

    couleurs_bordure := crée_couleurs_bordure_rectangle(couleurs[BorderEdge.Top], couleurs[BorderEdge.Bottom], couleurs[BorderEdge.Left], couleurs[BorderEdge.Right])

    rect := ctx.donne_rectangle_corrigé(box.donne_rectangle_bordure())
    ctx.commandes.dessine_bordure(rect, largeurs_bordure, couleurs_bordure)
}

/** \} */
