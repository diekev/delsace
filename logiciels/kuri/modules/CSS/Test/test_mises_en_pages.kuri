importe Chaine
importe CSS
importe Ensemble
importe Fondation
importe #inemployé HTML
importe #inemployé JavaScript
importe Structures
importe SysFichier
importe Temps

principale :: fonc () -> z32
{
    logue_propriétés_non_supportées = faux
    logue_erreurs_de_parsage = faux

    args := arguments_ligne_commande()

    si args.taille == 2 {
        si args[1] != "--ajourne-fichiers" {
            imprime("Argument '%' inconnu\n", args[1])
            retourne 1
        }

        ajourne_fichiers()
        retourne 0
    }

    si args.taille > 2 {
        imprime("Erreur : trop d'arguments.\n")
        imprime("Utilisation : % [--ajourne-fichiers]\n", args[0])
        retourne 1
    }

    retourne test_mises_en_pages() comme z32
}

test_mises_en_pages :: fonc () -> bool
{
    début := maintenant_précis()

    chemins_sources := donne_chemins_fichiers_sources()
    diffère déloge_tableau_et_ses_éléments(chemins_sources, détruit_chemin)

    chemins_sorties := donne_chemins_fichiers_sorties(chemins_sources)
    diffère déloge_tableau_et_ses_éléments(chemins_sources, détruit_chemin)

    échecs: [..]CheminFichier
    diffère déloge(échecs)

    nombre_de_tests_passants: z32

    pour chemins_sources {
        imprime(".")

        impression := donne_texte_pour_sortie(it)
        diffère déloge(impression)

        chemin_sortie := chemins_sorties[index_it]

        sortie := contenu_fichier_texte(chemin_sortie)
        diffère déloge(sortie)

        si impression != sortie {
            tableau_ajoute(*échecs, it)
        }
        sinon {
            nombre_de_tests_passants += 1
        }
    }

    imprime("\n")

    fin := début.temps_écoulé_millisecondes()

    si échecs.taille != 0 {
        pour échecs {
            imprime("[ \x1b[31mÉCHEC\x1b[37m ] : %\n", it)
        }
    }
    sinon {
        imprime("[ \x1b[32mPASSE\x1b[37m ]\n")
    }

    imprime("\n")
    imprime("Tests    : % réussis, % en tout\n", nombre_de_tests_passants, chemins_sources.taille)
    imprime("Temps    : %ms\n", fin)
    imprime("\n")

    retourne échecs.taille != 0
}

ajourne_fichiers :: fonc ()
{
    chemins_sources := donne_chemins_fichiers_sources()
    diffère déloge_tableau_et_ses_éléments(chemins_sources, détruit_chemin)

    chemins_sorties := donne_chemins_fichiers_sorties(chemins_sources)
    diffère déloge_tableau_et_ses_éléments(chemins_sources, détruit_chemin)

    pour chemins_sources {
        impression := donne_texte_pour_sortie(it)
        diffère déloge(impression)

        chemin_sortie := chemins_sorties[index_it]

        fichier := tente ouvre_fichier_crée_si_non_existant(chemin_sortie, pour_écriture_tronquée) piège err {
            imprime("impossible de créer le fichier '%' %\n", chemin_sortie, err)
            retourne
        }

        _ := écris(*fichier, impression)
    }
}

donne_chemins_fichiers_sources :: fonc () -> [..]CheminFichier
{
    résultat: [..]CheminFichier

    dossier := CheminFichier(copie_chaine("fichiers/sources"))

    dossiers_à_visiter: Pile(CheminFichier)
    dossiers_à_visiter.empile(dossier) 

    tantque !dossiers_à_visiter.est_vide() {
        dossier_courant := dossiers_à_visiter.dépile()
        diffère détruit_chemin(dossier_courant)

        pour ExploratriceFichier(dossier_courant) {
            si it.est_un_dossier() {
                dossiers_à_visiter.empile(copie_chemin(it))
                continue
            }

            si it.extension() != ".html" {
                continue
            }

            tableau_ajoute(*résultat, copie_chemin(it))
        }
    }

    retourne résultat
}

donne_chemins_fichiers_sorties :: fonc (sources: []CheminFichier) -> [..]CheminFichier
{
    résultat: [..]CheminFichier
    tableau_réserve(*résultat, sources.taille)

    pour sources {
        tableau_ajoute(*résultat, donne_chemin_pour_fichier_sortie(it))
    }

    retourne résultat
}

donne_chemin_pour_fichier_sortie :: fonc (chemin: CheminFichier) -> CheminFichier
{
    dossier := chemin_parent(chemin)
    diffère détruit_chemin(dossier)

    nom_fichier_texte := enchaine(chemin.nom_fichier(), ".txt")

    tmp := dossier / nom_fichier_texte
    diffère détruit_chemin(tmp)

    résultat: CheminFichier
    résultat.chn = remplace(tmp.chn, "fichiers/sources", "fichiers/sorties")
    retourne résultat
}

donne_texte_pour_sortie :: fonc (chemin: CheminFichier) -> chaine
{
    contenu := contenu_fichier_texte(chemin)
    diffère déloge(contenu)

    mv: JavaScript.MachineVirtuelle
    JavaScript.initialise_mv(nul, *mv)
    diffère JavaScript.détruit_données_mv(*mv)

    parsat := HTML.parse_document(JavaScript.donne_tas_de_mémoire(*mv), contenu)
    diffère HTML.détruit(parsat)

    largeur := 1920
    hauteur := 1080
    arbre := donne_arbre_de_disposition_ajourné(parsat.document, largeur, hauteur)
    saufsi arbre && arbre.racine {
        imprime("Impossible de crée un arbre de disposition")
        retourne ""
    }

    retourne donne_chaine_impression_arbre(arbre)
}
