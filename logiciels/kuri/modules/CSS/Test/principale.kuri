importe Chaine
importe CSS
importe Ensemble
importe Fondation
importe SysFichier

/* https://www.w3.org/TR/css-cascade/#defaulting-keywords */
parse_css_wide_keyword :: fonc (parseuse: &Parseuse(ComponentValue)) -> Optionnel(CSSOMString)
{
    mots_clés := ["initial", "inherit", "unset", "revert"]
    lexème := parseuse.lexème_courant()

    pour mots_clés {
        si lexème.est_identifiant(it) {
            parseuse.avance()
            retourne lexème.donne_texte()
        }
    }
}

/* https://drafts.csswg.org/css-display/#the-display-properties */
parse_propriété_display :: fonc (value: [..]ComponentValue) -> Optionnel([..]ValeurDeStyle)
{
    parseuse := initialise_une_parseuse(value)

    mot_clé := parseuse.parse_display_outside()
    si mot_clé.possède_valeur() {
        résultat: [..]ValeurDeStyle
        tableau_ajoute(*résultat, ValeurDeStyle(mot_clé.Quelque))
        retourne résultat
    }
}

parse_display_outside :: fonc (parseuse: &Parseuse(ComponentValue)) -> Optionnel(CSSOMString)
{
    opt_mot_clé := parse_css_wide_keyword(parseuse)
    si opt_mot_clé.possède_valeur() {
        retourne opt_mot_clé
    }

    /* block | inline | run-in */
    mots_clés := ["block", "inline", "run-in"]
    lexème := parseuse.lexème_courant()

    pour mots_clés {
        si lexème.est_identifiant(it) {
            parseuse.avance()
            retourne lexème.donne_texte()
        }
    }
}

ContexteParsageFeuilleDeStyle :: struct {
    propriétés_non_supportées: [..]ChaineUTF16
}

rapporte_propriétés_non_supportées :: fonc (ctx: *ContexteParsageFeuilleDeStyle)
{
    pour ctx.propriétés_non_supportées {
        imprime("[CSS] propriété non-supportée : %\n", it)
    }
}

détruit_données_contexte :: fonc (ctx: *ContexteParsageFeuilleDeStyle)
{
    déloge(ctx.propriétés_non_supportées)
}

propriété_est_supportée :: fonc (ctx: *ContexteParsageFeuilleDeStyle, nom: CSSOMString) -> bool
{
    si nom == "display" {
        retourne vrai
    }

    ensemble_ajoute(*ctx.propriétés_non_supportées, nom)
    retourne faux
}

/* https://www.w3.org/TR/css-syntax-3/#parse-a-css-stylesheet */
parse_a_css_style_sheet :: fonc (ctx: *ContexteParsageFeuilleDeStyle, contenu: chaine) -> *CSSStyleSheet
{
    lexèmes := lèxe_style(contenu)
    diffère déloge(lexèmes)

    stylesheet := parse_a_stylesheet(lexèmes)

    résultat := loge(CSSStyleSheet)
    résultat.type = crée_chaine_utf16("text/css")

    pour stylesheet.value {
        si it.type == ParsedQualifiedRule {
            parse_a_style_rule(ctx, résultat, it comme *ParsedQualifiedRule)
        }
    }

    retourne résultat
}

/* https://www.w3.org/TR/css-syntax-3/#style-rules */
parse_a_style_rule :: fonc (ctx: *ContexteParsageFeuilleDeStyle, parent_style_sheet: *CSSStyleSheet, parsed_rule: *ParsedQualifiedRule)
{
    selectors := parse_selector_list(parsed_rule.prelude)
    saufsi selectors.possède_valeur() {
        /* Si nous n'arrivons pas à parser les sélecteurs,
         * nous devons ignorer la règle. */
        retourne
    }

    résultat := loge(CSSStyleRule)
    résultat.parent_style_sheet = parent_style_sheet
    résultat.selector_list = selectors.Quelque

    content := parse_a_style_block_s_contents(parsed_rule.bloc.value)
    diffère détruit_content(content)

    /* Ne considère que les déclarations.
     * À FAIRE : @nest peut être préservé. */
    pour content.decls {
        /* À FAIRE : parse les propriétés. */
        saufsi propriété_est_supportée(ctx, it.name) {
            continue
        }

        valeur: [..]ValeurDeStyle
        si it.name == "display" {
            opt_valeur := parse_propriété_display(it.value)
            saufsi opt_valeur.possède_valeur() {
                imprime("Impossible de parser 'display'")
                continue
            }

            valeur = opt_valeur.Quelque
        }

        déclaration := loge(CSSDeclaration)
        déclaration.property_name = it.name
        déclaration.value = valeur
        déclaration.important = it.important

        résultat.ajoute_déclaration(déclaration)
    }

    si résultat.déclarations.taille == 0 {
        déloge(résultat)
        retourne
    }

    tableau_ajoute(*parent_style_sheet.rules, résultat)
}

imprime_style_sheet :: fonc (stylesheet: *CSSStyleSheet)
{
    pour stylesheet.rules {
        si it.type == CSSRuleType.Style {
            style_rule := it comme *CSSStyleRule
            imprime_règle(style_rule)
        }
    }
}

imprime_règle :: fonc (règle: *CSSStyleRule)
{
    imprime("% {\n", règle.selector_list)

    pour déclaration dans règle.déclarations {
        imprime("    %:", déclaration.property_name)

        pour valeur dans déclaration.value {
            imprime(" %", valeur)
        }

        imprime(";\n")
    }

    imprime("}\n")
}

collecte_les_règles_appropriées :: fonc (stylesheet: *CSSStyleSheet, élément: CSSOMString) -> [..]*CSSStyleRule
{
    règles: [..]*CSSStyleRule

    pour règle dans stylesheet.rules {
        si règle.type != CSSRuleType.Style {
            continue
        }

        règle_de_style := règle comme *CSSStyleRule

        pour complex dans règle_de_style.selector_list.complex_selectors {
            pour * compound dans complex.compound_selectors {
                si apparie_sélecteur(compound, élément) {
                    tableau_ajoute(*règles, règle_de_style)
                }
            }
        }
    }

    retourne règles
}

apparie_sélecteur :: fonc (compound: *CompoundSelector, élément: CSSOMString) -> bool
{
    si compound.simple_selectors.taille != 1 {
        retourne faux
    }

    simple := compound.simple_selectors[0]

    si simple.type != SimpleSelector.Type.Type {
        retourne faux
    }

    retourne simple.ident == élément
}

principale :: fonc () -> z32
{
    contenu := contenu_fichier_texte("/home/kevin/defaults.css")
    diffère déloge(contenu)

    ctx: ContexteParsageFeuilleDeStyle
    diffère détruit_données_contexte(*ctx)

    stylesheet := parse_a_css_style_sheet(*ctx, contenu)
    rapporte_propriétés_non_supportées(*ctx)

    élément := crée_chaine_utf16("p")

    règles := collecte_les_règles_appropriées(stylesheet, élément)

    imprime("% règle(s) pour %\n", règles.taille, élément)
    pour règles {
        imprime_règle(it)
    }

    retourne 0
}
