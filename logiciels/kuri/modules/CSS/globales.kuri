importe FontConfig
importe SysFichier

/* ------------------------------------------------------------------------- */
/** \nom GlobalesDessin
 * \{ */

GlobalesDessin :: struct {
    fontconfig: *FcConfig

    /* Correspond à 1em. */
    taille_fonte_défaut := 16.0

    FonteEnCache :: struct {
        famille: CSSOMString
        style: chaine
        graisse: GraisseFonte
        taille: r32
        fonte: *Fonte
    }

    fontes_en_cache: [..]FonteEnCache

    image_checkbox: NouvelleImage
}

données_image_checkbox := n8.[
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4,
    1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
    40, 40, 40, 161, 42, 42, 42, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 3, 35, 35, 35, 140, 59, 59, 59, 237, 10, 10, 10, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 105, 60, 60, 60, 245, 18, 18, 18, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
    41, 41, 167, 38, 38, 38, 153, 2, 2, 2, 8, 20, 20, 20, 80, 61, 61, 61, 246, 23, 23, 23, 95, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 49, 58, 58, 58, 235, 48, 48, 48, 192, 58, 58, 58, 234, 32, 32, 32,
    131, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 60, 59, 59, 59, 236,
    38, 38, 38, 152, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 7, 7, 7, 28, 3, 3, 3, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

crée_globales_dessin :: fonc () -> *GlobalesDessin
{
    fontconfig := FcInitLoadConfigAndFonts()
    saufsi fontconfig {
        imprimeln("Impossible de créer une configuration pour fontconfig")
        exit(1)
    }

    résultat := loge(GlobalesDessin)

    résultat.image_checkbox.desc.hauteur = 10
    résultat.image_checkbox.desc.largeur = 10
    résultat.image_checkbox.desc.format = FormatPixel.RVBA_8
    résultat.image_checkbox.source_données = SourceDonnéesImage.Externe
    résultat.image_checkbox.données = *données_image_checkbox[0]

    résultat.fontconfig = fontconfig

    retourne résultat
}

détruit_globales_dessin :: fonc (globales: *GlobalesDessin)
{
    saufsi globales {
        retourne
    }

    pour globales.fontes_en_cache {
        détruit_fonte(it.fonte)
    }

    déloge(globales.fontes_en_cache)
    FcConfigDestroy(globales.fontconfig)
    déloge(globales)
}

GraisseFonte :: énum {
    Fine
    UltraLégère
    Légère
    Normale
    Medium
    SemiGrasse
    Grasse
    UltraGrasse
    Noire
    ExtraNoire
}

/* https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#common_weight_name_mapping */ 
donne_graisse_fonte_depuis_poids :: fonc (poids: r64) -> GraisseFonte
{
    si poids < 200.0 { retourne GraisseFonte.Fine }
    si poids < 300.0 { retourne GraisseFonte.UltraLégère }
    si poids < 400.0 { retourne GraisseFonte.Légère }
    si poids < 500.0 { retourne GraisseFonte.Normale }
    si poids < 600.0 { retourne GraisseFonte.Medium }
    si poids < 700.0 { retourne GraisseFonte.SemiGrasse }
    si poids < 800.0 { retourne GraisseFonte.Grasse }
    si poids < 900.0 { retourne GraisseFonte.UltraGrasse }
    si poids < 950.0 { retourne GraisseFonte.Noire }
    retourne GraisseFonte.ExtraNoire
}

donne_fontconfig_weight :: fonc (graisse: GraisseFonte) -> z32
{
    discr graisse {
        Fine { retourne FC_WEIGHT_THIN }
        UltraLégère { retourne FC_WEIGHT_ULTRALIGHT }
        Légère { retourne FC_WEIGHT_LIGHT }
        Normale { retourne FC_WEIGHT_REGULAR }
        Medium { retourne FC_WEIGHT_MEDIUM }
        SemiGrasse { retourne FC_WEIGHT_SEMIBOLD }
        Grasse { retourne FC_WEIGHT_BOLD }
        UltraGrasse { retourne FC_WEIGHT_ULTRABOLD }
        Noire { retourne FC_WEIGHT_BLACK }
        ExtraNoire { retourne FC_WEIGHT_EXTRABLACK }
    }

    assert(faux)
    retourne FC_WEIGHT_REGULAR
}

donne_fonte_défaut :: fonc (ctx: *GlobalesDessin) -> *Fonte
{
    résultat := ctx.donne_fonte(PROP_serif, "normal", GraisseFonte.Normale, ctx.taille_fonte_défaut)
    saufsi résultat {
        imprimeln("Impossible de trouver la fonte défaut")
        exit(1)
    }
    retourne résultat
}

donne_fonte :: fonc (ctx: *GlobalesDessin, famille: CSSOMString, style: chaine, graisse: GraisseFonte, taille: r32, replis_sur_défaut := vrai) -> *Fonte
{
    existante := ctx.donne_fonte_en_cache(famille, style, graisse, taille)
    si existante {
        retourne existante
    }

    chemin := donne_chemin_fonte(ctx, famille, style, graisse)

    fonte := crée_fonte(CheminFichier(chemin), taille)
    saufsi fonte {
        si replis_sur_défaut {
            retourne donne_fonte_défaut(ctx)
        }
        retourne nul
    }

    fonte_en_cache := GlobalesDessin.FonteEnCache(famille, style, graisse, taille, fonte)
    tableau_ajoute(*ctx.fontes_en_cache, fonte_en_cache)

    retourne fonte
}

donne_fonte_en_cache :: fonc (ctx: *GlobalesDessin, famille: CSSOMString, style: chaine, graisse: GraisseFonte, taille: r32) -> *Fonte
{
    pour ctx.fontes_en_cache {
        si it.famille == famille && it.style == style && it.graisse == graisse && it.taille == taille {
            retourne it.fonte
        }
    }
    retourne nul
}

donne_chemin_fonte :: fonc (ctx: *GlobalesDessin, famille: CSSOMString, style: chaine, graisse: GraisseFonte) -> chaine
{
    assert(ctx.fontconfig != nul)

    pattern := FcPatternCreate()
    diffère FcPatternDestroy(pattern)

    chn_famille := converti_vers_chaine(famille.donne_chaine_utf16())
    diffère déloge(chn_famille)

    chaine_c_famille := crée_chaine_c(chn_famille)
    diffère détruit_chaine_c(chaine_c_famille)

    _ := FcPatternAddString(pattern, FC_FAMILY.pointeur, chaine_c_famille comme *z8 comme *FcChar8);

    si style == "italic" {
        _ := FcPatternAddInteger(pattern, FC_SLANT.pointeur, FC_SLANT_ITALIC)
    }
    sinon {
        assert(style == "normal")
    }

    _ := FcPatternAddInteger(pattern, FC_WEIGHT.pointeur, donne_fontconfig_weight(graisse))

    _ := FcConfigSubstitute(ctx.fontconfig, pattern, FcMatchKind.FcMatchPattern);
    FcDefaultSubstitute(pattern);

    result: FcResult
    match := FcFontMatch(ctx.fontconfig, pattern, *result)
    saufsi match {
        retourne ""
    }
    diffère FcPatternDestroy(match)

    value: FcValue;
    résultat := FcPatternGet(match, FC_FILE.pointeur, 0, *value)
    si résultat == FcResult.FcResultMatch {
        chemin := convertis_chaine_c(ChaineC(value.u.f comme *z8))
        retourne copie_chaine(chemin)
    }

    retourne ""
}

/** \} */
