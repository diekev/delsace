importe Chaine
importe Couleur
importe Fondation
importe Internet

TextDecorationLine :: énum_drapeau n8 {
    UNDERLINE
    LINE_THROUGH
    OVERLINE
    BLINK
}

Variable :: struct {
    nom: CSSOMString
    fallback: [..]ComponentValue
}

/* https://www.w3.org/TR/css-values/#value-defs */
ValeurDeStyle :: union {
    mot_clé: CSSOMString
    url: CSSOMString
    couleur: CouleurRVBAN8
    longueur: Longueur
    integer: r64
    number: r64
    percentage: r64
    text_decoration_line: TextDecorationLine
    line_style: LineStyle
    display: Display
    cursor: CursorType
    variable: Variable
}

opérateur == :: fonc (a: ValeurDeStyle, b: ValeurDeStyle) -> bool
{
    discr a {
        mot_clé(m) {
            retourne b.est_mot_clé(m)
        }
        url(u) {
            discr b {
                url(ub) {
                    retourne ub == u
                }
                sinon {
                    retourne faux
                }
            }
        }
        couleur(c) {
            discr b {
                couleur(cb) {
                    retourne cb.r == c.r && cb.v == c.v && cb.b == c.b && cb.a == c.a
                }
                sinon {
                    retourne faux
                }
            }
        }
        longueur(l) {
            discr b {
                longueur(lb) {
                    retourne lb.valeur == l.valeur && lb.unité == l.unité
                }
                sinon {
                    retourne faux
                }
            }

        }
        integer(i) {
            discr b {
                integer(ib) {
                    retourne ib == i
                }
                sinon {
                    retourne faux
                }
            }
        }
        number(n) {
            discr b {
                number(nb) {
                    retourne nb == n
                }
                sinon {
                    retourne faux
                }
            }
        }
        percentage(p) {
            discr b {
                percentage(pb) {
                    retourne pb == p
                }
                sinon {
                    retourne faux
                }
            }
        }
        text_decoration_line(t) {
            discr b {
                text_decoration_line(tb) {
                    retourne tb == t
                }
                sinon {
                    retourne faux
                }
            }
        }
        line_style(l) {
            discr b {
                line_style(lb) {
                    retourne lb == l
                }
                sinon {
                    retourne faux
                }
            }
        }
        display(d) {
            discr b {
                display(db) {
                    retourne db.inner_type == d.inner_type && db.outer_type == d.outer_type && d.est_list_item == db.est_list_item
                }
                sinon {
                    retourne faux
                }
            }
        }
        cursor(c) {
            discr b {
                cursor(cb) {
                    retourne cb == c
                }
                sinon {
                    retourne faux
                }
            }
        }
        variable(v) {
            discr b {
                variable(vb) {
                    retourne vb.nom == v.nom
                }
                sinon {
                    retourne faux
                }
            }
        }
        sinon {
            retourne faux
        }
    }
    retourne faux
}

détruit_valeur_de_style :: fonc (value: *ValeurDeStyle)
{
    discr mémoire(value) {
        variable(v) {
            détruit_tableau_component_value(*v.fallback)
        }
        sinon {}
    }
}

est_mot_clé :: fonc (valeur: ValeurDeStyle, mot_clé: CSSOMString) -> bool
{
    discr valeur {
        mot_clé(m) {
            retourne m == mot_clé
        }
        sinon {
            retourne faux
        }
    }
}

est_auto :: fonc (valeur: ValeurDeStyle) -> bool
{
    retourne est_mot_clé(valeur, PROP_auto)
}

est_none :: fonc (valeur: ValeurDeStyle) -> bool
{
    retourne est_mot_clé(valeur, PROP_none)
}

est_percentage :: fonc (valeur: ValeurDeStyle) -> bool
{
    discr valeur {
        percentage {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_nombre :: fonc (valeur: ValeurDeStyle) -> bool
{
    discr valeur {
        number {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_variable :: fonc (valeur: ValeurDeStyle) -> bool
{
    discr valeur {
        variable {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

imprime_valeur_de_style :: fonc (enchaineuse: *Enchaineuse, valeur: *ValeurDeStyle)
{
    saufsi valeur {
        retourne
    }

    discr mémoire(valeur) {
        mot_clé(m) {
            ajoute_au_tampon(enchaineuse, m)
        }
        url(u) {
            ajoute_au_tampon(enchaineuse, "url(\"", u, "\")")
        }
        couleur(c) {
            ajoute_au_tampon(enchaineuse, "rgb(", c.r, " ", c.v, " ", c.b, ")")
        }
        longueur(l) {
            ajoute_au_tampon(enchaineuse, l.valeur, " ", l.unité)
        }
        integer(i) {
            ajoute_au_tampon(enchaineuse, i)
        }
        number(n) {
            ajoute_au_tampon(enchaineuse, n)
        }
        percentage(p) {
            ajoute_au_tampon(enchaineuse, p, "%")
        }
        text_decoration_line(t) {
            ajoute_au_tampon(enchaineuse, t)
        }
        line_style(l) {
            ajoute_au_tampon(enchaineuse, l)
        }
        display(d) {
            ajoute_au_tampon(enchaineuse, d)
        }
        cursor(c) {
            ajoute_au_tampon(enchaineuse, c)
        }
        variable(v) {
            ajoute_au_tampon(enchaineuse, "var(", v.nom, ",")
            pour v.fallback {
                ajoute_au_tampon(enchaineuse, " ", it)
            }
            ajoute_au_tampon(enchaineuse, ")")
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "VALEUR INVALIDE OU À IMPRIMER")
        }
    }
} @FormattageImpression

/* ------------------------------------------------------------------------- */
/** \nom PropriétésDeStyle
 * Cette structure représente les propriétés finales d'un élément après la
 * cascade.
 * \{ */

PropriétésDeStyle :: struct {
    parent: *PropriétésDeStyle
    déclarations: [..]*DéclarationPropriété
    style: Style
}

crée_propriétés_de_style :: fonc (parent: *PropriétésDeStyle) -> *PropriétésDeStyle
{
    résultat := loge(PropriétésDeStyle)
    résultat.parent = parent
    initialise_style(*résultat.style)

    si parent {
        pour * infos_types_propriétés {
            saufsi it.drapeaux.Héritée {
                continue
            }
            /* Nous devons hériter des valeurs calculées. */
            id := it.id
            résultat.style.valeurs[id] = parent.style.valeurs[id]
        }

        résultat.style.valeurs[IDPropriété.TextAlign] = parent.style.valeurs[IDPropriété.TextAlign]
    }

    retourne résultat
}

copie_propriétés :: fonc (source: *PropriétésDeStyle) -> *PropriétésDeStyle
{
    résultat := crée_propriétés_de_style(source.parent)

    pour source.déclarations {
        ajoute_déclaration(résultat, it)
    }

    retourne résultat
}

permute :: fonc (a: *PropriétésDeStyle, b: *PropriétésDeStyle)
{
    assert(a.parent == b.parent)
    tmp := mémoire(a)
    mémoire(a) = mémoire(b)
    mémoire(b) = tmp
}

détruit_données_propriétés :: fonc (propriétés: *PropriétésDeStyle)
{
    déloge(propriétés.déclarations)
}

détruit_propriétés :: fonc (propriétés: *PropriétésDeStyle)
{
    détruit_données_propriétés(propriétés)
    déloge(propriétés)
}

ajoute_déclaration :: fonc (propriétés: *PropriétésDeStyle, déclaration: *DéclarationPropriété)
{
    pour propriétés.déclarations {
        si it.property_name == déclaration.property_name {
            propriétés.déclarations[index_it] = déclaration
            retourne
        }
    }
    tableau_ajoute(*propriétés.déclarations, déclaration)
}

donne_déclaration :: fonc (propriétés: *PropriétésDeStyle, nom: CSSOMString) -> *DéclarationPropriété
{
    pour propriétés.déclarations {
        si it.property_name == nom {
            retourne it
        }
    }
    retourne nul
}

donne_déclaration_propriété_personnalisée :: fonc (propriétés: *PropriétésDeStyle, nom: CSSOMString) -> *DéclarationPropriété
{
    courantes := propriétés

    tantque courantes != nul {
        résultat := donne_déclaration(courantes, nom)
        si résultat {
            retourne résultat
        }
        courantes = courantes.parent
    }

    retourne nul
}

donne_valeur :: fonc (propriétés: *PropriétésDeStyle, id: IDPropriété) -> ValeurDeStyle
{
    retourne propriétés.style.valeurs[id]
}

donne_url_base_pour_background_image :: fonc (propriétés: *PropriétésDeStyle) -> Optionnel(URI)
{
    déclaration := propriétés.donne_déclaration(PROP_background_image)
    saufsi déclaration {
        retourne
    }

    saufsi déclaration.style_parent {
        retourne
    }
    
    style_parent := déclaration.style_parent
    saufsi style_parent.parent_css_rule {
        retourne
    }

    parent_css_rule := style_parent.parent_css_rule
    saufsi parent_css_rule.parent_style_sheet {
        retourne
    }

    retourne parent_css_rule.parent_style_sheet.location
}

/** \} */

Longueur :: struct {
    Unité :: énum {
        Em
        Rem
        /* https://drafts.csswg.org/css-values-4/#absolute-lengths */
        Cm
        Mm
        Q
        In
        Pc
        Pt
        Px
    }

    valeur: r64
    unité: Unité
}

donne_unité_pour_nom :: fonc (nom: CSSOMString) -> Optionnel(Longueur.Unité)
{
    si nom == PROP_em {
        retourne Longueur.Unité.Em
    }

    si nom == PROP_px {
        retourne Longueur.Unité.Px
    }

    si nom == PROP_in {
        retourne Longueur.Unité.In
    }

    si nom == PROP_cm {
        retourne Longueur.Unité.Cm
    }

    si nom == PROP_mm {
        retourne Longueur.Unité.Mm
    }

    si nom == PROP_Q {
        retourne Longueur.Unité.Q
    }

    si nom == PROP_pc {
        retourne Longueur.Unité.Pc
    }

    si nom == PROP_pt {
        retourne Longueur.Unité.Pt
    }

    si nom == PROP_rem {
        retourne Longueur.Unité.Rem
    }
}

calcule_longueur :: fonc (l: Longueur, ctx: *ContexteCalculStyle) -> r64
{
    discr l.unité {
        Px {
            retourne l.valeur
        }
        Em {
            retourne l.valeur * ctx.taille_fonte
        }
        Rem {
            retourne l.valeur * ctx.taille_fonte_racine
        }
        In {
            /* 1in = 96 px */
            retourne l.valeur * 96.0
        }
        Cm {
            /* 1cm = 1 / 2.54 in */
            retourne l.valeur * 96.0 / 2.54
        }
        Mm {
            /* 1mm = 1 / 10 cm */
            retourne l.valeur * 9.6 / 2.54
        }
        Q {
            /* 1Q = 1 / 40 cm (2.4 = 96 / 40) */
            retourne l.valeur * 2.4 / 2.54
        }
        Pc {
            /* 1pc = 1 / 6 in (16 = 96 / 6) */
            retourne l.valeur * 16
        }
        Pt {
            /* 1pt = 1/72 in */
            retourne l.valeur * 96.0 / 72.0
        }
    }

    retourne l.valeur
}

/* https://drafts.csswg.org/css-backgrounds/ */
Background :: struct {
    color: CouleurRVBAN8
}

LineStyle :: énum {
    None
    Hidden
    Dotted
    Dashed
    Solid
    Double
    Groove
    Ridge
    Inset
    Outset
}

/* Même ordre que pour les définitions des propriétés des métriques des boites (par exmple "border"). */
BorderEdge :: énum {
    Top
    Right
    Bottom
    Left
}

Border :: struct {
    width: [4]ValeurDeStyle
    style: [4]LineStyle
    color: [4]ValeurDeStyle
}

donne_line_style :: fonc (value: ValeurDeStyle) -> LineStyle
{
    si value.est_mot_clé(PROP_none) {
        retourne LineStyle.None
    }
    si value.est_mot_clé(PROP_hidden) {
        retourne LineStyle.Hidden
    }
    si value.est_mot_clé(PROP_dotted) {
        retourne LineStyle.Dotted
    }
    si value.est_mot_clé(PROP_dashed) {
        retourne LineStyle.Dashed
    }
    si value.est_mot_clé(PROP_solid) {
        retourne LineStyle.Solid
    }
    si value.est_mot_clé(PROP_double) {
        retourne LineStyle.Double
    }
    si value.est_mot_clé(PROP_groove) {
        retourne LineStyle.Groove
    }
    si value.est_mot_clé(PROP_ridge) {
        retourne LineStyle.Ridge
    }
    si value.est_mot_clé(PROP_inset) {
        retourne LineStyle.Inset
    }
    si value.est_mot_clé(PROP_outset) {
        retourne LineStyle.Outset
    }

    imprime("[%] %\n", #nom_de_cette_fonction, value)
    panique("LineStyle inconnu")
}

ContexteCalculStyle :: struct {
    taille_fonte: r64
    taille_fonte_racine: r64
    propriétés: *PropriétésDeStyle
    valeurs_initiales: *Style
}

IDPropriété :: énum n16 {
    Display
    Position
    Float
    Color
    Cursor

    BackgroundColor
    BackgroundImage

    BorderWidthBottom
    BorderWidthLeft
    BorderWidthRight
    BorderWidthTop

    BorderStyleBottom
    BorderStyleLeft
    BorderStyleRight
    BorderStyleTop

    BorderColorBottom
    BorderColorLeft
    BorderColorRight
    BorderColorTop

    MarginBottom
    MarginLeft
    MarginRight
    MarginTop

    PaddingBottom
    PaddingLeft
    PaddingRight
    PaddingTop

    FontFamily
    FontSize
    FontWeight
    FontStyle

    Bottom
    Left
    Right
    Top

    Width
    MinWidth
    MaxWidth

    Height
    MinHeight
    MaxHeight

    TextDecorationStyle
    TextDecorationLine
    TextDecorationColor

    LineHeight
    VerticalAlign

    TextAlign
}

Style :: struct {
    valeurs: [IDPropriété.nombre_éléments]ValeurDeStyle
}

initialise_style :: fonc (style: *Style)
{
    style.valeurs[IDPropriété.Display] = ValeurDeStyle(display = Display())
    style.valeurs[IDPropriété.Cursor] = ValeurDeStyle(cursor = CursorType.auto)
    style.valeurs[IDPropriété.Position] = ValeurDeStyle(mot_clé = PROP_static)
    style.valeurs[IDPropriété.Float] = ValeurDeStyle(mot_clé = PROP_none)

    /* Marges */
    style.valeurs[IDPropriété.MarginBottom] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.MarginLeft] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.MarginRight] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.MarginTop] = ValeurDeStyle(number = 0.0)

    /* Padding */
    style.valeurs[IDPropriété.PaddingBottom] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.PaddingLeft] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.PaddingRight] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.PaddingTop] = ValeurDeStyle(number = 0.0)

    style.valeurs[IDPropriété.Color] = CouleurRVBAN8(0, 0, 0, 255)
    style.valeurs[IDPropriété.BackgroundColor] = CouleurRVBAN8(0, 0, 0, 0)
    style.valeurs[IDPropriété.BackgroundImage] = ValeurDeStyle(mot_clé = PROP_none)

    /* Bordure */
    style.valeurs[IDPropriété.BorderWidthBottom] = ValeurDeStyle(mot_clé = PROP_medium)
    style.valeurs[IDPropriété.BorderWidthLeft] = ValeurDeStyle(mot_clé = PROP_medium)
    style.valeurs[IDPropriété.BorderWidthRight] = ValeurDeStyle(mot_clé = PROP_medium)
    style.valeurs[IDPropriété.BorderWidthTop] = ValeurDeStyle(mot_clé = PROP_medium)

    style.valeurs[IDPropriété.BorderStyleBottom] = ValeurDeStyle(line_style = LineStyle.None)
    style.valeurs[IDPropriété.BorderStyleLeft] = ValeurDeStyle(line_style = LineStyle.None)
    style.valeurs[IDPropriété.BorderStyleRight] = ValeurDeStyle(line_style = LineStyle.None)
    style.valeurs[IDPropriété.BorderStyleTop] = ValeurDeStyle(line_style = LineStyle.None)

    style.valeurs[IDPropriété.BorderColorBottom] = ValeurDeStyle(mot_clé = PROP_currentColor)
    style.valeurs[IDPropriété.BorderColorLeft] = ValeurDeStyle(mot_clé = PROP_currentColor)
    style.valeurs[IDPropriété.BorderColorRight] = ValeurDeStyle(mot_clé = PROP_currentColor)
    style.valeurs[IDPropriété.BorderColorTop] = ValeurDeStyle(mot_clé = PROP_currentColor)

    /* Font */
    style.valeurs[IDPropriété.FontFamily] = ValeurDeStyle(mot_clé = PROP_serif)
    style.valeurs[IDPropriété.FontWeight] = ValeurDeStyle(mot_clé = PROP_normal)
    style.valeurs[IDPropriété.FontStyle] = ValeurDeStyle(mot_clé = PROP_normal)

    /* Text Decoration */
    style.valeurs[IDPropriété.TextDecorationLine] = ValeurDeStyle(mot_clé = PROP_none)
    style.valeurs[IDPropriété.TextDecorationStyle] = ValeurDeStyle(mot_clé = PROP_solid)
    style.valeurs[IDPropriété.TextDecorationColor] = ValeurDeStyle(mot_clé = PROP_currentColor)

    /* Tailles */
    style.valeurs[IDPropriété.Width] = ValeurDeStyle(mot_clé = PROP_auto)
    style.valeurs[IDPropriété.MinWidth] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.MaxWidth] = ValeurDeStyle(mot_clé = PROP_none)
    style.valeurs[IDPropriété.Height] = ValeurDeStyle(mot_clé = PROP_auto)
    style.valeurs[IDPropriété.MinHeight] = ValeurDeStyle(number = 0.0)
    style.valeurs[IDPropriété.MaxHeight] = ValeurDeStyle(mot_clé = PROP_none)

    style.valeurs[IDPropriété.LineHeight] = ValeurDeStyle(mot_clé = PROP_normal)
    style.valeurs[IDPropriété.VerticalAlign] = ValeurDeStyle(mot_clé = PROP_baseline)

    style.valeurs[IDPropriété.TextAlign] = ValeurDeStyle(mot_clé = PROP_start)

    /* Position */
    style.valeurs[IDPropriété.Top] = ValeurDeStyle(mot_clé = PROP_auto)
    style.valeurs[IDPropriété.Bottom] = ValeurDeStyle(mot_clé = PROP_auto)
    style.valeurs[IDPropriété.Left] = ValeurDeStyle(mot_clé = PROP_auto)
    style.valeurs[IDPropriété.Right] = ValeurDeStyle(mot_clé = PROP_auto)
}

donne_bordure :: fonc (style: *Style) -> Border
{
    résultat: Border

    résultat.width[BorderEdge.Top] = style.valeurs[IDPropriété.BorderWidthTop]
    résultat.width[BorderEdge.Bottom] = style.valeurs[IDPropriété.BorderWidthBottom]
    résultat.width[BorderEdge.Left] = style.valeurs[IDPropriété.BorderWidthLeft]
    résultat.width[BorderEdge.Right] = style.valeurs[IDPropriété.BorderWidthRight]

    résultat.style[BorderEdge.Top] = style.valeurs[IDPropriété.BorderStyleTop]
    résultat.style[BorderEdge.Bottom] = style.valeurs[IDPropriété.BorderStyleBottom]
    résultat.style[BorderEdge.Left] = style.valeurs[IDPropriété.BorderStyleLeft]
    résultat.style[BorderEdge.Right] = style.valeurs[IDPropriété.BorderStyleRight]

    résultat.color[BorderEdge.Top] = style.valeurs[IDPropriété.BorderColorTop]
    résultat.color[BorderEdge.Bottom] = style.valeurs[IDPropriété.BorderColorBottom]
    résultat.color[BorderEdge.Left] = style.valeurs[IDPropriété.BorderColorLeft]
    résultat.color[BorderEdge.Right] = style.valeurs[IDPropriété.BorderColorRight]

    retourne résultat
}

/* https://www.w3.org/TR/css-color-4/#named-colors */

#portée_module

NamedColor :: struct {
    nom: CSSOMString
    valeur: CouleurRVBAN8
}

named_colors := [
    NamedColor(COL_aliceblue, CouleurRVBAN8(240, 248, 255, 255)),
    NamedColor(COL_antiquewhite, CouleurRVBAN8(250, 235, 215, 255)),
    NamedColor(COL_aqua, CouleurRVBAN8(0, 255, 255, 255)),
    NamedColor(COL_aquamarine, CouleurRVBAN8(127, 255, 212, 255)),
    NamedColor(COL_azure, CouleurRVBAN8(240, 255, 255, 255)),
    NamedColor(COL_beige, CouleurRVBAN8(245, 245, 220, 255)),
    NamedColor(COL_bisque, CouleurRVBAN8(255, 228, 196, 255)),
    NamedColor(COL_black, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_blanchedalmond, CouleurRVBAN8(255, 235, 205, 255)),
    NamedColor(COL_blue, CouleurRVBAN8(0, 0, 255, 255)),
    NamedColor(COL_blueviolet, CouleurRVBAN8(138, 43, 226, 255)),
    NamedColor(COL_brown, CouleurRVBAN8(165, 42, 42, 255)),
    NamedColor(COL_burlywood, CouleurRVBAN8(222, 184, 135, 255)),
    NamedColor(COL_cadetblue, CouleurRVBAN8(95, 158, 160, 255)),
    NamedColor(COL_chartreuse, CouleurRVBAN8(127, 255, 0, 255)),
    NamedColor(COL_chocolate, CouleurRVBAN8(210, 105, 30, 255)),
    NamedColor(COL_coral, CouleurRVBAN8(255, 127, 80, 255)),
    NamedColor(COL_cornflowerblue, CouleurRVBAN8(100, 149, 237, 255)),
    NamedColor(COL_cornsilk, CouleurRVBAN8(255, 248, 220, 255)),
    NamedColor(COL_crimson, CouleurRVBAN8(220, 20, 60, 255)),
    NamedColor(COL_cyan, CouleurRVBAN8(0, 255, 255, 255)),
    NamedColor(COL_darkblue, CouleurRVBAN8(0, 0, 139, 255)),
    NamedColor(COL_darkcyan, CouleurRVBAN8(0, 139, 139, 255)),
    NamedColor(COL_darkgoldenrod, CouleurRVBAN8(184, 134, 11, 255)),
    NamedColor(COL_darkgray, CouleurRVBAN8(169, 169, 169, 255)),
    NamedColor(COL_darkgreen, CouleurRVBAN8(0, 100, 0, 255)),
    NamedColor(COL_darkgrey, CouleurRVBAN8(169, 169, 169, 255)),
    NamedColor(COL_darkkhaki, CouleurRVBAN8(189, 183, 107, 255)),
    NamedColor(COL_darkmagenta, CouleurRVBAN8(139, 0, 139, 255)),
    NamedColor(COL_darkolivegreen, CouleurRVBAN8(85, 107, 47, 255)),
    NamedColor(COL_darkorange, CouleurRVBAN8(255, 140, 0, 255)),
    NamedColor(COL_darkorchid, CouleurRVBAN8(153, 50, 204, 255)),
    NamedColor(COL_darkred, CouleurRVBAN8(139, 0, 0, 255)),
    NamedColor(COL_darksalmon, CouleurRVBAN8(233, 150, 122, 255)),
    NamedColor(COL_darkseagreen, CouleurRVBAN8(143, 188, 143, 255)),
    NamedColor(COL_darkslateblue, CouleurRVBAN8(72, 61, 139, 255)),
    NamedColor(COL_darkslategray, CouleurRVBAN8(47, 79, 79, 255)),
    NamedColor(COL_darkslategrey, CouleurRVBAN8(47, 79, 79, 255)),
    NamedColor(COL_darkturquoise, CouleurRVBAN8(0, 206, 209, 255)),
    NamedColor(COL_darkviolet, CouleurRVBAN8(148, 0, 211, 255)),
    NamedColor(COL_deeppink, CouleurRVBAN8(255, 20, 147, 255)),
    NamedColor(COL_deepskyblue, CouleurRVBAN8(0, 191, 255, 255)),
    NamedColor(COL_dimgray, CouleurRVBAN8(105, 105, 105, 255)),
    NamedColor(COL_dimgrey, CouleurRVBAN8(105, 105, 105, 255)),
    NamedColor(COL_dodgerblue, CouleurRVBAN8(30, 144, 255, 255)),
    NamedColor(COL_firebrick, CouleurRVBAN8(178, 34, 34, 255)),
    NamedColor(COL_floralwhite, CouleurRVBAN8(255, 250, 240, 255)),
    NamedColor(COL_forestgreen, CouleurRVBAN8(34, 139, 34, 255)),
    NamedColor(COL_fuchsia, CouleurRVBAN8(255, 0, 255, 255)),
    NamedColor(COL_gainsboro, CouleurRVBAN8(220, 220, 220, 255)),
    NamedColor(COL_ghostwhite, CouleurRVBAN8(248, 248, 255, 255)),
    NamedColor(COL_gold, CouleurRVBAN8(255, 215, 0, 255)),
    NamedColor(COL_goldenrod, CouleurRVBAN8(218, 165, 32, 255)),
    NamedColor(COL_gray, CouleurRVBAN8(128, 128, 128, 255)),
    NamedColor(COL_green, CouleurRVBAN8(0, 128, 0, 255)),
    NamedColor(COL_greenyellow, CouleurRVBAN8(173, 255, 47, 255)),
    NamedColor(COL_grey, CouleurRVBAN8(128, 128, 128, 255)),
    NamedColor(COL_honeydew, CouleurRVBAN8(240, 255, 240, 255)),
    NamedColor(COL_hotpink, CouleurRVBAN8(255, 105, 180, 255)),
    NamedColor(COL_indianred, CouleurRVBAN8(205, 92, 92, 255)),
    NamedColor(COL_indigo, CouleurRVBAN8(75, 0, 130, 255)),
    NamedColor(COL_ivory, CouleurRVBAN8(255, 255, 240, 255)),
    NamedColor(COL_khaki, CouleurRVBAN8(240, 230, 140, 255)),
    NamedColor(COL_lavender, CouleurRVBAN8(230, 230, 250, 255)),
    NamedColor(COL_lavenderblush, CouleurRVBAN8(255, 240, 245, 255)),
    NamedColor(COL_lawngreen, CouleurRVBAN8(124, 252, 0, 255)),
    NamedColor(COL_lemonchiffon, CouleurRVBAN8(255, 250, 205, 255)),
    NamedColor(COL_lightblue, CouleurRVBAN8(173, 216, 230, 255)),
    NamedColor(COL_lightcoral, CouleurRVBAN8(240, 128, 128, 255)),
    NamedColor(COL_lightcyan, CouleurRVBAN8(224, 255, 255, 255)),
    NamedColor(COL_lightgoldenrodyellow, CouleurRVBAN8(250, 250, 210, 255)),
    NamedColor(COL_lightgray, CouleurRVBAN8(211, 211, 211, 255)),
    NamedColor(COL_lightgreen, CouleurRVBAN8(144, 238, 144, 255)),
    NamedColor(COL_lightgrey, CouleurRVBAN8(211, 211, 211, 255)),
    NamedColor(COL_lightpink, CouleurRVBAN8(255, 182, 193, 255)),
    NamedColor(COL_lightsalmon, CouleurRVBAN8(255, 160, 122, 255)),
    NamedColor(COL_lightseagreen, CouleurRVBAN8(32, 178, 170, 255)),
    NamedColor(COL_lightskyblue, CouleurRVBAN8(135, 206, 250, 255)),
    NamedColor(COL_lightslategray, CouleurRVBAN8(119, 136, 153, 255)),
    NamedColor(COL_lightslategrey, CouleurRVBAN8(119, 136, 153, 255)),
    NamedColor(COL_lightsteelblue, CouleurRVBAN8(176, 196, 222, 255)),
    NamedColor(COL_lightyellow, CouleurRVBAN8(255, 255, 224, 255)),
    NamedColor(COL_lime, CouleurRVBAN8(0, 255, 0, 255)),
    NamedColor(COL_limegreen, CouleurRVBAN8(50, 205, 50, 255)),
    NamedColor(COL_linen, CouleurRVBAN8(250, 240, 230, 255)),
    NamedColor(COL_magenta, CouleurRVBAN8(255, 0, 255, 255)),
    NamedColor(COL_maroon, CouleurRVBAN8(128, 0, 0, 255)),
    NamedColor(COL_mediumaquamarine, CouleurRVBAN8(102, 205, 170, 255)),
    NamedColor(COL_mediumblue, CouleurRVBAN8(0, 0, 205, 255)),
    NamedColor(COL_mediumorchid, CouleurRVBAN8(186, 85, 211, 255)),
    NamedColor(COL_mediumpurple, CouleurRVBAN8(147, 112, 219, 255)),
    NamedColor(COL_mediumseagreen, CouleurRVBAN8(60, 179, 113, 255)),
    NamedColor(COL_mediumslateblue, CouleurRVBAN8(123, 104, 238, 255)),
    NamedColor(COL_mediumspringgreen, CouleurRVBAN8(0, 250, 154, 255)),
    NamedColor(COL_mediumturquoise, CouleurRVBAN8(72, 209, 204, 255)),
    NamedColor(COL_mediumvioletred, CouleurRVBAN8(199, 21, 133, 255)),
    NamedColor(COL_midnightblue, CouleurRVBAN8(25, 25, 112, 255)),
    NamedColor(COL_mintcream, CouleurRVBAN8(245, 255, 250, 255)),
    NamedColor(COL_mistyrose, CouleurRVBAN8(255, 228, 225, 255)),
    NamedColor(COL_moccasin, CouleurRVBAN8(255, 228, 181, 255)),
    NamedColor(COL_navajowhite, CouleurRVBAN8(255, 222, 173, 255)),
    NamedColor(COL_navy, CouleurRVBAN8(0, 0, 128, 255)),
    NamedColor(COL_oldlace, CouleurRVBAN8(253, 245, 230, 255)),
    NamedColor(COL_olive, CouleurRVBAN8(128, 128, 0, 255)),
    NamedColor(COL_olivedrab, CouleurRVBAN8(107, 142, 35, 255)),
    NamedColor(COL_orange, CouleurRVBAN8(255, 165, 0, 255)),
    NamedColor(COL_orangered, CouleurRVBAN8(255, 69, 0, 255)),
    NamedColor(COL_orchid, CouleurRVBAN8(218, 112, 214, 255)),
    NamedColor(COL_palegoldenrod, CouleurRVBAN8(238, 232, 170, 255)),
    NamedColor(COL_palegreen, CouleurRVBAN8(152, 251, 152, 255)),
    NamedColor(COL_paleturquoise, CouleurRVBAN8(175, 238, 238, 255)),
    NamedColor(COL_palevioletred, CouleurRVBAN8(219, 112, 147, 255)),
    NamedColor(COL_papayawhip, CouleurRVBAN8(255, 239, 213, 255)),
    NamedColor(COL_peachpuff, CouleurRVBAN8(255, 218, 185, 255)),
    NamedColor(COL_peru, CouleurRVBAN8(205, 133, 63, 255)),
    NamedColor(COL_pink, CouleurRVBAN8(255, 192, 203, 255)),
    NamedColor(COL_plum, CouleurRVBAN8(221, 160, 221, 255)),
    NamedColor(COL_powderblue, CouleurRVBAN8(176, 224, 230, 255)),
    NamedColor(COL_purple, CouleurRVBAN8(128, 0, 128, 255)),
    NamedColor(COL_rebeccapurple, CouleurRVBAN8(102, 51, 153, 255)),
    NamedColor(COL_red, CouleurRVBAN8(255, 0, 0, 255)),
    NamedColor(COL_rosybrown, CouleurRVBAN8(188, 143, 143, 255)),
    NamedColor(COL_royalblue, CouleurRVBAN8(65, 105, 225, 255)),
    NamedColor(COL_saddlebrown, CouleurRVBAN8(139, 69, 19, 255)),
    NamedColor(COL_salmon, CouleurRVBAN8(250, 128, 114, 255)),
    NamedColor(COL_sandybrown, CouleurRVBAN8(244, 164, 96, 255)),
    NamedColor(COL_seagreen, CouleurRVBAN8(46, 139, 87, 255)),
    NamedColor(COL_seashell, CouleurRVBAN8(255, 245, 238, 255)),
    NamedColor(COL_sienna, CouleurRVBAN8(160, 82, 45, 255)),
    NamedColor(COL_silver, CouleurRVBAN8(192, 192, 192, 255)),
    NamedColor(COL_skyblue, CouleurRVBAN8(135, 206, 235, 255)),
    NamedColor(COL_slateblue, CouleurRVBAN8(106, 90, 205, 255)),
    NamedColor(COL_slategray, CouleurRVBAN8(112, 128, 144, 255)),
    NamedColor(COL_slategrey, CouleurRVBAN8(112, 128, 144, 255)),
    NamedColor(COL_snow, CouleurRVBAN8(255, 250, 250, 255)),
    NamedColor(COL_springgreen, CouleurRVBAN8(0, 255, 127, 255)),
    NamedColor(COL_steelblue, CouleurRVBAN8(70, 130, 180, 255)),
    NamedColor(COL_tan, CouleurRVBAN8(210, 180, 140, 255)),
    NamedColor(COL_teal, CouleurRVBAN8(0, 128, 128, 255)),
    NamedColor(COL_thistle, CouleurRVBAN8(216, 191, 216, 255)),
    NamedColor(COL_tomato, CouleurRVBAN8(255, 99, 71, 255)),
    NamedColor(COL_turquoise, CouleurRVBAN8(64, 224, 208, 255)),
    NamedColor(COL_violet, CouleurRVBAN8(238, 130, 238, 255)),
    NamedColor(COL_wheat, CouleurRVBAN8(245, 222, 179, 255)),
    NamedColor(COL_white, CouleurRVBAN8(255, 255, 255, 255)),
    NamedColor(COL_whitesmoke, CouleurRVBAN8(245, 245, 245, 255)),
    NamedColor(COL_yellow, CouleurRVBAN8(255, 255, 0, 255)),
    NamedColor(COL_yellowgreen, CouleurRVBAN8(154, 205, 50, 255))
]

/* https://www.w3.org/TR/css-color-4/#css-system-colors */
system_colors := [
    NamedColor(COL_AccentColor, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_AccentColorText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_ActiveText, CouleurRVBAN8(0, 0, 255, 255)),
    NamedColor(COL_ButtonBorder, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_ButtonFace, CouleurRVBAN8(200, 200, 200, 255)),
    NamedColor(COL_ButtonText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_Canvas, CouleurRVBAN8(255, 255, 255, 255)),
    NamedColor(COL_CanvasText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_Field, CouleurRVBAN8(255, 255, 255, 255)),
    NamedColor(COL_FieldText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_GrayText, CouleurRVBAN8(128, 128, 128, 255)),
    NamedColor(COL_Highlight, CouleurRVBAN8(0, 0, 255, 255)),
    NamedColor(COL_HighlightText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_LinkText, CouleurRVBAN8(0, 0, 255, 255)),
    NamedColor(COL_Mark, CouleurRVBAN8(0, 255, 255, 255)),
    NamedColor(COL_MarkText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_SelectedItem, CouleurRVBAN8(25, 103, 210, 255)),
    NamedColor(COL_SelectedItemText, CouleurRVBAN8(0, 0, 0, 255)),
    NamedColor(COL_VisitedText, CouleurRVBAN8(0, 0, 255, 255))
]

#portée_export

trouve_couleur_pour_mot_clé :: fonc (mot_clé: CSSOMString) -> Optionnel(CouleurRVBAN8)
{
    si mot_clé == PROP_transparent {
        retourne CouleurRVBAN8(0, 0, 0, 0)
    }

    pour named_colors {
        si compare_ascii_insensible_à_la_casse(mot_clé, it.nom) {
            retourne it.valeur
        }
    }

    pour system_colors {
        si compare_ascii_insensible_à_la_casse(mot_clé, it.nom) {
            retourne it.valeur
        }
    }
}

/* https://drafts.csswg.org/css-display/#the-display-properties */
Display :: struct {
    Type :: énum n8 {
        Block
        Inline
        RunIn
        Flow
        FlowRoot
        Table
        Flex
        Grid
        Ruby
        ListItem
        TableRowGroup
        TableHeaderGroup
        TableFooterGroup
        TableRow
        TableCell
        TableColumnGroup
        TableColumn
        TableCaption
        RubyBase
        RubyText
        RubyBaseContainer
        RubyTextContainer
        Contents
        None
        InlineBlock
        InlineTable
        InlineFlex
        InlineGrid
    }

    /* Valeurs initiales. */
    outer_type := Type.Inline
    inner_type := Type.Flow
    est_list_item := faux
}

/* ------------------------------------------------------------------------- */
/** \nom Fonctions de rappels pour le calcul des valeurs de style.
 * Ces fonctions génèrent les "computed values".
 * \{ */

GenreValeurCalculée :: énum_drapeau {
    LongueurAbsolue
    LongueurPourcentage
    Nombre
    Couleur
    LineStyle
    BorderWidth
    Auto
    Spécifié
    Cursor
    Display
    TextDecorationLine
    TextDecorationStyle
    FontSize
    FontWeight
    BackgroundImage
}

calcule_valeur_propriété_générique :: fonc (valeur: ValeurDeStyle, genre_valeur_calculée: GenreValeurCalculée, style: *Style, ctx: *ContexteCalculStyle) -> Optionnel(ValeurDeStyle)
{
    discr valeur {
        mot_clé(m) {
            si genre_valeur_calculée.Couleur {
                si m == PROP_currentColor {
                    retourne style.valeurs[IDPropriété.Color]
                }
                retourne
            }
            si genre_valeur_calculée.TextDecorationLine {
                si m == PROP_none {
                    retourne valeur
                }
                retourne
            }
            si genre_valeur_calculée.Cursor {
                retourne ValeurDeStyle(cursor = donne_type_cursor(m))
            }
            si genre_valeur_calculée.BorderWidth {
                si m == PROP_thin {
                    retourne ValeurDeStyle(number = 1.0)
                }
                si m == PROP_medium {
                    retourne ValeurDeStyle(number = 3.0)
                }
                si m == PROP_thick {
                    retourne ValeurDeStyle(number = 5.0)
                }
                retourne
            }
            si genre_valeur_calculée.LineStyle {
                retourne ValeurDeStyle(line_style = donne_line_style(valeur))
            }
            si genre_valeur_calculée.Auto && m == PROP_auto {
                retourne valeur
            }
            si genre_valeur_calculée.FontWeight {
                si m == PROP_normal {
                    retourne ValeurDeStyle(number = 400.0)
                }
                si m == PROP_bold {
                    retourne ValeurDeStyle(number = 700.0)
                }
                si m == PROP_bolder {
                    graisse_parent : r64 = 400.0
                    si ctx.propriétés.parent {
                        graisse_parent = ctx.propriétés.parent.style.valeurs[IDPropriété.FontWeight].number
                    }

                    si graisse_parent < 100.0 {
                        retourne ValeurDeStyle(number = 400.0)
                    }

                    si graisse_parent < 350.0 {
                        retourne ValeurDeStyle(number = 400.0)
                    }

                    si graisse_parent < 550.0 {
                        retourne ValeurDeStyle(number = 700.0)
                    }

                    si graisse_parent < 750.0 {
                        retourne ValeurDeStyle(number = 900.0)
                    }
                    
                    si graisse_parent < 900.0 {
                        retourne ValeurDeStyle(number = 900.0)
                    }

                    retourne ValeurDeStyle(number = graisse_parent)
                }
                si m == PROP_lighter {
                    graisse_parent : r64 = 400.0
                    si ctx.propriétés.parent {
                        graisse_parent = ctx.propriétés.parent.style.valeurs[IDPropriété.FontWeight].number
                    }

                    si graisse_parent < 100.0 {
                        retourne ValeurDeStyle(number = graisse_parent)
                    }

                    si graisse_parent < 350.0 {
                        retourne ValeurDeStyle(number = 100.0)
                    }

                    si graisse_parent < 550.0 {
                        retourne ValeurDeStyle(number = 100.0)
                    }

                    si graisse_parent < 750.0 {
                        retourne ValeurDeStyle(number = 400.0)
                    }
                    
                    si graisse_parent < 900.0 {
                        retourne ValeurDeStyle(number = 700.0)
                    }

                    retourne ValeurDeStyle(number = 700.0)
                }

                retourne ValeurDeStyle(number = 400.0)
            }
            si genre_valeur_calculée.FontSize {
                retourne calcule_font_size_pour_mot_clé(m, ctx)
            }
            si genre_valeur_calculée.Display {
                retourne calcule_display_pour_mot_clé(m)
            }
            si genre_valeur_calculée.BackgroundImage && m == PROP_none {
                retourne valeur
            }
        }
        url {
            si genre_valeur_calculée.BackgroundImage {
                retourne valeur
            }
        }
        couleur {
            si genre_valeur_calculée.Couleur {
                retourne valeur
            }
        }
        longueur(l) {
            si genre_valeur_calculée.LongueurAbsolue || genre_valeur_calculée.LongueurPourcentage || genre_valeur_calculée.BorderWidth || genre_valeur_calculée.Nombre {
                retourne ValeurDeStyle(number = calcule_longueur(l, ctx))
            }
        }
        integer(i) {
            si genre_valeur_calculée.LongueurAbsolue || genre_valeur_calculée.LongueurPourcentage || genre_valeur_calculée.BorderWidth || genre_valeur_calculée.Nombre {
                retourne ValeurDeStyle(number = i)
            }
        }
        number {
            si genre_valeur_calculée.LongueurAbsolue || genre_valeur_calculée.LongueurPourcentage || genre_valeur_calculée.BorderWidth || genre_valeur_calculée.Nombre {
                retourne valeur
            }
        }
        percentage(p) {
            si genre_valeur_calculée.FontSize {
                retourne ValeurDeStyle(number = ctx.taille_fonte * p / 100.0)
            }

            si genre_valeur_calculée.LongueurPourcentage {
                retourne valeur
            }
        }
        text_decoration_line {
            si genre_valeur_calculée.TextDecorationLine {
                retourne valeur
            }
        }
        line_style {
            si genre_valeur_calculée.LineStyle {
                retourne valeur
            }
        }
        display {
            si genre_valeur_calculée.Display {
                retourne valeur
            }
        }
        cursor {
            si genre_valeur_calculée.Cursor {
                retourne valeur
            }
        }
        sinon {}
    }
}

calcule_valeur_propriété_générique :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    info := déclaration.info
    genre_valeur_calculée := info.genre_valeur_calculée

    valeur := déclaration.value[0]

    tantque valeur.est_variable() {
        valeur = résoud_valeur_variable(ctx, info, valeur.variable)
    }

    /* "color: currentColor" doit prendre la valeur héritée
     * https://www.w3.org/TR/css-color-4/#resolving-other-colors */
    si valeur.est_mot_clé(PROP_inherit) || (valeur.est_mot_clé(PROP_currentColor) && info.id == IDPropriété.Color) {
        /* https://www.w3.org/TR/css-cascade/#inherit */
        si ctx.propriétés.parent {
            valeur = ctx.propriétés.parent.style.valeurs[info.id]
        }
        sinon {
            valeur = ctx.valeurs_initiales.valeurs[info.id]
        }
    }
    sinon si valeur.est_mot_clé(PROP_initial) {
        /* https://www.w3.org/TR/css-cascade/#initial */
        valeur = ctx.valeurs_initiales.valeurs[info.id]
    }
    sinon si valeur.est_mot_clé(PROP_unset) {
        /* https://www.w3.org/TR/css-cascade/#inherit-initial */
        // À FAIRE : unset
        valeur = ctx.valeurs_initiales.valeurs[info.id]
    }
    sinon si valeur.est_mot_clé(PROP_revert) {
        /* https://www.w3.org/TR/css-cascade/#default */
        // À FAIRE : revert
        valeur = ctx.valeurs_initiales.valeurs[info.id]
    }

    résultat := calcule_valeur_propriété_générique(valeur, genre_valeur_calculée, style, ctx)
    si résultat.possède_valeur() {
        style.valeurs[info.id] = résultat.Quelque
        retourne
    }

    si genre_valeur_calculée.Spécifié {
        style.valeurs[info.id] = valeur
        retourne
    }
}

/* À FAIRE : variables récurives. */
résoud_valeur_variable :: fonc (ctx: *ContexteCalculStyle, info: *InfoTypePropriété, variable: Variable) -> ValeurDeStyle
{
    déclaration := donne_déclaration_propriété_personnalisée(ctx.propriétés, variable.nom)
    saufsi déclaration {
        retourne ctx.valeurs_initiales.valeurs[info.id]
    }

    résultat := parse_valeur_propriété(info, déclaration.valeur_personnalisée)
    si résultat.possède_valeur() {
        retourne résultat.Quelque
    }

    retourne ctx.valeurs_initiales.valeurs[info.id]
}

calcule_display_pour_mot_clé :: fonc (mot_clé: CSSOMString) -> ValeurDeStyle
{
    résultat: Display

    si mot_clé == PROP_none {
        résultat.outer_type = Display.Type.None
    }
    sinon si mot_clé == PROP_block {
        résultat.outer_type = Display.Type.Block
    }
    sinon si mot_clé == PROP_list_item {
        résultat.outer_type = Display.Type.Block
        résultat.inner_type = Display.Type.Flow
        résultat.est_list_item = vrai
    }
    sinon si mot_clé == PROP_inline_block {
        résultat.outer_type = Display.Type.Inline
        résultat.inner_type = Display.Type.FlowRoot
    }
    sinon {
        assert(mot_clé == PROP_inline)
    }

    retourne ValeurDeStyle(display = résultat)
}

calcule_font_size_pour_mot_clé :: fonc (m: CSSOMString, ctx: *ContexteCalculStyle) -> ValeurDeStyle
{
    taille_fonte_référence := ctx.taille_fonte
    taille_fonte := taille_fonte_référence

    /* Utilise 1.2 pour l'échelle. La spécification propose une valeur entre 1.2 et 1.5. */
    si m == PROP_smaller {
        taille_fonte /= 1.2
    }
    sinon si m == PROP_larger {
        taille_fonte *= 1.2
    }
    /* https://drafts.csswg.org/css-fonts/#absolute-size-mapping */
    sinon si m == PROP_xx_small {
        taille_fonte *= 3.0 / 5.0
    }
    sinon si m == PROP_x_small {
        taille_fonte *= 3.0 / 4.0
    }
    sinon si m == PROP_small {
        taille_fonte *= 8.0 / 9.0
    }
    sinon si m == PROP_medium {
        /* Valeur de base, fateur de 1.0 */
    }
    sinon si m == PROP_large {
        taille_fonte *= 6.0 / 5.0
    }
    sinon si m == PROP_x_large {
        taille_fonte *= 3.0 / 2.0
    }
    sinon si m == PROP_xx_large {
        taille_fonte *= 2.0
    }
    sinon si m == PROP_xxx_large {
        taille_fonte *= 3.0
    }
    sinon {
        message := imprime_chaine("[%] mot_clé '%' non pris en charge", #nom_de_cette_fonction, m)
        panique(message)
    }

    retourne ValeurDeStyle(number = taille_fonte)
}

/* À FAIRE : direction du flux */
prop_margin_block_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.MarginBottom] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_margin_block_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.MarginTop] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_margin_inline_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.MarginRight] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_margin_inline_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.MarginLeft] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

/* À FAIRE : direction du flux */
prop_padding_block_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.PaddingBottom] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_padding_block_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.PaddingTop] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_padding_inline_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.PaddingRight] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_padding_inline_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.PaddingLeft] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

/* À FAIRE : direction du flux */
prop_inset_block_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.Bottom] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_inset_block_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.Top] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_inset_inline_end_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.Right] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

prop_inset_inline_start_sur_calcul_style :: fonc (déclaration: *DéclarationPropriété, style: *Style, ctx: *ContexteCalculStyle)
{
    style.valeurs[IDPropriété.Left] = calcule_valeur_propriété_générique(déclaration.value[0], déclaration.info.genre_valeur_calculée, style, ctx)
}

/** \} */
