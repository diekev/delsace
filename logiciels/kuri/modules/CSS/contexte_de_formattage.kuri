importe Chaine
importe Fondation
importe Math

/* ------------------------------------------------------------------------- */
/** \nom ContexteDeFormattage
 * \{ */

ModeDeFormattage :: énum {
    Normal
    /* Pour le calcul de la largeur « préférée ». */
    BrisureDeLigneExplicite
    /* Pour le calcul de la largeur « minimale préférée ». */
    ToutesLesBrisuresDeLigne
}

ContexteDeFormattage :: struct {
    sur_formatte: fonc(*ContexteDeFormattage, *NoeudDeDispositionBloc, ModeDeFormattage)(rien)

    globales: *GlobalesDessin
    initial_containing_block: *ContainingBlock

    /* https://html.spec.whatwg.org/multipage/rendering.html#align-descendants */
    doit_aligner_les_descendants: Optionnel(AlignementTexte)
}

donne_initial_containing_block :: fonc (ctx: *ContexteDeFormattage) -> ContainingBlock
{
    retourne mémoire(ctx.initial_containing_block)
}

formatte :: fonc (contexte: *ContexteDeFormattage, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage)
{
    contexte.sur_formatte(contexte, noeud, mode)
}

modifie_marges_pour_alignement_forcé :: fonc (ctx: *ContexteDeFormattage, noeud: *NoeudDeDisposition)
{
    saufsi ctx.doit_aligner_les_descendants.possède_valeur() {
        retourne
    }

    propriétés := noeud.propriétés
    margin_left := propriétés.donne_valeur_calculée(IDPropriété.MarginLeft)
    margin_right := propriétés.donne_valeur_calculée(IDPropriété.MarginRight)

    si !margin_left.est_auto() && !margin_right.est_auto() {
        propriétés.définis_valeur_utilisée(IDPropriété.MarginLeft, ValeurDeStyle(mot_clé = PROP_auto))
        propriétés.définis_valeur_utilisée(IDPropriété.MarginRight, ValeurDeStyle(mot_clé = PROP_auto))
    }
}

/* https://drafts.csswg.org/css-display-4/#establish-an-independent-formatting-context
 * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Introduction_to_formatting_contexts#creating_a_new_block_formatting_context */
requiers_contexte_de_formattage_indépendant :: fonc (noeud: *NoeudDeDisposition) -> bool
{
    si noeud.parent == nul {
        retourne vrai
    }

    // elements made to float using float
    float := noeud.propriétés.donne_valeur_calculée(IDPropriété.Float)
    saufsi float.est_none() {
        retourne vrai
    }

    // absolutely positioned elements
    position := noeud.propriétés.donne_valeur_calculée(IDPropriété.Position)
    si position.est_mot_clé(PROP_absolute) {
        retourne vrai
    }

    // table cells or elements with display: table-cell, including anonymous table cells created when using the display: table-* properties
    si noeud.type == TableCellBox {
        retourne vrai
    }

    // table captions or elements with display: table-caption
    si noeud.type == CaptionBox {
        retourne vrai
    }

    // block elements where overflow has a value other than visible
    overflow_x := noeud.propriétés.donne_valeur_calculée(IDPropriété.OverflowX)
    overflow_y := noeud.propriétés.donne_valeur_calculée(IDPropriété.OverflowY)
    si !overflow_x.est_mot_clé(PROP_visible) || !overflow_y.est_mot_clé(PROP_visible) {
        retourne vrai
    }

    // elements with display: inline-block
    // elements with display: flow-root or display: flow-root list-item
    display := noeud.propriétés.donne_valeur_calculée(IDPropriété.Display).display
    si display.inner_type == Display.Type.FlowRoot {
        retourne vrai
    }

    // À FAIRE : elements with contain: layout, content, or strict

    // flex items
    si noeud.parent.donne_display().inner_type == Display.Type.Flex {
        // À FAIRE : autres cas
        si noeud.donne_display().inner_type != Display.Type.Flex {
            retourne vrai
        }
    }

    // À FAIRE : grid items
    // À FAIRE : multicol containers
    // À FAIRE : elements with column-span set to all

    retourne faux
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ContexteDeFormattage
 * \{ */

BoiteFlottante :: struct {
    noeud: *NoeudDeDisposition
    position_x: r32
    position_y: r32
    hauteur: r32
    largeur: r32
}

ContexteDeFormattageBloc :: struct {
    empl base: ContexteDeFormattage
    sur_formatte = contexte_formattage_bloc_sur_formatte

    racine: *NoeudDeDispositionBloc

    /* Pour la disposition des floats. */
    boites_flottantes_gauche: [..]BoiteFlottante
    boites_flottantes_droite: [..]BoiteFlottante
    décalage_x: r32
    décalage_float_left_x: r32
    décalage_float_left_y: r32
    décalage_float_right_x: r32
    décalage_float_right_y: r32
}

détruit_données_contexte :: fonc (ctx: *ContexteDeFormattageBloc)
{
    déloge(ctx.boites_flottantes_droite)
    déloge(ctx.boites_flottantes_gauche)
}

contexte_formattage_bloc_sur_formatte :: fonc (base: *ContexteDeFormattage, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage)
{
    ctx := base comme *ContexteDeFormattageBloc

    /* https://www.w3.org/TR/CSS2/box.html#collapsing-margins */
    décalage_x := noeud.modèle_de_boite.contenu.x
    décalage_y := noeud.modèle_de_boite.contenu.y

    // dernière_marge := marges[BorderEdge.Top]

    hauteur_contenu := 0.0
    décalage_hors_float := 0.0

    si noeud == ctx.racine {
        ctx.décalage_x = décalage_x
        ctx.décalage_float_left_x = décalage_x
        ctx.décalage_float_left_y = décalage_y
        ctx.décalage_float_right_x = décalage_x + noeud.modèle_de_boite.contenu.largeur
        ctx.décalage_float_right_y = décalage_y
    }

    pour noeud.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        si position.est_mot_clé(PROP_absolute) {
            ctx.dispose_boite_absolute(it comme *NoeudDeDispositionBloc, décalage_x, décalage_y + décalage_hors_float)
            continue
        }

        si position.est_mot_clé(PROP_fixed) {
            ctx.dispose_boite_fixed(it comme *NoeudDeDispositionBloc)
            continue
        }

        clear := it.propriétés.donne_valeur_utilisée(IDPropriété.Clear)
        si clear.est_mot_clé(PROP_left) {
            hauteur_float_left := ctx.donne_hauteur_floats_gauche() - décalage_y

            hauteur_contenu += hauteur_float_left
            décalage_hors_float += hauteur_float_left

            // déloge(ctx.boites_flottantes_gauche)
            ctx.décalage_float_left_y = hauteur_contenu
        }
        sinon si clear.est_mot_clé(PROP_right) {
            hauteur_float_right := ctx.donne_hauteur_floats_gauche() - décalage_y
            hauteur_contenu += hauteur_float_right
            décalage_hors_float += hauteur_float_right
            //déloge(ctx.boites_flottantes_droite)
            ctx.décalage_float_right_y = hauteur_contenu
        }
        sinon si clear.est_mot_clé(PROP_both) {
            hauteur_float_right := ctx.donne_hauteur_floats_droite() - décalage_y
            hauteur_float_left := ctx.donne_hauteur_floats_gauche() - décalage_y
            hauteur_contenu += max(hauteur_float_left, hauteur_float_right)
            décalage_hors_float += max(hauteur_float_left, hauteur_float_right)
            // déloge(ctx.boites_flottantes_droite)
            // déloge(ctx.boites_flottantes_gauche)
            ctx.décalage_float_right_y = hauteur_contenu
            ctx.décalage_float_left_y = hauteur_contenu
        }

        it.définis_position(décalage_x, décalage_y + décalage_hors_float)
        it.mesure(ctx, mode, nul)

        float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
        si float.est_mot_clé(PROP_left) {
            ctx.ajoute_boite_flottante_gauche(it)
            continue
        }
        si float.est_mot_clé(PROP_right) {
            ctx.ajoute_boite_flottante_droite(it)
            continue
        }

        hauteur_enfant := it.modèle_de_boite.marge.hauteur

        // marges_enfant := it.marges
        // marge_inter_enfant := max(marges_enfant[BorderEdge.Bottom], dernière_marge)
        // décalage_y := marge_inter_enfant comme r32

        // dernière_marge = marges_enfant[BorderEdge.Bottom]

        si index_it == 0 {
            hauteur_contenu += hauteur_enfant // + marges[BorderEdge.Top] comme r32
            décalage_hors_float += hauteur_enfant
        }
        sinon si index_it == noeud.enfants.taille - 1 {
            hauteur_contenu += hauteur_enfant // + marges[BorderEdge.Bottom] comme r32
            décalage_hors_float += hauteur_enfant
        }
        sinon {
            hauteur_contenu += hauteur_enfant // + dernière_marge comme r32
            décalage_hors_float += hauteur_enfant
        }
    }

    pour noeud.enfants {
        position := it.propriétés.donne_valeur_utilisée(IDPropriété.Position)
        /* À FAIRE : https://drafts.csswg.org/css-position/#relpos-insets */
        si position.est_mot_clé(PROP_relative) {
            résoud_pourcentage_insets(it, ctx)

            top := it.propriétés.donne_valeur_utilisée(IDPropriété.Top)
            bottom := it.propriétés.donne_valeur_utilisée(IDPropriété.Bottom)
            left := it.propriétés.donne_valeur_utilisée(IDPropriété.Left)
            right := it.propriétés.donne_valeur_utilisée(IDPropriété.Right)

            si left.est_auto() && right.est_auto() {
                left = ValeurDeStyle(pixels = 0.0)
                right = ValeurDeStyle(pixels = 0.0)
            }
            sinon si left.est_auto() {
                left = ValeurDeStyle(pixels = -right.pixels)
            }
            sinon si right.est_auto() {
                right.pixels = -left.pixels
            }
            sinon {
                right.pixels = 0.0
            }

            si top.est_auto() && bottom.est_auto() {
                top = ValeurDeStyle(pixels = 0.0)
                bottom.pixels = 0.0
            }
            sinon si top.est_auto() {
                top = ValeurDeStyle(pixels = -bottom.pixels)
            }
            sinon si bottom.est_auto() {
                bottom.pixels = -top.pixels
            }
            sinon {
                bottom.pixels = 0.0
            }

            it.décale(left.pixels comme r32, top.pixels comme r32)
        }
    }

    si noeud == ctx.racine {
        /* https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#root-height */
        pour noeud.enfants {
            float := it.propriétés.donne_valeur_utilisée(IDPropriété.Float)
            si float.est_mot_clé(PROP_none) {
                continue
            }

            si hauteur_contenu < it.modèle_de_boite.marge.hauteur {
                hauteur_contenu = it.modèle_de_boite.marge.hauteur
            }
        }
    }

    hauteur_finale := ValeurDeStyle(pixels = hauteur_contenu)
    containing_block := donne_containing_block(noeud, ctx)
    args := crée_arguments_dimensionnement_hauteur(ctx, noeud, containing_block, *hauteur_finale)
    _ := calcule_hauteur_et_marges(*args)

    discr mode {
        BrisureDeLigneExplicite,
        ToutesLesBrisuresDeLigne {
            largeur_max_enfant : r64 = 0.0
            pour noeud.enfants {
                largeur_enfant := it.modèle_de_boite.marge.largeur
                largeur_max_enfant = max(largeur_max_enfant, largeur_enfant)
            }

            prop_largeur := noeud.propriétés.donne_valeur_calculée(IDPropriété.Width)
            si prop_largeur.est_auto() {
                noeud.propriétés.définis_valeur_utilisée(IDPropriété.Width, ValeurDeStyle(pixels = largeur_max_enfant))
                ajourne_boite_pour_calcul_largeur(noeud)
            }
        }
        sinon {}
    }
}

dispose_boite_fixed :: fonc (empl ctx: *ContexteDeFormattageBloc, noeud: *NoeudDeDispositionBloc)
{
    containing_block := donne_containing_block(noeud, ctx)
    args := crée_arguments_dimensionnement_largeur(ctx, noeud, containing_block, nul)
    calcule_largeur_et_marges(*args)
    _ := calcule_hauteur_et_marges(*args)

    bord_gauche := containing_block.rect.x
    bord_haut := containing_block.rect.y

    top := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Top)
    bottom := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Bottom)
    left := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Left)

    si top.est_auto() && bottom.est_auto() {
        top = ValeurDeStyle(pixels = 0.0)
    }
    sinon si top.est_auto() {
        top = ValeurDeStyle(pixels = -bottom.pixels)
    }
    sinon saufsi top.est_pixels() {
        top = ValeurDeStyle(pixels = 0.0)
    }

    noeud.définis_position(bord_gauche + left.pixels comme r32, bord_haut + top.pixels comme r32)
    formatte_intérieur(noeud, ctx, ModeDeFormattage.Normal)
}

/* À FAIRE : https://drafts.csswg.org/css-position/#abspos-layout */
dispose_boite_absolute :: fonc (empl ctx: *ContexteDeFormattage, noeud: *NoeudDeDispositionBloc, pos_x_statique: r64, pos_y_statique: r64)
{
    containing_block := donne_containing_block(noeud, ctx)
    args := crée_arguments_dimensionnement_largeur(ctx, noeud, containing_block, nul)
    args.pos_x_statique = pos_x_statique
    args.pos_y_statique = pos_y_statique
    calcule_largeur_et_marges(*args)
    état_calcul_hauteur := calcule_hauteur_et_marges(*args)

    bord_gauche := containing_block.rect.x
    bord_haut := containing_block.rect.y

    top := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Top)
    bottom := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Bottom)
    left := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Left)

    si top.est_auto() && bottom.est_auto() {
        top = ValeurDeStyle(pixels = 0.0)
    }
    sinon si top.est_auto() {
        top = ValeurDeStyle(pixels = -bottom.pixels)
    }
    sinon saufsi top.est_pixels() {
        top = ValeurDeStyle(pixels = 0.0)
    }

    height := noeud.propriétés.donne_valeur_utilisée(IDPropriété.Height)

    noeud.définis_position(bord_gauche + left.pixels comme r32, bord_haut + top.pixels comme r32)
    formatte_intérieur(noeud, ctx, ModeDeFormattage.Normal)

    height = noeud.propriétés.donne_valeur_utilisée(IDPropriété.Height)

    si état_calcul_hauteur == ÉtatCalculHauteur.HauteurDépendSurContenu {
        args.calcul_hauteur_après_contenu = vrai
        _ := calcule_hauteur_et_marges(*args)

        height = noeud.propriétés.donne_valeur_utilisée(IDPropriété.Height)
    }
}

ajoute_boite_flottante_gauche :: fonc (empl ctx: *ContexteDeFormattageBloc, noeud: *NoeudDeDisposition)
{
    containing_block := donne_containing_block(noeud, ctx)
    largeur_disponible := containing_block.donne_largeur()

    bord_gauche := containing_block.rect.x
    bord_droit := bord_gauche + largeur_disponible

    position_x: r32
    position_y: r32
    hauteur_noeud := noeud.modèle_de_boite.marge.hauteur
    largeur_noeud := noeud.modèle_de_boite.marge.largeur

    si boites_flottantes_gauche.taille == 0 {
        position_x = max(bord_gauche, décalage_x)
        position_y = max(containing_block.rect.y, décalage_float_left_y)
    }
    sinon {
        dernière_boite := boites_flottantes_gauche[boites_flottantes_gauche.taille - 1]

        position_x = dernière_boite.position_x + dernière_boite.largeur
        position_y = max(containing_block.rect.y, décalage_float_left_y)

        si position_x + largeur_noeud > bord_droit {
            position_x = max(bord_gauche, décalage_x)

            pour boites_flottantes_gauche {
                décalage_float_left_y = max(position_y, it.position_y + it.hauteur)
            }

            position_y = décalage_float_left_y
        }
    }

    tableau_ajoute(*boites_flottantes_gauche, BoiteFlottante(noeud, position_x, position_y, hauteur_noeud, largeur_noeud))

    noeud.décale_vers_position(position_x, position_y)
}

ajoute_boite_flottante_droite :: fonc (empl ctx: *ContexteDeFormattageBloc, noeud: *NoeudDeDisposition)
{
    containing_block := donne_containing_block(noeud, ctx)
    largeur_disponible := containing_block.donne_largeur()

    bord_gauche := containing_block.rect.x
    bord_droit := bord_gauche + largeur_disponible

    position_x: r32
    position_y: r32
    hauteur_noeud := noeud.modèle_de_boite.marge.hauteur
    largeur_noeud := noeud.modèle_de_boite.marge.largeur

    si boites_flottantes_droite.taille == 0 {
        position_x = min(bord_droit, décalage_float_right_x) - largeur_noeud
        position_y = containing_block.rect.y
    }
    sinon {
        dernière_boite := boites_flottantes_droite[boites_flottantes_droite.taille - 1]

        position_x = dernière_boite.position_x - largeur_noeud
        position_y = max(containing_block.rect.y, décalage_float_right_y)

        si position_x < bord_gauche {
            position_x = min(bord_droit, décalage_float_right_x) - largeur_noeud

            pour boites_flottantes_droite {
                décalage_float_right_y = max(position_y, it.position_y + it.hauteur)
            }

            position_y = décalage_float_right_y
        }
    }

    tableau_ajoute(*boites_flottantes_droite, BoiteFlottante(noeud, position_x, position_y, hauteur_noeud, largeur_noeud))

    noeud.décale_vers_position(position_x, position_y)
}

donne_hauteur_floats_gauche :: fonc (empl ctx: *ContexteDeFormattageBloc) -> r32
{
    résultat := 0.0
    pour boites_flottantes_gauche {
        résultat = max(résultat, it.position_y + it.hauteur)
    }
    retourne résultat
}

donne_hauteur_floats_droite :: fonc (empl ctx: *ContexteDeFormattageBloc) -> r32
{
    résultat := 0.0
    pour boites_flottantes_droite {
        résultat = max(résultat, it.position_y + it.hauteur)
    }
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ContexteDeFormattage
 * \{ */

ContexteDeFormattageInline :: struct {
    empl base: ContexteDeFormattage
    sur_formatte = contexte_formattage_inline_sur_formatte

    racine: *NoeudDeDispositionBloc
}

AlignementTexte :: énum {
    Gauche
    Droite
    Centre
    Justifié
}

donne_alignement_texte :: fonc (noeud: *NoeudDeDispositionBloc) -> AlignementTexte
{
    text_align := noeud.propriétés.donne_valeur_utilisée(IDPropriété.TextAlign)

    si text_align.est_mot_clé(PROP_start) {
        retourne AlignementTexte.Gauche
    }

    si text_align.est_mot_clé(PROP_end) {
        retourne AlignementTexte.Droite
    }

    si text_align.est_mot_clé(PROP_left) {
        retourne AlignementTexte.Gauche
    }

    si text_align.est_mot_clé(PROP_right) {
        retourne AlignementTexte.Droite
    }

    si text_align.est_mot_clé(PROP_center) {
        retourne AlignementTexte.Centre
    }

    si text_align.est_mot_clé(PROP_justify) {
        retourne AlignementTexte.Justifié
    }

    retourne AlignementTexte.Gauche
}

contexte_formattage_inline_sur_formatte :: fonc (base: *ContexteDeFormattage, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage)
{
    ctx := base comme *ContexteDeFormattageInline

    containing_block := donne_containing_block(noeud, ctx)
    largeur_disponible := noeud.modèle_de_boite.contenu.largeur

    décalage_x := noeud.modèle_de_boite.contenu.x
    décalage_y := noeud.modèle_de_boite.contenu.y

    enligneuse: Enligneuse
    divise_en_lignes(*enligneuse, noeud, ctx, mode)

    hauteur_contenu := 0.0

    alignement := donne_alignement_texte(noeud)
    si ctx.doit_aligner_les_descendants.possède_valeur() {
        alignement = ctx.doit_aligner_les_descendants.Quelque
    }

    lignes_tenante := *noeud.lignes_tenante

    pour lignes_tenante.lignes {
        hauteur := it.hauteur_contenu
        décalage_pour_alignement := 0.0

        fragments := donne_fragments_ligne(lignes_tenante, *it)

        si fragments.taille == 0 {
            hauteur_contenu += hauteur
            décalage_y += hauteur
            continue
        }

        si alignement == AlignementTexte.Droite {
            décalage_pour_alignement = largeur_disponible - it.largeur_courante
        }
        sinon si alignement == AlignementTexte.Centre {
            décalage_pour_alignement = (largeur_disponible - it.largeur_courante) / 2.0
        }
        sinon si alignement == AlignementTexte.Justifié {
            /* À FAIRE : ignore l'espace finale. */
            décalage_pour_alignement = (largeur_disponible - it.largeur_courante) / ((fragments.taille - 1) comme r32)
        }

        pour * fragment, index_fragment dans fragments {
            si alignement == AlignementTexte.Justifié {
                si index_fragment != 0 && index_it != (lignes_tenante.lignes.taille - 1) {
                    fragment.x += décalage_pour_alignement * (index_fragment comme r32)
                }
            }
            sinon {
                fragment.x += décalage_pour_alignement
            }

            fragment.y = décalage_y
        }

        // pour * fragment dans it.fragments {
        //     noeud_fragment := fragment.noeud
        //     propriétés_noeud_fragment := donne_propriétés(noeud_fragment)
        //     vertical_align := propriétés_noeud_fragment.donne_valeur_utilisée(IDPropriété.VerticalAlign)
        //     imprime("vertical-align: % (% | %)\n", vertical_align, fragment.hauteur, hauteur)

        //     si vertical_align.est_mot_clé(PROP_bottom) || vertical_align.est_mot_clé(PROP_baseline) {
        //         si fragment.hauteur < hauteur {
        //             fragment.y += (hauteur - fragment.hauteur)
        //         }
        //     }
        //     sinon si vertical_align.est_mot_clé(PROP_top) {
        //         si fragment.hauteur < hauteur {
        //             fragment.y = (hauteur - fragment.hauteur)
        //         }
        //     }
        // }

        hauteur_contenu += hauteur
        décalage_y += hauteur
    }

    hauteur_finale := ValeurDeStyle(pixels = hauteur_contenu)
    args := crée_arguments_dimensionnement_hauteur(ctx, noeud, containing_block, *hauteur_finale)
    _ := calcule_hauteur_et_marges(*args)

    si décalage_x != 0.0 || décalage_y != 0.0 {
        pour * noeud.lignes_tenante.fragments {
            it.x += décalage_x
        }
    }

    discr mode {
        BrisureDeLigneExplicite,
        ToutesLesBrisuresDeLigne {
            largeur_max_enfant : r64 = 0.0
            pour lignes_tenante.lignes {
                largeur_max_enfant = max(largeur_max_enfant, it.largeur_courante comme r64)
            }

            largeur := noeud.propriétés.donne_valeur_calculée(IDPropriété.Width)
            si largeur.est_auto() {
                valeur_largeur_enfant := ValeurDeStyle(pixels = largeur_max_enfant)
                /* Utilise cette fontcion pour résoudre les valeurs 'auto' pour les autres propriétés. */
                args = ArgumentsDimensionnement(ctx, noeud, width_of_containing_block = 0.0, outrepas_largeur = *valeur_largeur_enfant)
                calcule_largeur_et_marges_inline_non_replaced_element(*args)
                ajourne_boite_pour_calcul_largeur(noeud)
            }
        }
        sinon {}
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Flexbox
 * \{ */

est_espace_blanche_document :: fonc (base: *NoeudDeDisposition) -> bool
{
    si base.type == NoeudDeDispositionTexte {
        noeud := base comme *NoeudDeDispositionTexte
        retourne est_vide_ou_uniquement_espaces_blanches(noeud.noeud_texte.données)
    }

    si base.type == NoeudDeDispositionBloc || base.type == NoeudDeDispositionInline {
        noeud := base comme *NoeudDeDispositionBloc

        si noeud.élément != nul {
            /* Nous voulons un noeud anonyme. */
            retourne faux
        }

        si noeud.enfants.taille != 1 {
            /* Il ne doit y avoir qu'un seul enfant : le noeud inline anonyme ou le noeud texte. */
            retourne faux
        }

        retourne est_espace_blanche_document(noeud.enfants[0])
    }

    retourne faux
}

ContexteDeFormattageFlex :: struct {
    empl base: ContexteDeFormattage
    sur_formatte = contexte_formattage_flex_sur_formatte
}

LigneFlex :: struct {
    noeuds: [..]*NoeudDeDisposition
    largeur: r32
}

contexte_formattage_flex_sur_formatte :: fonc (base: *ContexteDeFormattage, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage)
{
    ctx := base comme *ContexteDeFormattageFlex

    direction := noeud.propriétés.donne_valeur_calculée(IDPropriété.FlexDirection).mot_clé

    si direction == PROP_row || direction == PROP_row_reverse {
        formatte_flex_row(ctx, noeud, mode, direction == PROP_row_reverse)
    }
    sinon {
        assert(direction == PROP_column || direction == PROP_column_reverse)
        formatte_flex_column(ctx, noeud, mode, direction == PROP_column_reverse)
    }
}

formatte_flex_row :: fonc (ctx: *ContexteDeFormattageFlex, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage, reverse: bool)
{
    largeur_disponible := noeud.modèle_de_boite.contenu.largeur

    largeur_des_enfants := 0.0

    /* Calcule la taille des noeuds. */
    pour noeud.enfants {
        si est_espace_blanche_document(it) {
            continue
        }

        flex_basis := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexBasis)

        largeur : r64 = 0.0
        si flex_basis.est_mot_clé(PROP_content) || flex_basis.est_mot_clé(PROP_auto) {
            /* calcule_shrink_to_fit_width ne résoud pas les pourcentages... */
            it.mesure(ctx, mode, nul)
            largeur = calcule_shrink_to_fit_width(ctx, it, largeur_disponible)
        }
        sinon si flex_basis.est_percentage() {
            largeur = calcule_pourcentage(flex_basis, largeur_disponible).pixels
        }
        sinon {
            largeur = flex_basis.pixels
        }

        largeur_désirée := ValeurDeStyle(pixels = largeur)
        it.mesure(ctx, mode, *largeur_désirée)

        largeur_des_enfants += it.modèle_de_boite.marge.largeur
    }

    /* Crée des lignes. */
    lignes: [..]LigneFlex
    diffère {
        pour lignes {
            déloge(it.noeuds)
        }
        déloge(lignes)
    }

    ligne_courante := tableau_ajoute_élément(*lignes)

    flex_wrap := noeud.propriétés.donne_valeur_utilisée(IDPropriété.FlexWrap).mot_clé

    pour noeud.enfants {
        si est_espace_blanche_document(it) {
            continue
        }

        largeur := it.modèle_de_boite.marge.largeur

        si flex_wrap == PROP_wrap && (ligne_courante.largeur + largeur) > largeur_disponible {
            ligne_courante = tableau_ajoute_élément(*lignes)
        }

        ligne_courante.largeur += largeur
        tableau_ajoute(*ligne_courante.noeuds, it)
    }

    /* Dispose les noeuds. */
    décalage_x := noeud.modèle_de_boite.contenu.x
    décalage_y := noeud.modèle_de_boite.contenu.y

    si reverse {
        décalage_x += noeud.modèle_de_boite.contenu.largeur
    }

    décalage_x_original := décalage_x

    hauteur_contenu := 0.0

    pour * ligne dans lignes {
        justify_content := noeud.propriétés.donne_valeur_utilisée(IDPropriété.JustifyContent).mot_clé
        espace_disponible := largeur_disponible - ligne.largeur

        distribue_espace_disponible(ctx, ligne, espace_disponible, mode)

        espace_disponible = largeur_disponible - ligne.largeur

        décalage_pre := 0.0
        décalage_post := 0.0

        si justify_content == PROP_center {
            décalage_x += espace_disponible * 0.5
        }
        sinon si justify_content == PROP_flex_end {
            décalage_x += espace_disponible
        }
        sinon si justify_content == PROP_space_between {
            décalage_post = espace_disponible / (ligne.noeuds.taille - 1) comme r32
        }
        sinon si justify_content == PROP_space_around {
            espace_par_bloc := espace_disponible / (ligne.noeuds.taille) comme r32
            décalage_pre = espace_par_bloc * 0.5
            décalage_post = décalage_pre
        }

        hauteur_ligne := 0.0
        pour ligne.noeuds {
            si reverse {
                décalage_x -= décalage_pre + it.modèle_de_boite.marge.largeur
            }
            sinon {
                décalage_x += décalage_pre
            }

            it.décale_vers_position(décalage_x, décalage_y)

            si reverse {
                décalage_x -= décalage_post
            }
            sinon {
                décalage_x += it.modèle_de_boite.marge.largeur + décalage_post
            }
            hauteur_ligne = max(hauteur_ligne, it.modèle_de_boite.marge.hauteur)
        }

        décalage_y += hauteur_ligne
        hauteur_contenu += hauteur_ligne
        décalage_x = décalage_x_original
    }

    /* Ajourne les propriétés du noeud. */
    prop_largeur := noeud.propriétés.donne_valeur_calculée(IDPropriété.Width)
    si prop_largeur.est_auto() {
        noeud.propriétés.définis_valeur_utilisée(IDPropriété.Width, ValeurDeStyle(pixels = largeur_des_enfants))
    }

    hauteur_finale := ValeurDeStyle(pixels = hauteur_contenu)
    containing_block := donne_containing_block(noeud, ctx)
    args := crée_arguments_dimensionnement_hauteur(ctx, noeud, containing_block, *hauteur_finale)
    _ := calcule_hauteur_et_marges(*args)

    discr mode {
        BrisureDeLigneExplicite,
        ToutesLesBrisuresDeLigne {
            noeud.ajourne_boite_pour_calcul_largeur()
        }
        sinon {}
    }
}

formatte_flex_column :: fonc (ctx: *ContexteDeFormattageFlex, noeud: *NoeudDeDispositionBloc, mode: ModeDeFormattage, reverse: bool)
{
    largeur_disponible := noeud.modèle_de_boite.contenu.largeur

    largeur_des_enfants := 0.0
    hauteur_des_enfants := 0.0

    /* Calcule la taille des noeuds. */
    pour noeud.enfants {
        si est_espace_blanche_document(it) {
            continue
        }

        flex_basis := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexBasis)

        largeur : r64 = 0.0
        si flex_basis.est_mot_clé(PROP_content) || flex_basis.est_mot_clé(PROP_auto) {
            /* calcule_shrink_to_fit_width ne résoud pas les pourcentages... */
            it.mesure(ctx, mode, nul)
            largeur = calcule_shrink_to_fit_width(ctx, it, largeur_disponible)
        }
        sinon si flex_basis.est_percentage() {
            largeur = calcule_pourcentage(flex_basis, largeur_disponible).pixels
        }
        sinon {
            largeur = flex_basis.pixels
        }

        largeur_désirée := ValeurDeStyle(pixels = largeur)
        it.mesure(ctx, mode, *largeur_désirée)

        largeur_des_enfants += it.modèle_de_boite.marge.largeur
        hauteur_des_enfants += it.modèle_de_boite.marge.hauteur
    }

    /* Dispose les noeuds. */
    décalage_x := noeud.modèle_de_boite.contenu.x
    décalage_y := noeud.modèle_de_boite.contenu.y

    si reverse {
        décalage_y += noeud.modèle_de_boite.contenu.hauteur
    }

    pour noeud.enfants {
        si est_espace_blanche_document(it) {
            continue
        }

        si reverse {
            décalage_y -= it.modèle_de_boite.marge.hauteur
        }

        it.décale_vers_position(décalage_x, décalage_y)

        largeur_des_enfants += it.modèle_de_boite.marge.largeur

        saufsi reverse {
            décalage_y += it.modèle_de_boite.marge.hauteur
        }
    }

    /* Ajourne les propriétés du noeud. */
    prop_largeur := noeud.propriétés.donne_valeur_calculée(IDPropriété.Width)
    si prop_largeur.est_auto() {
        noeud.propriétés.définis_valeur_utilisée(IDPropriété.Width, ValeurDeStyle(pixels = largeur_des_enfants))
    }

    hauteur_finale := ValeurDeStyle(pixels = hauteur_des_enfants)
    containing_block := donne_containing_block(noeud, ctx)
    args := crée_arguments_dimensionnement_hauteur(ctx, noeud, containing_block, *hauteur_finale)
    _ := calcule_hauteur_et_marges(*args)

    discr mode {
        BrisureDeLigneExplicite,
        ToutesLesBrisuresDeLigne {
            noeud.ajourne_boite_pour_calcul_largeur()
        }
        sinon {}
    }
}

/* Modifie la taille des items selon leurs facteurs de croissance. */
distribue_espace_disponible :: fonc (ctx: *ContexteDeFormattageFlex, ligne: *LigneFlex, espace_disponible: r64, mode: ModeDeFormattage)
{
    si espace_disponible == 0.0 {
        retourne
    }

    utilise_flex_shrink := espace_disponible < 0.0

    somme_flex_grow: r64
    somme_flex_shrink: r64
    pour ligne.noeuds {
        flex_grow := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexGrow)
        flex_shrink := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexShrink)
        somme_flex_grow += flex_grow.number
        somme_flex_shrink += flex_shrink.number
    }

    si utilise_flex_shrink && somme_flex_shrink == 0.0 {
        retourne
    }

    si !utilise_flex_shrink && somme_flex_grow == 0.0 {
        retourne
    }

    pour ligne.noeuds {
        flex_grow := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexGrow)
        flex_shrink := it.propriétés.donne_valeur_utilisée(IDPropriété.FlexShrink)

        si utilise_flex_shrink && flex_shrink.number == 0.0 {
            continue
        }

        si !utilise_flex_shrink && flex_grow.number == 0.0 {
            continue
        }

        /* Nous utilisons la largeur du contenu ici car c'est le contenu qui doit
         * changer sa taille. */
        ancienne_largeur := it.modèle_de_boite.contenu.largeur
        delta := si utilise_flex_shrink {
            espace_disponible * flex_shrink.number / somme_flex_shrink
        }
        sinon {
            espace_disponible * flex_grow.number / somme_flex_grow
        }

        nouvelle_largeur := ancienne_largeur + delta

        largeur_désirée := ValeurDeStyle(pixels = nouvelle_largeur)
        it.mesure(ctx, mode, *largeur_désirée)
    }

    ligne.largeur = 0.0
    pour ligne.noeuds {
        ligne.largeur += it.modèle_de_boite.marge.largeur
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ContexteDeFormattageTable
 * \{ */

DonnéesCellule :: struct {
    box: *TableCellBox
    colonne: z64
    ligne: z64
    colspan: n32

    minimum_content_width: r64
    maximum_content_width: r64
}

R64_INFINITÉ : r64 : 0r7ff0000000000000
R64_INFINITÉ_NÉGATIVE : r64 : 0rfff0000000000000

DonnéesColonne :: struct {
    minimum_width := R64_INFINITÉ_NÉGATIVE
    maximum_width := R64_INFINITÉ_NÉGATIVE
}

ContexteDeFormattageTable :: struct {
    empl base: ContexteDeFormattage

    cellules: [..]DonnéesCellule
    lignes_cellules: [..]z64
    colonnes_cellules: [..]z64
    cellules_par_ligne: [..]z32

    données_colonnes: [..]DonnéesColonne

    nombre_de_lignes: z64
    nombre_de_colonnes: z64
}

formatte_table :: fonc (ctx: *ContexteDeFormattageTable, table: *TableBox)
{
    initialise_données_cellules(ctx, table)

    pour * ctx.cellules {
        mesure(it.box, ctx, ModeDeFormattage.ToutesLesBrisuresDeLigne, nul)
        it.minimum_content_width = it.box.modèle_de_boite.bordure.largeur

        mesure(it.box, ctx, ModeDeFormattage.BrisureDeLigneExplicite, nul)
        it.maximum_content_width = it.box.modèle_de_boite.bordure.largeur

        // imprime("cellule min %, max %\n", it.minimum_content_width, it.maximum_content_width)
    }

    pour ctx.colonnes_cellules.taille / 2 {
        index_colonne := ctx.colonnes_cellules[it * 2]
        index_cellule := ctx.colonnes_cellules[it * 2 + 1]

        cellule := ctx.cellules[index_cellule]

        si cellule.colspan == 1 {
            données_colonnes := *ctx.données_colonnes[index_colonne]

            si données_colonnes.minimum_width < cellule.minimum_content_width {
                données_colonnes.minimum_width = cellule.minimum_content_width
            }

            si données_colonnes.maximum_width < cellule.maximum_content_width {
                données_colonnes.maximum_width = cellule.maximum_content_width
            }
        }
        sinon {
            largeur_min_colonnes : r64 = 0.0
            largeur_max_colonnes : r64 = 0.0

            pour idx dans index_colonne ... index_colonne + (cellule.colspan comme z32) - 1 {
                assert(idx < ctx.données_colonnes.taille)
                données_colonnes := *ctx.données_colonnes[idx]

                largeur_min_colonnes += données_colonnes.minimum_width
                largeur_max_colonnes += données_colonnes.maximum_width
            }

            si largeur_min_colonnes < cellule.minimum_content_width {
                delta := (cellule.minimum_content_width - largeur_min_colonnes) / cellule.colspan comme r64

                pour idx dans index_colonne ... index_colonne + (cellule.colspan comme z32) - 1 {
                    données_colonnes := *ctx.données_colonnes[idx]
                    données_colonnes.minimum_width += delta
                }
            }

            si largeur_max_colonnes < cellule.maximum_content_width {
                delta := (cellule.maximum_content_width - largeur_max_colonnes) / cellule.colspan comme r64

                pour idx dans index_colonne ... index_colonne + (cellule.colspan comme z32) - 1 {
                    données_colonnes := *ctx.données_colonnes[idx]
                    données_colonnes.maximum_width += delta
                }
            }
        }
    }

    largeur: r64
    pour ctx.données_colonnes {
        // imprime("colonne %, min %, max %\n", index_it, it.minimum_width, it.maximum_width)
        largeur += it.maximum_width
    }

    outrepas_largeur := ValeurDeStyle(pixels = largeur)
    containing_block := donne_containing_block(table, ctx)
    args := crée_arguments_dimensionnement_largeur(ctx, table, containing_block, *outrepas_largeur)
    calcule_largeur_et_marges(*args)
    _ := calcule_hauteur_et_marges(*args)

    /* Nous utilisons la bordure et non le contenu car la bordure et le rembourrage
     * sont géré par le TableWrapperBox parent : nous risquerions de décaler inutilement le contenu. */
    décalage_x := table.modèle_de_boite.bordure.x
    décalage_y := table.modèle_de_boite.bordure.y

    décalage_y_ligne := décalage_y

    index_cellule: z64

    pour table.enfants {
        saufsi est_row_group_box(it) {
            continue
        }

        hauteur_row_group: r64
        décalage_y_row_group := décalage_y_ligne

        pour enfant_row_group dans it.enfants {
            saufsi enfant_row_group.type == TableRowBox {
                continue
            }

            décalage_x_colonne := décalage_x
            hauteur_ligne: r64

            pour enfant_row dans enfant_row_group.enfants {
                saufsi enfant_row.type == TableCellBox {
                    continue
                }

                cellule := *ctx.cellules[index_cellule]
                index_cellule += 1

                données_colonnes := *ctx.données_colonnes[cellule.colonne]

                largeur_cellule := données_colonnes.maximum_width
                si cellule.colspan > 1 {
                    pour idx dans cellule.colonne + 1 ... cellule.colonne + (cellule.colspan comme z32) - 1 {
                        données_colonnes = *ctx.données_colonnes[idx]
                        largeur_cellule += données_colonnes.maximum_width
                    }
                }

                définis_position(cellule.box, décalage_x_colonne, décalage_y_ligne)
                outrepas_largeur.pixels = donne_largeur_contenu(cellule.box, largeur_cellule)
                mesure(cellule.box, ctx, ModeDeFormattage.Normal, *outrepas_largeur)

                hauteur_ligne = max(hauteur_ligne, cellule.box.modèle_de_boite.marge.hauteur)
                décalage_x_colonne += largeur_cellule comme r32
            }

            définis_position(enfant_row_group, décalage_x, décalage_y_ligne)
            définis_largeur_contenu(enfant_row_group.modèle_de_boite, largeur comme r32)
            définis_hauteur_contenu(enfant_row_group.modèle_de_boite, hauteur_ligne comme r32)

            décalage_y_ligne += hauteur_ligne comme r32
            hauteur_row_group += hauteur_ligne
        }

        définis_position(it, décalage_x, décalage_y_row_group)
        définis_largeur_contenu(it.modèle_de_boite, largeur comme r32)
        définis_hauteur_contenu(it.modèle_de_boite, hauteur_row_group comme r32)
    }

    outrepas_hauteur := ValeurDeStyle(pixels = décalage_y_ligne - décalage_y)
    args = crée_arguments_dimensionnement_hauteur(ctx, table, containing_block, *outrepas_hauteur)
    _ := calcule_hauteur_et_marges(*args)
}

initialise_données_cellules :: fonc (ctx: *ContexteDeFormattageTable, table: *TableBox)
{
    index_ligne: z64

    pour table.enfants {
        saufsi est_row_group_box(it) {
            continue
        }

        pour enfant_row_group dans it.enfants {
            saufsi enfant_row_group.type == TableRowBox {
                continue
            }

            row := enfant_row_group comme *TableRowBox

            index_colonne: z64
            cellules_sur_ligne: z32

            pour enfant_row dans row.enfants {
                saufsi enfant_row.type == TableCellBox {
                    continue
                }

                cell := enfant_row comme *TableCellBox

                index_cellule := ctx.cellules.taille

                cellule := tableau_ajoute_élément(*ctx.cellules)
                cellule.box = cell
                cellule.colonne = index_colonne
                cellule.ligne = index_ligne
                cellule.colspan = HTML.donne_colspan(cell.élément)

                tableau_ajoute(*ctx.lignes_cellules, index_ligne)
                tableau_ajoute(*ctx.lignes_cellules, index_cellule)

                tableau_ajoute(*ctx.colonnes_cellules, index_colonne)
                tableau_ajoute(*ctx.colonnes_cellules, index_cellule)

                index_colonne += cellule.colspan comme z64
                cellules_sur_ligne += 1

                si ctx.nombre_de_colonnes < index_colonne {
                    ctx.nombre_de_colonnes = index_colonne
                }
            }

            tableau_ajoute(*ctx.cellules_par_ligne, cellules_sur_ligne)
            index_ligne += 1
        }
    }

    ctx.nombre_de_lignes = index_ligne

    tableau_redimensionne(ctx.données_colonnes, ctx.nombre_de_colonnes)

    // imprime("lignes : %, colones : %\n", index_ligne, ctx.nombre_de_colonnes)
}

/** \} */
