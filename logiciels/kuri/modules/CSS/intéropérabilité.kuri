/* ------------------------------------------------------------------------- */
/** \nom Périphériques
 * \{ */

importe Périphériques

donne_cursor_système :: fonc (type: CursorType) -> TypeCurseurSystème
{
    discr type {
        auto,
        default {
            retourne TypeCurseurSystème.FLÈCHE
        }
        none {
            retourne TypeCurseurSystème.VIERGE
        }
        context_menu {
            retourne TypeCurseurSystème.MENU_CONTEXTUEL
        }
        help {
            retourne TypeCurseurSystème.POINT_D_INTERROGATION
        }
        pointer {
            retourne TypeCurseurSystème.MAIN_POINTANT
        }
        progress {
            retourne TypeCurseurSystème.PROGRÈS
        }
        wait {
            retourne TypeCurseurSystème.ATTENTE
        }
        cell {
            retourne TypeCurseurSystème.CELLULE
        }
        crosshair {
            retourne TypeCurseurSystème.CROIX
        }
        text {
            retourne TypeCurseurSystème.TEXTE
        }
        vertical_text {
            retourne TypeCurseurSystème.TEXTE_VERTICAL
        }
        alias {
            retourne TypeCurseurSystème.ALIAS
        }
        copy {
            retourne TypeCurseurSystème.COPIE
        }
        move {
            retourne TypeCurseurSystème.DÉPLACEMENT
        }
        no_drop {
            retourne TypeCurseurSystème.DÉPOSAGE_INTERDIT
        }
        not_allowed {
            retourne TypeCurseurSystème.INTERDIT
        }
        grab {
            retourne TypeCurseurSystème.MAIN_OUVERTE
        }
        grabbing {
            retourne TypeCurseurSystème.MAIN_FERMÉE
        }
        e_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_EST
        }
        n_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD
        }
        ne_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD_EST
        }
        nw_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD_OUEST
        }
        s_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_SUD
        }
        se_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_SUD_EST
        }
        sw_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_SUD_OUEST
        }
        w_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_OUEST
        }
        ew_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_EST_OUEST
        }
        ns_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD_SUD
        }
        nesw_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD_EST_SUD_OUEST
        }
        nwse_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_NORD_OUEST_SUD_EST
        }
        col_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_COLONNE
        }
        row_resize {
            retourne TypeCurseurSystème.REDIMENSIONNEMENT_LIGNE
        }
        all_scroll {
            retourne TypeCurseurSystème.DÉFILAGE_OMNI
        }
        zoom_in {
            retourne TypeCurseurSystème.ZOOM
        }
        zoom_out {
            retourne TypeCurseurSystème.DÉZOOM
        }
    }

    retourne TypeCurseurSystème.FLÈCHE
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Commandes de rendu
 * \{ */

importe PeintureInterface

dessine_commandes_id :: fonc (peintre: *Peintre, commandes: *CommandesDeRendu, tampon_id: *TamponID)
{
    tampon_image: TamponImageGrise32Bit = ---
    tampon_image.données = tampon_id.données.pointeur
    tampon_image.largeur = tampon_id.largeur
    tampon_image.hauteur = tampon_id.hauteur

    dessine_commandes_id(peintre, commandes, tampon_image)

    tampon_id.fut_dessiné = vrai
}

/** } */
