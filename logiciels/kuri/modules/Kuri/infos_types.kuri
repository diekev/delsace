// Structures de bases pour contenir les informations d'un type.

id_info :: énum z32 {
    ENTIER          :: 0
	RÉEL            :: 1
	BOOLÉEN         :: 2
	CHAINE          :: 3
	POINTEUR        :: 4
	STRUCTURE       :: 5
	FONCTION        :: 6
	TABLEAU         :: 7
	EINI            :: 8
	RIEN            :: 9
	ÉNUM            :: 10
	OCTET           :: 11
	TYPE_DE_DONNÉES :: 12
	UNION           :: 13
	OPAQUE          :: 14
}

InfoType :: struct #interface {
	id : id_info
	taille_en_octet : n32
}

InfoTypeEntier :: struct #interface {
	empl base : InfoType

	est_signé : bool
}

InfoTypePointeur :: struct #interface {
	empl base : InfoType

	type_pointé : *InfoType
	est_référence : bool
}

InfoTypeTableau :: struct #interface {
	empl base : InfoType

	type_pointé : *InfoType
	est_tableau_fixe : bool
	taille_fixe : z32
}

InfoTypeMembreStructure :: struct #interface {
	Drapeaux :: énum_drapeau {
		EST_CONSTANT
		EST_IMPLICITE
	}

	nom : chaine
	id : *InfoType
	décalage : z64 // décalage en octets dans la structure
	drapeaux : Drapeaux
}

InfoTypeStructure :: struct #interface {
	empl base : InfoType

	nom : chaine
	membres : []*InfoTypeMembreStructure
}

InfoTypeUnion :: struct #interface {
	empl base : InfoType

	nom : chaine
	membres : []*InfoTypeMembreStructure
	type_le_plus_grand : *InfoType
	décalage_index : z64
	est_sûre : bool
}

InfoTypeFonction :: struct #interface {
	empl base : InfoType

	types_entrée : []*InfoType
	types_sortie : []*InfoType
	est_coroutine : bool
}

InfoTypeÉnum :: struct #interface {
	empl base : InfoType

	nom : chaine
	valeurs : []z32 // À FAIRE(langage) typage selon énum
	noms : []chaine
	est_drapeau : bool
}

InfoTypeOpaque :: struct #interface {
	empl base : InfoType

	nom : chaine
	type_opacifié : *InfoType
}
