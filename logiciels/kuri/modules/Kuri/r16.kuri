libr16 :: #bibliothèque "r16"

DLS_vers_r32 :: fonc (h: r16) -> r32 #interface #externe libr16

DLS_vers_r64 :: fonc (a: r16) -> r64 #interface #externe libr16

DLS_depuis_r32 :: fonc (v: r32) -> r16 #interface #externe libr16

DLS_depuis_r64 :: fonc (v: r64) -> r16 #interface #externe libr16

/* ************* opérateurs unaires ************* */

opérateur + :: (a: r16) -> r16
{
    retourne a
}

opérateur - :: (a: r16) -> r16
{
    f := DLS_vers_r32(a)
    retourne DLS_depuis_r32(-f)
}

/* ************* addition ************* */

opérateur + :: (a: r16, b: r16) -> r16
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(f1 + f2)
}

opérateur + :: (a: r16, b: r32) -> r16
{
    f1 := DLS_vers_r32(a)
    retourne DLS_depuis_r32(f1 + b)
}

opérateur + :: (a: r32, b: r16) -> r16
{
    f1 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(a + f1)
}

opérateur + :: (a: r16, b: r64) -> r16
{
    f1 := DLS_vers_r64(a)
    retourne DLS_depuis_r64(f1 + b)
}

opérateur + :: (a: r64, b: r16) -> r16
{
    f1 := DLS_vers_r64(b)
    retourne DLS_depuis_r64(a + f1)
}

/* ************* soustraction ************* */

opérateur - :: (a: r16, b: r16) -> r16
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(f1 - f2)
}

opérateur - :: (a: r16, b: r32) -> r16
{
    f1 := DLS_vers_r32(a)
    retourne DLS_depuis_r32(f1 - b)
}

opérateur - :: (a: r32, b: r16) -> r16
{
    f1 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(a - f1)
}

opérateur - :: (a: r16, b: r64) -> r16
{
    f1 := DLS_vers_r64(a)
    retourne DLS_depuis_r64(f1 - b)
}

opérateur - :: (a: r64, b: r16) -> r16
{
    f1 := DLS_vers_r64(b)
    retourne DLS_depuis_r64(a - f1)
}

/* ************* multiplication ************* */

opérateur * :: (a: r16, b: r16) -> r16
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(f1 * f2)
}

opérateur * :: (a: r16, b: r32) -> r16
{
    f1 := DLS_vers_r32(a)
    retourne DLS_depuis_r32(f1 * b)
}

opérateur * :: (a: r32, b: r16) -> r16
{
    f1 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(a * f1)
}

opérateur * :: (a: r16, b: r64) -> r16
{
    f1 := DLS_vers_r64(a)
    retourne DLS_depuis_r64(f1 * b)
}

opérateur * :: (a: r64, b: r16) -> r16
{
    f1 := DLS_vers_r64(b)
    retourne DLS_depuis_r64(a * f1)
}

/* ************* division ************* */

opérateur / :: (a: r16, b: r16) -> r16
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(f1 / f2)
}

opérateur / :: (a: r16, b: r32) -> r16
{
    f1 := DLS_vers_r32(a)
    retourne DLS_depuis_r32(f1 / b)
}

opérateur / :: (a: r32, b: r16) -> r16
{
    f1 := DLS_vers_r32(b)
    retourne DLS_depuis_r32(a / f1)
}

opérateur / :: (a: r16, b: r64) -> r16
{
    f1 := DLS_vers_r64(a)
    retourne DLS_depuis_r64(f1 / b)
}

opérateur / :: (a: r64, b: r16) -> r16
{
    f1 := DLS_vers_r64(b)
    retourne DLS_depuis_r64(a / f1)
}

/* ************* comparaisons ************* */

opérateur < :: (a: r16, b: r16) -> bool
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne f1 < f2
}

opérateur < :: (a: r16, b: r32) -> bool
{
    f1 := DLS_vers_r32(a)
    retourne f1 < b
}

opérateur < :: (a: r32, b: r16) -> bool
{
    f1 := DLS_vers_r32(b)
    retourne a < f1
}

opérateur < :: (a: r16, b: r64) -> bool
{
    f1 := DLS_vers_r64(a)
    retourne f1 < b
}

opérateur < :: (a: r64, b: r16) -> bool
{
    f1 := DLS_vers_r64(b)
    retourne a < f1
}

opérateur <= :: (a: r16, b: r16) -> bool
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne f1 <= f2
}

opérateur <= :: (a: r16, b: r32) -> bool
{
    f1 := DLS_vers_r32(a)
    retourne f1 <= b
}

opérateur <= :: (a: r32, b: r16) -> bool
{
    f1 := DLS_vers_r32(b)
    retourne a <= f1
}

opérateur <= :: (a: r16, b: r64) -> bool
{
    f1 := DLS_vers_r64(a)
    retourne f1 <= b
}

opérateur <= :: (a: r64, b: r16) -> bool
{
    f1 := DLS_vers_r64(b)
    retourne a <= f1
}

opérateur > :: (a: r16, b: r16) -> bool
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne f1 > f2
}

opérateur > :: (a: r16, b: r32) -> bool
{
    f1 := DLS_vers_r32(a)
    retourne f1 > b
}

opérateur > :: (a: r32, b: r16) -> bool
{
    f1 := DLS_vers_r32(b)
    retourne a > f1
}

opérateur > :: (a: r16, b: r64) -> bool
{
    f1 := DLS_vers_r64(a)
    retourne f1 > b
}

opérateur > :: (a: r64, b: r16) -> bool
{
    f1 := DLS_vers_r64(b)
    retourne a > f1
}

opérateur >= :: (a: r16, b: r16) -> bool
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne f1 >= f2
}

opérateur >= :: (a: r16, b: r32) -> bool
{
    f1 := DLS_vers_r32(a)
    retourne f1 >= b
}

opérateur >= :: (a: r32, b: r16) -> bool
{
    f1 := DLS_vers_r32(b)
    retourne a >= f1
}

opérateur >= :: (a: r16, b: r64) -> bool
{
    f1 := DLS_vers_r64(a)
    retourne f1 >= b
}

opérateur >= :: (a: r64, b: r16) -> bool
{
    f1 := DLS_vers_r64(b)
    retourne a >= f1
}

opérateur == :: (a: r16, b: r16) -> bool
{
    f1 := DLS_vers_r32(a)
    f2 := DLS_vers_r32(b)
    retourne f1 == f2
}

opérateur == :: (a: r16, b: r32) -> bool
{
    f1 := DLS_vers_r32(a)
    retourne f1 == b
}

opérateur == :: (a: r32, b: r16) -> bool
{
    f1 := DLS_vers_r32(b)
    retourne a == f1
}

opérateur == :: (a: r16, b: r64) -> bool
{
    f1 := DLS_vers_r64(a)
    retourne f1 == b
}

opérateur == :: (a: r64, b: r16) -> bool
{
    f1 := DLS_vers_r64(b)
    retourne a == f1
}
