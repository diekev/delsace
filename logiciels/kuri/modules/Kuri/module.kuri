importe Fondation

GlibC :: importe GlibC

POSIX :: importe POSIX
exit :: POSIX.exit

charge "bibliothèques"
charge "infos_types"
charge "intrinseques"
charge "r16"

// Ce fichier est utiliser pour définir des variables et fonctions de
// bases (« connus par le compilateur ») que tous les modules doivent importer.
// Ceci nous évite d'avoir à manuellement spécifier ces choses dans le
// code du compilateur.
// Par contre, ce fichier ne devrait pas pouvoir être modifié par les
// utilisateurs du langage.

// --------------------------

// À FAIRE(langage) : valeur défaut pour les tableaux (p.e. t := [..]z32())
valeur_nulle :: fonc ($T: type_de_données) -> T
{
    v: T
    retourne v
}

// --------------------------

// Position dans le code source. Quand cette structure est instantiée, le
// compilateur remplis les rubriques de cette structure avec les valeurs
// correspondantes de la position du lexème dans le fichier où se fait ladite
// construction.
PositionCodeSource :: struct #interface {
    // le nom du fichier où se trouve l'objet
    fichier: chaine
    // le nom de la fonction où se trouve l'objet, vide si variable globale
    fonction: chaine
    // la ligne où se trouve l'objet
    ligne: z32
    // la colonne où se trouve l'objet
    colonne: z32
}

// ----------------------------

SystèmeExploitation :: énum {
    AUCUN
    LINUX
    ANDROIDE
    WINDOWS
    MACOS
}

// ----------------------------

ModeLogage :: énum z32 {
    AUCUN
    MINIMAL
    JOURNALIER
    VERBEUX
}

// ----------------------------

// Le StockageTemporaire est un stockage mis en place par le compilateur, qui réserve
// une certaine taille dans l'exécutable où mettre des données temporaire.
StockageTemporaire :: struct #interface {
    données: *octet
    taille: z32
    occupé: z32
    occupation_maximale: z32

    MémoireDébordante :: struct {
        adresse: *rien
        taille: z64
        marque: z32
    }

    mémoire_débordante: [..]MémoireDébordante
}

// ----------------------------

InfoFonctionTraceAppel :: struct #interface {
    nom: chaine
    fichier: chaine
    adresse: adresse_fonction
    // peut-être que nous pourrions avoir ceci dans le future, en fonction des besoins
    // position: PositionCodeSource
    // desc_type: *InfoTypeFonction
}

// redondance : peut être remplacé par PositionCodeSource
InfoAppelTraceAppel :: struct #interface {
    ligne: z32
    colonne: z32
    texte: chaine
}

TraceAppel :: struct #interface {
    précédente: *TraceAppel
    info_fonction: *InfoFonctionTraceAppel
    info_appel: *InfoAppelTraceAppel
    profondeur: z32
}

/* ------------------------------------------------------------------------- */
/** \nom Formattage des nombres pour les impressions.
 *
 * Ces structures permettent de définir comment les nombres entiers et réels
 * doivent être formattés lors des impressions (via Fondation.imprime).
 *
 * Par défaut, les nombres entiers ou réels sont imprimés sans séparateurs et
 * en base 10.
 *
 * Pour remplacer le formattage par défaut, nous pouvons utiliser un contexte
 * temporaire :
 *
 *     format : FormatEntier
 *     format.base = 2
 *     format.séparation = 4
 *     ctx := contexte()
 *     ctx.format_entier = format
 *     pousse_contexte ctx {
 *         imprime("%\n", 123456)
 *     }
 * \{ */

FormatEntier :: struct {
    valeur: eini
    ajoute_zéros_début := faux
    nombre_zéros := 0
    base := 10
    séparation := 0
}

FormatRéel :: struct {
    valeur: eini
    précision := 6
}

/** \} */

ContexteProgramme :: struct {
    allocatrice := allocatrice_défaut
    données_allocatrice : *BaseAllocatrice = nul

    logueur := __logueur_défaut
    données_logueur : *rien = nul

    stockage_temporaire: *StockageTemporaire

    trace_appel: *TraceAppel

    rappel_panique := __rappel_panique_défaut
    données_rappel_panique: *rien

    /* Formats pour les nombres entiers et réels. */
    format_entier: FormatEntier
    format_réel: FormatRéel
}

__contexte_fil_principal : ContexteProgramme #mémoire_locale = ---
__arguments_ligne_commande : []*z8 = ---
__tampon_stockage_tamporaire : [16384]z8 #mémoire_locale = ---
__table_des_types: []*InfoType

// Ceci sera remplacé par la fonction principale ou par les métaprogrammes
__principale :: fonc () #principale
