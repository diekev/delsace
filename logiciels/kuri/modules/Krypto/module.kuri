// Interface Kuri pour Krypto

importe Fondation

// À FAIRE : implémente avec notre langage toutes ces fonctions (il semble qu'il y a un problème de boutisme ou de signe dans le langage)
// À FAIRE : la bibliothèque BCrypt à l'air brisée ?, il faudra de toute manière utiliser Argon2 qui a l'air d'être une meilleure fonction
// À FAIRE : type Condensat (voir Alembic)
// À FAIRE : bibliothèque de fonctions non cryptographiques
// À FAIRE : ne passe pas des chaines mais des tableaux d'octets

BCrypt_genere_empreinte :: fonc (mot_de_passe: chaine, charge_travail := 12) -> chaine
{
    // loge un tampon afin de pouvoir gérer la mémoire de notre côté
    résultat := loge_chaine(BCrypt_taille_tampon())

    BCrypt_genere_empreinte(mot_de_passe.pointeur, charge_travail, résultat.pointeur)

    retourne résultat
}

BCrypt_compare_empreinte :: fonc (mot_de_passe: chaine, empreinte: chaine) -> bool
{
    nempreinte := BCrypt_genere_empreinte(mot_de_passe)

    ok := nempreinte == empreinte

    déloge(nempreinte)

    retourne ok
//    retourne BCrypt_compare_empreinte(mot_de_passe.pointeur, empreinte.pointeur) == 0
}

crée_crc32 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_crc32()
}

crée_md5 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_md5()
}

crée_sha1 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha1()
}

crée_sha256 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha256()
}

TypeHMAC :: énum {
    MD5
    SHA1
    SHA256
}

crée_hmac :: fonc (clé: chaine, type := TypeHMAC.SHA256) -> *HACHEUSE
{
    si type == TypeHMAC.MD5 {
        retourne KRYPTO_HACHEUSE_cree_hmac_md5(clé.pointeur, clé.taille comme n64, nul, 0)
    }

    si type == TypeHMAC.SHA1 {
        retourne KRYPTO_HACHEUSE_cree_hmac_sha1(clé.pointeur, clé.taille comme n64, nul, 0)
    }

    retourne KRYPTO_HACHEUSE_cree_hmac_sha256(clé.pointeur, clé.taille comme n64, nul, 0)
}

crée_hmac :: fonc (clé: chaine, message: chaine, type := TypeHMAC.SHA256) -> *HACHEUSE
{
    si type == TypeHMAC.MD5 {
        retourne KRYPTO_HACHEUSE_cree_hmac_md5(clé.pointeur, clé.taille comme n64, message.pointeur, message.taille comme n64)
    }

    si type == TypeHMAC.SHA1 {
        retourne KRYPTO_HACHEUSE_cree_hmac_sha1(clé.pointeur, clé.taille comme n64, message.pointeur, message.taille comme n64)
    }

    retourne KRYPTO_HACHEUSE_cree_hmac_sha256(clé.pointeur, clé.taille comme n64, message.pointeur, message.taille comme n64)
}

détruit :: fonc (hacheuse: &*HACHEUSE)
{
    KRYPTO_HACHEUSE_detruit(hacheuse)
    hacheuse = nul
}

ajourne :: fonc (hacheuse: *HACHEUSE, message: chaine)
{
    KRYPTO_HACHEUSE_ajourne(hacheuse, message.pointeur, message.taille comme n64)
}

ajourne :: fonc (hacheuse: *HACHEUSE, message: $T)
{
    c : chaine = ---
    c.pointeur = *message comme *z8
    c.taille = taille_de(T) comme z64
    KRYPTO_HACHEUSE_ajourne(hacheuse, c.pointeur, c.taille comme n64)
}

condensat :: fonc (hacheuse: *HACHEUSE) -> chaine
{
    résultat := loge_chaine(taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_condensat(hacheuse, résultat.pointeur comme *n8)
    retourne résultat
}

condensat_hex :: fonc (hacheuse: *HACHEUSE) -> chaine
{
    résultat := loge_chaine(2 * taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_condensat_hex(hacheuse, résultat.pointeur)
    retourne résultat
}

taille_bloc :: fonc (hacheuse: *HACHEUSE) -> z32
{
    retourne KRYPTO_HACHEUSE_taille_bloc(hacheuse)
}

taille_condensat :: fonc (hacheuse: *HACHEUSE) -> z32
{
    retourne KRYPTO_HACHEUSE_taille_condensat(hacheuse)
}

compare_condensat :: fonc (a: chaine, b: chaine) -> bool
{
    retourne KRYPTO_HACHEUSE_compare_condensat(a.pointeur comme *n8, a.taille comme n64, b.pointeur comme *n8, b.taille comme n64) == 0
}

// ------------------------------------------------------
// fonctions pour étudier les techniques de cryptographie
// ne pas utiliser

démo_chiffre_message :: fonc (message: chaine, clé: chaine) -> chaine
{
    flux_de_chiffrement := crée_sha256()
    diffère détruit(flux_de_chiffrement)

    flux_de_chiffrement.ajourne(clé)

    condensat_clé := flux_de_chiffrement.condensat()

    résultat := copie_chaine(message)
    xor_chaines(résultat, chaine_depuis_table_octet(condensat_clé))
    retourne résultat
}

xor_chaines :: fonc (chn1: chaine, chn2: chaine)
{
    compte := 0
    index := 0

    pour & chn1 {
        it = it ^ (chn2[index] + compte comme z8)

        index += 1

        si index >= chn2.taille {
            index = 0
            compte += chn2.taille comme z32
        }
    }
}

// DÉDUPLIQUE
rotation_gauche :: fonc (a: n32, n: n32) -> n32 #enligne
{
    retourne (a << n) | (a >> (32 - n))
}

chacha :: fonc (a: &n32, b: &n32, c: &n32, d: &n32)
{
    a_travail := a
    b_travail := b
    c_travail := c
    d_travail := d

    a_travail += b_travail
    d_travail ^= a_travail
    d_travail = rotation_gauche(d_travail, 16)
    c_travail += d_travail
    b_travail ^= c_travail
    b_travail = rotation_gauche(b_travail, 12)

    a_travail += b_travail
    d_travail ^= a_travail
    d_travail = rotation_gauche(d_travail, 8)
    c_travail += d_travail
    b_travail ^= c_travail
    b_travail = rotation_gauche(b_travail, 7)

    a = a_travail
    b = b_travail
    c = c_travail
    d = d_travail
}

chacha_vertical :: fonc (bloc: &[4][4]n32)
{
    pour i dans 0 ... 3 {
        a := bloc[i][0]
        b := bloc[i][1]
        c := bloc[i][2]
        d := bloc[i][3]
        chacha(a, b, c, d)
        bloc[i][0] = a
        bloc[i][1] = b
        bloc[i][2] = c
        bloc[i][3] = d
    }
}

chacha_diagonal :: fonc (bloc: &[4][4]n32)
{
    pour i dans 0 ... 3 {
        a := bloc[i][0]
        b := bloc[(i + 1) % 4][1]
        c := bloc[(i + 2) % 4][2]
        d := bloc[(i + 3) % 4][3]
        chacha(a, b, c, d)
        bloc[i][0] = a
        bloc[(i + 1) % 4][1] = b
        bloc[(i + 2) % 4][2] = c
        bloc[(i + 3) % 4][3] = d
    }
}

convertis_clé :: fonc (a: &n32, b: &n32, c: &n32, d: &n32)
{
    constante := "expand byte-32 k"

    a = mémoire(constante.pointeur comme *n32)
    b = mémoire((constante.pointeur + 4) comme *n32)
    c = mémoire((constante.pointeur + 8) comme *n32)
    d = mémoire((constante.pointeur + 16) comme *n32)
}

test_chache :: fonc ()
{
    bloc : [4][4]n32

    pour i dans 0 ... 3 {
        pour j dans 0 ... 3 {
            bloc[i][i] = 0
        }
    }

    convertis_clé(bloc[0][0], bloc[0][1], bloc[0][2], bloc[0][3])

    pour i dans 0 ... 9 {
        chacha_vertical(bloc)
        chacha_diagonal(bloc)
    }
}

prépare_chaine :: fonc (entrée: chaine) -> chaine
{
    résultat : chaine

    pour entrée {
        si 'A' <= it <= 'Z' {
            chaine_ajoute(*résultat, it - 'A')
        }
        sinon si 'a' <= it <= 'z' {
            chaine_ajoute(*résultat, it - 'a')
        }
    }

    retourne résultat
}

index_pour_lettre :: fonc (lettre: z8) -> z8
{
    si 'a' <= lettre <= 'z' {
        retourne lettre - 'a'
    }

    retourne lettre - 'A'
}

prépare_résultat :: fonc (entrée: chaine) -> chaine
{
    résultat : chaine

    pour entrée {
        chaine_ajoute(*résultat, it + 'A')
    }

    retourne résultat
}

césar :: fonc (message: chaine, clé: z8) -> chaine
{
    message = prépare_chaine(message)
    clé = index_pour_lettre(clé)

    résultat : chaine

    pour message {
        codé := (it + clé) % 26
        chaine_ajoute(*résultat, codé)
    }

    retourne prépare_résultat(résultat)
}

vigenère :: fonc (message: chaine, clés: ...chaine) -> chaine
{
    message = prépare_chaine(message)

    résultat : chaine

    pour lettre, index_lettre dans message {
        index_lettre_message := lettre

        pour clé dans clés {
            index_lettre_message += index_pour_lettre(clé[index_lettre % clé.taille])
        }

        index_lettre_message %= 26

        chaine_ajoute(*résultat, index_lettre_message)
    }

    retourne prépare_résultat(résultat)
}

scytale :: fonc (message: chaine, taille_clé: z32) -> chaine
{
    message = prépare_chaine(message)
    résultat : chaine

    pour 0 ... taille_clé - 1 {
        index := it

        tantque index < message.taille {
            chaine_ajoute(*résultat, message[index])
            index += taille_clé
        }
    }

    retourne prépare_résultat(résultat)
}

bits_d_entropie :: fonc (nombre_de_caractères: z64, taille: z64) -> z32
{
    retourne taille comme z32 * log(nombre_de_caractères comme r32) comme z32
}
