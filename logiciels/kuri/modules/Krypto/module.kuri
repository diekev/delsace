// Interface Kuri pour Krypto

importe Chaine
importe CodecDonnées
importe Fondation
importe SysFichier

charge "interface_krypto"

// À FAIRE : implémente avec notre langage toutes ces fonctions (il semble qu'il y a un problème de boutisme ou de signe dans le langage)
// À FAIRE : la bibliothèque BCrypt à l'air brisée ?, il faudra de toute manière utiliser Argon2 qui a l'air d'être une meilleure fonction
// À FAIRE : bibliothèque de fonctions non cryptographiques
// À FAIRE : ne passe pas des chaines mais des tableaux d'octets

BCrypt_genere_empreinte :: fonc (mot_de_passe: chaine, charge_travail := 12) -> chaine
{
    // loge un tampon afin de pouvoir gérer la mémoire de notre côté
    résultat := loge_chaine(BCrypt_taille_tampon())

    BCrypt_genere_empreinte(mot_de_passe.pointeur, charge_travail, résultat.pointeur)

    retourne résultat
}

BCrypt_compare_empreinte :: fonc (mot_de_passe: chaine, empreinte: chaine) -> bool
{
    nempreinte := BCrypt_genere_empreinte(mot_de_passe)

    ok := nempreinte == empreinte

    déloge(nempreinte)

    retourne ok
    // retourne BCrypt_compare_empreinte(mot_de_passe.pointeur, empreinte.pointeur) == 0
}

/* ------------------------------------------------------------------------- */
/** \nom Condensat
 * \{ */

/* À FAIRE : version fixe. */
Condensat :: struct {
    données: [..]octet
}

détruit_données :: fonc (condensat: *Condensat)
{
    déloge(condensat.données)
}

donne_chaine :: fonc (condensat: Condensat) -> chaine
{
    retourne chaine(condensat.données.pointeur comme *z8, condensat.données.taille)
}

donne_copie_chaine :: fonc (condensat: Condensat) -> chaine
{
    retourne copie_chaine(donne_chaine(condensat))
}

donne_chaine_hex :: fonc (condensat: Condensat) -> chaine
{
    retourne encode_hexadécimal(condensat.données)
}

imprime_condensant :: fonc (enchaineuse: *Enchaineuse, condensat: *Condensat)
{
    saufsi condensat {
        retourne
    }

    encode_hexadécimal(enchaineuse, condensat.données)
} @FormattageImpression

opérateur < :: (condensat1: Condensat, condensat2: Condensat) -> bool
{
    retourne condensat1.donne_chaine() < condensat2.donne_chaine()
}

opérateur == :: (condensat1: Condensat, condensat2: Condensat) -> bool
{
    retourne condensat1.donne_chaine() == condensat2.donne_chaine()
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HACHEUSE
 * \{ */

crée_crc32 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_crc32()
}

crée_md5 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_md5()
}

crée_sha1 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha1()
}

crée_sha256 :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha256()
}

crée_sha3_224bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha3_224bits()
}

crée_sha3_256bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha3_256bits()
}

crée_sha3_384bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha3_384bits()
}

crée_sha3_512bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_sha3_512bits()
}

crée_keccak_224bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_keccak_224bits()
}

crée_keccak_256bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_keccak_256bits()
}

crée_keccak_384bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_keccak_384bits()
}

crée_keccak_512bits :: fonc () -> *HACHEUSE
{
    retourne KRYPTO_HACHEUSE_cree_keccak_512bits()
}

détruit :: fonc (hacheuse: &*HACHEUSE)
{
    KRYPTO_HACHEUSE_detruit(hacheuse)
    hacheuse = nul
}

ajourne :: fonc (hacheuse: *HACHEUSE, message: chaine)
{
    KRYPTO_HACHEUSE_ajourne(hacheuse, message.pointeur, message.taille comme n64)
}

ajourne :: fonc (hacheuse: *HACHEUSE, message: $T)
{
    c := chaine(*message comme *z8, taille_de(T) comme z64)
    KRYPTO_HACHEUSE_ajourne(hacheuse, c.pointeur, c.taille comme n64)
}

réinitialise :: fonc (hacheuse: *HACHEUSE)
{
    KRYPTO_HACHEUSE_reinitialise(hacheuse)
}

donne_condensat :: fonc (hacheuse: *HACHEUSE) -> Condensat
{
    résultat: Condensat
    donne_condensat(hacheuse, *résultat)
    retourne résultat
}

donne_condensat :: fonc (hacheuse: *HACHEUSE, résultat: *Condensat)
{
    tableau_redimensionne(résultat.données, taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_condensat(hacheuse, résultat.données.pointeur comme *n8)
}

donne_condensat_hex :: fonc (hacheuse: *HACHEUSE) -> chaine
{
    résultat := loge_chaine(2 * taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_condensat_hex(hacheuse, résultat.pointeur)
    retourne résultat
}

taille_bloc :: fonc (hacheuse: *HACHEUSE) -> z32
{
    retourne KRYPTO_HACHEUSE_taille_bloc(hacheuse)
}

taille_condensat :: fonc (hacheuse: *HACHEUSE) -> z32
{
    retourne KRYPTO_HACHEUSE_taille_condensat(hacheuse)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HACHEUSE HMAC
 * \{ */

crée_hmac_crc32 :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_crc32()
}

crée_hmac_md5 :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_md5()
}

crée_hmac_sha1 :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha1()
}

crée_hmac_sha256 :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha256()
}

crée_hmac_sha3_224bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha3_224bits()
}

crée_hmac_sha3_256bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha3_256bits()
}

crée_hmac_sha3_384bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha3_384bits()
}

crée_hmac_sha3_512bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_sha3_512bits()
}

crée_hmac_keccak_224bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_keccak_224bits()
}

crée_hmac_keccak_256bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_keccak_256bits()
}

crée_hmac_keccak_384bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_keccak_384bits()
}

crée_hmac_keccak_512bits :: fonc () -> *HACHEUSE_HMAC
{
    retourne KRYPTO_HACHEUSE_HMAC_cree_keccak_512bits()
}

détruit :: fonc (hacheuse: &*HACHEUSE_HMAC)
{
    KRYPTO_HACHEUSE_HMAC_detruit(hacheuse)
    hacheuse = nul
}

ajourne :: fonc (hacheuse: *HACHEUSE_HMAC, message: chaine)
{
    KRYPTO_HACHEUSE_HMAC_ajourne(hacheuse, message.pointeur, message.taille comme n64)
}

ajourne :: fonc (hacheuse: *HACHEUSE_HMAC, message: $T)
{
    c := chaine(*message comme *z8, taille_de(T) comme z64)
    KRYPTO_HACHEUSE_HMAC_ajourne(hacheuse, c.pointeur, c.taille comme n64)
}

donne_condensat :: fonc (hacheuse: *HACHEUSE_HMAC) -> Condensat
{
    résultat: Condensat
    donne_condensat(hacheuse, *résultat)
    retourne résultat
}

donne_condensat :: fonc (hacheuse: *HACHEUSE_HMAC, résultat: *Condensat)
{
    tableau_redimensionne(résultat.données, taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_HMAC_condensat(hacheuse, résultat.données.pointeur comme *n8)
}

donne_condensat_hex :: fonc (hacheuse: *HACHEUSE_HMAC) -> chaine
{
    résultat := loge_chaine(2 * taille_condensat(hacheuse))
    KRYPTO_HACHEUSE_HMAC_condensat_hex(hacheuse, résultat.pointeur)
    retourne résultat
}

taille_bloc :: fonc (hacheuse: *HACHEUSE_HMAC) -> z32
{
    retourne KRYPTO_HACHEUSE_HMAC_taille_bloc(hacheuse)
}

taille_condensat :: fonc (hacheuse: *HACHEUSE_HMAC) -> z32
{
    retourne KRYPTO_HACHEUSE_HMAC_taille_condensat(hacheuse)
}

/** \} */

compare_condensat :: fonc (a: chaine, b: chaine) -> bool
{
    retourne KRYPTO_HACHEUSE_compare_condensat(a.pointeur comme *n8, a.taille comme n64, b.pointeur comme *n8, b.taille comme n64) == 0
}

// ------------------------------------------------------
// fonctions pour étudier les techniques de cryptographie
// ne pas utiliser

démo_chiffre_message :: fonc (message: chaine, clé: chaine) -> chaine
{
    flux_de_chiffrement := crée_sha256()
    diffère détruit(flux_de_chiffrement)

    flux_de_chiffrement.ajourne(clé)

    condensat_clé := flux_de_chiffrement.condensat()

    résultat := copie_chaine(message)
    xor_chaines(résultat, chaine_depuis_table_octet(condensat_clé))
    retourne résultat
}

xor_chaines :: fonc (chn1: chaine, chn2: chaine)
{
    compte := 0
    indice := 0

    pour & chn1 {
        it = it ^ (chn2[indice] + compte comme z8)

        indice += 1

        si indice >= chn2.taille {
            indice = 0
            compte += chn2.taille comme z32
        }
    }
}

// DÉDUPLIQUE
rotation_gauche :: fonc (a: n32, n: n32) -> n32 #enligne
{
    retourne (a << n) | (a >> (32 - n))
}

chacha :: fonc (a: &n32, b: &n32, c: &n32, d: &n32)
{
    a_travail := a
    b_travail := b
    c_travail := c
    d_travail := d

    a_travail += b_travail
    d_travail ^= a_travail
    d_travail = rotation_gauche(d_travail, 16)
    c_travail += d_travail
    b_travail ^= c_travail
    b_travail = rotation_gauche(b_travail, 12)

    a_travail += b_travail
    d_travail ^= a_travail
    d_travail = rotation_gauche(d_travail, 8)
    c_travail += d_travail
    b_travail ^= c_travail
    b_travail = rotation_gauche(b_travail, 7)

    a = a_travail
    b = b_travail
    c = c_travail
    d = d_travail
}

chacha_vertical :: fonc (bloc: &[4][4]n32)
{
    pour i dans 0 ... 3 {
        a := bloc[i][0]
        b := bloc[i][1]
        c := bloc[i][2]
        d := bloc[i][3]
        chacha(a, b, c, d)
        bloc[i][0] = a
        bloc[i][1] = b
        bloc[i][2] = c
        bloc[i][3] = d
    }
}

chacha_diagonal :: fonc (bloc: &[4][4]n32)
{
    pour i dans 0 ... 3 {
        a := bloc[i][0]
        b := bloc[(i + 1) % 4][1]
        c := bloc[(i + 2) % 4][2]
        d := bloc[(i + 3) % 4][3]
        chacha(a, b, c, d)
        bloc[i][0] = a
        bloc[(i + 1) % 4][1] = b
        bloc[(i + 2) % 4][2] = c
        bloc[(i + 3) % 4][3] = d
    }
}

convertis_clé :: fonc (a: &n32, b: &n32, c: &n32, d: &n32)
{
    constante := "expand byte-32 k"

    a = mémoire(constante.pointeur comme *n32)
    b = mémoire((constante.pointeur + 4) comme *n32)
    c = mémoire((constante.pointeur + 8) comme *n32)
    d = mémoire((constante.pointeur + 16) comme *n32)
}

test_chache :: fonc ()
{
    bloc: [4][4]n32

    pour i dans 0 ... 3 {
        pour j dans 0 ... 3 {
            bloc[i][i] = 0
        }
    }

    convertis_clé(bloc[0][0], bloc[0][1], bloc[0][2], bloc[0][3])

    pour i dans 0 ... 9 {
        chacha_vertical(bloc)
        chacha_diagonal(bloc)
    }
}

prépare_chaine :: fonc (entrée: chaine) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour entrée {
        si 'A' <= it <= 'Z' {
            ajoute_au_tampon(*enchaineuse, it - 'A')
        }
        sinon si 'a' <= it <= 'z' {
            ajoute_au_tampon(*enchaineuse, it - 'a')
        }
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

index_pour_lettre :: fonc (lettre: z8) -> z8
{
    si 'a' <= lettre <= 'z' {
        retourne lettre - 'a'
    }

    retourne lettre - 'A'
}

prépare_résultat :: fonc (entrée: chaine) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour entrée {
        ajoute_au_tampon(*enchaineuse, it + 'A')
    }

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

césar :: fonc (message: chaine, clé: z8) -> chaine
{
    message = prépare_chaine(message)
    clé = index_pour_lettre(clé)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour message {
        codé := (it + clé) % 26
        ajoute_au_tampon(*enchaineuse, codé)
    }

    tmp := chaine_depuis_enchaineuse(*enchaineuse)
    diffère déloge(tmp)

    retourne prépare_résultat(tmp)
}

vigenère :: fonc (message: chaine, clés: ...chaine) -> chaine
{
    message = prépare_chaine(message)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour lettre, index_lettre dans message {
        index_lettre_message := lettre

        pour clé dans clés {
            index_lettre_message += index_pour_lettre(clé[index_lettre % clé.taille])
        }

        index_lettre_message %= 26

        ajoute_au_tampon(*enchaineuse, index_lettre_message)
    }

    tmp := chaine_depuis_enchaineuse(*enchaineuse)
    diffère déloge(tmp)

    retourne prépare_résultat(tmp)
}

scytale :: fonc (message: chaine, taille_clé: z32) -> chaine
{
    message = prépare_chaine(message)

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)

    pour 0 ... taille_clé - 1 {
        indice := it

        tantque indice < message.taille {
            ajoute_au_tampon(*enchaineuse, message[indice])
            indice += taille_clé
        }
    }

    tmp := chaine_depuis_enchaineuse(*enchaineuse)
    diffère déloge(tmp)

    retourne prépare_résultat(tmp)
}

bits_d_entropie :: fonc (nombre_de_caractères: z64, taille: z64) -> z32
{
    retourne taille comme z32 * log(nombre_de_caractères comme r32) comme z32
}

remplis_avec_octets_cryptographiquement_sécurisés :: fonc (tampon: []octet)
{
    dev_urandom := tente ouvre_fichier_pour_lecture(CheminFichier("/dev/urandom")) piège _ {
        imprime("Impossible de lire /dev/urandom !\n")
        retourne
    }

    diffère _ := ferme(*dev_urandom)

    lus := tente lis(*dev_urandom, tampon) piège _ {
        imprime("Impossible de lire un nombre depuis dev_urandom")
        retourne
    }

    si lus != tampon.taille {
        imprime("lus : % / %\n", lus, tampon.taille)
        retourne
    }
}

nombre_aléatoire_cryptographique :: fonc ($T: type_de_données) -> T
{
    résultat: T
    remplis_avec_octets_cryptographiquement_sécurisés(résultat)
    retourne résultat
}
