// Bibliothèque d'introspection.

importe Fondation
importe Numérique

est_valide :: fonc (valeur: eini) -> bool
{
    retourne valeur.pointeur != nul
}

/* Enquête sur l'InfoType de l'eini. */

est_bool :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(bool)
}

est_chaine :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(chaine)
}

est_structure :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.STRUCTURE
}

est_tableau :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.TABLEAU
}

est_entier :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.ENTIER
}

est_réel :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.RÉEL
}

est_pointeur :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.POINTEUR
}

est_opaque :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.OPAQUE
}

est_eini :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(eini)
}

est_énum :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.ÉNUM
}

est_octet :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(octet)
}

est_type_de_données :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.TYPE_DE_DONNÉES
}

est_union :: fonc (valeur: eini) -> bool
{
    retourne valeur.info.id == id_info.UNION
}

est_z8 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(z8)
}

est_z16 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(z16)
}

est_z32 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(z32)
}

est_z64 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(z64)
}

est_n8 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(n8)
}

est_n16 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(n16)
}

est_n32 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(n32)
}

est_n64 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(n64)
}

est_r16 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(r16)
}

est_r32 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(r32)
}

est_r64 :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(r64)
}

est_rien :: fonc (valeur: eini) -> bool
{
    retourne valeur.info == info_de(rien)
}

/* Assignation d'une valeur. */

assigne_z8 :: fonc (valeur: eini, v: z8)
{
    // assert(valeur.est_z8())
    mémoire(valeur.pointeur comme *z8) = v
}

assigne_z16 :: fonc (valeur: eini, v: z16)
{
    // assert(valeur.est_z16())
    mémoire(valeur.pointeur comme *z16) = v
}

assigne_z32 :: fonc (valeur: eini, v: z32)
{
    // assert(valeur.est_z32())
    mémoire(valeur.pointeur comme *z32) = v
}

assigne_z64 :: fonc (valeur: eini, v: z64)
{
    // assert(valeur.est_z64())
    mémoire(valeur.pointeur comme *z64) = v
}

assigne_n8 :: fonc (valeur: eini, v: n8)
{
    // assert(valeur.est_n8())
    mémoire(valeur.pointeur comme *n8) = v
}

assigne_n16 :: fonc (valeur: eini, v: n16)
{
    // assert(valeur.est_n16())
    mémoire(valeur.pointeur comme *n16) = v
}

assigne_n32 :: fonc (valeur: eini, v: n32)
{
    // assert(valeur.est_n32())
    mémoire(valeur.pointeur comme *n32) = v
}

assigne_n64 :: fonc (valeur: eini, v: n64)
{
    // assert(valeur.est_n64())
    mémoire(valeur.pointeur comme *n64) = v
}

assigne_r16 :: fonc (valeur: eini, v: r16)
{
    // assert(valeur.est_r16())
    mémoire(valeur.pointeur comme *r16) = v
}

assigne_r32 :: fonc (valeur: eini, v: r32)
{
    // assert(valeur.est_r32())
    mémoire(valeur.pointeur comme *r32) = v
}

assigne_r64 :: fonc (valeur: eini, v: r64)
{
    // assert(valeur.est_r64())
    mémoire(valeur.pointeur comme *r64) = v
}

assigne_bool :: fonc (valeur: eini, v: bool)
{
    // assert(valeur.est_bool())
    mémoire(valeur.pointeur comme *bool) = v
}

assigne_octet :: fonc (valeur: eini, v: octet)
{
    // assert(valeur.est_octet())
    mémoire(valeur.pointeur comme *octet) = v
}

assigne_type_de_données :: fonc (valeur: eini, v: type_de_données)
{
    // assert(valeur.est_type_de_données())
    mémoire(valeur.pointeur comme *type_de_données) = v
}

assigne_chaine :: fonc (valeur: eini, v: chaine)
{
    // assert(valeur.est_chaine())
    mémoire(valeur.pointeur comme *chaine) = v
}

assigne_pointeur :: fonc (valeur: eini, v: *rien)
{
    // assert(valeur.est_pointeur())
    mémoire(valeur.pointeur comme **z8) = v
}

/* Extraction d'une valeur depuis l'eini, seuls les types de bases sont supportés. */

comme_bool :: fonc (valeur: eini) -> bool
{
    retourne mémoire(valeur.pointeur comme *bool)
}

comme_chaine :: fonc (valeur: eini) -> chaine
{
    retourne mémoire(valeur.pointeur comme *chaine)
}

comme_octet :: fonc (valeur: eini) -> octet
{
    retourne mémoire(valeur.pointeur comme *octet)
}

comme_type_de_données :: fonc (valeur: eini) -> type_de_données
{
    retourne mémoire(valeur.pointeur comme *type_de_données)
}

comme_z8 :: fonc (valeur: eini) -> z8
{
    retourne mémoire(valeur.pointeur comme *z8)
}

comme_z16 :: fonc (valeur: eini) -> z16
{
    retourne mémoire(valeur.pointeur comme *z16)
}

comme_z32 :: fonc (valeur: eini) -> z32
{
    retourne mémoire(valeur.pointeur comme *z32)
}

comme_z64 :: fonc (valeur: eini) -> z64
{
    retourne mémoire(valeur.pointeur comme *z64)
}

comme_n8 :: fonc (valeur: eini) -> n8
{
    retourne mémoire(valeur.pointeur comme *n8)
}

comme_n16 :: fonc (valeur: eini) -> n16
{
    retourne mémoire(valeur.pointeur comme *n16)
}

comme_n32 :: fonc (valeur: eini) -> n32
{
    retourne mémoire(valeur.pointeur comme *n32)
}

comme_n64 :: fonc (valeur: eini) -> n64
{
    retourne mémoire(valeur.pointeur comme *n64)
}

comme_r16 :: fonc (valeur: eini) -> r16
{
    retourne mémoire(valeur.pointeur comme *r16)
}

comme_r32 :: fonc (valeur: eini) -> r32
{
    retourne mémoire(valeur.pointeur comme *r32)
}

comme_r64 :: fonc (valeur: eini) -> r64
{
    retourne mémoire(valeur.pointeur comme *r64)
}

/* Enquête sur les membres d'un eini pour une structure quelconque. */

possède_membre :: fonc (valeur: eini, nom: chaine) -> bool
{
    saufsi valeur.est_structure() {
		retourne faux
	}

	info := valeur.info comme *InfoTypeStructure

    pour membre dans info.membres {
        si membre.nom == nom {
			retourne vrai
        }
    }

	retourne faux
}

membres :: corout (valeur : eini) -> chaine
{
    saufsi valeur.est_structure() {
		retourne
	}

	info := valeur.info comme *InfoTypeStructure

    pour membre dans info.membres {
		retiens membre.nom
	}
}

eini_depuis_info_membre :: fonc (structure: eini, info_membre: *InfoTypeMembreStructure) -> eini
{
    e : eini
    e.pointeur = structure.pointeur + info_membre.décalage
    e.info = info_membre.id

    retourne e
}

trouve_info_membre :: fonc (valeur: eini, nom_membre: chaine) -> *InfoTypeMembreStructure
{
    saufsi valeur.est_structure() {
        retourne nul
    }

    info := valeur.info comme *InfoTypeStructure

    pour info.membres {
        si it.nom == nom_membre {
            retourne it
        }
    }

    retourne nul
}

/* Trouve la valeur eini d'un membre d'une structure ou d'une chaine.
 * Pour un type chaine, seul le membre "taille" renvoie une valeur pour le moment.
 */
trouve_valeur_membre :: fonc (valeur: eini, nom_membre: chaine) -> eini
{
    résultat : eini

    si valeur.est_chaine() {
        si nom_membre == "taille" {
            résultat.pointeur = valeur.pointeur + 8
            résultat.info = info_de(z64)
            retourne résultat
        }
    }

    saufsi valeur.est_structure() {
        retourne résultat
    }

    info := valeur.info comme *InfoTypeStructure

    pour info.membres {
        si it.nom == nom_membre {
            résultat.pointeur = valeur.pointeur + it.décalage
            résultat.info = it.id
            retourne résultat
        }
    }

    retourne résultat
}

/* Itératrice sur les valeurs d'un eini provenant d'un type tableau (fixe ou dynamique). */
ItératriceTableau :: struct {
    valeur: eini

    pointeur: *z8
    taille: z64

    position: z64

    type_pointé : *InfoType

    décalage : z32
}

crée_itératrice_tableau :: fonc (valeur: eini) -> ItératriceTableau
{
    itératrice : ItératriceTableau

    saufsi valeur.est_valide() {
        retourne itératrice
    }

    saufsi valeur.est_tableau() {
        retourne itératrice
    }

    info_tableau := valeur.info comme *InfoTypeTableau
    type_pointé := info_tableau.type_pointé
    décalage := type_pointé.taille_en_octet comme z32

    si info_tableau.est_tableau_fixe {
        itératrice.pointeur = valeur.pointeur
        itératrice.taille = info_tableau.taille_fixe
    }
    sinon {
        x := mémoire(valeur.pointeur comme *[]z8)

        itératrice.pointeur = x.pointeur
        itératrice.taille = x.taille
    }

    itératrice.valeur = valeur
    itératrice.type_pointé = type_pointé
    itératrice.décalage = décalage

    retourne itératrice
}

valeur_suivante :: fonc (itératrice: &ItératriceTableau) -> eini
{
    résultat : eini

    si itératrice.position >= itératrice.taille {
        retourne résultat
    }

    résultat.pointeur = itératrice.pointeur + itératrice.décalage * itératrice.position
    résultat.info = itératrice.type_pointé

    itératrice.position += 1

    retourne résultat
}

/* Itératrice sur les membres d'un eini provenant d'une structure. */
ItératriceMembreStructure :: struct {
    valeur: eini

    pointeur: *z8
    taille: z64

    position: z64
}

crée_itératrice_membre :: fonc (structure: eini, ignore_membres_constants := vrai) -> ItératriceMembreStructure
{
    itératrice : ItératriceMembreStructure

    si !structure.est_structure() {
        retourne itératrice
    }

    info := structure.info comme *InfoTypeStructure

    itératrice.valeur = structure
    itératrice.taille = info.membres.taille

    retourne itératrice
}

membre_suivant :: fonc (itératrice: &ItératriceMembreStructure) -> eini, chaine
{
    résultat : eini
    nom : chaine

    info := itératrice.valeur.info comme *InfoTypeStructure

    tantque itératrice.position < itératrice.taille {
        membre := info.membres[itératrice.position]

        si (membre.drapeaux & InfoTypeMembreStructure.Drapeaux.EST_CONSTANT) != 0 {
            itératrice.position += 1
            continue
        }

        résultat.pointeur = itératrice.valeur.pointeur + membre.décalage
        résultat.info = membre.id

        nom = membre.nom

        itératrice.position += 1
        arrête
    }

    retourne résultat, nom
}

/* FonctionParsage
 *
 * Une FonctionParsage fait correspondre un InfoType à une fonction de rappel devant être
 * utilisée pour parser une chaine de caractère correspondant à une valeur pouvant être tenue
 * par le type pointé par l'InfoType.
 *
 * La fonction de rappel est de type fonc(chaine, []octet)(bool), et doit parser la chaine,
 * créer si possible une valeur du bon type à partir de celle-ci et ajourner le tampon de
 * type []octet passé à la fonction. Si le parsage est réussi, la fonction devra retourner
 * vrai, ou faux le cas échéant.
 *
 * Il est possible de définir des fonctions de parsage pour n'importe quel type connu lors
 * de la compilation via son InfoType.
 */
FonctionParsage :: struct {
    info_type : *InfoType
    rappel : fonc (chaine, []octet)(bool)
}

/* Trouve une FonctionParsage pour un InfoType précisé et retourne un pointeur vers celle-ci,
 * ou nul le cas échéant.
 */
trouve_fonction_pour_type :: fonc (fonctions: []FonctionParsage, info_type: *InfoType) -> *FonctionParsage
{
    pour * fonctions {
        si info_type == it.info_type {
            retourne it
        }
    }

    retourne nul
}

/* Crée une FonctionParsage à partir de l'InfoType et du rappel précisés et ajoute-la au tableau.
 * S'il existe une FonctionParsage pour l'InfoType, le rappel de celle-ci est ajourné et aucune
 * nouvelle FonctionParsage n'est crée.
 */
ajoute_fonction :: fonc (fonctions: *[]FonctionParsage, info_type: *InfoType, rappel: fonc(chaine, []octet)(bool))
{
    pour mémoire(fonctions) {
        si it.info_type == info_type {
            it.rappel = rappel
            retourne
        }
    }

    fonction : FonctionParsage
    fonction.info_type = info_type
    fonction.rappel = rappel

    tableau_ajoute(fonctions, fonction)
}

/* Initialise un tableau de FonctionParsage pour avoir des rappels pour chaque type
 * de base (hors pointeur, référence, tableau).
 */
initalise_types_base :: fonc (fonctions: *[]FonctionParsage)
{
    ajoute_fonction(fonctions, info_de(chaine), parse_chaine)
    ajoute_fonction(fonctions, info_de(n8), parse_n8)
    ajoute_fonction(fonctions, info_de(n16), parse_n16)
    ajoute_fonction(fonctions, info_de(n32), parse_n32)
    ajoute_fonction(fonctions, info_de(n64), parse_n64)
    ajoute_fonction(fonctions, info_de(z8), parse_z8)
    ajoute_fonction(fonctions, info_de(z16), parse_z16)
    ajoute_fonction(fonctions, info_de(z32), parse_z32)
    ajoute_fonction(fonctions, info_de(z64), parse_z64)
    ajoute_fonction(fonctions, info_de(r16), parse_r16)
    ajoute_fonction(fonctions, info_de(r32), parse_r32)
    ajoute_fonction(fonctions, info_de(r64), parse_r64)
    ajoute_fonction(fonctions, info_de(bool), parse_bool)
}

// ------------------------
// Fonctions pour parser les types de bases.

/* Parse une chaine depuis le texte d'entrée. La chaine est simplement équivalent au texte,
 * aucune copie n'en est faite, nous supposons que le texte est toujours valide. */
parse_chaine :: fonc (texte: chaine, tampon: []octet) -> bool
{
    copie_mem_nonsur(src = *texte, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_n8 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_n8(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_n16 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_n16(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_n32 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_n32(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_n64 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_n64(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_z8 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_z8(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_z16 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_z16(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_z32 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_z32(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_z64 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_z64(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_r16 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_r16(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_r32 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_r32(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_r64 :: fonc (texte: chaine, tampon: []octet) -> bool
{
    v := tente extrait_r64(texte) piège err {
        retourne faux
    }

    copie_mem_nonsur(src = *v, dst = tampon.pointeur, taille = tampon.taille)
    retourne vrai
}

parse_bool :: fonc (texte: chaine, tampon: []octet) -> bool
{
    si texte == "vrai" {
        tampon[0] = 1
        retourne vrai
    }

    si texte == "faux" {
        tampon[0] = 0
        retourne vrai
    }

    retourne faux
}
