/*

    Module de service TCP.

    Utilisation :

    adresse_ip : AdresseIPv4

    serveuse := crée_serveuse(adresse_ip, 5000, 1024, ServeuseArachné, DonnéesPriseArachné)

    si !serveuse.ctx {
        imprime("Impossible de créer la serveuse !\n")
        retourne 1
    }

    serveuse.rappel_quand_ouverture(quand_ouverture)
    serveuse.rappel_quand_lecture(quand_lecture)

    serveuse.lance()

    Documentation principale pour l'implémentation :
        https://man7.org/linux/man-pages/man7/ip.7.html

 */

importe ConnexionTCP
importe Internet
importe SysFichier

/*

    À FAIRE : version SSL

 */

/* ClienteTCP
 *
 * Dans la tradition Unix, tout étant un fichier, la prise cliente est représentée via un Fichier,
 * donc nous pouvons lire et écrire des données dans celui-ci via son interface.
 */
ClienteTCP :: struct {
    fichier : Fichier
    adresse : AdresseIPv4
}

/* Le protocol IP n'a pas de concept pour un port, seuls les protocols TCP et UDP le conceptualisent. */
AdresseTCP :: struct {
    adresse: AdresseIPv4
    port: n16
}

ServeuseTCP :: struct {
    boucle_évènements: *Boucle
    ctx: *Contexte
    adresse_ip: AdresseIPv4
    port: n16
}

crée_serveuse :: fonc (adresse_ip: AdresseIPv4, port: n16, connexions_max: z32, $T: type_de_données, $TypeDonnéesPrise: type_de_données) -> ServeuseTCP
{
    serveuse: ServeuseTCP(T)

    boucle_évènements := crée_boucle()
    ctx := crée_contexte_vide(boucle_évènements, T)

    prise := crée_prise_pour_écoute(ctx, adresse_ip, port, connexions_max, TypeDonnéesPrise)

    // À FAIRE erreur
    si !prise {
        détruit_boucle(boucle_évènements)
        détruit_contexte(ctx)
        retourne serveuse
    }

    serveuse.boucle_évènements = boucle_évènements
    serveuse.ctx = ctx
    serveuse.adresse_ip = adresse_ip
    serveuse.port = port
    retourne serveuse
}

détruit_serveuse :: fonc (serveuse: *ServeuseTCP)
{
    détruit_boucle(serveuse.boucle_évènements)
    détruit_contexte(serveuse.ctx)
}

lance :: fonc (serveuse: *ServeuseTCP)
{
    serveuse.boucle_évènements.lance()
}

rappel_quand_ouverture :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise, bool)(rien))
{
    serveuse.ctx.mute_quand_ouverture(rappel)
}

rappel_quand_données_reçues :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise, []octet)(rien))
{
    serveuse.ctx.mute_quand_données_reçues(rappel)
}

rappel_quand_écriture :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise)(rien))
{
    serveuse.ctx.mute_quand_écriture(rappel)
}

rappel_quand_fermeture :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise)(rien))
{
    serveuse.ctx.mute_quand_fermeture(rappel)
}

rappel_quand_timeout :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise)(rien))
{
    serveuse.ctx.mute_quand_timeout(rappel)
}

rappel_quand_fin :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise)(rien))
{
    serveuse.ctx.mute_quand_fin(rappel)
}

rappel_quand_erreur_connexion :: fonc (serveuse: *ServeuseTCP, rappel: fonc(*Prise)(rien))
{
    serveuse.ctx.mute_quand_erreur_connexion(rappel)
}
