importe Fondation
importe Internet
importe POSIX
importe Réseau
importe Routage
importe SysFichier

/*
DOCUMENT_ROOT	The root directory of your server
HTTP_COOKIE	The visitor's cookie, if one is set
HTTP_HOST	The hostname of the page being attempted
HTTP_REFERER	The URL of the page that called your program
HTTP_USER_AGENT	The browser type of the visitor
HTTPS	"on" if the program is being called through a secure server
PATH	The system path your server is running under
QUERY_STRING	The query string (see GET, below)
REMOTE_ADDR	The IP address of the visitor
REMOTE_HOST	The hostname of the visitor (if your server has reverse-name-lookups on; otherwise this is the IP address again)
REMOTE_PORT	The port the visitor is connected to on the web server
REMOTE_USER	The visitor's username (for .htaccess-protected pages)
REQUEST_METHOD	GET or POST
REQUEST_URI	The interpreted pathname of the requested document or CGI (relative to the document root)
SCRIPT_FILENAME	The full pathname of the current CGI
SCRIPT_NAME	The interpreted pathname of the current CGI (relative to the document root)
SERVER_ADMIN	The email address for your server's webmaster
SERVER_NAME	Your server's fully qualified domain name (e.g. www.cgi101.com)
SERVER_PORT	The port number your server is listening on
SERVER_SOFTWARE	The server software you're using (e.g. Apache 1.3)
PATH_INFO
PATH_TRANSLATED
SERVER_PROTOCOL
AUTH_TYPE
CONTENT_TYPE
CONTENT_LENGTH
GATEWAY_INTERFACE
HTTP_ACCEPT
HTTP_ACCEPT_LANGUAGE
*/

DonnéesCGI :: struct {
    racine_serveur: chaine
    cookie: chaine
    hôte: chaine
    référant: chaine
    agent_utilisateur: chaine
    https: chaine
    chemin: chaine
    chaine_requête: chaine
    adresse_client: chaine
    hôte_client: chaine
    port_client: chaine
    utilisateur_client: chaine
    méthode: chaine
    uri: chaine
    nom_fichier_script: chaine
    nom_script: chaine
    administrateur_serveur: chaine
    nom_serveur: chaine
    port_serveur: chaine
    logiciel_serveur: chaine
    info_chemin : chaine
    chemin_traduit : chaine
    protocol_serveur : chaine
    type_authentification : chaine
    type_contenu : chaine
    taille_contenu : chaine
    interface_gateway : chaine
    http_accept : chaine
    http_accept_language : chaine
}

données_cgi :: fonc () -> DonnéesCGI
{
    données : DonnéesCGI = ---
    données.racine_serveur = chaine_environnement("DOCUMENT_ROOT")
    données.cookie = chaine_environnement("HTTP_COOKIE")
    données.hôte = chaine_environnement("HTTP_HOST")
    données.référant = chaine_environnement("HTTP_REFERER")
    données.agent_utilisateur = chaine_environnement("HTTP_USER_AGENT")
    données.https = chaine_environnement("HTTPS")
    données.chemin = chaine_environnement("PATH")
    données.chaine_requête = chaine_environnement("QUERY_STRING")
    données.adresse_client = chaine_environnement("REMOTE_ADDR")
    données.hôte_client = chaine_environnement("REMOTE_HOST")
    données.port_client = chaine_environnement("REMOTE_PORT")
    données.utilisateur_client = chaine_environnement("REMOTE_USER")
    données.méthode = chaine_environnement("REQUEST_METHOD")
    données.uri = chaine_environnement("REQUEST_URI")
    données.nom_fichier_script = chaine_environnement("SCRIPT_FILENAME")
    données.nom_script = chaine_environnement("SCRIPT_NAME")
    données.administrateur_serveur = chaine_environnement("SERVER_ADMIN")
    données.nom_serveur = chaine_environnement("SERVER_NAME")
    données.port_serveur = chaine_environnement("SERVER_PORT")
    données.logiciel_serveur = chaine_environnement("SERVER_SOFTWARE")
    données.info_chemin = chaine_environnement("PATH_INFO")
    données.chemin_traduit = chaine_environnement("PATH_TRANSLATED")
    données.protocol_serveur = chaine_environnement("SERVER_PROTOCOL")
    données.type_authentification = chaine_environnement("AUTH_TYPE")
    données.type_contenu = chaine_environnement("CONTENT_TYPE")
    données.taille_contenu = chaine_environnement("CONTENT_LENGTH")
    données.interface_gateway = chaine_environnement("GATEWAY_INTERFACE")
    données.http_accept = chaine_environnement("HTTP_ACCEPT")
    données.http_accept_language = chaine_environnement("HTTP_ACCEPT_LANGUAGE")

    retourne données
}

ServeuseCGI :: struct ($T: type_de_données) {
    routeuse : Routeuse(T = T)
    intergiciel : fonc(*Requête, *T)(RésultatRequête)
}

construit_serveuse_cgi :: fonc (données: *$T, intergiciel: fonc(*Requête, *T)(RésultatRequête)) -> ServeuseCGI(T = T)
{
    serveuse : ServeuseCGI(T = T)
    serveuse.routeuse.données_serveuse = données
    serveuse.intergiciel = intergiciel

    retourne serveuse
}

détruit_serveuse :: fonc (serveuse: &ServeuseCGI(T = $T))
{
    détruit_routeuse(*serveuse.routeuse)
}

rappel_méthode_non_autorisée :: fonc (serveuse: &ServeuseCGI(T = $T), méthode: fonc(*Requête, *T)(RésultatRequête))
{
    serveuse.routeuse.rappel_méthode_non_autorisée = méthode
}

rappel_page_non_trouvée :: fonc (serveuse: &ServeuseCGI(T = $T), méthode: fonc(*Requête, *T)(RésultatRequête))
{
    serveuse.routeuse.rappel_page_non_trouvée = méthode
}

ajoute_route :: fonc (serveuse: &ServeuseCGI(T = $T), chemin: chaine, méthode_get: fonc(*Requête, *T)(RésultatRequête), méthode_post: fonc(*Requête, *T)(RésultatRequête))
{
    ajoute_route(*serveuse.routeuse, chemin, méthode_get, méthode_post)
}

lance :: fonc (serveuse: &ServeuseCGI(T = $T))
{
    // accepte_connexion
    données := données_cgi()

    // prépare les données de la requête
    uri_normalisé := résoud_échappement_url(données.uri)
    diffère { déloge(uri_normalisé) }

    uri := tente parse_uri_depuis_chemin_requête(uri_normalisé) piège err {
        imprime("Status: 400 Bad Request\n")
        imprime("Content-Type: text/html;charset=utf-8\n\n")
        imprime("<p>Chemin malformé</p>")
        retourne
    }

    cookies := parse_cookie_client(données.cookie)
    diffère { déloge(cookies) }

    requête : Requête
    requête.uri = uri
    requête.cookies = cookies
    requête.méthode = données.méthode

    requête.adresse_ip = tente parse_ipv4(données.adresse_client) piège err {
        imprime("Status: 400 Bad Request\n")
        imprime("Content-Type: text/html;charset=utf-8\n\n")
        imprime("<p>IP invalide</p>")
        retourne
    }

    diffère {
        si requête.contenu {
            déloge(requête.contenu)
        }
    }

    si données.méthode == "POST" && données.taille_contenu != "" && données.taille_contenu != "0" {
    //taille_contenu := parse_nombre_entier(données.taille_contenu)
    // type_contenu := données.type_contenu // application/x-www-form-urlencoded

        texte := tente entrée_standarde().lis_tout() piège err {
            imprime("Status: 400 Bad Request\n\n")
            retourne
        }

        requête.contenu = texte
        requête.type_contenu = données.type_contenu
    }

    si serveuse.intergiciel {
        résultat := serveuse.intergiciel(*requête, serveuse.routeuse.données_serveuse)

        si résultat.status != CodeÉtatHTTP.OK {
            crée_réponse(résultat)
            retourne
        }
    }

    // résoud la requête
    résultat := apparie_route(*serveuse.routeuse, *requête)

    // envoie la réponse au client
    crée_réponse(résultat)
}

crée_réponse :: fonc (résultat : &RésultatRequête)
{
    imprime("Status: %\n", chaine_code_état_http(résultat.status))

    pour résultat.entêtes {
        imprime("%: %\n", it.nom, it.valeur)
    }

    pour résultat.cookies {
        chn_cookie := chaine_cookie_pour_entête_http(it)
        imprime("Set-Cookie: %\n", chn_cookie)
        déloge(chn_cookie)
    }

    si résultat.type_contenu {
        imprime("Content-Type: %\n", résultat.type_contenu)
    }

    imprime("\n")

    si résultat.contenu {
        imprime("%", résultat.contenu)
    }

    détruit_résultat(résultat)
}
