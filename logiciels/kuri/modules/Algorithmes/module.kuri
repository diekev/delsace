importe Math

// Différents algorithmes de recherche binaire. Ces algorithmes nous évitent de faire trop
// de comparaisons, et sont résistant aux dépassement de bornes.

// Retourne le nombre d'éléments se situant entre deux pointeurs.
distance :: fonc (ptr1: *$T, ptr2: *T) -> z64 #enligne
{
    retourne ptr2 - ptr1
}

// Retourne le pointeur se situant à n éléments après celui donné.
suivant :: fonc (ptr: *$T, n: z64) -> *T #enligne
{
    retourne ptr + n
}

// Trouve une valeur entre deux pointeurs. Retourne le premier pointeur dont la valeur pointée
// ést plus petite que la valeur recherchée. Sinon retourne le pointeur de fin.
// Ceci est utile pour stocker dans l'ordre croissant des données.
limite_basse :: fonc (f: *$T, l: *T, v: T) -> *T
{
    fl := f
    ll := l

    boucle {
        si fl == ll {
            arrête
        }

        m := suivant(fl, distance(fl, ll) / 2)

        si (m[0] < v) {
            fl = suivant(m, 1)
        }
        sinon {
            ll = m
        }
    }

    retourne fl
}

// Trouve une valeur entre deux pointeurs. Retourne le premier pointeur dont la valeur pointée
// ést plus petite que la valeur recherchée. Sinon retourne le pointeur de fin.
// Ceci est utile pour stocker dans l'ordre croissant des données.
limite_basse :: fonc (f: *$T, l: *T, v: T, rappel_comp: fonc(*T, *T)(bool)) -> *T
{
    fl := f
    ll := l

    boucle {
        si fl == ll {
            arrête
        }

        m := suivant(fl, distance(fl, ll) / 2)

        si (rappel_comp(m, *v)) {
            fl = suivant(m, 1)
        }
        sinon {
            ll = m
        }
    }

    retourne fl
}

// Trouve une valeur entre deux pointeurs. Retourne le premier pointeur dont la valeur pointée
// ést plus grande que la valeur recherchée. Sinon retourne le pointeur de fin.
// Ceci est utile pour stocker dans l'ordre décroissant des données.
limite_haute :: fonc (f: *$T, l: *T, v: T) -> *T
{
    fl := f
    ll := l

    boucle {
        si fl == ll {
            arrête
        }

        m := suivant(fl, distance(fl, ll) / 2)

        si (m[0] > v) {
            fl = suivant(m, 1)
        }
        sinon {
            ll = m
        }
    }

    retourne fl
}

tous_de :: fonc (tableau: [..]$T, prédicat: fonc(T)(bool)) -> bool
{
    pour tableau {
        saufsi prédicat(it) {
            retourne faux
        }
    }

    retourne vrai
}

aucun_de :: fonc (tableau: [..]$T, prédicat: fonc(T)(bool)) -> bool
{
    pour tableau {
        si prédicat(it) {
            retourne faux
        }
    }

    retourne vrai
}

copie_si :: fonc (tableau: [..]$T, prédicat: fonc(T)(bool)) -> [..]T
{
    résultat: [..]T
    tableau_réserve(*résultat, tableau.taille)

    pour tableau {
        si prédicat(it) {
            tableau_ajoute(*résultat, copie(it))
        }
    }

    retourne résultat
}

copie :: fonc (tableau: [..]$T) -> [..]T
{
    résultat: [..]T
    tableau_réserve(*résultat, tableau.taille)

    pour tableau {
        tableau_ajoute(*résultat, copie(it))
    }

    retourne résultat
}

accumule :: fonc (tableau: [..]$T, valeur_initiale: $V, rappel: fonc(T)(V)) -> V
{
    résultat := valeur_initiale

    pour tableau {
        résultat += rappel(it)
    }

    retourne résultat
}

accumule :: fonc (tableau: [..]$T, valeur_initiale: T) -> T
{
    résultat := valeur_initiale

    pour tableau {
        résultat += it
    }

    retourne résultat
}

/* Sommation de nombres réels par Kahan et Babuska, variante de Neumaier.
 * Ceci accumule moins d'erreur en point flottant.
 * https://en.wikipedia.org/wiki/Kahan_summation_algorithm
 */
accumule_selon_kahan_babuska_version_neumaier :: fonc (tableau: [..]r32) -> r32
{
    saufsi tableau {
        retourne 0.0
    }

    résultat := tableau[0]
    err := 0.0

    pour 1 ... tableau.taille - 1 {
        k := tableau[it]
        m := résultat + k

        err += si abs(résultat) >= abs(k) {
            résultat - m + k
        }
        sinon {
            k - m + résultat
        }

        résultat = m
    }

    retourne résultat + err
}

/* ------------------------------------------------------------------------- */
/** \nom Permutation de valeur.
 * \{ */

permute :: fonc (a: *$T, b: *T) #enligne
{
    tmp := mémoire(a)
    mémoire(a) = mémoire(b)
    mémoire(b) = tmp
}

permute :: fonc (a: &$T, b: &T) #enligne
{
    tmp : T = a
    a = b
    b = tmp
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Inversion d'une séquence.
 * \{ */

inverse :: fonc (premier: *$T, dernier: *T)
{
    tantque premier < dernier {
        dernier -= 1
        permute(premier, dernier)
        premier += 1
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Pivote
*
 * Déplace les éléments entre `premier` et `milieu` afin qu'ils se trouvent
 * après `dernier`.
 * Retourne la nouvelle position de `premier`.
 * \{ */

pivote :: fonc (premier: *$T, milieu: *T, dernier: *T) -> *T
{
    taille_début := distance(premier, milieu)
    taille_fin := distance(milieu, dernier)

    /* À FAIRE : évite d'allouer de la mémoire */
    tampon: [..]T
    diffère déloge(tampon)
    tableau_redimensionne(tampon, taille_début)

    copie_mem_nonsur(src = premier, dst = tampon.pointeur, taille = taille_début * taille_de(T) comme z64)
    déplace_mémoire_nonsur(src = milieu, dst = premier, taille = taille_fin * taille_de(T) comme z64)
    copie_mem_nonsur(src = tampon.pointeur, dst = dernier - taille_début, taille = taille_début * taille_de(T) comme z64)

    retourne suivant(premier, taille_fin)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Partition.
 *
 * Tri les éléments entre `premier` et `dernier` tel quel les éléments qui
 * satisfont le `prédicat` se retrouvent avant les autres.
 * Retourne le premier élément satisfaisant le `prédicat`.
 * \{ */

partitionne :: fonc (premier: *$T, dernier: *T, prédicat: fonc(T)(bool)) -> *T
{
    boucle {
        tantque ((premier != dernier) && prédicat(mémoire(premier))) {
            premier = suivant(premier, 1)
        }

        si premier == dernier {
            arrête
        }

        dernier = suivant(dernier, -1)

        tantque ((premier != dernier) && !prédicat(mémoire(dernier))) {
            dernier = suivant(dernier, -1)
        }

        si (premier == dernier) {
            arrête
        }

        permute(premier, dernier)
        premier = suivant(premier, 1)
    }

    retourne premier
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Partition stable.
 *
 * Tri les éléments entre `premier` et `dernier` tel quel les éléments qui
 * satisfont le `prédicat` se retrouvent avant les autres en préservant leur
 * ordre relatif.
 * Retourne le premier élément satisfaisant le `prédicat`.
 * \{ */

partition_stable :: fonc (premier: *$T, dernier: *T, p: fonc(T)(bool)) -> *T
{
    taille := distance(premier, dernier)
    saufsi taille {
        retourne premier
    }

    si taille == 1 {
        retourne suivant(premier, p(mémoire(premier)) comme z32)
    }

    milieu := suivant(premier, taille / 2)

    retourne pivote(partitionne_stable(premier, milieu, p),
                    milieu,
                    partitionne_stable(milieu, dernier, p))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Copie
 * \{ */

/* Copie les éléments entre [début_src, fin_scr) dans la zone commençant à
 * début_dst selon le prédicat p. Seuls les éléments satisfaisant le prédicat
 * seront copiés.
 * Retourne l'adresse suivant le dernier élément dans début_dst (le nombre
 * d'éléments copiés sera (résultat - début_dst). */
copie_si :: fonc (début_src: *$T, fin_src: *T, début_dst: *T, p: fonc(T)(bool)) -> *T
{
    tantque début != fin_src {
        valeur := mémoire(début_src)
        début_src += 1

        saufsi p(valeur) {
            continue
        }

        mémoire(début_dst) = valeur
        début_dst += 1
    }

    retourne début_dst
}

/** \} */
