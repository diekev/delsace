importe Fondation
importe Périphériques

charge "interface_qt"

libdanjo :: #bibliothèque "danjo"

#dépendance_bibliothèque libdanjo libdls_outils
#dépendance_bibliothèque libdanjo libdls_phys
#dépendance_bibliothèque libdanjo libQt5Widgets
#dépendance_bibliothèque libdanjo libQt5OpenGL
#dépendance_bibliothèque libdanjo libQt5Core
#dépendance_bibliothèque libdanjo libQt5Gui

libQt5Widgets :: #bibliothèque "Qt5Widgets"
libQt5OpenGL :: #bibliothèque "Qt5OpenGL"
libQt5Core :: #bibliothèque "Qt5Core"
libQt5Gui :: #bibliothèque "Qt5Gui"

libqt_entetes :: #bibliothèque "qt_entetes"

#dépendance_bibliothèque libqt libqt_entetes
#dépendance_bibliothèque libqt libdanjo
#dépendance_bibliothèque libqt libQt5Widgets
#dépendance_bibliothèque libqt libQt5OpenGL
#dépendance_bibliothèque libqt libQt5Core
#dépendance_bibliothèque libqt libQt5Gui

/* ------------------------------------------------------------------------- */
/** \nom Utilitaires
 * \{ */

vers_kuri :: fonc (chn: *QT_Chaine) -> chaine
{
    retourne construit_chaine(chn.caractères, chn.taille)
}

vers_kuri :: fonc (chn: QT_Chaine) -> chaine #enligne
{
    retourne construit_chaine(chn.caractères, chn.taille)
}

vers_qt :: fonc (chn: chaine) -> QT_Chaine
{
    retourne QT_Chaine(chn.pointeur, chn.taille)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Conversion Périphériques
 * \{ */

donne_modificateur_clavier_depuis_qt :: fonc () -> ModificateurClavier
{
    modificateurs := QT_application_donne_modificateurs_clavier()

    résultat: ModificateurClavier

    si (modificateurs & QT_Keyboard_Modifier.MAJ) != QT_Keyboard_Modifier.AUCUN {
        résultat.MAJUSCULE = vrai
    }

    si (modificateurs & QT_Keyboard_Modifier.CTRL) != QT_Keyboard_Modifier.AUCUN {
        résultat.CONTROL = vrai
    }

    si (modificateurs & QT_Keyboard_Modifier.ALT) != QT_Keyboard_Modifier.AUCUN {
        résultat.ALT = vrai
    }

    retourne résultat
}

donne_bouton_souris :: fonc (évènement: *QT_MouseEvent) -> BoutonSouris
{
    bouton := QT_mouse_event_donne_bouton(évènement)
    discr bouton {
        GAUCHE {
            retourne BoutonSouris.GAUCHE
        }
        DROIT {
            retourne BoutonSouris.DROIT
        }
        MILLIEU {
            retourne BoutonSouris.MOLETTE
        }
        ARRIERE {
            retourne BoutonSouris.ARRIÈRE
        }
        sinon {}
    }

    retourne BoutonSouris.GAUCHE
}

donne_clique_souris_depuis_évènement :: fonc (évènement: *QT_MouseEvent, action: ActionSouris) -> CliqueSouris
{
    position: QT_Position
    QT_mouse_event_donne_position(évènement, *position)

    résultat: CliqueSouris
    résultat.état.où.x = position.x
    résultat.état.où.y = position.y
    résultat.état.modificateur = donne_modificateur_clavier_depuis_qt()
    résultat.bouton = donne_bouton_souris(évènement)
    résultat.action = action
    retourne résultat
}

/** } */
