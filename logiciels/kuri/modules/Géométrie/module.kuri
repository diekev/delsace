/* Module de représentation de formes géométriques. */

/* ------------------------------------------------------------------------- */
/** \nom Point2D
 * \{ */

Point2D :: struct ($T: type_de_données) {
    x: T @mutable
    y: T @mutable
}

opérateur == :: fonc (p0: Point2D(z32), p1: Point2D(z32)) -> bool
{
    retourne p0.x == p1.x && p0.y == p1.y
}

opérateur == :: fonc (p0: Point2D(r32), p1: Point2D(r32)) -> bool
{
    retourne p0.x == p1.x && p0.y == p1.y
}

donne_point_2d_réel :: fonc (point: Point2D(z32)) -> Point2D(r32)
{
    retourne Point2D(r32)(point.x comme r32, point.y comme r32)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Ligne
 * \{ */

Ligne :: struct ($T: type_de_données) {
    p0: Point2D(T)
    p1: Point2D(T)
}

/* PORTED FROM:
 * lines_intersect:  AUTHOR: Mukesh Prasad
 *
 *   This function computes whether two line segments,
 *   respectively joining the input points (x1,y1) -- (x2,y2)
 *   and the input points (x3,y3) -- (x4,y4) intersect.
 *   If the lines intersect, the output variables x, y are
 *   set to coordinates of the point of intersection.
 *
 *   All values are in integers.  The returned value is rounded
 *   to the nearest integer point.
 *
 *   If non-integral grid points are relevant, the function
 *   can easily be transformed by substituting floating point
 *   calculations instead of integer calculations.
 *
 *   Entry
 *        x1, y1,  x2, y2   Coordinates of endpoints of one segment.
 *        x3, y3,  x4, y4   Coordinates of endpoints of other segment.
 *
 *   Exit
 *        x, y              Coordinates of intersection point.
 *
 *   The value returned by the function is one of:
 *
 *        DONT_INTERSECT    0
 *        DO_INTERSECT      1
 *        COLLINEAR         2
 *
 * Error conditions:
 *
 *     Depending upon the possible ranges, and particularly on 16-bit
 *     computers, care should be taken to protect from overflow.
 *
 *     In the following code, 'long' values have been used for this
 *     purpose, instead of 'int'.
 *
 */

TypeIntersectionLigne :: énum n8 {
    INTERSECTE
    INTERSECTE_PAS
    COLLINÉAIRE
}

ont_même_signe :: fonc (a: $T, b: T) -> bool
{
    retourne (a >= 0 && b >= 0) || (a < 0 && b < 0)
}

/* p1, p2 : First line segment
 * p3, p4 : Second line segment
 * p5 : Output value, point of intersection
 */
instersecte_lignes :: fonc (p1: Point2D($T), p2: Point2D(T), p3: Point2D(T), p4: Point2D(T), p5: *Point2D(T)) -> TypeIntersectionLigne
{
    /* a1, a2, b1, b2, c1, c2 : Coefficients of line eqns. */
    /* r1, r2, r3, r4 : 'Sign' values */
    /* denom, offset, num Intermediate values */

    /* Compute a1, b1, c1, where line joining points 1 and 2
     * is "a1 x  +  b1 y  +  c1  =  0".
     */

    a1 := p2.y - p1.y
    b1 := p1.x - p2.x
    c1 := p2.x * p1.y - p1.x * p2.y

    /* Compute r3 and r4.
     */
    r3 := a1 * p3.x + b1 * p3.y + c1
    r4 := a1 * p4.x + b1 * p4.y + c1

    /* Check signs of r3 and r4.  If both point 3 and point 4 lie on
     * same side of line 1, the line segments do not intersect.
     */
    si r3 != 0 && r4 != 0 && ont_même_signe(r3, r4) {
        retourne TypeIntersectionLigne.INTERSECTE_PAS
    }

    /* Compute a2, b2, c2 */
    a2 := p4.y - p3.y
    b2 := p3.x - p4.x
    c2 := p4.x * p3.y - p3.x * p4.y

    /* Compute r1 and r2 */
    r1 := a2 * p1.x + b2 * p1.y + c2
    r2 := a2 * p2.x + b2 * p2.y + c2

    /* Check signs of r1 and r2.  If both point 1 and point 2 lie
     * on same side of second line segment, the line segments do
     * not intersect.
     */
    si r1 != 0 && r2 != 0 && ont_même_signe(r1, r2) {
        retourne TypeIntersectionLigne.INTERSECTE_PAS
    }

    /* Line segments intersect: compute intersection point. 
     */

    denom := a1 * b2 - a2 * b1
    si denom == 0 {
        retourne TypeIntersectionLigne.COLLINÉAIRE
    }

    si p5 {
        offset := si denom < 0 { -denom / 2 } sinon { denom / 2 }

        /* The denom/2 is to get rounding instead of truncating.  It
         * is added or subtracted to the numerator, depending upon the
         * sign of the numerator.
         */

        num := b1 * c2 - b2 * c1;
        p5.x = si num < 0 { num - offset } sinon { num + offset }

        num = a2 * c1 - a1 * c2;
        p5.y = si num < 0 { num - offset } sinon { num + offset }

        p5.x /= denom
        p5.y /= denom
    }

    retourne TypeIntersectionLigne.INTERSECTE
}

instersecte_lignes :: fonc (p1: Point2D($T), p2: Point2D(T), p3: Point2D(T), p4: Point2D(T)) -> bool
{
    retourne instersecte_lignes(p1, p2, p3, p4, nul) == TypeIntersectionLigne.INTERSECTE   
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Triangle
 * \{ */

Triangle :: struct ($T: type_de_données) {
    p0: Point2D(T)
    p1: Point2D(T)
    p2: Point2D(T)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom RectanglePosDim
 * Rectangle défini selon sa position dans l'espace, ainsi que ses dimensions,
 * hauteur et largeur, à partir de cette position.
 * \{ */

RectanglePosDim :: struct ($T: type_de_données) {
    x: T @mutable
    y: T @mutable
    hauteur: T @mutable
    largeur: T @mutable
}

crée_rectangle_pos_dim :: fonc (a: Point2D($T), b: Point2D(T)) -> RectanglePosDim(T)
{
    // À FAIRE : dédpulication des classes avec Math
    // x := min(a.x, b.x)
    // y := min(a.y, b.y)

    // hauteur := abs(a.y - b.y)
    // largeur := abs(a.x - b.x)

    x := si a.x < b.x { a.x } sinon { b.x }
    y := si a.y < b.y { a.y } sinon { b.y }

    hauteur := a.y - b.y
    largeur := a.x - b.x

    si largeur < 0.0 {
        largeur = -largeur
    }
    si hauteur < 0.0 {
        hauteur = -hauteur
    }

    retourne RectanglePosDim(T)(x, y, hauteur, largeur)
}

réduis :: fonc (rect: &RectanglePosDim($T), taille: T)
{
    rect.x += taille
    rect.y += taille
    rect.hauteur -= taille * 2
    rect.largeur -= taille * 2
}

donne_position :: fonc (rect: RectanglePosDim($T)) -> Point2D(T) #enligne
{
    retourne Point2D(T)(rect.x, rect.y)
}

contient :: fonc (rect: RectanglePosDim($T), x: T, y: T) -> bool
{
    saufsi rect.x <= x <= (rect.x + rect.largeur) {
        retourne faux
    }

    saufsi rect.y <= y <= (rect.y + rect.hauteur) {
        retourne faux
    }

    retourne vrai
} @Python "méthode"

contient :: fonc (rect: RectanglePosDim($T), point: Point2D(T)) -> bool
{
    retourne contient(rect, point.x, point.y)
}

/* À FAIRE(langage) : les polymorphes ne font pas partie des fonctions_parsées
 * de la compilatrice. Quand nous représenterons les types dans l'arbre syntaxique
 * il faudra avoir un système pour passer les fonctions/types polymorphiques aux
 * métaprogrammes. */
contient :: fonc (rect: RectanglePosDim(r32), point: Point2D(r32)) -> bool
{
    retourne contient(rect, point.x, point.y)
} @Python "méthode"

donne_point_central :: fonc (rect: RectanglePosDim($T)) -> Point2D(T)
{
    retourne Point2D(T)(rect.x + rect.largeur / 2, rect.y + rect.hauteur / 2)
}

donne_point_central :: fonc (rect: RectanglePosDim(r32)) -> Point2D(r32)
{
    retourne Point2D(r32)(rect.x + rect.largeur / 2, rect.y + rect.hauteur / 2)
} @Python "méthode"

position_interne :: fonc (rect: RectanglePosDim($T), pos: Point2D(r32)) -> Point2D(T)
{
    résultat : Point2D(T) = ---
    résultat.x = ((rect.largeur comme r32) * pos.x) comme T
    résultat.y = ((rect.hauteur comme r32) * pos.y) comme T
    résultat.x += rect.x
    résultat.y += rect.y
    retourne résultat
}

/* Divise le rect verticalement selon le rect_diviseur.
 * Retourne, dans l'ordre, le rectangle à gauche du rect_diviseur, et celui à droite.
 * Cette fonction présume que rect_diviseur se trouve dans rect.
 */
divise_verticalement :: fonc (rect: RectanglePosDim($T), rect_diviseur: RectanglePosDim(T)) -> (RectanglePosDim(T), RectanglePosDim(T))
{
    résultat_gauche := rect
    résultat_gauche.largeur = rect_diviseur.x

    résultat_droite := rect
    résultat_droite.x = rect_diviseur.x + rect_diviseur.largeur
    résultat_droite.largeur = rect.largeur - (résultat_gauche.largeur + rect_diviseur.largeur)

    retourne résultat_gauche, résultat_droite
}

/* Retourne un rectangle interne à `rect`.
 * Le rectangle retourné aura la `largeur` donnée, et sera centré à la
 * position relative à la largeur de du rectangle d'origine.
 */
donne_rect_interne_vertical :: fonc (rect: RectanglePosDim($T), position_relative: r32, largeur: T) -> RectanglePosDim(T)
{
    position := Point2D(r32)(position_relative, 1.0)
    point := rect.position_interne(position)

    résultat : RectanglePosDim(T) = ---
    résultat.x = point.x - largeur / 2
    résultat.largeur = largeur
    résultat.y = rect.y
    résultat.hauteur = rect.hauteur
    retourne résultat
}

/* Retourne les positions des coins du rectangle dans l'ordre suivant :
 *    3 +--------+ 2
 *      |        |
 *      |        |
 *      |        |
 *    0 +--------+ 1
 */
donne_positions_coins :: fonc (rect: RectanglePosDim($T)) -> [4]Point2D(T)
{
    résultat : [4]Point2D(T) = ---

    résultat[0].x = rect.x
    résultat[0].y = rect.y

    résultat[1].x = rect.x + rect.largeur
    résultat[1].y = rect.y

    résultat[2].x = rect.x + rect.largeur
    résultat[2].y = rect.y + rect.hauteur

    résultat[3].x = rect.x
    résultat[3].y = rect.y + rect.hauteur

    retourne résultat
}

intersecte :: fonc (r1: RectanglePosDim($T), r2: RectanglePosDim(T)) -> bool
{
    r1_gauche := r1.x
    r1_droite := r1.x + r1.largeur
    r1_haut := r1.y
    r1_bas := r1.y + r1.hauteur

    r2_gauche := r2.x
    r2_droite := r2.x + r2.largeur
    r2_haut := r2.y
    r2_bas := r2.y + r2.hauteur

    retourne r1_gauche <= r2_droite && r1_droite >= r2_gauche && r1_haut <= r2_bas && r1_bas >= r2_haut
}


intersecte_ligne_rectangle :: fonc (p1: Point2D($T), p2: Point2D(T), r: RectanglePosDim(T)) -> bool
{
    /* Si les boites englobantes ne se superposent pas, on ne peut s'intersectionner. */
    saufsi intersecte(crée_rectangle_pos_dim(p1, p2), r) {
        retourne faux
    }

    si p1 == p2 {
        retourne contient(r, p1)
    }

    positions := donne_positions_coins(r)

    si instersecte_lignes(p1, p2, positions[3], positions[0]) {
        retourne vrai
    }
    si instersecte_lignes(p1, p2, positions[3], positions[2]) {
        retourne vrai
    }
    si instersecte_lignes(p1, p2, positions[1], positions[2]) {
        retourne vrai
    }
    si instersecte_lignes(p1, p2, positions[1], positions[0]) {
        retourne vrai
    }

    retourne contient(r, p1) || contient(r, p2)
}
/** \} */

/* ------------------------------------------------------------------------- */
/** \nom RectanglePur
 * Un rectangle pur est défini selon ses limites x et y dans l'espace
 * Cartésien.
 * \{ */

RectanglePur :: struct ($T: type_de_données) {
    /* X min. */
    gauche: T
    /* X max. */
    droite: T
    /* Y min. */
    haut: T
    /* Y max. */
    bas: T
}

/* À FAIRE(langage) : les fonctions ne sont pas sélectionnées si nous n'avons pas de références. */
donne_largeur :: fonc (rect: &RectanglePur($T)) -> T
{
    retourne rect.droite - rect.gauche
}

donne_hauteur :: fonc (rect: &RectanglePur($T)) -> T
{
    retourne rect.haut - rect.bas
}

/* Limite `rect` afin que ses positions ne dépassent pas celles de `bornes`. */
découpe_selon :: fonc (rect: &RectanglePur($T), bornes: RectanglePur(T))
{
    si rect.donne_largeur() > bornes.donne_largeur() {
        rect.gauche = bornes.gauche
        rect.droite = bornes.droite
    }
    si rect.donne_hauteur() > bornes.donne_hauteur() {
        rect.bas = bornes.bas
        rect.haut = bornes.haut
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Cercle
 * \{ */

Cercle :: struct ($T: type_de_données) {
    centre_x: T
    centre_y: T
    rayon: T
}

réduis :: fonc (cercle: &Cercle($T), taille: T)
{
    si taille >= cercle.rayon {
        cercle.rayon = 0
    }

    cercle.rayon -= taille
}

/** \} */
