/* Module de représentation de formes géométriques. */

/* ------------------------------------------------------------------------- */
/** \nom Point2D
 * \{ */

Point2D :: struct ($T: type_de_données) {
    x: T @mutable
    y: T @mutable
}

opérateur == :: fonc (p0: Point2D(z32), p1: Point2D(z32)) -> bool
{
    retourne p0.x == p1.x && p0.y == p1.y
}

opérateur == :: fonc (p0: Point2D(r32), p1: Point2D(r32)) -> bool
{
    retourne p0.x == p1.x && p0.y == p1.y
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Ligne
 * \{ */

Ligne :: struct ($T: type_de_données) {
    p0: Point2D(T)
    p1: Point2D(T)
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Triangle
 * \{ */

Triangle :: struct ($T: type_de_données) {
    p0: Point2D(T)
    p1: Point2D(T)
    p2: Point2D(T)
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom RectanglePosDim
 * Rectangle défini selon sa position dans l'espace, ainsi que ses dimensions,
 * hauteur et largeur, à partir de cette position.
 * \{ */

RectanglePosDim :: struct ($T: type_de_données) {
    x: T @mutable
    y: T @mutable
    hauteur: T @mutable
    largeur: T @mutable
}

réduis :: fonc (rect: &RectanglePosDim($T), taille: T)
{
    rect.x += taille
    rect.y += taille
    rect.hauteur -= taille * 2
    rect.largeur -= taille * 2
}

donne_position :: fonc (rect: RectanglePosDim($T)) -> Point2D(T) #enligne
{
    retourne Point2D(T)(rect.x, rect.y)
}

contient :: fonc (rect: RectanglePosDim($T), x: T, y: T) -> bool
{
    saufsi rect.x <= x <= (rect.x + rect.largeur) {
        retourne faux
    }

    saufsi rect.y <= y <= (rect.y + rect.hauteur) {
        retourne faux
    }

    retourne vrai
} @Python "méthode"

contient :: fonc (rect: RectanglePosDim($T), point: Point2D(T)) -> bool
{
    retourne contient(rect, point.x, point.y)
}

/* À FAIRE(langage) : les polymorphes ne font pas partie des fonctions_parsées
 * de la compilatrice. Quand nous représenterons les types dans l'arbre syntaxique
 * il faudra avoir un système pour passer les fonctions/types polymorphiques aux
 * métaprogrammes. */
contient :: fonc (rect: RectanglePosDim(r32), point: Point2D(r32)) -> bool
{
    retourne contient(rect, point.x, point.y)
} @Python "méthode"

donne_point_central :: fonc (rect: RectanglePosDim($T)) -> Point2D(T)
{
    retourne Point2D(T)(rect.x + rect.largeur / 2, rect.y + rect.hauteur / 2)
}

donne_point_central :: fonc (rect: RectanglePosDim(r32)) -> Point2D(r32)
{
    retourne Point2D(r32)(rect.x + rect.largeur / 2, rect.y + rect.hauteur / 2)
} @Python "méthode"

position_interne :: fonc (rect:  RectanglePosDim($T), pos: Point2D(r32)) -> Point2D(T)
{
    résultat: Point2D(T) = ---
    résultat.x = ((rect.largeur comme r32) * pos.x) comme T
    résultat.y = ((rect.hauteur comme r32) * pos.y) comme T
    résultat.x += rect.x
    résultat.y += rect.y
    retourne résultat
}

/* Divise le rect verticalement selon le rect_diviseur.
 * Retourne, dans l'ordre, le rectangle à gauche du rect_diviseur, et celui à droite.
 * Cette fonction présume que rect_diviseur se trouve dans rect.
 */
divise_verticalement :: fonc (rect: RectanglePosDim($T), rect_diviseur: RectanglePosDim(T)) -> (RectanglePosDim(T), RectanglePosDim(T))
{
    résultat_gauche := rect
    résultat_gauche.largeur = rect_diviseur.x

    résultat_droite := rect
    résultat_droite.x = rect_diviseur.x + rect_diviseur.largeur
    résultat_droite.largeur = rect.largeur - (résultat_gauche.largeur + rect_diviseur.largeur)

    retourne résultat_gauche, résultat_droite
}

/* Retourne un rectangle interne à `rect`.
 * Le rectangle retourné aura la `largeur` donnée, et sera centré à la
 * position relative à la largeur de du rectangle d'origine.
 */
donne_rect_interne_vertical :: fonc (rect: RectanglePosDim($T), position_relative: r32, largeur: T) -> RectanglePosDim(T)
{
    position := Point2D(r32)(position_relative, 1.0)
    point := rect.position_interne(position)

    résultat : RectanglePosDim(T) = ---
    résultat.x = point.x - largeur / 2
    résultat.largeur = largeur
    résultat.y = rect.y
    résultat.hauteur = rect.hauteur
    retourne résultat
}

/* Retourne les positions des coins du rectangle dans l'ordre suivant :
 *    3 +--------+ 2
 *      |        |
 *      |        |
 *      |        |
 *    0 +--------+ 1
 */
donne_positions_coins :: fonc (rect: RectanglePosDim($T)) -> [4]Point2D(T)
{
    résultat : [4]Point2D(T) = ---

    résultat[0].x = rect.x
    résultat[0].y = rect.y

    résultat[1].x = rect.x + rect.largeur
    résultat[1].y = rect.y

    résultat[2].x = rect.x + rect.largeur
    résultat[2].y = rect.y + rect.hauteur

    résultat[3].x = rect.x
    résultat[3].y = rect.y + rect.hauteur

    retourne résultat
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom RectanglePur
 * Un rectangle pur est défini selon ses limites x et y dans l'espace
 * Cartésien.
 * \{ */

RectanglePur :: struct ($T: type_de_données) {
    /* X min. */
    gauche: T
    /* X max. */
    droite: T
    /* Y min. */
    haut: T
    /* Y max. */
    bas: T
}

/* À FAIRE(langage) : les fonctions ne sont pas sélectionnées si nous n'avons pas de références. */
donne_largeur :: fonc (rect: &RectanglePur($T)) -> T
{
    retourne rect.droite - rect.gauche
}

donne_hauteur :: fonc (rect: &RectanglePur($T)) -> T
{
    retourne rect.haut - rect.bas
}

/* Limite `rect` afin que ses positions ne dépassent pas celles de `bornes`. */
découpe_selon :: fonc (rect: &RectanglePur($T), bornes: RectanglePur(T))
{
    si rect.donne_largeur() > bornes.donne_largeur() {
        rect.gauche = bornes.gauche
        rect.droite = bornes.droite
    }
    si rect.donne_hauteur() > bornes.donne_hauteur() {
        rect.bas = bornes.bas
        rect.haut = bornes.haut
    }
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Cercle
 * \{ */

Cercle :: struct ($T: type_de_données) {
    centre_x: T
    centre_y: T
    rayon: T
}

réduis :: fonc (cercle: &Cercle($T), taille: T)
{
    si taille >= cercle.rayon {
        cercle.rayon = 0
    }

    cercle.rayon -= taille
}

/** } */
