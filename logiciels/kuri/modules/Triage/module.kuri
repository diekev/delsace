importe Algorithmes

tri_par_sélection :: fonc (éléments: [..]$T, comparaison: fonc(T, T)(bool)) -> rien
{
    pour i dans 0 ... éléments.taille - 2 {
        index_min : z64 = i

        pour j dans i + 1 comme z64 ... éléments.taille - 1 {
            si comparaison(éléments[j], éléments[index_min]) {
                index_min = j
            }
        }

        permute(*éléments[i], *éléments[index_min])
    }
}

tri_rapide :: fonc (éléments: [..]$T, $Comparaison: fonc(T, T)(z32))
{
    premier := éléments.pointeur
    dernier := premier + éléments.taille

    tri_rapide(premier, dernier, Comparaison)
}

tri_rapide :: fonc (premier: *$T, dernier: *T, $Comparaison: fonc(T, T)(z32))
{
    si distance(premier, dernier) <= 1 {
        /* Retourne si la tranche est vide ou invalide. */
        retourne
    }

    /* Détermine le pivot. */
    pivot := partition_tri_rapide(premier, dernier, Comparaison)

    /* Appel récursif. Les éléments dont la valeur retournée pa \a Comparaison
     * est plus petite que celle du pivot sont placés à gauche, les autres à
     * droite. */   
    tri_rapide(premier, pivot, Comparaison)
    tri_rapide(pivot + 1, dernier, Comparaison)
}

partition_tri_rapide :: fonc (premier: *$T, dernier: *T, $Comparaison: fonc(T, T)(z32)) -> *T
{
    /* Le pivot est l'élément médian. */
    position_pivot := premier + distance(premier, dernier) / 2
    pivot := mémoire(position_pivot)

    i := premier
    j := dernier - 1

    boucle {
        tantque i < dernier && Comparaison(mémoire(i), pivot) < 0 {
            i += 1
        }

        tantque j > premier && Comparaison(mémoire(j), pivot) >= 0 {
            j -= 1
        }

        si i >= j {
            arrête
        }

        permute(i, j)
    }

    permute(i, position_pivot)
    retourne i
}
