importe Introspection

/* ------------------------------------------------------------------------- */
/** \nom Types.
 * \{ */

Elf32_Half :: n16
Elf64_Half :: n16

/* Types for signed and unsigned 32-bit quantities.  */
Elf32_Word :: n32
Elf32_Sword :: z32
Elf64_Word :: n32
Elf64_Sword :: z32

/* Types for signed and unsigned 64-bit quantities.  */
Elf32_Xword :: n64
Elf32_Sxword :: z64
Elf64_Xword :: n64
Elf64_Sxword :: z64

/* Type of addresses.  */
Elf32_Addr :: n32
Elf64_Addr :: n64

/* Type of file offsets.  */
Elf32_Off :: n32
Elf64_Off :: n64

/* Type for section indices, which are 16-bit quantities.  */
Elf32_Section :: n16
Elf64_Section :: n16

/* Type for version symbol information.  */
Elf32_Versym :: Elf32_Half
Elf64_Versym :: Elf64_Half

/** \} */

/* The ELF file header.  This appears at the start of every ELF file.  */

EI_NIDENT :: 16

Elf32_Ehdr :: struct {
  e_ident: [EI_NIDENT]n8	/* Magic number and other info */
  e_type: Elf32_Half			/* Object file type */
  e_machine: Elf32_Half		/* Architecture */
  e_version: Elf32_Word		/* Object file version */
  e_entry: Elf32_Addr		/* Entry point virtual address */
  e_phoff: Elf32_Off		/* Program header table file offset */
  e_shoff: Elf32_Off		/* Section header table file offset */
  e_flags: Elf32_Word		/* Processor-specific flags */
  e_ehsize: Elf32_Half		/* ELF header size in bytes */
  e_phentsize: Elf32_Half		/* Program header table entry size */
  e_phnum: Elf32_Half		/* Program header table entry count */
  e_shentsize: Elf32_Half		/* Section header table entry size */
  e_shnum: Elf32_Half		/* Section header table entry count */
  e_shstrndx: Elf32_Half		/* Section header string table index */
}

Elf64_Ehdr :: struct {
    e_ident: [EI_NIDENT]n8	/* Magic number and other info */
    e_type: Elf64_Half			/* Object file type */
    e_machine: Elf64_Half		/* Architecture */
    e_version: Elf64_Word		/* Object file version */
    e_entry: Elf64_Addr		/* Entry point virtual address */
    e_phoff: Elf64_Off		/* Program header table file offset */
    e_shoff: Elf64_Off		/* Section header table file offset */
    e_flags: Elf64_Word		/* Processor-specific flags */
    e_ehsize: Elf64_Half		/* ELF header size in bytes */
    e_phentsize: Elf64_Half		/* Program header table entry size */
    e_phnum: Elf64_Half		/* Program header table entry count */
    e_shentsize: Elf64_Half		/* Section header table entry size */
    e_shnum: Elf64_Half		/* Section header table entry count */
    e_shstrndx: Elf64_Half		/* Section header string table index */
}

/* Section header.  */

Elf32_Shdr :: struct {
    sh_name: Elf32_Word		/* Section name (string tbl index) */
    sh_type: Elf32_Word		/* Section type */
    sh_flags: Elf32_Word		/* Section flags */
    sh_addr: Elf32_Addr		/* Section virtual addr at execution */
    sh_offset: Elf32_Off		/* Section file offset */
    sh_size: Elf32_Word		/* Section size in bytes */
    sh_link: Elf32_Word		/* Link to another section */
    sh_info: Elf32_Word		/* Additional section information */
    sh_addralign: Elf32_Word		/* Section alignment */
    sh_entsize: Elf32_Word		/* Entry size if section holds table */
}

Elf64_Shdr :: struct {
    sh_name: Elf64_Word /* Section name (string tbl index) */
    sh_type: Elf64_Word /* Section type */
    sh_flags: Elf64_Xword /* Section flags */
    sh_addr: Elf64_Addr /* Section virtual addr at execution */
    sh_offset: Elf64_Off /* Section file offset */
    sh_size: Elf64_Xword /* Section size in bytes */
    sh_link: Elf64_Word /* Link to another section */
    sh_info: Elf64_Word /* Additional section information */
    sh_addralign: Elf64_Xword /* Section alignment */
    sh_entsize: Elf64_Xword /* Entry size if section holds table */
}

/* Symbol table entry.  */

Elf32_Sym :: struct {
    st_name: Elf32_Word		/* Symbol name (string tbl index) */
    st_value: Elf32_Addr		/* Symbol value */
    st_size: Elf32_Word		/* Symbol size */
    st_info: n8		/* Symbol type and binding */
    st_other: n8		/* Symbol visibility */
    st_shndx: Elf32_Section		/* Section index */
}

Elf64_Sym :: struct {
    st_name: Elf64_Word /* Symbol name (string tbl index) */
    st_info: n8 /* Symbol type and binding */
    st_other: n8 /* Symbol visibility */
    st_shndx: Elf64_Section /* Section index */
    st_value: Elf64_Addr /* Symbol value */
    st_size: Elf64_Xword /* Symbol size */
}

/* Dynamic section entry.  */

Elf32_Dyn :: struct {
    d_tag: Elf32_Sword            /* Dynamic entry type */
    d_un_t :: union nonsûr {
        d_val: Elf32_Word        /* Integer value */
        d_ptr: Elf32_Addr        /* Address value */
    }
    d_un: d_un_t
}

Elf64_Dyn :: struct {
    d_tag: Elf64_Sxword            /* Dynamic entry type */
    d_un_t :: union nonsûr {
        d_val: Elf64_Xword        /* Integer value */
        d_ptr: Elf64_Addr        /* Address value */
    }
    d_un: d_un_t
}

/* Legal values for d_tag (dynamic entry type).  */

DT_NULL ::        0        /* Marks end of dynamic section */
DT_NEEDED ::    1        /* Name of needed library */
DT_PLTRELSZ ::    2        /* Size in bytes of PLT relocs */
DT_PLTGOT ::    3        /* Processor defined value */
DT_HASH ::        4        /* Address of symbol hash table */
DT_STRTAB ::    5        /* Address of string table */
DT_SYMTAB ::    6        /* Address of symbol table */
DT_RELA ::        7        /* Address of Rela relocs */
DT_RELASZ ::    8        /* Total size of Rela relocs */
DT_RELAENT ::    9        /* Size of one Rela reloc */
DT_STRSZ ::    10        /* Size of string table */
DT_SYMENT ::    11        /* Size of one symbol table entry */
DT_INIT ::        12        /* Address of init function */
DT_FINI ::        13        /* Address of termination function */
DT_SONAME ::    14        /* Name of shared object */
DT_RPATH ::    15        /* Library search path (deprecated) */
DT_SYMBOLIC ::    16        /* Start symbol search here */
DT_REL ::        17        /* Address of Rel relocs */
DT_RELSZ ::    18        /* Total size of Rel relocs */
DT_RELENT ::    19        /* Size of one Rel reloc */
DT_PLTREL ::    20        /* Type of reloc in PLT */
DT_DEBUG ::    21        /* For debugging; unspecified */
DT_TEXTREL ::    22        /* Reloc might modify .text */
DT_JMPREL ::    23        /* Address of PLT relocs */
DT_BIND_NOW ::    24        /* Process relocations of object */
DT_INIT_ARRAY ::    25        /* Array with addresses of init fct */
DT_FINI_ARRAY ::    26        /* Array with addresses of fini fct */
DT_INIT_ARRAYSZ ::    27        /* Size in bytes of DT_INIT_ARRAY */
DT_FINI_ARRAYSZ ::    28        /* Size in bytes of DT_FINI_ARRAY */
DT_RUNPATH ::    29        /* Library search path */
DT_FLAGS ::    30        /* Flags for the object being loaded */
DT_ENCODING ::    32        /* Start of encoded range */
DT_PREINIT_ARRAY :: 32        /* Array with addresses of preinit fct*/
DT_PREINIT_ARRAYSZ :: 33        /* size in bytes of DT_PREINIT_ARRAY */
DT_NUM ::        34        /* Number used */
DT_LOOS ::        0x6000000d    /* Start of OS-specific */
DT_HIOS ::        0x6ffff000    /* End of OS-specific */
DT_LOPROC ::    0x70000000    /* Start of processor-specific */
DT_HIPROC ::    0x7fffffff    /* End of processor-specific */
// DT_PROCNUM ::    DT_MIPS_NUM    /* Most used by any processor */


/* DT_* entries which fall between DT_VALRNGHI & DT_VALRNGLO use the
   Dyn.d_un.d_val field of the Elf*_Dyn structure.  This follows Sun's
   approach.  */
DT_VALRNGLO ::    0x6ffffd00
DT_GNU_PRELINKED :: 0x6ffffdf5    /* Prelinking timestamp */
DT_GNU_CONFLICTSZ :: 0x6ffffdf6    /* Size of conflict section */
DT_GNU_LIBLISTSZ :: 0x6ffffdf7    /* Size of library list */
DT_CHECKSUM ::    0x6ffffdf8
DT_PLTPADSZ ::    0x6ffffdf9
DT_MOVEENT ::    0x6ffffdfa
DT_MOVESZ ::    0x6ffffdfb
DT_FEATURE_1 ::    0x6ffffdfc    /* Feature selection (DTF_*).  */
DT_POSFLAG_1 ::    0x6ffffdfd    /* Flags for DT_* entries, effecting
                       the following DT_* entry.  */
DT_SYMINSZ ::    0x6ffffdfe    /* Size of syminfo table (in bytes) */
DT_SYMINENT ::    0x6ffffdff    /* Entry size of syminfo */
DT_VALRNGHI ::    0x6ffffdff
// DT_VALTAGIDX ::(tag)    (DT_VALRNGHI - (tag))    /* Reverse order! */
DT_VALNUM :: 12

/* DT_* entries which fall between DT_ADDRRNGHI & DT_ADDRRNGLO use the
   Dyn.d_un.d_ptr field of the Elf*_Dyn structure.

   If any adjustment is made to the ELF object after it has been
   built these entries will need to be adjusted.  */
DT_ADDRRNGLO ::    0x6ffffe00
DT_GNU_CONFLICT ::    0x6ffffef8    /* Start of conflict section */
DT_GNU_LIBLIST ::    0x6ffffef9    /* Library list */
DT_CONFIG ::    0x6ffffefa    /* Configuration information.  */
DT_DEPAUDIT ::    0x6ffffefb    /* Dependency auditing.  */
DT_AUDIT ::    0x6ffffefc    /* Object auditing.  */
DT_PLTPAD ::    0x6ffffefd    /* PLT padding.  */
DT_MOVETAB ::    0x6ffffefe    /* Move table.  */
DT_SYMINFO ::    0x6ffffeff    /* Syminfo table.  */
DT_ADDRRNGHI ::    0x6ffffeff
// DT_ADDRTAGIDX ::(tag)    (DT_ADDRRNGHI - (tag))    /* Reverse order! */
DT_ADDRNUM :: 10

/* The versioning entry types.  The next are defined as part of the
   GNU extension.  */
DT_VERSYM ::    0x6ffffff0

DT_RELACOUNT ::    0x6ffffff9
DT_RELCOUNT ::    0x6ffffffa

/* These were chosen by Sun.  */
DT_FLAGS_1 ::    0x6ffffffb    /* State flags, see DF_1_* below.  */
DT_VERDEF ::    0x6ffffffc    /* Address of version definition
                       table */
DT_VERDEFNUM ::    0x6ffffffd    /* Number of version definitions */
DT_VERNEED ::    0x6ffffffe    /* Address of table with needed
                       versions */
DT_VERNEEDNUM ::    0x6fffffff    /* Number of needed versions */
// DT_VERSIONTAGIDX ::(tag)    (DT_VERNEEDNUM - (tag))    /* Reverse order! */
DT_VERSIONTAGNUM :: 16

/* Sun added these machine-independent extensions in the "processor-specific"
   range.  Be compatible.  */
DT_AUXILIARY ::    0x7ffffffd      /* Shared object to load before self */
DT_FILTER ::       0x7fffffff      /* Shared object to get values from */
// DT_EXTRATAGIDX ::(tag)    ((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)
DT_EXTRANUM ::    3

/* Values of `d_un.d_val' in the DT_FLAGS entry.  */
DF_ORIGIN ::    0x00000001    /* Object may use DF_ORIGIN */
DF_SYMBOLIC ::    0x00000002    /* Symbol resolutions starts here */
DF_TEXTREL ::    0x00000004    /* Object contains text relocations */
DF_BIND_NOW ::    0x00000008    /* No lazy binding for this object */
DF_STATIC_TLS ::    0x00000010    /* Module uses the static TLS model */

/* State flags selectable in the `d_un.d_val' element of the DT_FLAGS_1
   entry in the dynamic section.  */
DF_1_NOW ::    0x00000001    /* Set RTLD_NOW for this object.  */
DF_1_GLOBAL ::    0x00000002    /* Set RTLD_GLOBAL for this object.  */
DF_1_GROUP ::    0x00000004    /* Set RTLD_GROUP for this object.  */
DF_1_NODELETE ::    0x00000008    /* Set RTLD_NODELETE for this object.*/
DF_1_LOADFLTR ::    0x00000010    /* Trigger filtee loading at runtime.*/
DF_1_INITFIRST ::    0x00000020    /* Set RTLD_INITFIRST for this object*/
DF_1_NOOPEN ::    0x00000040    /* Set RTLD_NOOPEN for this object.  */
DF_1_ORIGIN ::    0x00000080    /* $ORIGIN must be handled.  */
DF_1_DIRECT ::    0x00000100    /* Direct binding enabled.  */
DF_1_TRANS ::    0x00000200
DF_1_INTERPOSE ::    0x00000400    /* Object is used to interpose.  */
DF_1_NODEFLIB ::    0x00000800    /* Ignore default lib search path.  */
DF_1_NODUMP ::    0x00001000    /* Object can't be dldump'ed.  */
DF_1_CONFALT ::    0x00002000    /* Configuration alternative created.*/
DF_1_ENDFILTEE ::    0x00004000    /* Filtee terminates filters search. */
DF_1_DISPRELDNE ::    0x00008000    /* Disp reloc applied at build time. */
DF_1_DISPRELPND ::    0x00010000    /* Disp reloc applied at run-time.  */

/* Flags for the feature selection in DT_FEATURE_1.  */
DTF_1_PARINIT ::    0x00000001
DTF_1_CONFEXP ::    0x00000002

/* Flags in the DT_POSFLAG_1 entry effecting only the next DT_* entry.  */
DF_P1_LAZYLOAD ::    0x00000001    /* Lazyload following object.  */
DF_P1_GROUPPERM ::    0x00000002    /* Symbols from next object are not
                       generally available.  */

donne_chaine_pour_dynamic_tag :: fonc (tag: Elf64_Sxword) -> chaine
#corps_texte {
    retourne corps_fonction_chaine_pour_constantes(#chemin_de_ce_fichier, "DT_NULL", "DT_", "tag")
}

/* Note section contents.  Each entry in the note section begins with
   a header of a fixed form.  */

Elf32_Nhdr :: struct {
    n_namesz: Elf32_Word            /* Length of the note's name.  */
    n_descsz: Elf32_Word            /* Length of the note's descriptor.  */
    n_type: Elf32_Word            /* Type of the note.  */
}

Elf64_Nhdr :: struct {
    n_namesz: Elf64_Word            /* Length of the note's name.  */
    n_descsz: Elf64_Word            /* Length of the note's descriptor.  */
    n_type: Elf64_Word            /* Type of the note.  */
}

/* Known names of notes.  */

/* Solaris entries in the note section have this name.  */
ELF_NOTE_SOLARIS ::    "SUNW Solaris"

/* Note entries for GNU systems have this name.  */
ELF_NOTE_GNU ::        "GNU"

/* Note entries for freedesktop.org have this name.  */
ELF_NOTE_FDO ::        "FDO"

/* Defined types of notes for Solaris.  */

/* Value of descriptor (one word) is desired pagesize for the binary.  */
ELF_NOTE_PAGESIZE_HINT ::    1


/* Defined note types for GNU systems.  */

/* ABI information.  The descriptor consists of words:
   word 0: OS descriptor
   word 1: major version of the ABI
   word 2: minor version of the ABI
   word 3: subminor version of the ABI
*/
NT_GNU_ABI_TAG : n32 :    1
ELF_NOTE_ABI ::    NT_GNU_ABI_TAG /* Old name.  */

/* Known OSes.  These values can appear in word 0 of an
   NT_GNU_ABI_TAG note section entry.  */
ELF_NOTE_OS_LINUX : n32 :    0
ELF_NOTE_OS_GNU : n32 :        1
ELF_NOTE_OS_SOLARIS2 : n32 :    2
ELF_NOTE_OS_FREEBSD : n32 :    3

/* Synthetic hwcap information.  The descriptor begins with two words:
   word 0: number of entries
   word 1: bitmask of enabled entries
   Then follow variable-length entries, one byte followed by a
   '\0'-terminated hwcap name string.  The byte gives the bit
   number to test if enabled, (1U << bit) & bitmask.  */
NT_GNU_HWCAP : n32 :    2

/* Build ID bits as generated by ld --build-id.
   The descriptor consists of any nonzero number of bytes.  */
NT_GNU_BUILD_ID : n32 :    3

/* Version note generated by GNU gold containing a version string.  */
NT_GNU_GOLD_VERSION : n32 :    4

/* Program property.  */
NT_GNU_PROPERTY_TYPE_0 : n32 : 5

/* Packaging metadata as defined on
   https://systemd.io/COREDUMP_PACKAGE_METADATA/ */
NT_FDO_PACKAGING_METADATA : n32 : 0xcafe1a7e

/* Note section name of program property.   */
NOTE_GNU_PROPERTY_SECTION_NAME :: ".note.gnu.property"

/* Values used in GNU .note.gnu.property notes (NT_GNU_PROPERTY_TYPE_0).  */

/* Stack size.  */
GNU_PROPERTY_STACK_SIZE ::            1
/* No copy relocation on protected data symbol.  */
GNU_PROPERTY_NO_COPY_ON_PROTECTED ::    2

/* A 4-byte unsigned integer property: A bit is set if it is set in all
   relocatable inputs.  */
GNU_PROPERTY_UINT32_AND_LO ::    0xb0000000
GNU_PROPERTY_UINT32_AND_HI ::    0xb0007fff

/* A 4-byte unsigned integer property: A bit is set if it is set in any
   relocatable inputs.  */
GNU_PROPERTY_UINT32_OR_LO ::    0xb0008000
GNU_PROPERTY_UINT32_OR_HI ::    0xb000ffff

/* The needed properties by the object file.  */
GNU_PROPERTY_1_NEEDED ::        GNU_PROPERTY_UINT32_OR_LO

/* Set if the object file requires canonical function pointers and
   cannot be used with copy relocation.  */
GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS : n32 : (1 << 0)

/* Processor-specific semantics, lo */
GNU_PROPERTY_LOPROC ::            0xc0000000
/* Processor-specific semantics, hi */
GNU_PROPERTY_HIPROC ::            0xdfffffff
/* Application-specific semantics, lo */
GNU_PROPERTY_LOUSER ::            0xe0000000
/* Application-specific semantics, hi */
GNU_PROPERTY_HIUSER ::            0xffffffff

/* AArch64 specific GNU properties.  */
GNU_PROPERTY_AARCH64_FEATURE_1_AND ::    0xc0000000

GNU_PROPERTY_AARCH64_FEATURE_1_BTI : n32 :    (1 << 0)
GNU_PROPERTY_AARCH64_FEATURE_1_PAC : n32 :    (1 << 1)

/* The x86 instruction sets indicated by the corresponding bits are
   used in program.  Their support in the hardware is optional.  */
GNU_PROPERTY_X86_ISA_1_USED : n32 :        0xc0010002
/* The x86 instruction sets indicated by the corresponding bits are
   used in program and they must be supported by the hardware.   */
GNU_PROPERTY_X86_ISA_1_NEEDED : n32 :        0xc0008002
/* X86 processor-specific features used in program.  */
GNU_PROPERTY_X86_FEATURE_1_AND : n32 :        0xc0000002

/* GNU_PROPERTY_X86_ISA_1_BASELINE: CMOV, CX8 (cmpxchg8b), FPU (fld),
   MMX, OSFXSR (fxsave), SCE (syscall), SSE and SSE2.  */
GNU_PROPERTY_X86_ISA_1_BASELINE : n32 :        (1 << 0)
/* GNU_PROPERTY_X86_ISA_1_V2: GNU_PROPERTY_X86_ISA_1_BASELINE,
   CMPXCHG16B (cmpxchg16b), LAHF-SAHF (lahf), POPCNT (popcnt), SSE3,
   SSSE3, SSE4.1 and SSE4.2.  */
GNU_PROPERTY_X86_ISA_1_V2 : n32 :        (1 << 1)
/* GNU_PROPERTY_X86_ISA_1_V3: GNU_PROPERTY_X86_ISA_1_V2, AVX, AVX2, BMI1,
   BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE.  */
GNU_PROPERTY_X86_ISA_1_V3 : n32 :        (1 << 2)
/* GNU_PROPERTY_X86_ISA_1_V4: GNU_PROPERTY_X86_ISA_1_V3, AVX512F,
   AVX512BW, AVX512CD, AVX512DQ and AVX512VL.  */
GNU_PROPERTY_X86_ISA_1_V4 : n32 :        (1 << 3)

/* This indicates that all executable sections are compatible with
   IBT.  */
GNU_PROPERTY_X86_FEATURE_1_IBT : n32 :        (1 << 0)
/* This indicates that all executable sections are compatible with
   SHSTK.  */
GNU_PROPERTY_X86_FEATURE_1_SHSTK : n32 :    (1 << 1)

donne_chaine_pour_note_type :: fonc (type: Elf64_Word) -> chaine
#corps_texte {
    retourne corps_fonction_chaine_pour_constantes(#chemin_de_ce_fichier, "NT_GNU_ABI_TAG", "NT_", "type")
}

/* Relocation table entry without addend (in section of type SHT_REL).  */

Elf32_Rel :: struct {
    r_offset: Elf32_Addr   /* Address */
    r_info: Elf32_Word   /* Relocation type and symbol index */
}

/* I have seen two different definitions of the Elf64_Rel and
   Elf64_Rela structures, so we'll leave them out until Novell (or
   whoever) gets their act together.  */
/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */

Elf64_Rel :: struct {
    r_offset: Elf64_Addr   /* Address */
    r_info: Elf64_Xword   /* Relocation type and symbol index */
}

/* Relocation table entry with addend (in section of type SHT_RELA).  */

Elf32_Rela :: struct {
    r_offset: Elf32_Addr    /* Address */
    r_info: Elf32_Word    /* Relocation type and symbol index */
    r_addend: Elf32_Sword    /* Addend */
}

Elf64_Rela :: struct {
    r_offset: Elf64_Addr    /* Address */
    r_info: Elf64_Xword    /* Relocation type and symbol index */
    r_addend: Elf64_Sxword    /* Addend */
}

/* How to extract and insert information held in the r_info field.  */

ELF32_R_SYM :: fonc (val: Elf32_Word) -> Elf32_Word #enligne
{
    retourne val >> 8
}

ELF32_R_TYPE :: fonc (val: Elf32_Word) -> Elf32_Word #enligne
{
    retourne val & 0xff
}

ELF32_R_TYPE :: fonc (sym: Elf32_Word, type: Elf32_Word) -> Elf32_Word #enligne
{
    retourne (sym << 8) + (type & 0xff)
}

ELF64_R_SYM :: fonc (i: Elf64_Xword) -> Elf64_Xword #enligne
{
    retourne i >> 32
}

ELF64_R_TYPE :: fonc (i: Elf64_Xword) -> Elf64_Xword #enligne
{
    retourne i & 0xffffffff
}

ELF64_R_INFO :: fonc (sym: Elf64_Xword, type: Elf64_Xword) -> Elf64_Xword #enligne
{
    retourne (sym << 32) + type
}
