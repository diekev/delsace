importe Algorithmes
importe Fondation

Pile :: struct ($T: type_de_données) {
    données : []T
}

détruit :: fonc (pile : &Pile(T = $T)) -> rien
{
    déloge(pile.données)
}

empile :: fonc (pile : &Pile(T = $T), valeur : T) -> rien
{
    tableau_ajoute(*pile.données, valeur)
}

dépile :: fonc (pile : &Pile(T = $T)) -> T #enligne
{
    ret := pile.tête()
    pile.données.taille -= 1
    retourne ret
}

tête :: fonc (pile : &Pile(T = $T)) -> T #enligne
{
    retourne pile.données[pile.données.taille - 1]
}

taille :: fonc (pile : &Pile(T = $T)) -> z64 #enligne
{
    retourne pile.données.taille
}

est_vide :: fonc (pile : &Pile(T = $T)) -> bool #enligne
{
    retourne pile.données.taille == 0
}

/* Duplique l'élément de tête.
 * Si la pile n'a pas au moins un élément, ne fait rien.
 */
duplique_tête :: fonc (pile: &Pile(T = $T))
{
    si pile.est_vide() {
        retourne
    }

    pile.empile(pile.tête())
}

/* Échange l'élément de tête avec celui le précédent.
 * Si la pile n'a pas au moins deux éléments, ne fait rien.
 */
échange_tête :: fonc (pile: &Pile(T = $T))
{
    si pile.taille() < 2 {
        retourne
    }

    a := pile.dépile()
    b := pile.dépile()

    pile.empile(a)
    pile.empile(b)
}

/* Inverse l'ordre des éléments de la pile. */
renverse :: fonc (pile: &Pile(T = $T))
{
    tableau_inverse(pile.données)
}

/*
principale :: fonc () -> z32
{
    pile : Pile(T = z32)

    pour 0 ... 10 {
        pile.empile(it)
    }

    pile.échange_tête()

    pile.duplique_tête()

    tantque !pile.est_vide() {
        imprime("%\n", pile.tête())
        _ := pile.dépile()
    }

    pile.détruit()

    retourne 0
}
*/
