/* Filtre de Bloom. */

importe EnsembleDeBits

FiltreDeBloom :: struct {
    bits: EnsembleDeBits
}

possède_peut_être :: fonc (filtre: &FiltreDeBloom, clé: chaine) -> bool
{
    retourne filtre.bits.est_actif(empreinte1(clé)) && filtre.bits.est_actif(empreinte2(clé)) && (clé.taille < 2 || filtre.bits.est_actif(empreinte3(clé)))
}

ajoute :: fonc (filtre: &FiltreDeBloom, clé: chaine)
{
    filtre.bits.active(empreinte1(clé))
    filtre.bits.active(empreinte2(clé))
    si clé.taille >= 2 {
        filtre.bits.active(empreinte3(clé))
    }
}

réinitialise :: fonc (filtre: &FiltreDeBloom)
{
    filtre.bits.désactive_tout()
}

empreinte1 :: fonc (clé: chaine) -> n32
{
    retourne (clé[clé.taille - 1] comme n32 - (clé.taille << 3) comme n32) & 511
}

empreinte2 :: fonc (clé: chaine) -> n32
{
    retourne (clé[0] comme n32 + (clé.taille << 4) comme n32) & 511
}

empreinte3 :: fonc (clé: chaine) -> n32
{
    retourne (clé[clé.taille - 2] comme n32 - 97 - (clé.taille << 5) comme n32) & 511
}

/*
#test {
    ensemble : EnsembleDeBits
    pour & ensemble.bits {
        it = 0
    }

    ensemble.active(6)

    si ensemble.est_actif(6) {
        imprime("Le sixième bit est actif !\n")
    }

    si ensemble.est_actif(7) {
        imprime("Le bit 7 est actif !\n")
    }

    si ensemble.est_actif(63) {
        imprime("Le bit 63 est actif !\n")
    }
}
*/
