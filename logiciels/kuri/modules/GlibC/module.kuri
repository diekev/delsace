// définitions des interfaces de la bibliothèques C pour GNU/Linux

importe POSIX

/* ------------------------------------------------------------------------- */
/** \nom C11
 * \{ */

aligned_alloc :: fonc (alignment: n64, taille: n64) -> *rien #externe libc

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom sys/epoll.h
 * \{ */

EPOLL_EVENTS :: énum_drapeau n32 {
    EPOLLIN :: 0x001
    EPOLLPRI :: 0x002
    EPOLLOUT :: 0x004
    EPOLLRDNORM :: 0x040
    EPOLLRDBAND :: 0x080
    EPOLLWRNORM :: 0x100
    EPOLLWRBAND :: 0x200
    EPOLLMSG :: 0x400
    EPOLLERR :: 0x008
    EPOLLHUP :: 0x010
    EPOLLRDHUP :: 0x2000
    EPOLLEXCLUSIVE :: 1 << 28
    EPOLLWAKEUP :: 1 << 29
    EPOLLONESHOT :: 1 << 30
    EPOLLET :: 1 << 31
}

/* Valid opcodes ( "op" parameter ) to issue to epoll_ctl().  */
EPOLL_CTL_OP :: énum z32 {
    ADD :: 1 /* Add a file descriptor to the interface.  */
    DEL :: 2 /* Remove a file descriptor from the interface.  */
    MOD :: 3 /* Change file descriptor epoll_event structure.  */
}

epoll_data :: union nonsûr #externe {
    ptr: *rien
    fd: z32
    u32: n32
    u64: n64
}

epoll_event :: struct #externe #compacte {
    events: EPOLL_EVENTS /* Epoll events */
    data: epoll_data /* User data variable */
}

epoll_create :: fonc (size: z32) -> z32 #externe libc
epoll_create1 :: fonc (flags: z32) -> z32 #externe libc

epoll_ctl :: fonc (epfd: z32, op: EPOLL_CTL_OP, fd: z32, event: *epoll_event) -> z32 #externe libc

epoll_wait :: fonc (epfd: z32, events: *epoll_event, maxevents: z32, timeout: z32) -> z32 #externe libc
epoll_pwait :: fonc (epfd: z32, events: *epoll_event, maxevents: z32, timeout: z32, sigmask: *sigset_t) -> z32 #externe libc

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom sys/file.h
 * \{ */

/* Operations for the `flock' call.  */
LOCK_SH :: 1 /* Shared lock.  */
LOCK_EX :: 2 /* Exclusive lock.  */
LOCK_UN :: 8 /* Unlock.  */

/* Can be OR'd in to one of the above.  */
LOCK_NB :: 4 /* Don't block when locking.  */

/* Apply or remove an advisory lock, according to OPERATION,
 * on the file FD refers to.  */
flock :: fonc (__fd: z32, __operation: z32) -> z32 #externe libc

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom sys/ioctl.h
 * \{ */

winsize :: struct #externe {
    ws_row: n16
    ws_col: n16
    ws_xpixel: n16
    ws_ypixel: n16
}

TIOCGWINSZ :: 0x5413 comme n64

ioctl :: fonc (fd: z32, request: n64, args: ...) -> z32 #externe libc

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom sys/timerfd.h
 * \{ */

TFD_CLOEXEC :: 0o02000000
TFD_NONBLOCK :: 0o00004000

TFD_TIMER_ABSTIME :: 1 << 0
TFD_TIMER_CANCEL_ON_SET :: 1 << 1

itimerspec :: struct #externe {
    /* interval du chronomètre */
    it_interval: timespec
    /* expiration du chronomètre */
    it_value: timespec
}

timerfd_create :: fonc (clockid: z32, flags: z32) -> z32 #externe libc

timerfd_settime :: fonc (fd: z32, flags: z32, new_value: *itimerspec, old_value: *itimerspec) -> z32 #externe libc

timerfd_gettime :: fonc (fd: z32, curr_value: *itimerspec) -> z32 #externe libc

/** \} */
