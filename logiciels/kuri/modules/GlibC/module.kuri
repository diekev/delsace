// définitions des interfaces de la bibliothèques C pour GNU/Linux

#inclus "arpa/inet.h"
#inclus "dirent.h"
#inclus "fcntl.h"
#inclus "netdb.h"
#inclus "stdio.h"
#inclus "sys/stat.h"
#inclus "sys/time.h"
#inclus "sys/wait.h"
#inclus "time.h"
#inclus "unistd.h"

charge "errno"

//###############################################################################

// Valeur des descripteurs fichiers pour les flux standards.
STDIN_FILENO  :: 0
STDOUT_FILENO :: 1
STDERR_FILENO :: 2

sprintf :: fonc externe (tmp : *z8, fmt : *z8, args : ...) -> z32

//###############################################################################

// ATTENTION : à tenir synchronisée avec celle de la bibliothèque C.
timeval :: struct externe  {
	tv_sec : z64
	tv_usec : z64
}

// ATTENTION : à tenir synchronisée avec celle de la bibliothèque C.
// À FAIRE : déprécié
timezone :: struct externe  {
	tz_minuteswest : z64 // Minutes à l'ouest de GMT
	tz_dsttime : z64 // Nonzéro si DST est en effet
}

gettimeofday :: fonc externe (val_temps : *rien, zone_temps : *rien) -> rien

// @Interface : z64 ici est time_t (pour linux en tout cas)
time :: fonc externe (tloc: *z64) -> z64

/* ISO C `broken-down time' structure.  */
// @Interface : doit être synchronisée avec struct_tm.h
tm :: struct externe {
    tm_sec: z32      /* Seconds.      [0-60] (1 leap second) */
    tm_min: z32      /* Minutes.      [0-59] */
    tm_hour: z32     /* Hours.        [0-23] */
    tm_mday: z32     /* Day.          [1-31] */
    tm_mon: z32      /* Month.        [0-11] */
    tm_year: z32     /* Year - 1900. */
    tm_wday: z32     /* Day of week.  [0-6] */
    tm_yday: z32     /* Days in year. [0-365] */
    tm_isdst: z32    /* DST.          [-1/0/1] */
    tm_gmtoff : z64; /* Seconds east of UTC.  */
    tm_zone : *z8;   /* Timezone abbreviation.  */
}

localtime :: fonc externe (tloc: *z64) -> *tm

/* Identifier for system-wide realtime clock.  */
CLOCK_REALTIME           :: 0
/* Monotonic system-wide clock.  */
CLOCK_MONOTONIC          :: 1
/* High-resolution timer from the CPU.  */
CLOCK_PROCESS_CPUTIME_ID :: 2
/* Thread-specific CPU-time clock.  */
CLOCK_THREAD_CPUTIME_ID  :: 3
/* Monotonic system-wide clock, not adjusted for frequency scaling.  */
CLOCK_MONOTONIC_RAW      :: 4
/* Identifier for system-wide realtime clock, updated only on ticks.  */
CLOCK_REALTIME_COARSE    :: 5
/* Monotonic system-wide clock, updated only on ticks.  */
CLOCK_MONOTONIC_COARSE   :: 6
/* Monotonic system-wide clock that includes time spent in suspension.  */
CLOCK_BOOTTIME           :: 7
/* Like CLOCK_REALTIME but also wakes suspended system.  */
CLOCK_REALTIME_ALARM     :: 8
/* Like CLOCK_BOOTTIME but also wakes suspended system.  */
CLOCK_BOOTTIME_ALARM     :: 9
/* Like CLOCK_REALTIME but in International Atomic Time.  */
CLOCK_TAI                :: 11

clock_gettime :: fonc externe (clock_id: z32, res: *timespec) -> z32
clock_settime :: fonc externe (clock_id: z32, res: *timespec) -> z32
clock_getres  :: fonc externe (clock_id: z32, res: *timespec) -> z32

timespec :: struct externe {
    tv_sec : z64
    tv_nsec : z64
}

//###############################################################################

open :: fonc externe (chemin : *z8, drapeaux : z32, args : ...) -> z32
close :: fonc externe (fd : z32) -> z32
read :: fonc externe (fd : z32, tampon : *z8, taille : n64) -> z64
write :: fonc externe (fd : z32, tampon : *z8, taille : z64) -> z32
stat :: fonc externe (chemin : *z8, buf : *rien) -> z32

fsync :: fonc externe (fd: z32) -> z32
fdatasync :: fonc externe (fd: z32) -> z32

getcwd :: fonc externe (ptr : *z8, taille : z64) -> rien
chdir :: fonc externe (ptr : *z8) -> rien

abort :: fonc externe () -> rien

rename :: fonc externe (orig : *z8, dest : *z8) -> z32
remove :: fonc externe (chemin : *z8) -> z32

// Ceci sont des macros
S_ISREG :: fonc externe (mode : n32) -> bool
S_ISDIR :: fonc externe (mode : n32) -> bool
S_IFSOCK :: fonc externe (mode : n32) -> bool
S_IFLNK :: fonc externe (mode : n32) -> bool
S_IFBLK :: fonc externe (mode : n32) -> bool
S_IFCHR :: fonc externe (mode : n32) -> bool
S_IFIFO :: fonc externe (mode : n32) -> bool

SEEK_SET  :: 0	/* Seek from beginning of file.  */
SEEK_CUR  :: 1	/* Seek from current position.  */
SEEK_END  :: 2	/* Seek from end of file.  */
/* Seulement pour GNU */
SEEK_DATA :: 3  /* Seek to next data. */
SEEK_HOLE :: 4  /* Seek to next hole. */

lseek :: fonc externe (fd: z32, offset: z64, whence: z32) -> z64

// Version 64-bit de la structure 'stat' de "sys/stat.h"
// La structure devrait s'appeler stat mais nous avons une collision dans le langage
// quand il s'agit de trouver la déclaration correspondant à stat (qui est également une
// fonction), nous la renommons struct_stat jusqu'à ce que nous avons un moyen de lever
// le conflit, l'ambigüité.
struct_stat :: struct externe  {
    st_dev : n64         // ID of device containing file
	st_ino : n64         // inode number
	st_nlink : n64     // number of hard links
	st_mode : n32       // protection
	st_uid : n32         // user ID of owner
	st_gid : n32         // group ID of owner
	__pad0 : n32         // padding pour la version 64-bit
	st_rdev : n64        // device ID (if special file)
	st_size : z64        // total size, in bytes
	st_blksize : z64 // blocksize for file system I/O
	st_blocks : z64
	st_atime : z64      // time of last access
	st_mtime : z64      // time of last modification
	st_ctime : z64      // time of last status change
}

DIR :: struct externe

dirent :: struct externe  {
    d_ino : n64
    d_off : n64
    d_reclen : n16
    d_type : n8
    d_name : [256]z8
}

// duplique un énum
DT_UNKNOWN :: 0
DT_FIFO    :: 1
DT_CHR     :: 2
DT_DIR     :: 4
DT_BLK     :: 6
DT_REG     :: 8
DT_LNK     :: 10
DT_SOCK    :: 12
DT_WHT     :: 14

// open/fnctl
MODE_ACCÈS       ::      0o003
LECTURE_SEULE    ::        0o0
ÉCRITURE_SEULE   ::        0o1
LECTURE_ÉCRITURE ::        0o2
CREATION         ::      0o100
EXCLUSION        ::      0o200
NOCTTY           ::      0o400
TRONCAGE         ::     0o1000
APPEND           ::     0o2000
NONBLOCK         ::     0o4000
NDELAY           ::     0o4000
SYNC             ::  0o4010000
FSYNC            ::  0o4010000
ASYNC            ::    0o20000
LARGEFILE        ::   0o100000
DIRECTORY	     ::   0o200000
NOFOLLOW	     ::   0o400000
CLOEXEC          ::  0o2000000
DIRECT	         ::    0o40000
NOATIME          ::  0o1000000
PATH             :: 0o10000000
DSYNC	         ::    0o10000
// À FAIRE : les expressions utilisent des variables temporaires lors de la
// génération du code, ce qui n'est pas possible pour les variables globales ou
// encore les énum. L'expression devrait être (0o20000000 | 0o200000)
TMPFILE          :: 0o20200000

O_NONBLOCK :: 0o04000

F_DUPFD :: 0	/* Duplicate file descriptor.  */
F_GETFD :: 1	/* Get file descriptor flags.  */
F_SETFD :: 2	/* Set file descriptor flags.  */
F_GETFL :: 3	/* Get file status flags.  */
F_SETFL :: 4	/* Set file status flags.  */

fcntl :: fonc externe (fd: z32, cmd: z32, args: ...) -> z32

opendir :: fonc externe (chemin : *z8) -> *DIR
closedir :: fonc externe (d : *DIR) -> z32
readdir :: fonc externe (d : *DIR) -> *dirent

// -------------------------------------------------

// sys/waitflags.h
WNOHANG   :: 1
WUNTRACED :: 2

fork :: fonc externe () -> z32

waitpid :: fonc externe (id : z32, ptr : *z32, options : z32) -> z32

//###############################################################################

// arpa/inet.h
PF_INET :: 2
AF_INET :: PF_INET

// sys/socket_types.h
SOCK_STREAM    :: 1  /* Sequenced, reliable, connection-based byte streams.  */
SOCK_DGRAM     :: 2  /* Connectionless, unreliable datagrams of fixed maximum length.  */
SOCK_RAW       :: 3  /* Raw protocol interface.  */
SOCK_RDM       :: 4  /* Reliably-delivered messages.  */
SOCK_SEQPACKET :: 5  /* Sequenced, reliable, connection-based, datagrams of fixed maximum length.  */
SOCK_DCCP      :: 6  /* Datagram Congestion Control Protocol.  */
SOCK_PACKET    :: 10 /* Linux specific way of getting packets at the dev level.  For writing rarp and other similar things on the user level. */

/* Flags to be ORed into the type parameter of socket and socketpair and used for the flags parameter of paccept.  */
SOCK_CLOEXEC   :: 0o2000000	/* Atomically set close-on-exec flag for the new descriptor(s).  */
SOCK_NONBLOCK  :: 0o0004000	/* Atomically mark descriptor(s) as non-blocking.  */

// netinet/in.h
/* Address to accept any incoming messages.  */
INADDR_ANY       :: 0x00000000 comme n32
/* Address to send to all hosts.  */
INADDR_BROADCAST :: 0xffffffff comme n32
/* Address indicating an error return.  */
INADDR_NONE      :: 0xffffffff comme n32

hostent :: struct externe  {
    h_name : *z8
    h_aliases : **z8
    h_addrtype : z32
    h_length : z32
    h_addr_list : **z8
}

in_addr :: struct externe  {
    s_addr : n32
}

sockaddr :: struct externe  {
    sa_family : n16
    sa_data : [14]z8
}

sockaddr_in :: struct externe  {
    sin_family : n16
    sin_port : n16
    sin_addr : in_addr
    sin_zero : [8]n8
}

gethostbyname :: fonc externe (arg : *z8) -> *hostent

socket :: fonc externe (a : z32, b : z32, c : z32) -> z32

// asm-generic/socket.h
SOL_SOCKET :: 1

SO_DEBUG       :: 1
SO_REUSEADDR   :: 2
SO_TYPE        :: 3
SO_ERROR       :: 4
SO_DONTROUTE   :: 5
SO_BROADCAST   :: 6
SO_SNDBUF      :: 7
SO_RCVBUF      :: 8
SO_SNDBUFFORCE :: 32
SO_RCVBUFFORCE :: 33
SO_KEEPALIVE   :: 9
SO_OOBINLINE   :: 10
SO_NO_CHECK    :: 11
SO_PRIORITY    :: 12
SO_LINGER      :: 13
SO_BSDCOMPAT   :: 14
SO_REUSEPORT   :: 15

/* powerpc only differs in these */
SO_PASSCRED    :: 16
SO_PEERCRED    :: 17
SO_RCVLOWAT    :: 18
SO_SNDLOWAT    :: 19
SO_RCVTIMEO    :: 20
SO_SNDTIMEO    :: 21

/* Security levels - as per NRL IPv6 - don't actually do anything */
SO_SECURITY_AUTHENTICATION       :: 22
SO_SECURITY_ENCRYPTION_TRANSPORT :: 23
SO_SECURITY_ENCRYPTION_NETWORK   :: 24
SO_BINDTODEVICE                  :: 25

/* Socket filtering */
SO_ATTACH_FILTER :: 26
SO_DETACH_FILTER :: 27
SO_GET_FILTER    :: SO_ATTACH_FILTER
SO_PEERNAME	     :: 28
SO_TIMESTAMP     :: 29
SCM_TIMESTAMP    :: SO_TIMESTAMP
SO_ACCEPTCONN    :: 30
SO_PEERSEC       :: 31
SO_PASSSEC       :: 34
SO_TIMESTAMPNS   :: 35
SCM_TIMESTAMPNS  :: SO_TIMESTAMPNS
SO_MARK	         :: 36
SO_TIMESTAMPING  :: 37
SCM_TIMESTAMPING :: SO_TIMESTAMPING
SO_PROTOCOL      :: 38
SO_DOMAIN        :: 39
SO_RXQ_OVFL      :: 40
SO_WIFI_STATUS   :: 41
SCM_WIFI_STATUS  :: SO_WIFI_STATUS
SO_PEEK_OFF      :: 42

/* Instruct lower device to use last 4-bytes of skb data as FCS */
SO_NOFCS                   :: 43
SO_LOCK_FILTER             :: 44
SO_SELECT_ERR_QUEUE        :: 45
SO_BUSY_POLL               :: 46
SO_MAX_PACING_RATE         :: 47
SO_BPF_EXTENSIONS          :: 48
SO_INCOMING_CPU            :: 49
SO_ATTACH_BPF              :: 50
SO_DETACH_BPF              :: SO_DETACH_FILTER
SO_ATTACH_REUSEPORT_CBPF   :: 51
SO_ATTACH_REUSEPORT_EBPF   :: 52
SO_CNX_ADVICE              :: 53
SCM_TIMESTAMPING_OPT_STATS :: 54
SO_MEMINFO                 :: 55
SO_INCOMING_NAPI_ID        :: 56
SO_COOKIE                  :: 57
SCM_TIMESTAMPING_PKTINFO   :: 58
SO_PEERGROUPS              :: 59
SO_ZEROCOPY                :: 60

IPPROTO_TCP :: 6

linger :: struct externe {
    l_onoff : z32  /* Nonzero to linger on close.  */
    l_linger : z32 /* Time to linger.  */
}

setsockopt :: fonc externe (sockfd: z32, level: z32, optname: z32, optval: *rien, optlen: n64) -> z32

htonl :: fonc externe (hostlong: n32) -> n32
htons :: fonc externe (hostshort: n16) -> n16
ntohl :: fonc externe (netlong: n32) -> n32
ntohs :: fonc externe (netshort: n16) -> n16

connect :: fonc externe (prise : z32, addr : *sockaddr, taille : z64) -> z32

recv :: fonc externe (prise : z32, tampon : *z8, taille : n64, flags : z32) -> z64
send :: fonc externe (prise : z32, tampon : *rien, taille : n64, flags : z32) -> z64
bind :: fonc externe (prise : z32, addr : *sockaddr, taille : n64) -> z32
listen :: fonc externe (prise : z32, connexions : z32) -> z32
accept :: fonc externe (prise : z32, addr : *sockaddr, taille : *n32) -> z32
perror :: fonc externe (ptr : *z8) -> rien
exit :: fonc externe (id : z32) -> rien
send :: fonc externe (prise : z32, pointeur : *z8, taille : z64, options : z32) -> z32
inet_ntoa :: fonc externe (addr : in_addr) -> *z8

// -------------------------------------

printf :: fonc externe (fmt: *z8, args: ...) -> z32

memset :: fonc externe (ptr: *rien, valeur: z32, taille: n64) -> rien
memcpy :: fonc externe (ptr: *rien, src: *rien, taille: n64) -> rien

// -------------------------------------

FILE :: struct externe
fopen :: fonc externe (__filename : *z8, __modes : *z8) -> *FILE
fclose :: fonc externe (__file : *FILE) -> z32

// -------------------------------------

// signal.h

SIG_ERR   :: -1  /* Error return.  */
SIG_DFL   :: 0   /* Default action.  */
SIG_IGN   :: 1   /* Ignore signal.  */

SIG_HOLD  :: 2   /* Add signal to hold mask.  */

/* We define here all the signal names listed in POSIX (1003.1-2008);
   as of 1003.1-2013, no additional signals have been added by POSIX.
   We also define here signal names that historically exist in every
   real-world POSIX variant (e.g. SIGWINCH).

   Signals in the 1-15 range are defined with their historical numbers.
   For other signals, we use the BSD numbers.
   There are two unallocated signal numbers in the 1-31 range: 7 and 29.
   Signal number 0 is reserved for use as kill(pid, 0), to test whether
   a process exists without sending it a signal.  */

/* ISO C99 signals.  */
SIGINT    :: 2   /* Interactive attention signal.  */
SIGILL    :: 4   /* Illegal instruction.  */
SIGABRT   :: 6   /* Abnormal termination.  */
SIGFPE    :: 8   /* Erroneous arithmetic operation.  */
SIGSEGV   :: 11  /* Invalid access to storage.  */
SIGTERM   :: 15  /* Termination request.  */

/* Historical signals specified by POSIX. */
SIGHUP    :: 1   /* Hangup.  */
SIGQUIT   :: 3   /* Quit.  */
SIGTRAP   :: 5   /* Trace/breakpoint trap.  */
SIGKILL   :: 9   /* Killed.  */
SIGBUS    :: 10  /* Bus error.  */
SIGSYS    :: 12  /* Bad system call.  */
SIGPIPE   :: 13  /* Broken pipe.  */
SIGALRM   :: 14  /* Alarm clock.  */

/* New(er) POSIX signals (1003.1-2008, 1003.1-2013).  */
SIGURG    :: 16  /* Urgent data is available at a socket.  */
SIGSTOP   :: 17  /* Stop, unblockable.  */
SIGTSTP   :: 18  /* Keyboard stop.  */
SIGCONT   :: 19  /* Continue.  */
SIGCHLD   :: 20  /* Child terminated or stopped.  */
SIGTTIN   :: 21  /* Background read from control terminal.  */
SIGTTOU   :: 22  /* Background write to control terminal.  */
SIGPOLL   :: 23  /* Pollable event occurred (System V).  */
SIGXCPU   :: 24  /* CPU time limit exceeded.  */
SIGXFSZ   :: 25  /* File size limit exceeded.  */
SIGVTALRM :: 26  /* Virtual timer expired.  */
SIGPROF   :: 27  /* Profiling timer expired.  */
SIGUSR1   :: 30  /* User-defined signal 1.  */
SIGUSR2   :: 31  /* User-defined signal 2.  */

/* Nonstandard signals found in all modern POSIX systems
   (including both BSD and Linux).  */
SIGWINCH  :: 28  /* Window size change (4.3 BSD, Sun).  */

signal :: fonc externe (numéro_signal: z32, rappel: #nulctx fonc(z32)(rien)) -> rien
