// définitions des interfaces de la bibliothèques C pour GNU/Linux

charge "chaine"

//###############################################################################

// Valeur des descripteurs fichiers pour les flux standards.
STDIN_FILENO  :: 0
STDOUT_FILENO :: 1
STDERR_FILENO :: 2

sprintf :: fonc (tmp : ChaineC, fmt : ChaineC, args : ...) -> z32 #externe libc

//###############################################################################

// ATTENTION : à tenir synchronisée avec celle de la bibliothèque C.
timeval :: struct #externe {
	tv_sec : z64
	tv_usec : z64
}

// ATTENTION : à tenir synchronisée avec celle de la bibliothèque C.
// À FAIRE : déprécié
timezone :: struct #externe {
	tz_minuteswest : z64 // Minutes à l'ouest de GMT
	tz_dsttime : z64 // Nonzéro si DST est en effet
}

gettimeofday :: fonc (val_temps : *rien, zone_temps : *rien) -> rien #externe libc

// @Interface : z64 ici est time_t (pour linux en tout cas)
time :: fonc (tloc: *z64) -> z64 #externe libc

/* ISO C `broken-down time' structure.  */
// @Interface : doit être synchronisée avec struct_tm.h
tm :: struct #externe {
    tm_sec: z32      /* Seconds.      [0-60] (1 leap second) */
    tm_min: z32      /* Minutes.      [0-59] */
    tm_hour: z32     /* Hours.        [0-23] */
    tm_mday: z32     /* Day.          [1-31] */
    tm_mon: z32      /* Month.        [0-11] */
    tm_year: z32     /* Year - 1900. */
    tm_wday: z32     /* Day of week.  [0-6] */
    tm_yday: z32     /* Days in year. [0-365] */
    tm_isdst: z32    /* DST.          [-1/0/1] */
    tm_gmtoff : z64; /* Seconds east of UTC.  */
    tm_zone : ChaineC;   /* Timezone abbreviation.  */
}

localtime :: fonc (tloc: *z64) -> *tm #externe libc

/* Identifier for system-wide realtime clock.  */
CLOCK_REALTIME           :: 0
/* Monotonic system-wide clock.  */
CLOCK_MONOTONIC          :: 1
/* High-resolution timer from the CPU.  */
CLOCK_PROCESS_CPUTIME_ID :: 2
/* Thread-specific CPU-time clock.  */
CLOCK_THREAD_CPUTIME_ID  :: 3
/* Monotonic system-wide clock, not adjusted for frequency scaling.  */
CLOCK_MONOTONIC_RAW      :: 4
/* Identifier for system-wide realtime clock, updated only on ticks.  */
CLOCK_REALTIME_COARSE    :: 5
/* Monotonic system-wide clock, updated only on ticks.  */
CLOCK_MONOTONIC_COARSE   :: 6
/* Monotonic system-wide clock that includes time spent in suspension.  */
CLOCK_BOOTTIME           :: 7
/* Like CLOCK_REALTIME but also wakes suspended system.  */
CLOCK_REALTIME_ALARM     :: 8
/* Like CLOCK_BOOTTIME but also wakes suspended system.  */
CLOCK_BOOTTIME_ALARM     :: 9
/* Like CLOCK_REALTIME but in International Atomic Time.  */
CLOCK_TAI                :: 11

clock_gettime :: fonc (clock_id: z32, res: *timespec) -> z32 #externe libc
clock_settime :: fonc (clock_id: z32, res: *timespec) -> z32 #externe libc
clock_getres  :: fonc (clock_id: z32, res: *timespec) -> z32 #externe libc

timespec :: struct #externe {
    tv_sec : z64
    tv_nsec : z64
}

timespec_depuis_ms :: fonc (ms: z64) -> timespec
{
    ts : timespec = ---
    ts.tv_sec = ms / 1_000
    ts.tv_nsec = (ms % 1_000) * 1_000_000
    retourne ts
}

//###############################################################################

open :: fonc (chemin : ChaineC, drapeaux : z32, args : ...) -> z32 #externe libc
close :: fonc (fd : z32) -> z32 #externe libc
read :: fonc (fd : z32, tampon : *z8, taille : n64) -> z64 #externe libc
write :: fonc (fd : z32, tampon : *z8, taille : z64) -> z32 #externe libc
unlink :: fonc (chemin: ChaineC) -> z32 #externe libc

fsync :: fonc (fd: z32) -> z32 #externe libc
fdatasync :: fonc (fd: z32) -> z32 #externe libc

getcwd :: fonc (ptr : ChaineC, taille : z64) -> ChaineC #externe libc
chdir :: fonc (ptr : ChaineC) -> rien #externe libc

abort :: fonc () -> rien #externe libc

rename :: fonc (orig : ChaineC, dest : ChaineC) -> z32 #externe libc
remove :: fonc (chemin : ChaineC) -> z32 #externe libc

// bits pour déterminer le type de fichier
__S_IFMT	:: 0o170000 comme n32

/* Types de fichier  */
__S_IFDIR	:: 0o040000 comme n32	/* Directory.  */
__S_IFCHR	:: 0o020000 comme n32	/* Character device.  */
__S_IFBLK	:: 0o060000 comme n32	/* Block device.  */
__S_IFREG	:: 0o100000 comme n32	/* Regular file.  */
__S_IFIFO	:: 0o010000 comme n32	/* FIFO.  */
__S_IFLNK	:: 0o120000 comme n32	/* Symbolic link.  */
__S_IFSOCK	:: 0o140000 comme n32	/* Socket.  */

SEEK_SET  :: 0	/* Seek from beginning of file.  */
SEEK_CUR  :: 1	/* Seek from current position.  */
SEEK_END  :: 2	/* Seek from end of file.  */
/* Seulement pour GNU */
SEEK_DATA :: 3  /* Seek to next data. */
SEEK_HOLE :: 4  /* Seek to next hole. */

lseek :: fonc (fd: z32, offset: z64, whence: z32) -> z64 #externe libc

// Version 64-bit de la structure 'stat' de "sys/stat.h"
// La structure devrait s'appeler stat mais nous avons une collision dans le langage
// quand il s'agit de trouver la déclaration correspondant à stat (qui est également une
// fonction), nous la renommons struct_stat jusqu'à ce que nous avons un moyen de lever
// le conflit, l'ambigüité.
struct_stat :: struct #externe {
    st_dev : n64         // ID of device containing file
	st_ino : n64         // inode number
	st_nlink : n64     // number of hard links
	st_mode : n32       // protection
	st_uid : n32         // user ID of owner
	st_gid : n32         // group ID of owner
	__pad0 : n32         // padding pour la version 64-bit
	st_rdev : n64        // device ID (if special file)
	st_size : z64        // total size, in bytes
	st_blksize : z64 // blocksize for file system I/O
	st_blocks : z64
	st_atime : z64      // time of last access
    st_atimensec : z64  // Nsecs of last access
	st_mtime : z64      // time of last modification
    st_mtimensec : z64  // Nsecs of last modification
	st_ctime : z64      // time of last status change
    st_ctimensec : z64  // Nsecs of last status change
    __glibc_reserved : [3]z64
}

// NOTE : puisque stat n'est pas dans l'interface binaire de la bibliothèque C, nous ne pouvons ni trouver son symbole dans libc
//        ni l'appeler dans les métaprogrammes, donc nous utilisons __xstat qui se trouve dans l'interface binaire, mais non dans
//        l'interface de programme
//        Voir http://refspecs.linux-foundation.org/LSB_4.0.0/LSB-Core-generic/LSB-Core-generic/baselib---xstat.html
__xstat :: fonc (__ver: z32, __filename: ChaineC, __stat_buf: *struct_stat) -> z32 #externe libc

STAT_VER_KERNEL :: 0
STAT_VER_LINUX  :: 1
STAT_VER        :: STAT_VER_LINUX

stat :: fonc (chemin : ChaineC, buf : *rien) -> z32
{
    retourne __xstat(STAT_VER, chemin, buf)
}

DIR :: struct #externe

dirent :: struct #externe {
    d_ino : n64
    d_off : n64
    d_reclen : n16
    d_type : n8
    d_name : [256]z8
}

// duplique un énum
DT_UNKNOWN :: 0
DT_FIFO    :: 1
DT_CHR     :: 2
DT_DIR     :: 4
DT_BLK     :: 6
DT_REG     :: 8
DT_LNK     :: 10
DT_SOCK    :: 12
DT_WHT     :: 14

// open/fnctl
MODE_ACCÈS       ::      0o003
LECTURE_SEULE    ::        0o0
ÉCRITURE_SEULE   ::        0o1
LECTURE_ÉCRITURE ::        0o2
CREATION         ::      0o100
EXCLUSION        ::      0o200
NOCTTY           ::      0o400
TRONCAGE         ::     0o1000
APPEND           ::     0o2000
NONBLOCK         ::     0o4000
NDELAY           ::     0o4000
SYNC             ::  0o4010000
FSYNC            ::  0o4010000
ASYNC            ::    0o20000
LARGEFILE        ::   0o100000
DIRECTORY	     ::   0o200000
NOFOLLOW	     ::   0o400000
CLOEXEC          ::  0o2000000
DIRECT	         ::    0o40000
NOATIME          ::  0o1000000
PATH             :: 0o10000000
DSYNC	         ::    0o10000
TMPFILE          :: (0o20000000 | 0o200000)

O_NONBLOCK :: 0o04000

F_DUPFD :: 0	/* Duplicate file descriptor.  */
F_GETFD :: 1	/* Get file descriptor flags.  */
F_SETFD :: 2	/* Set file descriptor flags.  */
F_GETFL :: 3	/* Get file status flags.  */
F_SETFL :: 4	/* Set file status flags.  */

fcntl :: fonc (fd: z32, cmd: z32, args: ...) -> z32 #externe libc

opendir :: fonc (chemin : ChaineC) -> *DIR #externe libc
closedir :: fonc (d : *DIR) -> z32 #externe libc
readdir :: fonc (d : *DIR) -> *dirent #externe libc

// -------------------------------------------------

// sys/waitflags.h
WNOHANG   :: 1
WUNTRACED :: 2

fork :: fonc () -> z32 #externe libc

waitpid :: fonc (id : z32, ptr : *z32, options : z32) -> z32 #externe libc

//###############################################################################

// arpa/inet.h
PF_INET :: 2
AF_INET :: PF_INET

// sys/socket_types.h
SOCK_STREAM    :: 1  /* Sequenced, reliable, connection-based byte streams.  */
SOCK_DGRAM     :: 2  /* Connectionless, unreliable datagrams of fixed maximum length.  */
SOCK_RAW       :: 3  /* Raw protocol interface.  */
SOCK_RDM       :: 4  /* Reliably-delivered messages.  */
SOCK_SEQPACKET :: 5  /* Sequenced, reliable, connection-based, datagrams of fixed maximum length.  */
SOCK_DCCP      :: 6  /* Datagram Congestion Control Protocol.  */
SOCK_PACKET    :: 10 /* Linux specific way of getting packets at the dev level.  For writing rarp and other similar things on the user level. */

/* Flags to be ORed into the type parameter of socket and socketpair and used for the flags parameter of paccept.  */
SOCK_CLOEXEC   :: 0o02000000	/* Atomically set close-on-exec flag for the new descriptor(s).  */
SOCK_NONBLOCK  :: 0o00004000	/* Atomically mark descriptor(s) as non-blocking.  */

// netinet/in.h
/* Address to accept any incoming messages.  */
INADDR_ANY       :: 0x00000000 comme n32
/* Address to send to all hosts.  */
INADDR_BROADCAST :: 0xffffffff comme n32
/* Address indicating an error return.  */
INADDR_NONE      :: 0xffffffff comme n32

hostent :: struct #externe {
    h_name : ChaineC
    h_aliases : *ChaineC
    h_addrtype : z32
    h_length : z32
    h_addr_list : *ChaineC
}

in_addr :: struct #externe {
    s_addr : n32
}

sockaddr :: struct #externe {
    sa_family : n16
    sa_data : [14]z8
}

sockaddr_in :: struct #externe {
    sin_family : n16
    sin_port : n16
    sin_addr : in_addr
    sin_zero : [8]n8
}

gethostbyname :: fonc (arg : ChaineC) -> *hostent #externe libc

socket :: fonc (a : z32, b : z32, c : z32) -> z32 #externe libc

// asm-generic/socket.h
SOL_SOCKET :: 1

// netinet/tcp.h
SOL_TCP :: 6

SO_DEBUG       :: 1
SO_REUSEADDR   :: 2
SO_TYPE        :: 3
SO_ERROR       :: 4
SO_DONTROUTE   :: 5
SO_BROADCAST   :: 6
SO_SNDBUF      :: 7
SO_RCVBUF      :: 8
SO_SNDBUFFORCE :: 32
SO_RCVBUFFORCE :: 33
SO_KEEPALIVE   :: 9
SO_OOBINLINE   :: 10
SO_NO_CHECK    :: 11
SO_PRIORITY    :: 12
SO_LINGER      :: 13
SO_BSDCOMPAT   :: 14
SO_REUSEPORT   :: 15

/* powerpc only differs in these */
SO_PASSCRED    :: 16
SO_PEERCRED    :: 17
SO_RCVLOWAT    :: 18
SO_SNDLOWAT    :: 19
SO_RCVTIMEO    :: 20
SO_SNDTIMEO    :: 21

/* Security levels - as per NRL IPv6 - don't actually do anything */
SO_SECURITY_AUTHENTICATION       :: 22
SO_SECURITY_ENCRYPTION_TRANSPORT :: 23
SO_SECURITY_ENCRYPTION_NETWORK   :: 24
SO_BINDTODEVICE                  :: 25

/* Socket filtering */
SO_ATTACH_FILTER :: 26
SO_DETACH_FILTER :: 27
SO_GET_FILTER    :: SO_ATTACH_FILTER
SO_PEERNAME	     :: 28
SO_TIMESTAMP     :: 29
SCM_TIMESTAMP    :: SO_TIMESTAMP
SO_ACCEPTCONN    :: 30
SO_PEERSEC       :: 31
SO_PASSSEC       :: 34
SO_TIMESTAMPNS   :: 35
SCM_TIMESTAMPNS  :: SO_TIMESTAMPNS
SO_MARK	         :: 36
SO_TIMESTAMPING  :: 37
SCM_TIMESTAMPING :: SO_TIMESTAMPING
SO_PROTOCOL      :: 38
SO_DOMAIN        :: 39
SO_RXQ_OVFL      :: 40
SO_WIFI_STATUS   :: 41
SCM_WIFI_STATUS  :: SO_WIFI_STATUS
SO_PEEK_OFF      :: 42

/* Instruct lower device to use last 4-bytes of skb data as FCS */
SO_NOFCS                   :: 43
SO_LOCK_FILTER             :: 44
SO_SELECT_ERR_QUEUE        :: 45
SO_BUSY_POLL               :: 46
SO_MAX_PACING_RATE         :: 47
SO_BPF_EXTENSIONS          :: 48
SO_INCOMING_CPU            :: 49
SO_ATTACH_BPF              :: 50
SO_DETACH_BPF              :: SO_DETACH_FILTER
SO_ATTACH_REUSEPORT_CBPF   :: 51
SO_ATTACH_REUSEPORT_EBPF   :: 52
SO_CNX_ADVICE              :: 53
SCM_TIMESTAMPING_OPT_STATS :: 54
SO_MEMINFO                 :: 55
SO_INCOMING_NAPI_ID        :: 56
SO_COOKIE                  :: 57
SCM_TIMESTAMPING_PKTINFO   :: 58
SO_PEERGROUPS              :: 59
SO_ZEROCOPY                :: 60

IPPROTO_TCP :: 6

linger :: struct #externe {
    l_onoff : z32  /* Nonzero to linger on close.  */
    l_linger : z32 /* Time to linger.  */
}

setsockopt :: fonc (sockfd: z32, level: z32, optname: z32, optval: *rien, optlen: n64) -> z32 #externe libc

htonl :: fonc (hostlong: n32) -> n32 #externe libc
htons :: fonc (hostshort: n16) -> n16 #externe libc
ntohl :: fonc (netlong: n32) -> n32 #externe libc
ntohs :: fonc (netshort: n16) -> n16 #externe libc

connect :: fonc (prise : z32, addr : *sockaddr, taille : z64) -> z32 #externe libc

recv :: fonc (prise : z32, tampon : *z8, taille : n64, flags : z32) -> z64 #externe libc
send :: fonc (prise : z32, tampon : *rien, taille : n64, flags : z32) -> z64 #externe libc
bind :: fonc (prise : z32, addr : *sockaddr, taille : n64) -> z32 #externe libc
listen :: fonc (prise : z32, connexions : z32) -> z32 #externe libc
accept :: fonc (prise : z32, addr : *sockaddr, taille : *n32) -> z32 #externe libc
perror :: fonc (ptr : ChaineC) -> rien #externe libc
exit :: fonc (id : z32) -> rien #externe libc
inet_ntoa :: fonc (addr : in_addr) -> ChaineC #externe libc

// -------------------------------------

printf :: fonc (fmt: ChaineC, args: ...) -> z32 #externe libc

memset :: fonc (ptr: *rien, valeur: z32, taille: n64) -> *rien #externe libc
memcpy :: fonc (ptr: *rien, src: *rien, taille: n64) -> *rien #externe libc

// -------------------------------------

FILE :: struct #externe
fopen :: fonc (__filename : ChaineC, __modes : ChaineC) -> *FILE #externe libc
fclose :: fonc (__file : *FILE) -> z32 #externe libc

// -------------------------------------

// signal.h

SIG_ERR   :: -1  /* Error return.  */
SIG_DFL   :: 0   /* Default action.  */
SIG_IGN   :: 1   /* Ignore signal.  */

SIG_HOLD  :: 2   /* Add signal to hold mask.  */

/* We define here all the signal names listed in POSIX (1003.1-2008);
   as of 1003.1-2013, no additional signals have been added by POSIX.
   We also define here signal names that historically exist in every
   real-world POSIX variant (e.g. SIGWINCH).

   Signals in the 1-15 range are defined with their historical numbers.
   For other signals, we use the BSD numbers.
   There are two unallocated signal numbers in the 1-31 range: 7 and 29.
   Signal number 0 is reserved for use as kill(pid, 0), to test whether
   a process exists without sending it a signal.  */

/* ISO C99 signals.  */
SIGINT    :: 2   /* Interactive attention signal.  */
SIGILL    :: 4   /* Illegal instruction.  */
SIGABRT   :: 6   /* Abnormal termination.  */
SIGFPE    :: 8   /* Erroneous arithmetic operation.  */
SIGSEGV   :: 11  /* Invalid access to storage.  */
SIGTERM   :: 15  /* Termination request.  */

/* Historical signals specified by POSIX. */
SIGHUP    :: 1   /* Hangup.  */
SIGQUIT   :: 3   /* Quit.  */
SIGTRAP   :: 5   /* Trace/breakpoint trap.  */
SIGKILL   :: 9   /* Killed.  */
SIGBUS    :: 10  /* Bus error.  */
SIGSYS    :: 12  /* Bad system call.  */
SIGPIPE   :: 13  /* Broken pipe.  */
SIGALRM   :: 14  /* Alarm clock.  */

/* New(er) POSIX signals (1003.1-2008, 1003.1-2013).  */
SIGURG    :: 16  /* Urgent data is available at a socket.  */
SIGSTOP   :: 17  /* Stop, unblockable.  */
SIGTSTP   :: 18  /* Keyboard stop.  */
SIGCONT   :: 19  /* Continue.  */
SIGCHLD   :: 20  /* Child terminated or stopped.  */
SIGTTIN   :: 21  /* Background read from control terminal.  */
SIGTTOU   :: 22  /* Background write to control terminal.  */
SIGPOLL   :: 23  /* Pollable event occurred (System V).  */
SIGXCPU   :: 24  /* CPU time limit exceeded.  */
SIGXFSZ   :: 25  /* File size limit exceeded.  */
SIGVTALRM :: 26  /* Virtual timer expired.  */
SIGPROF   :: 27  /* Profiling timer expired.  */
SIGUSR1   :: 30  /* User-defined signal 1.  */
SIGUSR2   :: 31  /* User-defined signal 2.  */

/* Nonstandard signals found in all modern POSIX systems
   (including both BSD and Linux).  */
SIGWINCH  :: 28  /* Window size change (4.3 BSD, Sun).  */

signal :: fonc (numéro_signal: z32, rappel: fonc(z32)(rien)) -> rien #externe libc

sighandler_t :: fonc (z32)(rien)
sigset_t :: struct #externe {
    __val: [1024 / (8 * taille_de(n64))]n64
}

sigaction_struct :: struct {
    sa_handler: sighandler_t

    /* Additional set of signals to be blocked.  */
    sa_mask: sigset_t

    /* Special flags.  */
    sa_flags: z32

    /* Restore handler.  */
    sa_restorer :: fonc ()(rien)
}

sigaction :: fonc (sig: z32, new_act: *sigaction_struct, old_act: *sigaction_struct) -> z32 #externe libc

action_pour_erreur_de_segmentation :: fonc (signum: z32 @inutilisée)
{
    panique("violation de segmentation")
}

système_ajoute_action_pour_action_erreur_de_segmentation :: fonc ()
{
    act: sigaction_struct
    act.sa_handler = action_pour_erreur_de_segmentation

    si sigaction(SIGSEGV, *act, nul) == -1 {
        retourne
    }
}

// --------------------------------------------------
// Notification sur des prises.
// Devrait plutôt être dans POSIX mais epoll est une spécialité linuxienne.

EPOLL_EVENTS :: énum_drapeau n32 {
    EPOLLIN :: 0x001
    EPOLLPRI :: 0x002
    EPOLLOUT :: 0x004
    EPOLLRDNORM :: 0x040
    EPOLLRDBAND :: 0x080
    EPOLLWRNORM :: 0x100
    EPOLLWRBAND :: 0x200
    EPOLLMSG :: 0x400
    EPOLLERR :: 0x008
    EPOLLHUP :: 0x010
    EPOLLRDHUP :: 0x2000
    EPOLLEXCLUSIVE :: 1 << 28
    EPOLLWAKEUP :: 1 << 29
    EPOLLONESHOT:: 1 << 30
    EPOLLET :: 1 << 31
}

/* Valid opcodes ( "op" parameter ) to issue to epoll_ctl().  */
EPOLL_CTL_OP :: énum z32 {
    ADD :: 1 /* Add a file descriptor to the interface.  */
    DEL :: 2 /* Remove a file descriptor from the interface.  */
    MOD :: 3 /* Change file descriptor epoll_event structure.  */
}

epoll_data :: union nonsûr #externe {
    ptr: *rien
    fd: z32
    u32: n32
    u64: n64
}

epoll_event :: struct #externe #compacte {
    events: EPOLL_EVENTS  /* Epoll events */
    data: epoll_data      /* User data variable */
}

epoll_create :: fonc (size: z32) -> z32 #externe libc
epoll_create1 :: fonc (flags: z32) -> z32 #externe libc

epoll_ctl :: fonc (epfd: z32, op: EPOLL_CTL_OP, fd: z32, event: *epoll_event) -> z32 #externe libc

epoll_wait :: fonc (epfd: z32, events: *epoll_event, maxevents: z32, timeout: z32) -> z32 #externe libc
epoll_pwait :: fonc (epfd: z32, events: *epoll_event, maxevents: z32, timeout: z32, sigmask: *sigset_t) -> z32 #externe libc

TFD_CLOEXEC:: 0o02000000
TFD_NONBLOCK :: 0o00004000

TFD_TIMER_ABSTIME :: 1 << 0
TFD_TIMER_CANCEL_ON_SET :: 1 << 1

itimerspec :: struct #externe {
    /* interval du chronomètre */
    it_interval: timespec
    /* expiration du chronomètre */
    it_value: timespec
}

timerfd_create :: fonc (clockid: z32, flags: z32) -> z32 #externe libc

timerfd_settime :: fonc (fd: z32, flags: z32, new_value: *itimerspec, old_value: *itimerspec) -> z32 #externe libc

timerfd_gettime :: fonc (fd: z32, curr_value: *itimerspec) -> z32 #externe libc

qsort :: fonc (liste : *rien, taille_liste : n64, taille_element : n64, fonction_comparaison :  fonc (*rien,*rien)(z32)) -> rien #externe libc

/* netinet/tcp.h
 * User-settable options (used with setsockopt).
 */
TCP_NODELAY :: 1  /* Don't delay send to coalesce packets  */
TCP_MAXSEG :: 2  /* Set maximum segment size  */
TCP_CORK :: 3  /* Control sending of partial frames  */
TCP_KEEPIDLE :: 4  /* Start keeplives after this period */
TCP_KEEPINTVL :: 5  /* Interval between keepalives */
TCP_KEEPCNT :: 6  /* Number of keepalives before death */
TCP_SYNCNT :: 7  /* Number of SYN retransmits */
TCP_LINGER2 :: 8  /* Life time of orphaned FIN-WAIT-2 state */
TCP_DEFER_ACCEPT ::  9  /* Wake up listener only when data arrive */
TCP_WINDOW_CLAMP ::  10 /* Bound advertised window */
TCP_INFO :: 11 /* Information about this connection. */
TCP_QUICKACK :: 12 /* Bock/reenable quick ACKs.  */
TCP_CONGESTION :: 13 /* Congestion control algorithm.  */
TCP_MD5SIG :: 14 /* TCP MD5 Signature (RFC2385) */
TCP_COOKIE_TRANSACTIONS ::  15 /* TCP Cookie Transactions */
TCP_THIN_LINEAR_TIMEOUTS 16 /* Use linear timeouts for thin streams*/
TCP_THIN_DUPACK :: 17 /* Fast retrans. after 1 dupack */
TCP_USER_TIMEOUT ::  18 /* How long for loss retry before timeout */
TCP_REPAIR :: 19 /* TCP sock is under repair right now */
TCP_REPAIR_QUEUE ::  20 /* Set TCP queue to repair */
TCP_QUEUE_SEQ :: 21 /* Set sequence number of repaired queue. */
TCP_REPAIR_OPTIONS ::  22 /* Repair TCP connection options */
TCP_FASTOPEN :: 23 /* Enable FastOpen on listeners */
TCP_TIMESTAMP :: 24 /* TCP time stamp */
TCP_NOTSENT_LOWAT ::  25 /* Limit number of unsent bytes in write queue.  */
TCP_CC_INFO :: 26 /* Get Congestion Control (optional) info.  */
TCP_SAVE_SYN :: 27 /* Record SYN headers for new connections.  */
TCP_SAVED_SYN :: 28 /* Get SYN headers recorded for connection.  */
TCP_REPAIR_WINDOW ::  29 /* Get/set window parameters.  */
TCP_FASTOPEN_CONNECT ::  30 /* Attempt FastOpen with connect.  */
TCP_ULP :: 31 /* Attach a ULP to a TCP connection.  */
TCP_MD5SIG_EXT :: 32 /* TCP MD5 Signature with extensions.  */
