importe Chaine
importe Ensemble
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom ReferenceRecord
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-reference-record-specification-type
 * \{ */

TypeUnresolvable :: #opaque z32

/* Type pour ReferenceRecord.reference_name */
ReferencedName :: union {
    valeur: Valeur
    private_name: *PrivateName
}

is_property_key :: fonc (referenced_name: ReferencedName) -> bool
{
    discr referenced_name {
        valeur(v) {
            retourne v.est_chaine() || v.est_symbol()
        }
        sinon {
            retourne faux
        }
    }
}

donne_property_key :: fonc (referenced_name: ReferencedName) -> PropertyKey
{
    discr referenced_name.valeur {
        String(s) {
            retourne s.texte
        }
        Symbol(s) {
            retourne s
        }
        sinon {
            panique("donne_property_key sur un referenced_name invalide")
        }
    }
}

ReferenceRecord :: struct {
    Base :: union {
        V: Valeur
        E: *Environment
        UNRESOLVABLE: TypeUnresolvable
    }

    base: Base
    referenced_name: ReferencedName
    strict: bool
    valeur_this: Optionnel(Valeur)
}

est_référence_propriété :: fonc (référence: ReferenceRecord) -> bool
{
    discr référence.base {
        UNRESOLVABLE {
            retourne faux
        }
        E {
            retourne faux
        }
        sinon {
            retourne vrai
        }
    }
}

référence_non_résolvable :: fonc (nom: ReferencedName, strict: bool) -> ReferenceRecord
{
    résultat: ReferenceRecord
    résultat.base = TypeUnresolvable(0)
    résultat.strict = strict
    résultat.referenced_name = nom
    retourne résultat
}

est_référence_non_résolvable :: fonc (référence: ReferenceRecord) -> bool
{
    discr référence.base {
        UNRESOLVABLE {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ValeurCompletion
 * \{ */

ValeurCompletion :: union {
    V: Valeur
    R: ReferenceRecord
    P: PropertyDescriptor
}

est_reference_record :: fonc (valeur: ValeurCompletion) -> bool
{
    discr valeur {
        R {
            retourne vrai
        }
        V {
            retourne faux
        }
        sinon { retourne faux }
    }
}

est_undefined :: fonc (valeur: ValeurCompletion) -> bool
{
    discr valeur {
        V(v) {
            retourne est_undefined(v)
        }
        sinon {
            retourne faux
        }
    }
}

est_empty :: fonc (valeur: ValeurCompletion) -> bool
{
    discr valeur {
        R {
            retourne faux
        }
        V {
            retourne faux
        }
        P {
            retourne faux
        }
        sinon {
            retourne vrai
        }
    }
}

/* 6.2.5.3 IsSuperReference ( V )
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-issuperreference */
is_super_reference :: fonc (reference: ReferenceRecord) -> bool
{
    /* 1. If V.[[ThisValue]] is not EMPTY, return true; otherwise return false. */
    discr reference.valeur_this {
        Quelque {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/* 6.2.5.4 IsPrivateReference ( V )
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-isprivatereference */
is_private_reference :: fonc (reference_record: &ReferenceRecord) -> bool
{
    // 1. If V.[[ReferencedName]] is a Private Name, return true; otherwise return false.
    discr reference_record.referenced_name {
        private_name {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

/* 6.2.5.5 GetValue
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-getvalue */
get_value :: fonc (interpréteuse: &Interpréteuse, valeur: ValeurCompletion) -> CompletionRecord
{
    retourne get_value(interpréteuse.donne_realm(), valeur)
}

get_value :: fonc (realm: *Realm, valeur: ValeurCompletion) -> CompletionRecord
{
    // 1. If V is not a Reference Record, return V.
    saufsi valeur.est_reference_record() {
        retourne normal_completion(valeur.V)
    }

    // 2. If IsUnresolvableReference(V) is true, throw a ReferenceError exception.
    si est_référence_non_résolvable(valeur) {
        message := imprime_chaine("\"%\" is not defined", valeur.R.referenced_name)
        exception := crée_reference_error(realm.donne_tas_de_mémoire(), realm.intrinsics.reference_error_prototype, message)
        retourne throw_completion(exception)
    }

    // 3. If IsPropertyReference(V) is true, then
    si est_référence_propriété(valeur) {
        V := valeur.R
        // a. Let baseObj be ? ToObject(V.[[Base]]).
        completion_base_object := vers_objet(realm, V.base.V)
        saufsi completion_base_object.est_normal() {
            retourne completion_base_object
        }
        base_object := completion_base_object.valeur.V.donne_objet()

        // b. If IsPrivateReference(V) is true, then
        si is_private_reference(V) {
            // i. Return ? PrivateGet(baseObj, V.[[ReferencedName]]).
            panique("get_value depuis private_reference non-implémenté")
        }
        // c. If V.[[ReferencedName]] is not a property key, then
        saufsi is_property_key(V.referenced_name) {
            // i. Set V.[[ReferencedName]] to ? ToPropertyKey(V.[[ReferencedName]]).
            completion := to_property_key(realm, V.referenced_name.valeur)
            saufsi completion.est_normal() {
                retourne completion
            }
            V.referenced_name.valeur = completion.valeur.V
        }

        // d. Return ? baseObj.[[Get]](V.[[ReferencedName]], GetThisValue(V)).
        retourne base_object.internal_get(V.referenced_name.donne_property_key(), get_this_value(V))
    }

    // 4. Else,
    V := valeur.R

    // a. Let base be V.[[Base]].
    base := V.base.E
    // b. Assert: base is an Environment Record.

    // c. Return ? base.GetBindingValue(V.[[ReferencedName]], V.[[Strict]]) (see 9.1).
    retourne base.get_binding_value(V.referenced_name.donne_property_key(), V.strict)
}

/* 6.2.5.6 PutValue
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-putvalue */
put_value :: fonc (interpréteuse: &Interpréteuse, référence: ValeurCompletion, valeur: Valeur) -> CompletionRecord
{
    // 1. If V is not a Reference Record, throw a ReferenceError exception.
    saufsi est_reference_record(référence) {
        panique("exceptions non-implémentées")
    }

    record := référence.R

    // 2. If IsUnresolvableReference(V) is true, then
    si est_référence_non_résolvable(record) {
        // a. If V.[[Strict]] is true, throw a ReferenceError exception.
        si record.strict {
            message := imprime_chaine("assignment to undeclared variable \"%\"", record.referenced_name)
            exception := crée_reference_error(interpréteuse.donne_tas_de_mémoire(), interpréteuse.donne_realm().intrinsics.reference_error_prototype, message)
            retourne throw_completion(exception)
        }

        // b. Let globalObj be GetGlobalObject().
        global_obj := get_global_object(interpréteuse)

        // c. Perform ? Set(globalObj, V.[[ReferencedName]], W, false).
        completion := set(global_obj, record.referenced_name.donne_property_key(), valeur, faux)
        saufsi completion.est_normal() {
            retourne completion
        }

        // d. Return UNUSED.
        retourne normal_completion(js_undefined)
    }

    // 3. If IsPropertyReference(V) is true, then
    si est_référence_propriété(record) {
        // a. Let baseObj be ? ToObject(V.[[Base]]).
        completion_base_obj := vers_objet(interpréteuse.donne_realm(), record.base.V)
        saufsi completion_base_obj.est_normal() {
            retourne completion_base_obj
        }
        base_obj := completion_base_obj.valeur.V.donne_objet()

        // b. If IsPrivateReference(V) is true, then
        si is_private_reference(record) {
            // i. Return ? PrivateSet(baseObj, V.[[ReferencedName]], W).
            panique("put_valeur avec private_reference non-implémenté")
        }
        // c. If V.[[ReferencedName]] is not a property key, then
        saufsi is_property_key(record.referenced_name) {
            // i. Set V.[[ReferencedName]] to ? ToPropertyKey(V.[[ReferencedName]]).
            completion := to_property_key(interpréteuse.donne_realm(), record.referenced_name.valeur)
            saufsi completion.est_normal() {
                retourne completion
            }
            record.referenced_name.valeur = completion.valeur.V
        }

        // d. Let succeeded be ? baseObj.[[Set]](V.[[ReferencedName]], W, GetThisValue(V)).
        completion := base_obj.internal_set(record.referenced_name.donne_property_key(), valeur, get_this_value(record))
        saufsi completion.est_normal() {
            retourne completion
        }
        succeeded := completion.valeur.V
        // e. If succeeded is false and V.[[Strict]] is true, throw a TypeError exception.
        si succeeded.est_false() && record.strict {
            panique("exceptions non-implémentées")
        }
        // f. Return UNUSED.
        retourne normal_completion(js_undefined)
    }

    // 4. Else,
    // a. Let base be V.[[Base]].
    base := record.base.E
    // b. Assert: base is an Environment Record.

    // c. Return ? base.SetMutableBinding(V.[[ReferencedName]], W, V.[[Strict]]) (see 9.1).
    retourne base.set_mutable_binding(record.referenced_name.donne_property_key(), valeur, record.strict)
}

/* 6.2.5.7 GetThisValue ( V )
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-getthisvalue */
get_this_value :: fonc (reference: ReferenceRecord) -> Valeur
{
    // 1. Assert: IsPropertyReference(V) is true.
    assert(est_référence_propriété(reference))
    // 2. If IsSuperReference(V) is true, return V.[[ThisValue]]; otherwise return V.[[Base]].
    si is_super_reference(reference) {
        retourne reference.valeur_this.Quelque
    }
    retourne reference.base.V
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom CompletionRecord
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-completion-record-specification-type
 * \{ */

CompletionRecord :: struct {
    Type :: énum {
        NORMAL
        BREAK
        CONTINUE
        RETURN
        THROW
    }

    type: Type
    valeur: ValeurCompletion
    cible: chaine
}

imprime_complétion :: fonc (enchaineuse: *Enchaineuse, completion: *CompletionRecord)
{
    saufsi completion {
        ajoute_au_tampon(enchaineuse, "nul")
        retourne
    }

    si completion.type == CompletionRecord.Type.THROW {
        ajoute_au_tampon(enchaineuse, completion.valeur.V)
        retourne
    }

    saufsi completion.type == CompletionRecord.Type.NORMAL {
        ajoute_au_tampon(enchaineuse, "À FAIRE : impression des complétions anormales.")
        retourne
    }

    discr completion.valeur {
        V(v) {
            ajoute_au_tampon(enchaineuse, v)
        }
        R(r) {
            ajoute_au_tampon(enchaineuse, r)
        }
        P(p) {
            ajoute_au_tampon(enchaineuse, p)
        }
        sinon {}
    }
} @FormattageImpression

normal_completion :: fonc (valeur: Valeur) -> CompletionRecord
{
    retourne CompletionRecord(CompletionRecord.Type.NORMAL, valeur)
}

normal_completion :: fonc (valeur: ValeurCompletion) -> CompletionRecord
{
    retourne CompletionRecord(CompletionRecord.Type.NORMAL, valeur)
}

return_completion :: fonc (valeur: Valeur) -> CompletionRecord
{
    retourne CompletionRecord(CompletionRecord.Type.RETURN, valeur)
}

return_completion :: fonc (valeur: ValeurCompletion) -> CompletionRecord
{
    retourne CompletionRecord(CompletionRecord.Type.RETURN, valeur)
}

/* 6.2.4.3 UpdateEmpty ( completionRecord, value )
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-updateempty */
update_empty :: fonc (completion: CompletionRecord, valeur: Valeur) -> CompletionRecord
{
    // 1. Assert: If completionRecord is either a return completion or a throw completion, then completionRecord.[[Value]] is not empty.

    // 2. If completionRecord.[[Value]] is not empty, return ? completionRecord.
    saufsi completion.valeur.est_empty() {
        retourne completion
    }

    // 3. Return Completion Record { [[Type]]: completionRecord.[[Type]], [[Value]]: value, [[Target]]: completionRecord.[[Target]] }.
    completion.valeur = valeur
    retourne completion
}

est_normal :: fonc (completion: CompletionRecord) -> bool
{
    retourne completion.type == CompletionRecord.Type.NORMAL
}

est_undefined :: fonc (completion: CompletionRecord) -> bool
{
    retourne est_normal(completion) && est_undefined(completion.valeur)
}

est_abrupt :: fonc (completion: CompletionRecord) -> bool
{
    retourne !est_normal(completion)
}

est_return :: fonc (completion: CompletionRecord) -> bool
{
    retourne completion.type == CompletionRecord.Type.RETURN
}

throw_completion :: fonc (error: *Error) -> CompletionRecord
{
    valeur := ValeurCompletion(Valeur(Object = error))
    retourne CompletionRecord(CompletionRecord.Type.THROW, valeur)
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Interpréteuse
 * \{ */

TypeScope :: énum {
    AUCUN
    BLOC
    FUNCTION
}

FrameScope :: struct {
    noeud_scope: *NoeudScope
}

Interpréteuse :: struct {
    pile_scope: [..]FrameScope
    mv: *MachineVirtuelle
}

initialise_interpréteuse :: fonc (interpréteuse: &Interpréteuse @inutilisée)
{
}

détruit_données_interpreteuse :: fonc (interpréteuse: &Interpréteuse)
{
    déloge(interpréteuse.pile_scope)
}

exécute :: fonc (interpréteuse: &Interpréteuse, programme: *Programme) -> CompletionRecord
{
    retourne exécute(interpréteuse, programme, TypeScope.AUCUN)
}

exécute :: fonc (interpréteuse: &Interpréteuse, noeud: *NoeudSyntaxique, type_scope: TypeScope) -> CompletionRecord
{
    si noeud.type != NoeudScope && noeud.type != Programme && noeud.type != BlockStatement {
        retourne exécute_noeud(noeud, interpréteuse)
    }

    résultat := normal_completion(js_undefined)

    scope := noeud comme *NoeudScope
    entre(interpréteuse, scope)
    diffère sors(interpréteuse, scope)

    pour scope.enfants {
        résultat = exécute_noeud(it, interpréteuse)
        si résultat.est_normal() {
            continue
        }

        si résultat.est_return() {
            si type_scope == TypeScope.FUNCTION {
                retourne normal_completion(résultat.valeur)
            }
        }

        retourne résultat
    }

    retourne résultat
}

entre :: fonc (interpréteuse: &Interpréteuse, scope: *NoeudScope)
{
    tableau_ajoute(*interpréteuse.pile_scope, FrameScope(scope))
}

sors :: fonc (interpréteuse: &Interpréteuse, scope: *NoeudScope)
{
    pile_scope := *interpréteuse.pile_scope    
    assert(pile_scope.taille > 0)
    assert(mémoire(pile_scope)[pile_scope.taille - 1].noeud_scope == scope)
    pile_scope.taille -= 1
}

donne_tas_de_mémoire :: fonc (interpréteuse: &Interpréteuse) -> *TasDeMémoire
{
    retourne interpréteuse.mv.donne_tas_de_mémoire()
}

donne_scope_courant :: fonc (interpréteuse: &Interpréteuse) -> *FrameScope
{
    retourne *interpréteuse.pile_scope[interpréteuse.pile_scope.taille -1]
}

donne_running_execution_context :: fonc (interpréteuse: &Interpréteuse) -> *ExecutionContext
{
    retourne interpréteuse.mv.donne_running_execution_context()
}

donne_lexical_environement :: fonc (interpréteuse: &Interpréteuse) -> *Environment
{
    rec := interpréteuse.donne_running_execution_context()
    retourne rec.lexical_environment
}

donne_realm :: fonc (interpréteuse: &Interpréteuse) -> *Realm
{
    rec := interpréteuse.donne_running_execution_context()
    retourne rec.realm
}

donne_noeud_évalué_courant :: fonc (interpréteuse: &Interpréteuse @inutilisée) -> *NoeudSyntaxique
{
    // À FAIRE
    retourne nul
}

crée_string_value_completion :: fonc (interpréteuse: &Interpréteuse, texte: chaine) -> CompletionRecord
{
    retourne crée_string_value_completion(interpréteuse, crée_chaine_utf16_unique(texte))
}

crée_string_value_completion :: fonc (interpréteuse: &Interpréteuse, texte: ECMAString) -> CompletionRecord
{
    string := crée_chaine(interpréteuse.donne_tas_de_mémoire(), texte)
    value := Valeur(String = string)
    retourne normal_completion(value)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Execution context.
 * \{ */

/* 9.4.2 Resolve Binding
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-resolvebinding */
resolve_binding :: fonc (interpréteuse: &Interpréteuse, nom: ECMAString, environment: *Environment = nul) -> CompletionRecord
{
    // 1. If env is not present or env is undefined, then
    // À FAIRE : undefined
    saufsi environment {
        // a. Set env to the running execution context's LexicalEnvironment.
        environment = interpréteuse.donne_lexical_environement()
    }

    // 2. Assert: env is an Environment Record.

    // 3. Let strict be IsStrict(the syntactic production that is being evaluated).
    strict := is_strict(interpréteuse.donne_noeud_évalué_courant())

    // 4. Return ? GetIdentifierReference(env, name, strict).
    retourne get_identifier_reference(interpréteuse.donne_tas_de_mémoire(), environment, nom, strict)
}

/* 9.4.6 GetGlobalObject
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-getglobalobject */
get_global_object :: fonc (interpréteuse: &Interpréteuse) -> *Object
{
    // 1. Let currentRealm be the current Realm Record.
    current_realm := interpréteuse.donne_realm()
    // 2. Return currentRealm.[[GlobalObject]].
    retourne current_realm.global_object
}

/** } */
