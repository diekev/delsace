GenreLexème :: énum {
    NonInitialisé

    Identifiant
    ChaineLittérale
    NombreLittéral
    TemplateLiteral
    TemplateLiteralStart
    TemplateLiteralMiddle
    TemplateLiteralEnd

    // opérateurs
    Plus
    Moins
    Étoile
    Slash
    Pourcent
    Inférieur
    Supérieur
    DécalageGauche
    DécalageDroite
    EtBinaire
    EtLogique
    OuBinaire
    OuLogique
    OuExclusif
    NonBinaire
    NonLogique
    Égal
    PlusÉgal
    MoinsÉgal
    ÉtoileÉgal
    SlashÉgal
    PourcentÉgal
    InférieurÉgal
    SupérieurÉgal
    DécalageGaucheÉgal
    DécalageDroiteÉgal
    EtBinaireÉgal
    OuBinaireÉgal
    OuExclusifÉgal
    EstÉgal
    NEspaPasÉgal
    EstÉgalStrict
    NEspaPasÉgalStrict
    PlusPlus
    MoinsMoins
    Interrogation
    DoublePoint
    Coalesce
    EtLogiqueÉgal
    OuLogiqueÉgal
    CoalesceÉgal
    DécalageDroiteNaturel
    DécalageDroiteNaturelÉgal
    Exponentiation
    ExponentiationÉgal
    Arrow

    // opérateurs unaires
    PlusUnaire
    MoinsUnaire
    PreIncrement
    PreDecrement

    // ponctuation
    Point
    Virgule
    PointVirgule
    ParenthèseOuvrante
    ParenthèseFermante
    AccoladeOuvrante
    AccoladeFermante
    CrochetOuvrant
    CrochetFermant

    // mots-clés
    As
    Async
    Await
    Break
    Case
    Catch
    Const
    Continue
    Debugger
    Default
    Delete
    Do
    Else
    Enum
    Export
    Extends
    False
    Finally
    For
    From
    Function
    Get
    If
    Import
    In
    InstanceOf
    Let
    Meta
    New
    Null
    Of
    Return
    Set
    Super
    Switch
    Target
    This
    Throw
    True
    Try
    Typeof
    Var
    Void
    While
    With
    Yield
}

rafine_genre_lexème_identifiant :: fonc (identifiant: chaine) -> GenreLexème
{
    si identifiant.taille == 2 {
        si identifiant == "as" { retourne GenreLexème.As }
        si identifiant == "do" { retourne GenreLexème.Do }
        si identifiant == "if" { retourne GenreLexème.If }
        si identifiant == "in" { retourne GenreLexème.In }
        si identifiant == "of" { retourne GenreLexème.Of }
    }
    sinon si identifiant.taille == 3 {
        si identifiant == "for" { retourne GenreLexème.For }
        si identifiant == "get" { retourne GenreLexème.Get }
        si identifiant == "let" { retourne GenreLexème.Let }
        si identifiant == "new" { retourne GenreLexème.New }
        si identifiant == "set" { retourne GenreLexème.Set }
        si identifiant == "try" { retourne GenreLexème.Try }
        si identifiant == "var" { retourne GenreLexème.Var }
    }
    sinon si identifiant.taille == 4 {
        si identifiant == "case" { retourne GenreLexème.Case }
        si identifiant == "else" { retourne GenreLexème.Else }
        si identifiant == "enum" { retourne GenreLexème.Enum }
        si identifiant == "from" { retourne GenreLexème.From }
        si identifiant == "meta" { retourne GenreLexème.Meta }
        si identifiant == "null" { retourne GenreLexème.Null }
        si identifiant == "this" { retourne GenreLexème.This }
        si identifiant == "true" { retourne GenreLexème.True }
        si identifiant == "void" { retourne GenreLexème.Void }
        si identifiant == "With" { retourne GenreLexème.With }
    }
    sinon si identifiant.taille == 5 {
        si identifiant == "async" { retourne GenreLexème.Async }
        si identifiant == "await" { retourne GenreLexème.Await }
        si identifiant == "break" { retourne GenreLexème.Break }
        si identifiant == "catch" { retourne GenreLexème.Catch }
        si identifiant == "const" { retourne GenreLexème.Const }
        si identifiant == "false" { retourne GenreLexème.False }
        si identifiant == "super" { retourne GenreLexème.Super }
        si identifiant == "throw" { retourne GenreLexème.Throw }
        si identifiant == "while" { retourne GenreLexème.While }
        si identifiant == "yield" { retourne GenreLexème.Yield }
    }
    sinon si identifiant.taille == 6 {
        si identifiant == "delete" { retourne GenreLexème.Delete }
        si identifiant == "export" { retourne GenreLexème.Export }
        si identifiant == "import" { retourne GenreLexème.Import }
        si identifiant == "return" { retourne GenreLexème.Return }
        si identifiant == "switch" { retourne GenreLexème.Switch }
        si identifiant == "target" { retourne GenreLexème.Target }
        si identifiant == "typeof" { retourne GenreLexème.Typeof }
    }
    sinon si identifiant.taille == 7 {
        si identifiant == "default" { retourne GenreLexème.Default }
        si identifiant == "extends" { retourne GenreLexème.Extends }
        si identifiant == "finally" { retourne GenreLexème.Finally }
    }
    sinon si identifiant.taille == 8 {
        si identifiant == "continue" { retourne GenreLexème.Continue }
        si identifiant == "debugger" { retourne GenreLexème.Debugger }
        si identifiant == "function" { retourne GenreLexème.Function }
    }
    sinon si identifiant.taille == 10 {
        si identifiant == "instanceof" { retourne GenreLexème.InstanceOf }
    }

    retourne GenreLexème.Identifiant
}

rafine_genre_lexème_opérateur :: fonc (identifiant: chaine) -> Optionnel(GenreLexème)
{
    si identifiant.taille == 1 {
        c := identifiant[0]

        si c == '+' { retourne GenreLexème.Plus }
        si c == '-' { retourne GenreLexème.Moins }
        si c == '/' { retourne GenreLexème.Slash }
        si c == '*' { retourne GenreLexème.Étoile }
        si c == '%' { retourne GenreLexème.Pourcent }
        si c == '<' { retourne GenreLexème.Inférieur }
        si c == '>' { retourne GenreLexème.Supérieur }
        si c == '=' { retourne GenreLexème.Égal }
        si c == '&' { retourne GenreLexème.EtBinaire }
        si c == '|' { retourne GenreLexème.OuBinaire }
        si c == '^' { retourne GenreLexème.OuExclusif }
        si c == '~' { retourne GenreLexème.NonBinaire }
        si c == '!' { retourne GenreLexème.NonLogique }
        si c == '?' { retourne GenreLexème.Interrogation }
        si c == ':' { retourne GenreLexème.DoublePoint }
    }
    sinon si identifiant.taille == 2 {
        si identifiant == "+=" { retourne GenreLexème.PlusÉgal }
        si identifiant == "-=" { retourne GenreLexème.MoinsÉgal }
        si identifiant == "*=" { retourne GenreLexème.ÉtoileÉgal }
        si identifiant == "**" { retourne GenreLexème.Exponentiation }
        si identifiant == "/=" { retourne GenreLexème.SlashÉgal }
        si identifiant == "%=" { retourne GenreLexème.PourcentÉgal }
        si identifiant == "<=" { retourne GenreLexème.InférieurÉgal }
        si identifiant == ">=" { retourne GenreLexème.SupérieurÉgal }
        si identifiant == "&=" { retourne GenreLexème.EtBinaireÉgal }
        si identifiant == "|=" { retourne GenreLexème.OuBinaireÉgal }
        si identifiant == "^=" { retourne GenreLexème.OuExclusifÉgal }
        si identifiant == "==" { retourne GenreLexème.EstÉgal }
        si identifiant == "!=" { retourne GenreLexème.NEspaPasÉgal }
        si identifiant == "++" { retourne GenreLexème.PlusPlus }
        si identifiant == "--" { retourne GenreLexème.MoinsMoins }
        si identifiant == "<<" { retourne GenreLexème.DécalageGauche }
        si identifiant == ">>" { retourne GenreLexème.DécalageDroite }
        si identifiant == "&&" { retourne GenreLexème.EtLogique }
        si identifiant == "||" { retourne GenreLexème.OuLogique }
        si identifiant == "??" { retourne GenreLexème.Coalesce }
        si identifiant == "=>" { retourne GenreLexème.Arrow }
    }
    sinon si identifiant.taille == 3 {
        si identifiant == "<<=" { retourne GenreLexème.DécalageGaucheÉgal }
        si identifiant == ">>=" { retourne GenreLexème.DécalageDroiteÉgal }
        si identifiant == ">>>" { retourne GenreLexème.DécalageDroiteNaturel }
        si identifiant == "===" { retourne GenreLexème.EstÉgalStrict }
        si identifiant == "!==" { retourne GenreLexème.NEspaPasÉgalStrict }
        si identifiant == "&&=" { retourne GenreLexème.EtLogiqueÉgal }
        si identifiant == "||=" { retourne GenreLexème.OuLogiqueÉgal }
        si identifiant == "??=" { retourne GenreLexème.CoalesceÉgal }
        si identifiant == "**=" { retourne GenreLexème.ExponentiationÉgal }
    }
    sinon si identifiant.taille == 4 {
        si identifiant == ">>>=" { retourne GenreLexème.DécalageDroiteNaturelÉgal }
    }
}

Lexème :: struct {
    texte: chaine
    genre: GenreLexème
}

Associativité :: énum {
    Aucune
    Gauche
    Droite
}

est_lexème_expression :: fonc (genre: GenreLexème) -> bool
{
    discr genre {
        Var,
        Let,
        Const,
        Identifiant,
        ChaineLittérale,
        TemplateLiteral,
        TemplateLiteralStart,
        NombreLittéral,
        ParenthèseOuvrante,
        AccoladeOuvrante,
        True,
        False,
        Function,
        Null, 
        CrochetOuvrant,
        This {
            retourne vrai
        }
        /* Toujours permis comme identifiant. */
        As, Async, From, Get, Meta, Of, Set, Target {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_lexème_expression_unaire :: fonc (genre: GenreLexème) -> bool
{
    discr genre {
        PlusPlus,
        MoinsMoins,
        Plus,
        Moins,
        NonBinaire,
        NonLogique,
        New,
        Typeof,
        Void,
        Delete  {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_lexème_expression_secondaire :: fonc (genre: GenreLexème) -> bool
{
    discr genre {
        Plus,
        PlusPlus,
        Moins,
        MoinsMoins,
        Étoile,
        Slash,
        Pourcent,
        Inférieur,
        Supérieur,
        DécalageGauche,
        DécalageDroite,
        EtBinaire,
        EtLogique,
        OuBinaire,
        OuLogique,
        OuExclusif,
        NonBinaire,
        NonLogique,
        Égal,
        PlusÉgal,
        MoinsÉgal,
        ÉtoileÉgal,
        SlashÉgal,
        PourcentÉgal,
        InférieurÉgal,
        SupérieurÉgal,
        DécalageGaucheÉgal,
        DécalageDroiteÉgal,
        EtBinaireÉgal,
        OuBinaireÉgal,
        OuExclusifÉgal,
        EstÉgal,
        NEspaPasÉgal,
        EstÉgalStrict,
        NEspaPasÉgalStrict,
        Point,
        ParenthèseOuvrante,
        CrochetOuvrant,
        Interrogation,
        Coalesce,
        EtLogiqueÉgal,
        OuLogiqueÉgal,
        CoalesceÉgal,
        DécalageDroiteNaturel,
        DécalageDroiteNaturelÉgal,
        Virgule,
        In,
        InstanceOf,
        Exponentiation,
        ExponentiationÉgal,
        Arrow {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_lexème_instruction :: fonc (genre: GenreLexème) -> bool
{
    discr genre {
        For,
        Function,
        Return,
        If,
        Try,
        Throw,
        Continue,
        Break,
        Switch,
        While,
        Do,
        Debugger {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

DrapeauxLexèmePourParsage :: énum_drapeau {
    EstExpression
    EstExpressionUnaire
    EstExpressionSecondaire
    EstInstruction
}

DonnéesLexèmePourParsage :: struct {
    associativité: Associativité
    précédence: z32
    drapeaux: DrapeauxLexèmePourParsage
}

données_lexèmes_pour_parsage: [GenreLexème.nombre_éléments]DonnéesLexèmePourParsage

initialise_données_lexèmes_pour_parsage :: fonc ()
{
    pour & données_lexèmes_pour_parsage {
        genre_lexème := (index_it comme z32) comme GenreLexème

        it.drapeaux.EstExpression = est_lexème_expression(genre_lexème)
        it.drapeaux.EstExpressionUnaire = est_lexème_expression_unaire(genre_lexème)
        it.drapeaux.EstExpressionSecondaire = est_lexème_expression_secondaire(genre_lexème)
        it.drapeaux.EstInstruction = est_lexème_instruction(genre_lexème)
    }

    /* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence */
    définis_données_précédence(GenreLexème.Virgule, 1, Associativité.Gauche)

    définis_données_précédence(GenreLexème.Égal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.PlusÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.MoinsÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.ÉtoileÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.SlashÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.PourcentÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.DécalageGaucheÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.DécalageDroiteÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.EtBinaireÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.OuBinaireÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.OuExclusifÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.Interrogation, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.ExponentiationÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.DécalageDroiteNaturelÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.EtLogiqueÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.OuLogiqueÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.CoalesceÉgal, 2, Associativité.Droite)
    définis_données_précédence(GenreLexème.Arrow, 2, Associativité.Droite)
    // définis_données_précédence(GenreLexème.Yield, 2, Associativité.Aucune)
    // définis_données_précédence(GenreLexème.YieldStar, 2, Associativité.Aucune)
    // définis_données_précédence(GenreLexème.Spread, 2, Associativité.Aucune)

    définis_données_précédence(GenreLexème.OuLogique, 3, Associativité.Gauche)
    définis_données_précédence(GenreLexème.Coalesce, 3, Associativité.Gauche)

    définis_données_précédence(GenreLexème.EtLogique, 4, Associativité.Gauche)

    définis_données_précédence(GenreLexème.OuBinaire, 5, Associativité.Gauche)

    définis_données_précédence(GenreLexème.OuExclusif, 6, Associativité.Gauche)

    définis_données_précédence(GenreLexème.EtBinaire, 7, Associativité.Gauche)

    définis_données_précédence(GenreLexème.EstÉgal, 8, Associativité.Gauche)
    définis_données_précédence(GenreLexème.NEspaPasÉgal, 8, Associativité.Gauche)
    définis_données_précédence(GenreLexème.EstÉgalStrict, 8, Associativité.Gauche)
    définis_données_précédence(GenreLexème.NEspaPasÉgalStrict, 8, Associativité.Gauche)

    définis_données_précédence(GenreLexème.Inférieur, 9, Associativité.Gauche)
    définis_données_précédence(GenreLexème.InférieurÉgal, 9, Associativité.Gauche)
    définis_données_précédence(GenreLexème.Supérieur, 9, Associativité.Gauche)
    définis_données_précédence(GenreLexème.SupérieurÉgal, 9, Associativité.Gauche)
    définis_données_précédence(GenreLexème.In, 9, Associativité.Gauche)
    définis_données_précédence(GenreLexème.InstanceOf, 9, Associativité.Gauche)

    définis_données_précédence(GenreLexème.DécalageGauche, 10, Associativité.Gauche)
    définis_données_précédence(GenreLexème.DécalageDroite, 10, Associativité.Gauche)
    définis_données_précédence(GenreLexème.DécalageDroiteNaturel, 10, Associativité.Gauche)

    définis_données_précédence(GenreLexème.Plus, 11, Associativité.Gauche)
    définis_données_précédence(GenreLexème.Moins, 11, Associativité.Gauche)

    définis_données_précédence(GenreLexème.Étoile, 12, Associativité.Gauche)
    définis_données_précédence(GenreLexème.Slash, 12, Associativité.Gauche)
    définis_données_précédence(GenreLexème.Pourcent, 12, Associativité.Gauche)

    définis_données_précédence(GenreLexème.Exponentiation, 13, Associativité.Droite)

    définis_données_précédence(GenreLexème.MoinsUnaire, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.PlusUnaire, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.NonBinaire, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.NonLogique, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.Typeof, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.Void, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.Delete, 14, Associativité.Aucune)
    // définis_données_précédence(GenreLexème.Await, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.PreIncrement, 14, Associativité.Aucune)
    définis_données_précédence(GenreLexème.PreDecrement, 14, Associativité.Aucune)

    définis_données_précédence(GenreLexème.PlusPlus, 15, Associativité.Aucune)
    définis_données_précédence(GenreLexème.MoinsMoins, 15, Associativité.Aucune)

    // définis_données_précédence(GenreLexème.NewSansArgument, 16, Associativité.Aucune)

    // définis_données_précédence(GenreLexème.Import, 17, Associativité.Aucune)
    définis_données_précédence(GenreLexème.ParenthèseOuvrante, 17, Associativité.Aucune)
    définis_données_précédence(GenreLexème.New, 17, Associativité.Aucune)
    définis_données_précédence(GenreLexème.CrochetOuvrant, 17, Associativité.Aucune)
    définis_données_précédence(GenreLexème.Point, 17, Associativité.Gauche)
    // définis_données_précédence(GenreLexème.OptionalChaining, 17, Associativité.Gauche)

    // définis_données_précédence(GenreLexème.Grouping, 18, Associativité.Aucune)
}

#ajoute_init initialise_données_lexèmes_pour_parsage()

définis_données_précédence :: fonc (genre: GenreLexème, précédence: z32, associativité: Associativité)
{
    données_lexèmes_pour_parsage[genre].associativité = associativité
    données_lexèmes_pour_parsage[genre].précédence = précédence
}
