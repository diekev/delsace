/* ------------------------------------------------------------------------- */
/** \nom ArrayObject
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-array-exotic-objects
 * \{ */

#port√©e_fichier

table_virtuelle_objet_array := TableVirtuelleObject(classe = ArrayObject, sur_define_own_property = array_instance_define_own_property)

#port√©e_export

ArrayObject :: struct {
    empl objet: Object
    table = *table_virtuelle_objet_array
}

array_instance_cr√©e :: fonc (realm: *Realm) -> *Object
{
    retourne realm.donne_tas_de_m√©moire().alloue(ArrayObject)
}

cr√©e_array :: fonc (tas_de_m√©moire: *TasDeM√©moire, array_prototype: *ArrayPrototype, nombre_√©l√©ments: z64) -> *ArrayObject
{
    r√©sultat := tas_de_m√©moire.alloue(ArrayObject)
    r√©sultat.prototype = array_prototype

    r√©sultat.ajoute_propri√©t√©(STR_length, Valeur(Number = nombre_√©l√©ments comme r64), Writable)

    retourne r√©sultat
}

array_set_length :: fonc (array: *ArrayObject, len: n32)
{
    desc: PropertyDescriptor
    desc.value = Valeur(Number = len comme r64)
    desc.writable = vrai
    _ := array_set_length(array, desc)
}

#port√©e_fichier

/* 10.4.2.1 [[DefineOwnProperty]] ( P, Desc )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-array-exotic-objects-defineownproperty-p-desc */
array_instance_define_own_property :: fonc (object: *Object, property_key: PropertyKey, desc: &PropertyDescriptor) -> bool
{
    A := object.v√©rifie_comme(ArrayObject)

    // 1. If P is "length", then
    si property_key == STR_length {
        // a. Return ? ArraySetLength(A, Desc).
        retourne array_set_length(A, desc)
    }

    // 2. Else if P is an array index, then
    si is_array_index(property_key) {
        // a. Let lengthDesc be OrdinaryGetOwnProperty(A, "length").
        length_desc := ordinary_get_own_property(A, STR_length).Quelque

        // b. Assert: IsDataDescriptor(lengthDesc) is true.
        assert(is_data_descriptor(length_desc))

        // c. Assert: lengthDesc.[[Configurable]] is false.
        assert(length_desc.configurable == faux)

        // d. Let length be lengthDesc.[[Value]].
        length := length_desc.value.Quelque

        // e. Assert: length is a non-negative integral Number.
        assert(is_non_negative_integral_number(length))

        // f. Let index be ! ToUint32(P).
        index := to_uint32(property_key)

        // g. If index ‚â• length and lengthDesc.[[Writable]] is false, return false.
        si index >= length.Number comme n32 && length_desc.writable == faux {
            retourne faux
        }

        // h. Let succeeded be ! OrdinaryDefineOwnProperty(A, P, Desc).
        succeeded := internal_define_own_property_by_index(A, index, desc)

        // i. If succeeded is false, return false.
        saufsi succeeded {
            retourne faux
        }

        // j. If index ‚â• length, then
        si index >= length.Number comme n32 {
            // i. Set lengthDesc.[[Value]] to index + 1ùîΩ.
            length_desc.value = Valeur(Number = (index + 1) comme r64)
            // ii. Set succeeded to ! OrdinaryDefineOwnProperty(A, "length", lengthDesc).
            succeeded = ordinary_define_own_property(A, STR_length, length_desc)
            // iii. Assert: succeeded is true.
            assert(succeeded)
        }

        // k. Return true.
        retourne vrai
    }

    // 3. Return ? OrdinaryDefineOwnProperty(A, P, Desc).
    retourne ordinary_define_own_property(object, property_key, desc)
}

/* 10.4.2.2 ArrayCreate ( length [ , proto ] )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arraycreate */
array_create :: fonc (realm: *Realm, length: r64, proto : *Object = nul) -> *Object
{
    // 1. If length > 2**32 - 1, throw a RangeError exception.
    max := (1 comme z64) << 32 - 1
    si length > max comme r64 {
        retourne lance_range_error(realm, "invalid array length")
    }

    // 2. If proto is not present, set proto to %Array.prototype%.
    saufsi proto {
        proto = realm.intrinsics.array_prototype
    }

    // 3. Let A be MakeBasicObject(¬´ [[Prototype]], [[Extensible]] ¬ª).
    A := make_basic_object(realm, array_instance_cr√©e)

    // 4. Set A.[[Prototype]] to proto.
    A.prototype = proto

    // 5. Set A.[[DefineOwnProperty]] as specified in 10.4.2.1.
    // Fait via array_instance_cr√©e.

    // 6. Perform ! OrdinaryDefineOwnProperty(A, "length", PropertyDescriptor { [[Value]]: ùîΩ(length), [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    desc: PropertyDescriptor
    initialise_property_descriptor(*desc, Valeur(Number = length), Writable)
    _ := ordinary_define_own_property(A, STR_length, desc)

    // 7. Return A.
    retourne A
}

/* 10.4.2.4 ArraySetLength ( A, Desc ) 
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arraysetlength */
array_set_length :: fonc (A: *ArrayObject, desc: &PropertyDescriptor) -> bool
{
    // 1. If Desc does not have a [[Value]] field, then
    saufsi desc.value.poss√®de_valeur() {
        // a. Return ! OrdinaryDefineOwnProperty(A, "length", Desc).
        retourne ordinary_define_own_property(A, STR_length, desc)
    }

    // 2. Let newLenDesc be a copy of Desc.
    new_len_desc := desc

    // 3. Let newLen be ? ToUint32(Desc.[[Value]]).
    new_len := to_uint32(desc.value.Quelque)

    // 4. Let numberLen be ? ToNumber(Desc.[[Value]]).
    interpr√©teuse := A.donne_tas_de_m√©moire().mv.interpr√©teuse
    assert(interpr√©teuse != nul)

    number_len := to_number(interpr√©teuse, desc.value.Quelque)
    si interpr√©teuse.poss√®de_exception() {
        retourne faux
    }

    // 5. If SameValueZero(newLen, numberLen) is false, throw a RangeError exception.
    si same_value_zero(new_len comme r64, number_len).est_false() {
        retourne lance_range_error(interpr√©teuse, "invalid array length")
    }

    // 6. Set newLenDesc.[[Value]] to newLen.
    new_len_desc.value = Valeur(Number = new_len comme r64)

    // 7. Let oldLenDesc be OrdinaryGetOwnProperty(A, "length").
    old_len_desc := ordinary_get_own_property(A, STR_length).Quelque

    // 8. Assert: IsDataDescriptor(oldLenDesc) is true.
    assert(is_data_descriptor(old_len_desc))

    // 9. Assert: oldLenDesc.[[Configurable]] is false.
    assert(old_len_desc.configurable.Quelque == faux)

    // 10. Let oldLen be oldLenDesc.[[Value]].
    old_len := old_len_desc.value.Quelque

    // 11. If newLen ‚â• oldLen, then
    si new_len comme r64 >= old_len.Number {
        // a. Return ! OrdinaryDefineOwnProperty(A, "length", newLenDesc).
        retourne ordinary_define_own_property(A, STR_length, new_len_desc)
    }

    // 12. If oldLenDesc.[[Writable]] is false, return false.
    si old_len_desc.writable.Quelque == faux {
        retourne faux
    }

    // 13. If newLenDesc does not have a [[Writable]] field or newLenDesc.[[Writable]] is true, then
    new_writable := faux
    si !new_len_desc.writable.poss√®de_valeur() || new_len_desc.writable.Quelque == vrai {
        // a. Let newWritable be true.
        new_writable = vrai
    }
    // 14. Else,
    sinon {
        // a. NOTE: Setting the [[Writable]] attribute to false is deferred in case any elements cannot be deleted.
        // b. Let newWritable be false.
        // c. Set newLenDesc.[[Writable]] to true.
        new_len_desc.writable = vrai
    }

    // 15. Let succeeded be ! OrdinaryDefineOwnProperty(A, "length", newLenDesc).
    succeeded := ordinary_define_own_property(A, STR_length, new_len_desc)

    // 16. If succeeded is false, return false.
    saufsi succeeded {
        retourne faux
    }

    // √Ä FAIRE : 17. For each own property key P of A such that P is an array index and ! ToUint32(P) ‚â• newLen, in descending numeric index order, do
        // a. Let deleteSucceeded be ! A.[[Delete]](P).
        // b. If deleteSucceeded is false, then
            // i. Set newLenDesc.[[Value]] to ! ToUint32(P) + 1ùîΩ.
            // ii. If newWritable is false, set newLenDesc.[[Writable]] to false.
            // iii. Perform ! OrdinaryDefineOwnProperty(A, "length", newLenDesc).
            // iv. Return false.
    // 18. If newWritable is false, then
    // a. Set succeeded to ! OrdinaryDefineOwnProperty(A, "length", PropertyDescriptor { [[Writable]]: false }).
    // b. Assert: succeeded is true.

    si new_len comme r64 < old_len.Number {
        retourne ordinary_define_own_property(A, STR_length, old_len_desc)
    }

    // 19. Return true.
    retourne vrai
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ArrayConstructor
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-constructor
 * \{ */

#port√©e_fichier

table_virtuelle_array_constructor := TableVirtuelleBuiltinFunction(classe = ArrayConstructor)

#port√©e_export

ArrayConstructor :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_array_constructor

    sur_call_or_construct = array_constructor_call_or_construct
}

cr√©e_array_constructor :: fonc (realm: *Realm, function_prototype: *FunctionPrototype , array_prototype: *ArrayPrototype) -> *ArrayConstructor
{
    tas_de_m√©moire := realm.donne_tas_de_m√©moire()
    r√©sultat := tas_de_m√©moire.alloue(ArrayConstructor)
    create_builtin_function(r√©sultat, 1, STR_Array, realm, function_prototype)

    /* https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype */
    r√©sultat.ajoute_propri√©t√©(STR_prototype, Valeur(Object = array_prototype), DrapeauxPropri√©t√©.z√©ro)

    /* https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.constructor */
    array_prototype.ajoute_propri√©t√©(STR_constructor, Valeur(Object = r√©sultat), DrapeauxPropri√©t√©.z√©ro)

    retourne r√©sultat
}

/* 23.1.1.1 Array ( ...values )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array */
array_constructor_call_or_construct :: fonc (empl params: *Param√®tresCallOrConstruct) -> Valeur
{
    realm := interpr√©teuse.donne_realm()

    // 1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.
    si new_target.est_undefined() {
        new_target.Object = donne_active_function_object(interpr√©teuse)
    }

    // 2. Let proto be ? GetPrototypeFromConstructor(newTarget, "%Array.prototype%").
    proto := get_prototype_from_constructor(realm, new_target.donne_objet().v√©rifie_comme(Function), realm.intrinsics.array_prototype)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 3. Let numberOfArgs be the number of elements in values.
    number_of_args := arguments.taille

    r√©sultat: *Object

    // 4. If numberOfArgs = 0, then
    si number_of_args == 0 {
        // a. Return ! ArrayCreate(0, proto).
        r√©sultat = array_create(realm, 0, realm.intrinsics.array_prototype)
    }
    // 5. Else if numberOfArgs = 1, then
    sinon si number_of_args == 1 {
        // a. Let len be values[0].
        len := params.donne_argument(0)

        // b. Let array be ! ArrayCreate(0, proto).
        array := array_create(realm, 0, proto)

        int_len: n32
        // c. If len is not a Number, then
        saufsi len.est_nombre() {
            // i. Perform ! CreateDataPropertyOrThrow(array, "0", len).
            create_data_property_or_throw(array, cr√©e_chaine_utf16_unique("0"), len)

            // ii. Let intLen be 1ùîΩ.
            int_len = 1
        }
        // d. Else,
        sinon {
            // i. Let intLen be ! ToUint32(len).
            int_len = to_uint32(len)
    
            // ii. If SameValueZero(intLen, len) is false, throw a RangeError exception.
            si same_value_zero(int_len comme r64, len).est_false() {
                retourne lance_range_error(interpr√©teuse, "invalid array length")
            }
        }

        // e. Perform ! Set(array, "length", intLen, true).
        set(array, STR_length, Valeur(Number = int_len comme r64), vrai)

        // f. Return array.
        r√©sultat = array
    }
    // 6. Else,
    sinon {
        // a. Assert: numberOfArgs ‚â• 2.
        assert(number_of_args >= 2)

        // b. Let array be ? ArrayCreate(numberOfArgs, proto).
        array := array_create(realm, number_of_args comme r64, proto)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }

        // c. Let k be 0.
        k : z64 = 0

        // d. Repeat, while k < numberOfArgs,
        tantque k < number_of_args {
            // i. Let Pk be ! ToString(ùîΩ(k)).
            pk := to_string(interpr√©teuse, Valeur(Number = k comme r64)).texte

            // ii. Let itemK be values[k].
            item_k := params.donne_argument(k)

            // iii. Perform ! CreateDataPropertyOrThrow(array, Pk, itemK).
            create_data_property_or_throw(array, pk, item_k)
        
            // iv. Set k to k + 1.
            k += 1
        }

        // e. Assert: The mathematical value of array's "length" property is numberOfArgs.

        // f. Return array.
        r√©sultat = array
    }

    retourne r√©sultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ArrayPrototype
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-properties-of-the-array-prototype-object
 * \{ */

#port√©e_fichier

table_virtuelle_array_prototype := TableVirtuelleObject(classe = ArrayPrototype)

#port√©e_export

ArrayPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_array_prototype
}

cr√©e_array_prototype :: fonc (tas_de_m√©moire: *TasDeM√©moire, prototype: *ObjectPrototype) -> *ArrayPrototype
{
    r√©sultat := tas_de_m√©moire.alloue(ArrayPrototype)
    r√©sultat.prototype = prototype

    r√©sultat.ajoute_propri√©t√©(STR_length, Valeur(Number = 0.0), Writable)
    r√©sultat.ajoute_fonction_native(STR_fill, array_prototype_fill, 1)
    r√©sultat.ajoute_fonction_native(STR_join, array_prototype_join)
    r√©sultat.ajoute_fonction_native(STR_push, array_prototype_push, 1)
    r√©sultat.ajoute_fonction_native(STR_toString, array_prototype_to_string)
    r√©sultat.ajoute_fonction_native(STR_values, array_prototype_values)
    r√©sultat.ajoute_fonction_native(PropertyKey(Symbol = *Symbol_iterator), array_prototype_values)

    retourne r√©sultat
}

/* @Tests
 * 23.1.3.7 Array.prototype.fill ( value [ , start [ , end ] ] )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.fill */
array_prototype_fill :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let O be ? ToObject(this value).
    O := to_object(interpr√©teuse.donne_realm(), this_value)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 2. Let len be ? LengthOfArrayLike(O).
    len := length_of_array_like(interpr√©teuse, O)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 3. Let relativeStart be ? ToIntegerOrInfinity(start).
    start := params.donne_argument(1)
    relative_start: r64
    saufsi start.est_undefined() {
        relative_start = to_integer_or_infinity(interpr√©teuse, start)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }
    }
    sinon {
        relative_start = 0.0
    }

    // 4. If relativeStart = -‚àû, let k be 0.
    k: r64
    si relative_start == R64_INFINIT√â_N√âGATIVE {
        k = 0.0
    }
    // 5. Else if relativeStart < 0, let k be max(len + relativeStart, 0).
    sinon si relative_start < 0.0 {
        k = max(len + relative_start, 0.0)
    }
    // 6. Else, let k be min(relativeStart, len).
    sinon {
        k = min(relative_start, len)
    }

    // 7. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).
    end := params.donne_argument(2)
    relative_end: r64
    si end.est_undefined() {
        relative_end = len
    }
    sinon {
        relative_end = to_integer_or_infinity(interpr√©teuse, end)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }
    }

    // 8. If relativeEnd = -‚àû, let final be 0.
    final: r64
    si relative_end == R64_INFINIT√â_N√âGATIVE {
        final = 0.0
    }
    // 9. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).
    sinon si relative_end < 0.0 {
        final = max(len + relative_end, 0.0)
    }
    // 10. Else, let final be min(relativeEnd, len).
    sinon {
        final = min(relative_end, len)
    }

    // 11. Repeat, while k < final,
    value := params.donne_argument(0)

    tantque k < final {
        // a. Let Pk be ! ToString(ùîΩ(k)).
        pk := to_string(interpr√©teuse, Valeur(Number = k comme n32 comme r64)).texte

        // b. Perform ? Set(O, Pk, value, true).
        set(O, pk, value, vrai)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }

        // c. Set k to k + 1.
        k = k + 1
    }

    // 12. Return O.
    retourne O
}

/* 23.1.3.18 Array.prototype.join ( separator )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.join */
array_prototype_join :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let O be ? ToObject(this value).
    O := to_object(interpr√©teuse.donne_realm(), this_value)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 2. Let len be ? LengthOfArrayLike(O).
    len := length_of_array_like(interpr√©teuse, O)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 3. If separator is undefined, let sep be ",".
    sep: ECMAString
    si arguments.taille == 0 {
        sep = cr√©e_chaine_utf16_unique(",")
    }
    // 4. Else, let sep be ? ToString(separator).
    sinon {
        str_sep := to_string(interpr√©teuse, params.donne_argument(0))
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }
        sep = str_sep.texte
    }

    // 5. Let R be the empty String.
    R: EnchaineuseUTF16
    initialise_enchaineuse(R)

    // 6. Let k be 0.
    k : n32 = 0

    // 7. Repeat, while k < len,
    tantque k < len comme n32 {
        // a. If k > 0, set R to the string-concatenation of R and sep.
        si k > 0 {
            ajoute(R, sep.donne_chaine_utf16())
        }

        // b. Let element be ? Get(O, ! ToString(ùîΩ(k))).
        element := get_by_index(O, k)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }

        // c. If element is neither undefined nor null, then
        saufsi element.est_nulle() || element.est_undefined() {
            // i. Let S be ? ToString(element).
            S := to_string(interpr√©teuse, element)
            si interpr√©teuse.poss√®de_exception() {
                retourne js_undefined
            }

            // ii. Set R to the string-concatenation of R and S.
            ajoute(R, S.texte.donne_chaine_utf16())
        }

        // d. Set k to k + 1.
        k += 1
    }

    // 8. Return R.
    r√©sultat := chaine_depuis_enchaineuse(R)
    diff√®re d√©truit_chaine(r√©sultat)
    retourne cr√©e_chaine(interpr√©teuse.donne_realm(), cr√©e_chaine_utf16_unique(r√©sultat))
}

/* 23.1.3.23 Array.prototype.push ( ...items )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.push */
array_prototype_push :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let O be ? ToObject(this value).
    O := to_object(interpr√©teuse.donne_realm(), this_value)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 2. Let len be ? LengthOfArrayLike(O).
    len := length_of_array_like(interpr√©teuse, O)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 3. Let argCount be the number of elements in items.
    // arg_count := arguments.taille

    // √Ä FAIRE : 4. If len + argCount > 2**53 - 1, throw a TypeError exception.

    // 5. For each element E of items, do
    pour arguments {
        // a. Perform ? Set(O, ! ToString(ùîΩ(len)), E, true).
        nom_propri√©t√© := to_string(interpr√©teuse, Valeur(Number = len)).texte
        set(O, nom_propri√©t√©, it, vrai)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }

        // b. Set len to len + 1.
        len += 1.0
    }

    // 6. Perform ? Set(O, "length", ùîΩ(len), true).
    set(O, STR_length, Valeur(Number = len), vrai)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 7. Return ùîΩ(len).
    retourne len
}

/* 23.1.3.36 Array.prototype.toString ( )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.tostring */
array_prototype_to_string :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let array be ? ToObject(this value).
    array := to_object(interpr√©teuse.donne_realm(), this_value)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 2. Let func be ? Get(array, "join").
    func := get(array, STR_join)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 3. If IsCallable(func) is false, set func to the intrinsic function %Object.prototype.toString%.
    saufsi is_callable(func) {
        panique("%Object.prototype.toString% non-impl√©ment√©")
    }

    // 4. Return ? Call(func, array).
    retourne call(interpr√©teuse, func, Valeur(Object = array))
}

/* 23.1.3.38 Array.prototype.values ( )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.values */
array_prototype_values :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let O be ? ToObject(this value)
    O := to_object(interpr√©teuse, this_value)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 2. Return CreateArrayIterator(O, value)
    retourne create_array_iterator(interpr√©teuse, O, IterationKind.VALUE)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 23.1.5 Array Iterator Objects
 * \{ */
#port√©e_fichier

table_virtuelle_objet_array_iterator := TableVirtuelleObject(classe = ArrayIterator)

#port√©e_export

IterationKind :: √©num {
    KEY_VALUE
    KEY
    VALUE
}

ArrayIterator :: struct {
    empl objet: Object
    table = *table_virtuelle_objet_array_iterator

    iterated_array_like: *Object @slot "[[IteratedArrayLike]]"
    array_like_next_index: z32 @slot "[[ArrayLikeNextIndex]]"
    array_like_iteration_kind: IterationKind @slot "[[ArrayLikeIterationKind]]"
}

array_iterator_instance_cr√©e :: fonc (realm: *Realm) -> *Object
{
    retourne realm.donne_tas_de_m√©moire().alloue(ArrayIterator)
}

/* 23.1.5.1 CreateArrayIterator ( array, kind )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-createarrayiterator */
create_array_iterator :: fonc (interpr√©teuse: *Interpr√©teuse, array: *Object, kind: IterationKind) -> *ArrayIterator
{
    // 1. Let iterator be OrdinaryObjectCreate(%ArrayIteratorPrototype%, ¬´ [[IteratedArrayLike]], [[ArrayLikeNextIndex]], [[ArrayLikeIterationKind]] ¬ª).
    realm := interpr√©teuse.donne_realm()
    iterator := ordinary_object_create(realm, realm.intrinsics.array_iterator_prototype, array_iterator_instance_cr√©e).v√©rifie_comme(ArrayIterator)

    // 2. Set iterator.[[IteratedArrayLike]] to array.
    iterator.iterated_array_like = array

    // 3. Set iterator.[[ArrayLikeNextIndex]] to 0.
    iterator.array_like_next_index = 0

    // 4. Set iterator.[[ArrayLikeIterationKind]] to kind.
    iterator.array_like_iteration_kind = kind

    // 5. Return iterator.
    retourne iterator
}

/* 23.1.5.2 The %ArrayIteratorPrototype% Object
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%arrayiteratorprototype%-object */
cr√©e_array_iterator_prototype :: fonc (realm: *Realm, prototype: *ObjectPrototype) -> *Object
{
    // √Ä FAIRE : %Iterator.prototype%
    r√©sultat := ordinary_object_create(realm, prototype, object_instance_cr√©e)

    ajoute_fonction_native(r√©sultat, STR_next, array_iterator_prototype_next)

    retourne r√©sultat
}

/* 23.1.5.2.1 %ArrayIteratorPrototype%.next ( )
 * https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%arrayiteratorprototype%.next */
array_iterator_prototype_next :: fonc (empl params: *Param√®tresObjectCall) -> Valeur
{
    // 1. Let O be the this value.
    o := this_value

    // 2. If O is not an Object, throw a TypeError exception.
    saufsi o.est_object() {
        _ := interpr√©teuse.lance_type_error("iterator is not an Object")
        retourne js_undefined
    }
    O := this_value.donne_objet() comme *ArrayIterator

    // 3. If O does not have all of the internal slots of an Array Iterator Instance (23.1.5.3), throw a TypeError exception.
    saufsi O.table.classe == ArrayIterator {
        _ := interpr√©teuse.lance_type_error("Object is not an array iterator")
        retourne js_undefined
    }

    // 4. Let array be O.[[IteratedArrayLike]].
    array := O.iterated_array_like

    // 5. If array is undefined, return CreateIteratorResultObject(undefined, true).
    si array == nul {
        retourne create_iterator_result_object(interpr√©teuse.donne_realm(), js_undefined, vrai)
    }

    // 6. Let index be O.[[ArrayLikeNextIndex]].
    index := O.array_like_next_index

    // 7. Let kind be O.[[ArrayLikeIterationKind]].
    kind := O.array_like_iteration_kind

    // √Ä FAIRE 8. If array has a [[TypedArrayName]] internal slot, then
        // a. Let taRecord be MakeTypedArrayWithBufferWitnessRecord(array, seq-cst).
        // b. If IsTypedArrayOutOfBounds(taRecord) is true, throw a TypeError exception.
        // c. Let len be TypedArrayLength(taRecord).
    // 9. Else,
        // a. Let len be ? LengthOfArrayLike(array).
    len := length_of_array_like(interpr√©teuse, array)
    si interpr√©teuse.poss√®de_exception() {
        retourne js_undefined
    }

    // 10. If index ‚â• len, then
    si index comme r64 >= len {
        // a. Set O.[[IteratedArrayLike]] to undefined.
        O.iterated_array_like = nul

        // b. Return CreateIteratorResultObject(undefined, true).
        retourne create_iterator_result_object(interpr√©teuse.donne_realm(), js_undefined, vrai)
    }

    // 11. Set O.[[ArrayLikeNextIndex]] to index + 1.
    O.array_like_next_index = index + 1

    // 12. Let indexNumber be ùîΩ(index).
    index_number := index comme r64

    result: Valeur

    // 13. If kind is key, then
    si kind == IterationKind.KEY {
        // a. Let result be indexNumber.
        result.Number = index_number
    }
    // 14. Else,
    sinon {
        // a. Let elementKey be ! ToString(indexNumber).
        element_key := to_string(interpr√©teuse, index_number)

        // b. Let elementValue be ? Get(array, elementKey).
        element_value := get(array, element_key.texte)
        si interpr√©teuse.poss√®de_exception() {
            retourne js_undefined
        }

        // c. If kind is value, then
        si kind == IterationKind.VALUE {
            // i. Let result be elementValue.
            result = element_value

        }
        // d. Else,
        sinon {
            // i. Assert: kind is key+value.
            assert(kind == IterationKind.KEY_VALUE)

            // ii. Let result be CreateArrayFromList(¬´ indexNumber, elementValue ¬ª).
            panique("non-impl√©ment√©")
        }
    }

    // 15. Return CreateIteratorResultObject(result, false).
    retourne create_iterator_result_object(interpr√©teuse.donne_realm(), result, faux)
}

/** \} */
