importe Chaine
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom StringPrototype
 * https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-the-string-prototype-object
 * \{ */

#port√©e_fichier

table_virtuelle_string_prototype := TableVirtuelleObject(classe = StringPrototype)

#port√©e_export

StringPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_string_prototype

    string_data: *PrimitiveChaine
}

cr√©e_string_prototype :: fonc (realm: *Realm, prototype: *ObjectPrototype) -> *StringPrototype
{
    tas_de_m√©moire := realm.donne_tas_de_m√©moire()
    r√©sultat := tas_de_m√©moire.alloue(StringPrototype)
    r√©sultat.prototype = prototype
    r√©sultat.string_data = cr√©e_chaine(realm, cr√©e_chaine_utf16_unique(""))
    r√©sultat.ajoute_propri√©t√©(STR_length, Valeur(Number = 0.0), DrapeauxPropri√©t√©.z√©ro)

    r√©sultat.ajoute_fonction_native(STR_indexOf, string_prototype_index_of, 1)

    retourne r√©sultat
}

#port√©e_fichier

/* 22.1.3.9 String.prototype.indexOf ( searchString [ , position ] )
 * https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.indexof */
string_prototype_index_of :: fonc (empl params: *Param√®tresObjectCall) -> CompletionRecord
{
    // 1. Let O be ? RequireObjectCoercible(this value).
    completion := require_object_coercible(interpr√©teuse.donne_realm(), this_value)
    saufsi completion.est_normal() {
        retourne completion
    }
    O := completion.valeur.V

    // 2. Let S be ? ToString(O).
    completion = to_string(interpr√©teuse, O)
    saufsi completion.est_normal() {
        retourne completion
    }
    S := completion.valeur.V.String.texte

    // 3. Let searchStr be ? ToString(searchString).
    completion = to_string(interpr√©teuse, params.donne_argument(0))
    saufsi completion.est_normal() {
        retourne completion
    }
    search_str := completion.valeur.V.String.texte

    // 4. Let pos be ? ToIntegerOrInfinity(position).
    position := params.donne_argument(1)
    completion = to_integer_or_infinity(interpr√©teuse, position)
    saufsi completion.est_normal() {
        retourne completion
    }
    pos := completion.valeur.V.Number

    // 5. Assert: If position is undefined, then pos is 0.
    assert(!position.est_undefined() || pos == 0.0)

    // 6. Let len be the length of S.
    len := S.taille()

    // 7. Let start be the result of clamping pos between 0 and len.
    start := pos
    si start < 0.0 {
        start = 0.0
    }
    sinon si start > len comme r64 {
        start = len comme r64
    }

    // 8. Let result be StringIndexOf(S, searchStr, start).
    result := string_index_of(S, search_str, start comme z64)

    // 9. If result is not-found, return -1ùîΩ.
    // 10. Return ùîΩ(result).
    retourne normal_completion(Valeur(Number = result comme r64))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom StringObject
 * https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects
 * \{ */

#port√©e_fichier

table_virtuelle_objet_chaine := TableVirtuelleObject(classe = StringObject)

#port√©e_export

StringObject :: struct {
    empl objet: Object
    table = *table_virtuelle_objet_chaine

    chn: *PrimitiveChaine
}

cr√©e_chaine :: fonc (tas_de_m√©moire: *TasDeM√©moire, string_prototype: *StringPrototype, chn: *PrimitiveChaine) -> *StringObject
{
    r√©sultat := tas_de_m√©moire.alloue(StringObject)
    r√©sultat.prototype = string_prototype
    r√©sultat.chn = chn

    r√©sultat.ajoute_propri√©t√©(STR_length, Valeur(Number = chn.texte.donne_chaine_utf16().taille() comme r64), DrapeauxPropri√©t√©.z√©ro)
    r√©sultat.ajoute_propri√©t√©(STR_prototype, Valeur(Object = string_prototype), DrapeauxPropri√©t√©.z√©ro)

    retourne r√©sultat
}

/* 6.1.4.1 StringIndexOf ( string, searchValue, fromIndex )
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-stringindexof */
string_index_of :: fonc (string: ECMAString, search_value: ECMAString, from_index: z64) -> z64
{
    // 1. Let len be the length of string.
    len := string.taille()

    // 2. If searchValue is the empty String and fromIndex ‚â§ len, return fromIndex.
    si search_value.est_vide() && from_index <= len {
        retourne from_index
    }

    // 3. Let searchLen be the length of searchValue.
    search_len := search_value.taille()

    // 4. For each integer i such that fromIndex ‚â§ i ‚â§ len - searchLen, in ascending order, do
    string_utf16 := string.donne_chaine_utf16()
    search_value_utf16 := search_value.donne_chaine_utf16()

    index := from_index
    index_final := len - search_len

    candidate: ChaineUTF16
    candidate.unit√©s.pointeur = string_utf16.unit√©s.pointeur + from_index
    candidate.unit√©s.taille = search_len

    tantque index <= index_final {
        // a. Let candidate be the substring of string from i to i + searchLen.
        // b. If candidate is searchValue, return i.
        si candidate == search_value_utf16 {
            retourne index
        }

        candidate.unit√©s.pointeur += 1
        index += 1
    }

    // 5. Return not-found.
    retourne -1
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom StringConstructor
 * https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-the-string-constructor
 * \{ */

#port√©e_fichier

table_virtuelle_string_constructor := TableVirtuelleObject(
    classe = StringConstructor
)

#port√©e_export

StringConstructor :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_string_constructor
}

cr√©e_string_constructor :: fonc (realm: *Realm, function_prototype: *FunctionPrototype, string_prototype: *StringPrototype) -> *StringConstructor
{
    tas_de_m√©moire := realm.donne_tas_de_m√©moire()
    r√©sultat := tas_de_m√©moire.alloue(StringConstructor)
    create_builtin_function(r√©sultat, 1, STR_String, realm, function_prototype)

    r√©sultat.ajoute_propri√©t√©(STR_prototype, Valeur(Object = string_prototype), DrapeauxPropri√©t√©.z√©ro)

    string_prototype.ajoute_propri√©t√©(STR_constructor, Valeur(Object = r√©sultat), DrapeauxPropri√©t√©.z√©ro)

    retourne r√©sultat
}

/** \} */
