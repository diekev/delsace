importe Chaine
importe Ensemble
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom Fonction
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-objects
 * Ce type ne sers qu à avoir une sûreté de type pour tous les objets fonctions.
 * \{ */

#portée_fichier

table_virtuelle_function := TableVirtuelleObject(classe = Function)

#portée_export

Function :: struct {
    empl objet: Object
    table = *table_virtuelle_function
}

crée_fonction :: fonc (function_prototype: *FunctionPrototype) -> *Function
{
    tas_de_mémoire := function_prototype.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(Function)
    résultat.prototype = function_prototype
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 10.2 ECMAScript Function Objects
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ecmascript-function-objects
 * \{ */

#portée_fichier

table_virtuelle_function_ecma := TableVirtuelleObject(classe = ECMAScriptFunction, sur_destruction = sur_destruction_objet, sur_call = sur_appel_fonction_ecma, sur_construct = sur_construct_fonction_ecma)

#portée_export

LEXICAL_THIS :: vrai
NON_LEXICAL_THIS :: faux

ThisMode :: énum {
    GLOBAL
    LEXICAL
    STRICT
}

ConstructorKind :: énum {
    Base
}

ECMAScriptFunction :: struct {
    empl function: Function
    table = *table_virtuelle_function_ecma

    corps: *NoeudSyntaxique
    formal_parameters: [..]*NoeudSyntaxique

    environment: *Environment
    private_environment: *PrivateEnvironment
    this_mode: ThisMode
    strict := faux
    is_class_constructor := faux
    realm: *Realm
    script_or_module: *Script // ScriptOrModule
    constructor_kind: ConstructorKind
}

/* 10.2.1 [[Call]] ( thisArgument, argumentsList )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ecmascript-function-objects-call-thisargument-argumentslist */
sur_appel_fonction_ecma :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    assert(object.donne_classe() == ECMAScriptFunction)
    F := object comme *ECMAScriptFunction

    mv := interpréteuse.mv

    // 1. Let callerContext be the running execution context.
    caller_context := interpréteuse.donne_running_execution_context()

    // 2. Let calleeContext be PrepareForOrdinaryCall(F, undefined).
    callee_context := prepare_for_ordinary_call(interpréteuse, F, js_undefined)

    // 3. Assert: calleeContext is now the running execution context.
    assert(callee_context == interpréteuse.donne_running_execution_context())

    // 4. If F.[[IsClassConstructor]] is true, then
    si F.is_class_constructor {
        // a. Let error be a newly created TypeError object.
        // b. NOTE: error is created in calleeContext with F's associated Realm Record.
        // c. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
        mv.dépile_execution_context()
        assert(caller_context == mv.donne_running_execution_context())

        // d. Return ThrowCompletion(error).
        panique("[[Call]] sur class constructor non-implémenté")
    }

    // 5. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).
    ordinary_call_bind_this(F, callee_context, this_value)

    // 6. Let result be Completion(OrdinaryCallEvaluateBody(F, argumentsList)).
    result := ordinary_call_evaluate_body(interpréteuse, F, arguments)

    // 7. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
    mv.dépile_execution_context()
    assert(caller_context == mv.donne_running_execution_context())

    // 8. If result is a return completion, return result.[[Value]].
    si result.est_return() {
        retourne normal_completion(result.valeur)
    }

    // 9. ReturnIfAbrupt(result).
    si result.est_abrupt() {
        retourne result
    }

    // 10. Return undefined.
    retourne normal_completion(js_undefined)
}

/* 10.2.1.1 PrepareForOrdinaryCall ( F, newTarget )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-prepareforordinarycall */
prepare_for_ordinary_call :: fonc (interpréteuse: *Interpréteuse, F: *ECMAScriptFunction, new_target: Valeur) -> *ExecutionContext
{
    // 1. Let callerContext be the running execution context.
    caller_context := interpréteuse.donne_running_execution_context()

    // 2. Let calleeContext be a new ECMAScript code execution context.
    callee_context := crée_execution_context(interpréteuse.donne_tas_de_mémoire())

    // 3. Set the Function of calleeContext to F.
    callee_context.function = F

    // 4. Let calleeRealm be F.[[Realm]].
    callee_realm := F.realm

    // 5. Set the Realm of calleeContext to calleeRealm.
    callee_context.realm = callee_realm

    // 6. Set the ScriptOrModule of calleeContext to F.[[ScriptOrModule]].
    callee_context.script_or_module = F.script_or_module

    // 7. Let localEnv be NewFunctionEnvironment(F, newTarget).
    local_env := new_function_environment(F, new_target)

    // 8. Set the LexicalEnvironment of calleeContext to localEnv.
    callee_context.lexical_environment = local_env

    // 9. Set the VariableEnvironment of calleeContext to localEnv.
    callee_context.variable_environment = local_env

    // 10. Set the PrivateEnvironment of calleeContext to F.[[PrivateEnvironment]].
    callee_context.private_environment = F.private_environment

    // 11. If callerContext is not already suspended, suspend callerContext.
    caller_context.suspend()

    // 12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.
    mv := interpréteuse.mv
    mv.empile_execution_context(callee_context)

    // 13. NOTE: Any exception objects produced after this point are associated with calleeRealm.

    // 14. Return calleeContext.
    retourne callee_context
}

/* 10.2.1.2 OrdinaryCallBindThis ( F, calleeContext, thisArgument )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarycallbindthis */
ordinary_call_bind_this :: fonc (F: *ECMAScriptFunction, callee_context: *ExecutionContext, this_argument: Valeur)
{
    // 1. Let thisMode be F.[[ThisMode]].
    this_mode := F.this_mode

    // 2. If thisMode is LEXICAL, return UNUSED.
    si this_mode == ThisMode.LEXICAL {
        retourne
    }

    // 3. Let calleeRealm be F.[[Realm]].
    callee_realm := F.realm

    // 4. Let localEnv be the LexicalEnvironment of calleeContext.
    local_env := callee_context.lexical_environment

    this_value: Valeur
    // 5. If thisMode is STRICT, then
    si this_mode == ThisMode.STRICT {
        // a. Let thisValue be thisArgument.
        this_value = this_argument
    }
    // 6. Else,
    sinon {
        // a. If thisArgument is either undefined or null, then
        si this_argument.est_undefined() || this_argument.est_nulle() {
            // i. Let globalEnv be calleeRealm.[[GlobalEnv]].
            global_env := callee_realm.global_environment

            // ii. Assert: globalEnv is a Global Environment Record.
            assert(global_env.donne_classe() == GlobalEnvironment)

            // iii. Let thisValue be globalEnv.[[GlobalThisValue]].
            this_value = global_env.global_this_value
        }
        // b. Else,
        sinon {
            // i. Let thisValue be ! ToObject(thisArgument).
            // ii. NOTE: ToObject produces wrapper objects using calleeRealm.
            this_value = vers_objet(callee_realm, this_argument).valeur.V
        }
    }

    // 7. Assert: localEnv is a Function Environment Record.
    assert(local_env.donne_classe() == FunctionEnvironment)

    // 8. Assert: The next step never returns an abrupt completion because localEnv.[[ThisBindingStatus]] is not INITIALIZED.
    // 9. Perform ! localEnv.BindThisValue(thisValue).
    completion := bind_this_value(local_env comme *FunctionEnvironment, this_value)
    assert(completion.est_normal())

    // 10. Return UNUSED.
    retourne
}

/* 10.2.1.3 Runtime Semantics: EvaluateBody
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-runtime-semantics-evaluatebody */
evaluate_body :: fonc (interpréteuse: *Interpréteuse, function_object: *ECMAScriptFunction, arguments_list: []Valeur) -> CompletionRecord
{
    // À FAIRE : tous les cas
    // FunctionBody : FunctionStatementList
    // 1. Return ? EvaluateFunctionBody of FunctionBody with arguments functionObject and argumentsList.
    retourne evaluate_function_body(interpréteuse, function_object, arguments_list)
}

/* 10.2.1.4 OrdinaryCallEvaluateBody ( F, argumentsList )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarycallevaluatebody */
ordinary_call_evaluate_body :: fonc (interpréteuse: *Interpréteuse, F: *ECMAScriptFunction, arguments_list: []Valeur) -> CompletionRecord
{
    // 1. Return ? EvaluateBody of F.[[ECMAScriptCode]] with arguments F and argumentsList.
    retourne evaluate_body(interpréteuse, F, arguments_list)
}

/* 10.2.2 [[Construct]] ( argumentsList, newTarget )
 * https://tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget */
sur_construct_fonction_ecma :: fonc (empl params: *ParamètresObjectConstruct) -> CompletionRecord
{
    assert(object.donne_classe() == ECMAScriptFunction)
    F := object comme *ECMAScriptFunction

    mv := interpréteuse.mv
    realm := interpréteuse.donne_realm()

    // 1. Let callerContext be the running execution context.
    caller_context := interpréteuse.donne_running_execution_context()

    // 2. Let kind be F.[[ConstructorKind]].
    kind := F.constructor_kind

    // 3. If kind is base, then
    this_argument: Valeur
    si kind == ConstructorKind.Base {
        // À FAIRE : a. Let thisArgument be ? OrdinaryCreateFromConstructor(newTarget, "%Object.prototype%").
        this_argument.Object = crée_objet(realm.donne_tas_de_mémoire(), realm.intrinsics.object_prototype)
    }

    // 4. Let calleeContext be PrepareForOrdinaryCall(F, newTarget).
    callee_context := prepare_for_ordinary_call(interpréteuse, F, new_target)

    // 5. Assert: calleeContext is now the running execution context.
    assert(mv.donne_running_execution_context() == callee_context)

    // 6. If kind is base, then
    si kind == ConstructorKind.Base {
        // a. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).
        ordinary_call_bind_this(F, callee_context, this_argument)

        // À FAIRE : b. Let initializeResult be Completion(InitializeInstanceElements(thisArgument, F)).
        // c. If initializeResult is an abrupt completion, then
            // i. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
            // ii. Return ? initializeResult.
    }

    // 7. Let constructorEnv be the LexicalEnvironment of calleeContext.
    constructor_env := callee_context.lexical_environment

    // 8. Let result be Completion(OrdinaryCallEvaluateBody(F, argumentsList)).
    result := ordinary_call_evaluate_body(interpréteuse, F, arguments)

    // 9. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
    mv.dépile_execution_context()
    assert(mv.donne_running_execution_context() == caller_context)
    
    // 10. If result is a return completion, then
    si result.est_return() {
        result_value := result.valeur.V

        // a. If result.[[Value]] is an Object, return result.[[Value]].
        si result_value.est_object() {
            retourne normal_completion(result_value)
        }

        // b. If kind is base, return thisArgument.

        // c. If result.[[Value]] is not undefined, throw a TypeError exception.
        saufsi result_value.est_undefined() {
            retourne lance_type_error(interpréteuse, "unexpected return value from constructor")
        }
    }
    // 11. Else,
    sinon si result.est_abrupt() {
        // a. ReturnIfAbrupt(result).
        retourne result
    }

    // 12. Let thisBinding be ? constructorEnv.GetThisBinding().
    completion := constructor_env.get_this_binding(interpréteuse.donne_realm())
    saufsi completion.est_normal() {
        retourne completion
    }
    this_binding := completion.valeur.V

    // 13. Assert: thisBinding is an Object.
    assert(this_binding.est_object())
    
    // 14. Return thisBinding.
    retourne normal_completion(this_binding)
}

/* 10.2.3 OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, env, privateEnv )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryfunctioncreate 
 * À FAIRE : paramètres et étapes manquants */
ordinary_function_create :: fonc (realm: *Realm, function_prototype: *FunctionPrototype, params: [..]*NoeudSyntaxique, corps: *NoeudSyntaxique, this_mode: bool, env: *Environment, private_env: *PrivateEnvironment) -> *ECMAScriptFunction
{
    tas_de_mémoire := function_prototype.donne_tas_de_mémoire()

    // 1. Let internalSlotsList be the internal slots listed in Table 30.
    // 2. Let F be OrdinaryObjectCreate(functionPrototype, internalSlotsList).
    F := tas_de_mémoire.alloue(ECMAScriptFunction)
    F.prototype = function_prototype

    // 3. Set F.[[Call]] to the definition specified in 10.2.1.
    // Ceci est fait via la table virtuelle.

    // 4. Set F.[[SourceText]] to sourceText.

    // 5. Set F.[[FormalParameters]] to ParameterList.
    F.formal_parameters = params

    // 6. Set F.[[ECMAScriptCode]] to Body.
    F.corps = corps

    // 7. Let Strict be IsStrict(Body).
    strict := is_strict(corps)

    // 8. Set F.[[Strict]] to Strict.
    F.strict = strict

    // 9. If thisMode is LEXICAL-THIS, set F.[[ThisMode]] to LEXICAL.
    si this_mode == LEXICAL_THIS {
        F.this_mode = ThisMode.LEXICAL
    }
    // 10. Else if Strict is true, set F.[[ThisMode]] to STRICT.
    sinon si strict {
        F.this_mode = ThisMode.STRICT
    }
    // 11. Else, set F.[[ThisMode]] to GLOBAL.
    sinon {
        F.this_mode = ThisMode.GLOBAL
    }

    // 12. Set F.[[IsClassConstructor]] to false.
    F.is_class_constructor = faux

    // 13. Set F.[[Environment]] to env.
    F.environment = env

    // 14. Set F.[[PrivateEnvironment]] to privateEnv.
    F.private_environment = private_env

    // 15. Set F.[[ScriptOrModule]] to GetActiveScriptOrModule().
    F.script_or_module = get_active_script_or_module(realm.donne_mv())

    // 16. Set F.[[Realm]] to the current Realm Record.
    F.realm = realm

    // 17. Set F.[[HomeObject]] to undefined.
    // 18. Set F.[[Fields]] to a new empty List.
    // 19. Set F.[[PrivateMethods]] to a new empty List.
    // 20. Set F.[[ClassFieldInitializerName]] to EMPTY.
    // 21. Let len be the ExpectedArgumentCount of ParameterList.

    // 22. Perform SetFunctionLength(F, len).
    set_function_length(F, params.taille comme n64)

    // 23. Return F.
    retourne F
}

/* 10.2.5 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )
 * https://tc39.es/ecma262/#sec-makeconstructor */
make_constructor :: fonc (F: *ECMAScriptFunction)
{
    // À FAIRE : complète
    // 1. If F is an ECMAScript function object, then
        // a. Assert: IsConstructor(F) is false.
        // b. Assert: F is an extensible object that does not have a "prototype" own property.
        // c. Set F.[[Construct]] to the definition specified in 10.2.2.
    // 2. Else,
       // a. Set F.[[Construct]] to the definition specified in 10.3.2.

    // 3. Set F.[[ConstructorKind]] to base.
    F.constructor_kind = ConstructorKind.Base

    // 4. If writablePrototype is not present, set writablePrototype to true.
    // 5. If prototype is not present, then
        // a. Set prototype to OrdinaryObjectCreate(%Object.prototype%).
    // b. Perform ! DefinePropertyOrThrow(prototype, "constructor", PropertyDescriptor { [[Value]]: F, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: true }).
    // 6. Perform ! DefinePropertyOrThrow(F, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).
    // 7. Return unused.
}

/* 10.2.9 SetFunctionName ( F, name [ , prefix ] )
 * https://tc39.es/ecma262/#sec-setfunctionname */
set_function_name :: fonc (F: *Object, name: PropertyKey)
{
    // À FAIRE : 1. Assert: F is an extensible object that does not have a "name" own property.
    assert(has_own_property(F, STR_name).valeur.V.est_false())

    // 2. If name is a Symbol, then
    si name.est_symbol() {
        // a. Let description be name's [[Description]] value.
        description := name.Symbol.description

        // b. If description is undefined, set name to the empty String.
        saufsi description.possède_valeur() {
            name = crée_chaine_utf16_unique_vide()
        }
        // c. Else, set name to the string-concatenation of "[", description, and "]".
        sinon {
            chn := imprime_chaine("[%]", description.Quelque)
            diffère déloge(chn)

            name = crée_chaine_utf16_unique(chn)
        }
    }

    // À FAIRE : 3. Else if name is a Private Name, then
        // a. Set name to name.[[Description]].

    // 4. If F has an [[InitialName]] internal slot, then
        // a. Set F.[[InitialName]] to name.

    // 5. If prefix is present, then
        // a. Set name to the string-concatenation of prefix, the code unit 0x0020 (SPACE), and name.
        // b. If F has an [[InitialName]] internal slot, then
            // i. Optionally, set F.[[InitialName]] to name.

    // 6. Perform ! DefinePropertyOrThrow(F, "name", PropertyDescriptor { [[Value]]: name, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).
    desc: PropertyDescriptor
    desc.value = Valeur(String = crée_chaine(F.donne_tas_de_mémoire(), name.String))
    desc.configurable = vrai
    completion := define_property_or_throw(F, STR_name, desc)
    assert(completion.est_normal())

    // 7. Return unused.
}

/* 10.2.10 SetFunctionLength ( F, length )
 * https://tc39.es/ecma262/#sec-setfunctionname */
set_function_length :: fonc (F: *Object, length: n64)
{
    // 1. Assert: F is an extensible object that does not have a "length" own property.
    // À FAIRE : extensible object
    assert(has_own_property(F, STR_length).valeur.V.est_false())

    // 2. Perform ! DefinePropertyOrThrow(F, "length", PropertyDescriptor { [[Value]]: 𝔽(length), [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).
    desc: PropertyDescriptor
    desc.value = Valeur(Number = length comme r64)
    desc.configurable = vrai
    completion := define_property_or_throw(F, STR_length, desc)
    assert(completion.est_normal())

    // 3. Return unused.
}

/* 10.2.11 FunctionDeclarationInstantiation ( func, argumentsList )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-functiondeclarationinstantiation */
function_declaration_instantiation :: fonc (interpréteuse: *Interpréteuse, func: *ECMAScriptFunction, arguments_list: []Valeur) -> CompletionRecord
{
    // À FAIRE

    // 1. Let calleeContext be the running execution context.
    callee_context := interpréteuse.donne_running_execution_context()

    // 2. Let code be func.[[ECMAScriptCode]].
    // code := func.corps

    // 3. Let strict be func.[[Strict]].
    strict := func.strict

    // 4. Let formals be func.[[FormalParameters]].
    formals := func.formal_parameters

    // 5. Let parameterNames be the BoundNames of formals.
    // À FAIRE : BoundNames
    parameter_names: [..]ECMAString
    diffère déloge(parameter_names)

    pour formals {
        assert(it.type == Identifier)
        tableau_ajoute(*parameter_names, (it comme *Identifier).nom)
    }

    // 6. If parameterNames has any duplicate entries, let hasDuplicates be true. Otherwise, let hasDuplicates be false.
    // 7. Let simpleParameterList be IsSimpleParameterList of formals.

    // 8. Let hasParameterExpressions be ContainsExpression of formals.
    // À FAIRE : ContainsExpression
    has_parameter_expression := faux

    // 9. Let varNames be the VarDeclaredNames of code.
    // 10. Let varDeclarations be the VarScopedDeclarations of code.
    // 11. Let lexicalNames be the LexicallyDeclaredNames of code.
    // 12. Let functionNames be a new empty List.
    // 13. Let functionsToInitialize be a new empty List.
    // 14. For each element d of varDeclarations, in reverse List order, do
        // a. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
            // i. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.
            // ii. Let fn be the sole element of the BoundNames of d.
            // iii. If functionNames does not contain fn, then
                // 1. Insert fn as the first element of functionNames.
                // 2. NOTE: If there are multiple function declarations for the same name, the last declaration is used.
                // 3. Insert d as the first element of functionsToInitialize.
    // 15. Let argumentsObjectNeeded be true.
    // 16. If func.[[ThisMode]] is LEXICAL, then
        // a. NOTE: Arrow functions never have an arguments object.
        // b. Set argumentsObjectNeeded to false.
    // 17. Else if parameterNames contains "arguments", then
        // a. Set argumentsObjectNeeded to false.
    // 18. Else if hasParameterExpressions is false, then
        // a. If functionNames contains "arguments" or lexicalNames contains "arguments", then
            // i. Set argumentsObjectNeeded to false.

    env: *Environment
    // 19. If strict is true or hasParameterExpressions is false, then
    si strict || has_parameter_expression == faux {
        // a. NOTE: Only a single Environment Record is needed for the parameters, since calls to eval in strict mode code cannot create new bindings which are visible outside of the eval.
        // b. Let env be the LexicalEnvironment of calleeContext.
        env = callee_context.lexical_environment
    }
    // 20. Else,
    sinon {
        // a. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.
        // b. Let calleeEnv be the LexicalEnvironment of calleeContext.
        // c. Let env be NewDeclarativeEnvironment(calleeEnv).
        // d. Assert: The VariableEnvironment of calleeContext and calleeEnv are the same Environment Record.
        // e. Set the LexicalEnvironment of calleeContext to env.
    }

    // 21. For each String paramName of parameterNames, do
    pour param_name dans parameter_names {
        // a. Let alreadyDeclared be ! env.HasBinding(paramName).
        already_declared := env.has_binding(param_name).valeur.V

        // b. NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.

        // c. If alreadyDeclared is false, then
        si already_declared.est_false() {
            // i. Perform ! env.CreateMutableBinding(paramName, false).
            env.create_mutable_binding(param_name, faux)

            // ii. If hasDuplicates is true, then
                // 1. Perform ! env.InitializeBinding(paramName, undefined).
        }
    }

    // 22. If argumentsObjectNeeded is true, then
        // a. If strict is true or simpleParameterList is false, then
            // i. Let ao be CreateUnmappedArgumentsObject(argumentsList).
        // b. Else,
            // i. NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.
            // ii. Let ao be CreateMappedArgumentsObject(func, formals, argumentsList, env).
        // c. If strict is true, then
            // i. Perform ! env.CreateImmutableBinding("arguments", false).
            // ii. NOTE: In strict mode code early errors prevent attempting to assign to this binding, so its mutability is not observable.
        // d. Else,
            // i. Perform ! env.CreateMutableBinding("arguments", false).
        // e. Perform ! env.InitializeBinding("arguments", ao).
        // f. Let parameterBindings be the list-concatenation of parameterNames and « "arguments" ».
    // 23. Else,
        // a. Let parameterBindings be parameterNames.

    // 24. Let iteratorRecord be CreateListIteratorRecord(argumentsList).
    // 25. If hasDuplicates is true, then
        // a. Perform ? IteratorBindingInitialization of formals with arguments iteratorRecord and undefined.
    // 26. Else,
        // a. Perform ? IteratorBindingInitialization of formals with arguments iteratorRecord and env.
    pour parameter_names {
        si index_it >= arguments_list.taille {
            arrête
        }

        _ := env.initialize_binding(it, arguments_list[index_it])
    }

    var_env: *Environment
    // 27. If hasParameterExpressions is false, then
    si has_parameter_expression == faux {
        // a. NOTE: Only a single Environment Record is needed for the parameters and top-level vars.
        // b. Let instantiatedVarNames be a copy of the List parameterBindings.
        // c. For each element n of varNames, do
        assert(func.corps != nul && func.corps.type == BlockStatement)
        bloc := func.corps comme *BlockStatement

        instantiated_names: [..]ECMAString
        diffère déloge(instantiated_names)

        pour bloc.enfants {
            si it.type != VariableDeclaration {
                continue
            }

            var_decl := it comme *VariableDeclaration
            si var_decl.nature != VariableDeclarationKind.Var {
                continue
            }

            // i. If instantiatedVarNames does not contain n, then
                // 1. Append n to instantiatedVarNames.
                // 2. Perform ! env.CreateMutableBinding(n, false).
                // 3. Perform ! env.InitializeBinding(n, undefined).

            pour expr dans var_decl.expressions {
                declarator := expr comme *VariableDeclarator
                assert(declarator.id.type == Identifier)
                id := declarator.id comme *Identifier

                si ensemble_possède(*instantiated_names, id.nom) {
                    continue
                }

                env.create_mutable_binding(id.nom, faux)
                _ := env.initialize_binding(id.nom, js_undefined)

                ensemble_ajoute(*instantiated_names, id.nom)
            }
        }

        // d. Let varEnv be env.
        var_env = env
    }
    // 28. Else,
    sinon {
        panique("has_parameter_expression non-implémenté")
        // a. NOTE: A separate Environment Record is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.
        // b. Let varEnv be NewDeclarativeEnvironment(env).
        // c. Set the VariableEnvironment of calleeContext to varEnv.
        // d. Let instantiatedVarNames be a new empty List.
        // e. For each element n of varNames, do
            // i. If instantiatedVarNames does not contain n, then
                // 1. Append n to instantiatedVarNames.
                // 2. Perform ! varEnv.CreateMutableBinding(n, false).
                // 3. If parameterBindings does not contain n, or if functionNames contains n, then
                    // a. Let initialValue be undefined.
                // 4. Else,
                    // a. Let initialValue be ! env.GetBindingValue(n, false).
                // 5. Perform ! varEnv.InitializeBinding(n, initialValue).
                // 6. NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.
    }

    // 29. NOTE: Annex B.3.2.1 adds additional steps at this point.

    // 30. If strict is false, then
    lex_env: *Environment
    si strict == faux {
        // a. Let lexEnv be NewDeclarativeEnvironment(varEnv).
        lex_env = new_declarative_environment(func.donne_tas_de_mémoire(), var_env)
        // b. NOTE: Non-strict functions use a separate Environment Record for top-level lexical declarations so that a direct eval can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict direct eval always places all declarations into a new Environment Record.
    }
    // 31. Else,
    sinon {
        // a. Let lexEnv be varEnv.
        lex_env = var_env
    }

    // 32. Set the LexicalEnvironment of calleeContext to lexEnv.
    callee_context.lexical_environment = lex_env

    // 33. Let lexDeclarations be the LexicallyScopedDeclarations of code.
    // 34. For each element d of lexDeclarations, do
        // a. NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.
        // b. For each element dn of the BoundNames of d, do
            // i. If IsConstantDeclaration of d is true, then
                // 1. Perform ! lexEnv.CreateImmutableBinding(dn, true).
            // ii. Else,
                // 1. Perform ! lexEnv.CreateMutableBinding(dn, false).

    // 35. Let privateEnv be the PrivateEnvironment of calleeContext.
    private_env := callee_context.private_environment

    // 36. For each Parse Node f of functionsToInitialize, do
    assert(func.corps != nul && func.corps.type == BlockStatement)
    bloc := func.corps comme *BlockStatement
    pour bloc.enfants {
        saufsi it.type == FunctionDeclaration {
            continue
        }

        function := it comme *FunctionDeclaration
        si function.id == nul {
            continue
        }

        // a. Let fn be the sole element of the BoundNames of f.
        fn := function.id.nom

        // b. Let fo be InstantiateFunctionObject of f with arguments lexEnv and privateEnv.
        fo := instantiate_function_object(interpréteuse.donne_realm(), function, lex_env, private_env)
    
        // c. Perform ! varEnv.SetMutableBinding(fn, fo, false).
        completion := var_env.set_mutable_binding(interpréteuse.donne_realm(), fn, Valeur(Object = fo), faux)
        assert(completion.est_normal())
    }

    // 37. Return UNUSED.
    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 10.3 BuiltInFunction
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-built-in-function-objects
 * \{ */

BuiltInFunction :: struct {
    empl function: Function
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FunctionConstructor
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-constructor
 * \{ */

#portée_fichier

table_virtuelle_function_constructor := TableVirtuelleObject(
    classe = FunctionConstructor,
    sur_destruction = sur_destruction_objet
)

#portée_export

FunctionConstructor :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_function_constructor
}

/* À FAIRE : standardise (CreateBuiltInFunction) */
crée_function_constructor :: fonc (tas_de_mémoire: *TasDeMémoire, function_prototype: *FunctionPrototype) -> *FunctionConstructor
{
    résultat := tas_de_mémoire.alloue(FunctionConstructor)
    résultat.prototype = function_prototype

    résultat.ajoute_propriété(STR_length, Valeur(Number = 1.0), DrapeauxPropriété.zéro)
    résultat.ajoute_propriété(STR_prototype, Valeur(Object = function_prototype), DrapeauxPropriété.zéro)

    function_prototype.ajoute_propriété(STR_constructor, Valeur(Object = résultat), DrapeauxPropriété.zéro)

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FunctionPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-function-prototype-object
 * \{ */

#portée_fichier

table_virtuelle_function_prototype := TableVirtuelleObject(classe = FunctionPrototype, sur_destruction = sur_destruction_objet, sur_call = fonction_prototype_sur_call)

#portée_export

FunctionPrototype :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_function_prototype
}

crée_function_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ObjectPrototype) -> *FunctionPrototype
{
    résultat := tas_de_mémoire.alloue(FunctionPrototype)
    résultat.prototype = prototype
    résultat.ajoute_propriété(STR_length, Valeur(Number = 0.0), DrapeauxPropriété.zéro)
    résultat.ajoute_propriété(STR_name, Valeur(String = crée_chaine(tas_de_mémoire, crée_chaine_utf16_unique(""))), DrapeauxPropriété.zéro)
    retourne résultat
}

fonction_prototype_sur_call :: fonc (params: *ParamètresObjectCall @inutilisée) -> CompletionRecord
{
    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FunctionNative
 * \{ */

#portée_fichier

fonction_native_sur_appel :: fonc (params: *ParamètresObjectCall) -> CompletionRecord
{
    function_native := params.object comme *FunctionNative
    retourne function_native.sur_appel(params)
}

table_virtuelle_function_native := TableVirtuelleObject(classe = FunctionNative, sur_destruction = sur_destruction_objet, sur_call = fonction_native_sur_appel)

#portée_export

FunctionNative :: struct {
    empl function: Function
    table = *table_virtuelle_function_native

    sur_appel: TypeFonctionObjectCall
}

crée_fonction_native :: fonc (tas_de_mémoire: *TasDeMémoire, nom: ECMAString, sur_appel: TypeFonctionObjectCall, length: z64) -> *FunctionNative
{
    résultat := tas_de_mémoire.alloue(FunctionNative)
    set_function_name(résultat, nom)
    set_function_length(résultat, length comme n64)
    résultat.sur_appel = sur_appel
    retourne résultat
}

ajoute_fonction_native :: fonc (objet: *Object, nom: ECMAString, sur_appel: TypeFonctionObjectCall, length := 0)
{
    tas_de_mémoire := objet.donne_tas_de_mémoire()
    fonction := crée_fonction_native(tas_de_mémoire, nom, sur_appel, length)
    ajoute_propriété(objet, nom, Valeur(Function = fonction), DrapeauxPropriété.zéro)
}

ajoute_fonction_native :: fonc (objet: *Object, nom: chaine, sur_appel: TypeFonctionObjectCall, length := 0)
{
    ajoute_fonction_native(objet, crée_chaine_utf16_unique(nom), sur_appel, length)
}

/** \} */
