importe Chaine
importe Fondation
importe Temps

/* ------------------------------------------------------------------------- */
/** \nom DateObject
 * \{ */

#port√©e_fichier

table_virtuelle_objet_date := TableVirtuelleObject(classe = DateObject)

#port√©e_export

DateObject :: struct {
    empl objet: Object
    table = *table_virtuelle_objet_date

    date_value: TempsSyst√®me
}

cr√©e_date :: fonc (tas_de_m√©moire: *TasDeM√©moire, date_prototype: *DatePrototype) -> *DateObject
{
    r√©sultat := tas_de_m√©moire.alloue(DateObject)
    r√©sultat.prototype = date_prototype
    retourne r√©sultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom DateConstructor
 * \{ */

#port√©e_fichier

table_virtuelle_date_constructor := TableVirtuelleBuiltinFunction(classe = DateConstructor)

#port√©e_export

DateConstructor :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_date_constructor

    sur_call_or_construct = date_constructor_call_or_construct
}

cr√©e_date_constructor :: fonc (realm: *Realm, function_prototype: *FunctionPrototype, date_prototype: *DatePrototype) -> *DateConstructor
{
    tas_de_m√©moire := realm.donne_tas_de_m√©moire()
    r√©sultat := tas_de_m√©moire.alloue(DateConstructor)
    create_builtin_function(r√©sultat, 7, STR_Date, realm, function_prototype)

    r√©sultat.ajoute_propri√©t√©(STR_prototype, Valeur(Object = date_prototype), DrapeauxPropri√©t√©.z√©ro)

    date_prototype.ajoute_propri√©t√©(STR_constructor, Valeur(Object = r√©sultat), DrapeauxPropri√©t√©.z√©ro)

    retourne r√©sultat
}

/* 21.4.2.1 Date ( ...values )
 * https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date */
date_constructor_call_or_construct :: fonc (empl params: *Param√®tresCallOrConstruct) -> CompletionRecord
{
    // 1. If NewTarget is undefined, then
    si new_target.est_undefined() {
        panique("non-impl√©ment√©")
        // a. Let now be the time value (UTC) identifying the current time.
        // b. Return ToDateString(now).
    }

    // 2. Let numberOfArgs be the number of elements in values.
    number_of_args := arguments.taille

    dv: TempsSyst√®me

    // 3. If numberOfArgs = 0, then
    si number_of_args == 0 {
        // a. Let dv be the time value (UTC) identifying the current time.
        dv = maintenant_syst√®me_pr√©cis()
    }
    // 4. Else if numberOfArgs = 1, then
    sinon si number_of_args == 1 {
        panique("non-impl√©ment√©")
        // a. Let value be values[0].
        // b. If value is an Object and value has a [[DateValue]] internal slot, then
        // i. Let tv be value.[[DateValue]].
        // c. Else,
        // i. Let v be ? ToPrimitive(value).
        // ii. If v is a String, then
        // 1. Assert: The next step never returns an abrupt completion because v is a String.
        // 2. Let tv be the result of parsing v as a date, in exactly the same manner as for the parse method (21.4.3.2).
        // iii. Else,
        // 1. Let tv be ? ToNumber(v).
        // d. Let dv be TimeClip(tv).
    }
    // 5. Else,
    sinon {
        // a. Assert: numberOfArgs ‚â• 2.
        assert(number_of_args >= 2)

        panique("non-impl√©ment√©")
        // b. Let y be ? ToNumber(values[0]).
        // c. Let m be ? ToNumber(values[1]).
        // d. If numberOfArgs > 2, let dt be ? ToNumber(values[2]); else let dt be 1ùîΩ.
        // e. If numberOfArgs > 3, let h be ? ToNumber(values[3]); else let h be +0ùîΩ.
        // f. If numberOfArgs > 4, let min be ? ToNumber(values[4]); else let min be +0ùîΩ.
        // g. If numberOfArgs > 5, let s be ? ToNumber(values[5]); else let s be +0ùîΩ.
        // h. If numberOfArgs > 6, let milli be ? ToNumber(values[6]); else let milli be +0ùîΩ.
        // i. Let yr be MakeFullYear(y).
        // j. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).
        // k. Let dv be TimeClip(UTC(finalDate)).
    }

    // 6. Let O be ? OrdinaryCreateFromConstructor(NewTarget, "%Date.prototype%", ¬´ [[DateValue]] ¬ª).
    realm := interpr√©teuse.donne_realm()
    O := cr√©e_date(realm.donne_tas_de_m√©moire(), realm.intrinsics.date_prototype)

    // 7. Set O.[[DateValue]] to dv.
    O.date_value = dv

    // 8. Return O.
    retourne normal_completion(Valeur(Object = O))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom DatePrototype
 * \{ */

#port√©e_fichier

table_virtuelle_date_prototype := TableVirtuelleObject(classe = DatePrototype)

#port√©e_export

DatePrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_date_prototype
}

cr√©e_date_prototype :: fonc (tas_de_m√©moire: *TasDeM√©moire, prototype: *ObjectPrototype) -> *DatePrototype
{
    r√©sultat := tas_de_m√©moire.alloue(DatePrototype)
    r√©sultat.prototype = prototype
    r√©sultat.ajoute_fonction_native(STR_valueOf, date_prototype_value_of)
    retourne r√©sultat
}

/* 21.4.4.44 Date.prototype.valueOf ( )
 * */
date_prototype_value_of :: fonc (empl params: *Param√®tresObjectCall) -> CompletionRecord
{
    // 1. Let dateObject be the this value.
    date_object := this_value.donne_objet() comme *DateObject

    // 2. Perform ? RequireInternalSlot(dateObject, [[DateValue]]).
    saufsi date_object.donne_classe() == DateObject {
        retourne lance_type_error(interpr√©teuse, "object is not a Date")
    }

    // 3. Return dateObject.[[DateValue]].
    retourne normal_completion(Valeur(Number = date_object.date_value.millisecondes() comme r64))
}

/** \} */
