importe Chaine
importe Fondation
importe Math

/* ------------------------------------------------------------------------- */
/** \nom 19.2.1 eval ( x )
 * \{ */

#portée_fichier

/* Table virtuelle pour "eval()" */
table_virtuelle_function_eval := TableVirtuelleObject(classe = Function, sur_call = eval_sur_call)

#portée_export

crée_eval :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_eval)
    résultat.table = *table_virtuelle_function_eval
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/global-object.html#sec-eval-x */
eval_sur_call :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    si arguments.taille == 0 {
        retourne normal_completion(js_undefined)
    }

    retourne perform_eval(interpréteuse, params.donne_argument(0), faux, faux)
}

/* 19.2.1.1 PerformEval ( x, strictCaller, direct )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-performeval */
perform_eval :: fonc (interpréteuse: *Interpréteuse, x: Valeur, strict_caller: bool, direct: bool) -> CompletionRecord
{
    // 1. Assert: If direct is false, then strictCaller is also false.
    assert(direct == vrai || (direct == faux && strict_caller == faux))

    // 2. If x is not a String, return x.
    saufsi x.est_chaine() {
        retourne normal_completion(x)
    }

    // 3. Let evalRealm be the current Realm Record.
    // 4. NOTE: In the case of a direct eval, evalRealm is the realm of both the caller of eval and of the eval function itself.
    eval_realm := interpréteuse.donne_realm()

    // À FAIRE : 5. Perform ? HostEnsureCanCompileStrings(evalRealm, « », x, direct).

    // 6. Let inFunction be false.
    in_function := faux

    // 7. Let inMethod be false.
    // in_method := faux

    // 8. Let inDerivedConstructor be false.
    // in_derived_constructor := faux

    // 9. Let inClassFieldInitializer be false.
    // in_class_field_initializer := faux

    // 10. If direct is true, then
    si direct {
        // a. Let thisEnvRec be GetThisEnvironment().
        this_env_rec := get_this_environment(interpréteuse)

        // b. If thisEnvRec is a Function Environment Record, then
        si this_env_rec.table.classe == FunctionEnvironment {
            // À FAIRE : i. Let F be thisEnvRec.[[FunctionObject]].

            // ii. Set inFunction to true.
            in_function = vrai

            // iii. Set inMethod to thisEnvRec.HasSuperBinding().
            // iv. If F.[[ConstructorKind]] is DERIVED, set inDerivedConstructor to true.
            // v. Let classFieldInitializerName be F.[[ClassFieldInitializerName]].
            // vi. If classFieldInitializerName is not EMPTY, set inClassFieldInitializer to true.
        }
    }

    // 11. Perform the following substeps in an implementation-defined order, possibly interleaving parsing and error detection:
    source := crée_texte_source(x.String.texte)
    diffère détruit_données_texte_source(*source)

    // a. Let script be ParseText(x, Script).
    script := parse_text(interpréteuse.donne_realm(), *source, GoalSymbol.Script)

    body: *Programme
    diffère détruit_arbre(body)
    discr script {
        Erreur(e) {
            // b. If script is a List of errors, throw a SyntaxError exception.
            retourne throw_completion(Valeur(Object = e))
        }
        Ok(noeud) {
            // c. If script Contains ScriptBody is false, return undefined.
            si noeud.type != Programme {
                retourne normal_completion(js_undefined)
            }

            // d. Let body be the ScriptBody of script.
            body = noeud comme *Programme
        }
        sinon {}
    }

    // À FAIRE : e. If inFunction is false and body Contains NewTarget, throw a SyntaxError exception.
    // À FAIRE : f. If inMethod is false and body Contains SuperProperty, throw a SyntaxError exception.
    // À FAIRE : g. If inDerivedConstructor is false and body Contains SuperCall, throw a SyntaxError exception.
    // À FAIRE : h. If inClassFieldInitializer is true and ContainsArguments of body is true, throw a SyntaxError exception.

    // 12. If strictCaller is true, let strictEval be true.
    strict_eval := si strict_caller {
        vrai
    }
    // 13. Else, let strictEval be ScriptIsStrict of script.
    sinon {
        // À FAIRE : ScriptIsStrict
        faux
    }

    // 14. Let runningContext be the running execution context.
    // 15. NOTE: If direct is true, runningContext will be the execution context that performed the direct eval. If direct is false, runningContext will be the execution context for the invocation of the eval function.
    running_context := interpréteuse.donne_running_execution_context()

    lex_env: *Environment
    var_env: *Environment
    private_env: *PrivateEnvironment

    // 16. If direct is true, then
    si direct {
        // a. Let lexEnv be NewDeclarativeEnvironment(runningContext's LexicalEnvironment).
        lex_env = new_declarative_environment(interpréteuse.donne_tas_de_mémoire(), running_context.lexical_environment)

        // b. Let varEnv be runningContext's VariableEnvironment.
        var_env = running_context.variable_environment
    
        // c. Let privateEnv be runningContext's PrivateEnvironment.
        private_env = running_context.private_environment
    }
    // 17. Else,
    sinon {
        // a. Let lexEnv be NewDeclarativeEnvironment(evalRealm.[[GlobalEnv]]).
        lex_env = new_declarative_environment(interpréteuse.donne_tas_de_mémoire(), eval_realm.global_environment)

        // b. Let varEnv be evalRealm.[[GlobalEnv]].
        var_env = eval_realm.global_environment

        // c. Let privateEnv be null.
        private_env = nul
    }

    // 18. If strictEval is true, set varEnv to lexEnv.
    si strict_eval {
        var_env = lex_env
    }

    // 19. If runningContext is not already suspended, suspend runningContext.
    mv := interpréteuse.mv
    mv.suspend_running_execution_context()

    // 20. Let evalContext be a new ECMAScript code execution context.
    eval_context := crée_execution_context(interpréteuse.donne_tas_de_mémoire())

    // 21. Set evalContext's Function to null.
    eval_context.function = nul

    // 22. Set evalContext's Realm to evalRealm.
    eval_context.realm = eval_realm

    // 23. Set evalContext's ScriptOrModule to runningContext's ScriptOrModule.
    eval_context.script_or_module = running_context.script_or_module

    // 24. Set evalContext's VariableEnvironment to varEnv.
    eval_context.variable_environment = var_env

    // 25. Set evalContext's LexicalEnvironment to lexEnv.
    eval_context.lexical_environment = lex_env

    // 26. Set evalContext's PrivateEnvironment to privateEnv.
    eval_context.private_environment = private_env

    // 27. Push evalContext onto the execution context stack; evalContext is now the running execution context.
    mv.empile_execution_context(eval_context)

    // À FAIRE : 28. Let result be Completion(EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strictEval)).
    result := normal_completion(js_undefined)

    // 29. If result is a normal completion, then
    si result.est_normal() {
        // a. Set result to Completion(Evaluation of body).
        result = interpréteuse.exécute(body)
    }

    // 30. If result is a normal completion and result.[[Value]] is EMPTY, then
        // a. Set result to NormalCompletion(undefined).

    // 31. Suspend evalContext and remove it from the execution context stack.
    mv.suspend_running_execution_context()
    mv.dépile_execution_context()

    // À FAIRE : 32. Resume the context that is now on the top of the execution context stack as the running execution context.
    running_context = mv.donne_running_execution_context()
    interpréteuse.noeud_exécuté_courant = *running_context.noeud_exécuté_courant

    // 33. Return ? result.
    retourne result
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 19.2.3 isNaN ( number )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-isnan-number
 * \{ */

#portée_fichier

/* Table virtuelle pour "parseInt()" */
table_virtuelle_function_is_nan := TableVirtuelleObject(classe = Function, sur_call = isnan_sur_call)

#portée_export

crée_isnan :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_isNaN)
    résultat.table = *table_virtuelle_function_is_nan
    retourne résultat
}

isnan_sur_call :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let num be ? ToNumber(number).
    completion := to_number(interpréteuse, donne_argument(params, 0))
    saufsi completion.est_normal() {
        retourne completion
    }
    num := completion.valeur.V.Number

    // 2. If num is NaN, return true.
    si est_nan(num) {
        retourne normal_completion(Valeur(Boolean = vrai))
    }

    // 3. Otherwise, return false.
    retourne normal_completion(Valeur(Boolean = faux))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 19.2.5 parseInt ( string, radix )
 * \{ */

#portée_fichier

/* Table virtuelle pour "parseInt()" */
table_virtuelle_function_parse_int := TableVirtuelleObject(classe = Function, sur_call = eval_sur_call)

#portée_export

crée_parse_int :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_parseInt)
    résultat.table = *table_virtuelle_function_parse_int
    retourne résultat
}

parse_int_sur_call :: fonc (params: *ParamètresObjectCall) -> CompletionRecord
{
    retourne parse_int(params)
}

/* https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix */
parse_int :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // À FAIRE : standardise, tests

    completion := to_string(interpréteuse, params.donne_argument(0))
    saufsi completion.est_normal() {
        retourne completion
    }

    string := completion.valeur.V.String.texte

    chn := converti_vers_chaine(string.donne_chaine_utf16())
    diffère déloge(chn)

    résultat := tente extrait_r64(chn) piège _ {
        retourne lance_type_error(interpréteuse, "value is not a Number")
    }

    retourne normal_completion(Valeur(Number = résultat))
}

/** \} */
