importe Chaine
importe Ensemble
importe Fondation
importe Math
importe Unicode

/* ------------------------------------------------------------------------- */
/** \nom 19.2.1 eval ( x )
 * \{ */

#portée_fichier

/* Table virtuelle pour "eval()" */
table_virtuelle_function_eval := TableVirtuelleObject(classe = Function, sur_call = eval_sur_call)

#portée_export

crée_eval :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_eval)
    résultat.table = *table_virtuelle_function_eval
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/global-object.html#sec-eval-x */
eval_sur_call :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    si arguments.taille == 0 {
        retourne normal_completion(js_undefined)
    }

    retourne perform_eval(interpréteuse, params.donne_argument(0), faux, faux)
}

/* 19.2.1.1 PerformEval ( x, strictCaller, direct )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-performeval */
perform_eval :: fonc (interpréteuse: *Interpréteuse, x: Valeur, strict_caller: bool, direct: bool) -> CompletionRecord
{
    // 1. Assert: If direct is false, then strictCaller is also false.
    assert(direct == vrai || (direct == faux && strict_caller == faux))

    // 2. If x is not a String, return x.
    saufsi x.est_chaine() {
        retourne normal_completion(x)
    }

    // 3. Let evalRealm be the current Realm Record.
    // 4. NOTE: In the case of a direct eval, evalRealm is the realm of both the caller of eval and of the eval function itself.
    eval_realm := interpréteuse.donne_realm()

    // À FAIRE : 5. Perform ? HostEnsureCanCompileStrings(evalRealm, « », x, direct).

    // 6. Let inFunction be false.
    in_function := faux

    // 7. Let inMethod be false.
    // in_method := faux

    // 8. Let inDerivedConstructor be false.
    // in_derived_constructor := faux

    // 9. Let inClassFieldInitializer be false.
    // in_class_field_initializer := faux

    // 10. If direct is true, then
    si direct {
        // a. Let thisEnvRec be GetThisEnvironment().
        this_env_rec := get_this_environment(interpréteuse)

        // b. If thisEnvRec is a Function Environment Record, then
        si this_env_rec.table.classe == FunctionEnvironment {
            // À FAIRE : i. Let F be thisEnvRec.[[FunctionObject]].

            // ii. Set inFunction to true.
            in_function = vrai

            // iii. Set inMethod to thisEnvRec.HasSuperBinding().
            // iv. If F.[[ConstructorKind]] is DERIVED, set inDerivedConstructor to true.
            // v. Let classFieldInitializerName be F.[[ClassFieldInitializerName]].
            // vi. If classFieldInitializerName is not EMPTY, set inClassFieldInitializer to true.
        }
    }

    // 11. Perform the following substeps in an implementation-defined order, possibly interleaving parsing and error detection:
    source := crée_texte_source(x.String.texte)
    diffère détruit_données_texte_source(*source)

    // a. Let script be ParseText(x, Script).
    opt_script := parse_text(interpréteuse.donne_realm(), *source, GoalSymbol.Script)

    script: *NoeudScript
    diffère détruit_arbre(script)
    discr opt_script {
        Erreur(e) {
            // b. If script is a List of errors, throw a SyntaxError exception.
            retourne throw_completion(Valeur(Object = e))
        }
        Ok(noeud) {
            // c. If script Contains ScriptBody is false, return undefined.
            si noeud.type != NoeudScript {
                retourne normal_completion(js_undefined)
            }

            script = noeud comme *NoeudScript
            si script.script_body == nul {
                retourne normal_completion(js_undefined)
            }
        }
        sinon {}
    }

    // d. Let body be the ScriptBody of script.
    body := script.script_body

    // À FAIRE : e. If inFunction is false and body Contains NewTarget, throw a SyntaxError exception.
    // À FAIRE : f. If inMethod is false and body Contains SuperProperty, throw a SyntaxError exception.
    // À FAIRE : g. If inDerivedConstructor is false and body Contains SuperCall, throw a SyntaxError exception.
    // À FAIRE : h. If inClassFieldInitializer is true and ContainsArguments of body is true, throw a SyntaxError exception.

    // 12. If strictCaller is true, let strictEval be true.
    strict_eval := si strict_caller {
        vrai
    }
    // 13. Else, let strictEval be ScriptIsStrict of script.
    sinon {
        // À FAIRE : ScriptIsStrict
        faux
    }

    // 14. Let runningContext be the running execution context.
    // 15. NOTE: If direct is true, runningContext will be the execution context that performed the direct eval. If direct is false, runningContext will be the execution context for the invocation of the eval function.
    running_context := interpréteuse.donne_running_execution_context()

    lex_env: *Environment
    var_env: *Environment
    private_env: *PrivateEnvironment

    // 16. If direct is true, then
    si direct {
        // a. Let lexEnv be NewDeclarativeEnvironment(runningContext's LexicalEnvironment).
        lex_env = new_declarative_environment(interpréteuse.donne_tas_de_mémoire(), running_context.lexical_environment)

        // b. Let varEnv be runningContext's VariableEnvironment.
        var_env = running_context.variable_environment
    
        // c. Let privateEnv be runningContext's PrivateEnvironment.
        private_env = running_context.private_environment
    }
    // 17. Else,
    sinon {
        // a. Let lexEnv be NewDeclarativeEnvironment(evalRealm.[[GlobalEnv]]).
        lex_env = new_declarative_environment(interpréteuse.donne_tas_de_mémoire(), eval_realm.global_environment)

        // b. Let varEnv be evalRealm.[[GlobalEnv]].
        var_env = eval_realm.global_environment

        // c. Let privateEnv be null.
        private_env = nul
    }

    // 18. If strictEval is true, set varEnv to lexEnv.
    si strict_eval {
        var_env = lex_env
    }

    // 19. If runningContext is not already suspended, suspend runningContext.
    mv := interpréteuse.mv
    mv.suspend_running_execution_context()

    // 20. Let evalContext be a new ECMAScript code execution context.
    eval_context := crée_execution_context(interpréteuse.donne_tas_de_mémoire())

    // 21. Set evalContext's Function to null.
    eval_context.function = nul

    // 22. Set evalContext's Realm to evalRealm.
    eval_context.realm = eval_realm

    // 23. Set evalContext's ScriptOrModule to runningContext's ScriptOrModule.
    eval_context.script_or_module = running_context.script_or_module

    // 24. Set evalContext's VariableEnvironment to varEnv.
    eval_context.variable_environment = var_env

    // 25. Set evalContext's LexicalEnvironment to lexEnv.
    eval_context.lexical_environment = lex_env

    // 26. Set evalContext's PrivateEnvironment to privateEnv.
    eval_context.private_environment = private_env

    // 27. Push evalContext onto the execution context stack; evalContext is now the running execution context.
    mv.empile_execution_context(eval_context)

    // À FAIRE : 28. Let result be Completion(EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strictEval)).
    result := normal_completion(js_undefined)

    // 29. If result is a normal completion, then
    si result.est_normal() {
        // a. Set result to Completion(Evaluation of body).
        result = interpréteuse.exécute(body)
    }

    // 30. If result is a normal completion and result.[[Value]] is EMPTY, then
        // a. Set result to NormalCompletion(undefined).

    // 31. Suspend evalContext and remove it from the execution context stack.
    mv.suspend_running_execution_context()
    mv.dépile_execution_context()

    // À FAIRE : 32. Resume the context that is now on the top of the execution context stack as the running execution context.

    // 33. Return ? result.
    retourne result
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 19.2.3 isNaN ( number )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-isnan-number
 * \{ */

#portée_fichier

/* Table virtuelle pour "parseInt()" */
table_virtuelle_function_is_nan := TableVirtuelleObject(classe = Function, sur_call = isnan_sur_call)

#portée_export

crée_isnan :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_isNaN)
    résultat.table = *table_virtuelle_function_is_nan
    retourne résultat
}

isnan_sur_call :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let num be ? ToNumber(number).
    completion := to_number(interpréteuse, donne_argument(params, 0))
    saufsi completion.est_normal() {
        retourne completion
    }
    num := completion.valeur.V.Number

    // 2. If num is NaN, return true.
    si est_nan(num) {
        retourne normal_completion(Valeur(Boolean = vrai))
    }

    // 3. Otherwise, return false.
    retourne normal_completion(Valeur(Boolean = faux))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 19.2.5 parseInt ( string, radix )
 * \{ */

#portée_fichier

/* Table virtuelle pour "parseInt()" */
table_virtuelle_function_parse_int := TableVirtuelleObject(classe = Function, sur_call = eval_sur_call)

#portée_export

crée_parse_int :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_parseInt)
    résultat.table = *table_virtuelle_function_parse_int
    retourne résultat
}

parse_int_sur_call :: fonc (params: *ParamètresObjectCall) -> CompletionRecord
{
    retourne parse_int(params)
}

/* https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix */
parse_int :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // À FAIRE : standardise, tests

    completion := to_string(interpréteuse, params.donne_argument(0))
    saufsi completion.est_normal() {
        retourne completion
    }

    string := completion.valeur.V.String.texte

    chn := converti_vers_chaine(string.donne_chaine_utf16())
    diffère déloge(chn)

    résultat := tente extrait_r64(chn) piège _ {
        retourne lance_type_error(interpréteuse, "value is not a Number")
    }

    retourne normal_completion(Valeur(Number = résultat))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 19.2.6 URI Handling Functions
 * https://tc39.es/ecma262/multipage/global-object.html#sec-uri-handling-functions
 * \{ */

#portée_fichier

table_virtuelle_function_encode_uri_component := TableVirtuelleObject(classe = Function, sur_call = encode_uri_component_sur_call)

#portée_export

crée_encode_uri_component :: fonc (realm: *Realm) -> *Function
{
    résultat := crée_fonction(realm.intrinsics.function_prototype)
    set_function_name(realm, résultat, STR_encodeURIComponent)
    résultat.table = *table_virtuelle_function_encode_uri_component
    retourne résultat
}

/* 19.2.6.4 encodeURIComponent ( uriComponent )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-encodeuricomponent-uricomponent */
encode_uri_component_sur_call :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let componentString be ? ToString(uriComponent).
    completion_component_string := to_string(interpréteuse, params.donne_argument(0))
    saufsi completion_component_string.est_normal() {
        retourne completion_component_string
    }
    component_string := completion_component_string.valeur.V.String.texte

    // 2. Let extraUnescaped be the empty String.
    extra_unescaped := crée_chaine_utf16_unique_vide()

    // 3. Return ? Encode(componentString, extraUnescaped).
    retourne encode(interpréteuse, component_string, extra_unescaped)
}

/* 19.2.6.5 Encode ( string, extraUnescaped )
 * https://tc39.es/ecma262/multipage/global-object.html#sec-encode */
encode :: fonc (interpréteuse: *Interpréteuse, string: ECMAString, extra_unescaped: ECMAString) -> CompletionRecord
{
    // 1. Let len be the length of string.
    len := string.taille()

    // 2. Let R be the empty String.
    R: EnchaineuseUTF16
    initialise_enchaineuse(R)
    diffère détruit_tampons(R)

    // 3. Let alwaysUnescaped be the string-concatenation of the ASCII word characters and "-.!~*'()".
    always_unescaped := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-.!~*'()"

    // 4. Let unescapedSet be the string-concatenation of alwaysUnescaped and extraUnescaped.
    unescaped_set: [..]n16
    diffère déloge(unescaped_set)

    pour always_unescaped {
        ensemble_ajoute(*unescaped_set, it comme n16)
    }

    unités_extra_unescaped := extra_unescaped.donne_chaine_utf16().unités
    pour unités_extra_unescaped {
        ensemble_ajoute(*unescaped_set, it)
    }

    // 5. Let k be 0.
    k := 0

    // 6. Repeat, while k < len,
    string16 := string.donne_chaine_utf16()
    tantque k < len {
        // a. Let C be the code unit at index k within string.
        C := string16.unités[k]

        // b. If unescapedSet contains C, then
        si ensemble_possède(*unescaped_set, C) {
            // i. Set k to k + 1.
            k += 1

            // ii. Set R to the string-concatenation of R and C.
            R.ajoute(C)
        }
        // c. Else,
        sinon {
            // i. Let cp be CodePointAt(string, k).
            cp := code_point_at(string16, k)

            // ii. If cp.[[IsUnpairedSurrogate]] is true, throw a URIError exception.
            si cp.est_surrogate_sans_paire {
                retourne interpréteuse.lance_uri_error("Invalid character in URI")
            }

            // iii. Set k to k + cp.[[CodeUnitCount]].
            k += cp.compte_d_unité_de_code comme z32

            // iv. Let Octets be the List of octets resulting by applying the UTF-8 transformation to cp.[[CodePoint]].
            octets: [4]n8
            nombre_d_octets := point_de_code_vers_utf8(cp.point_de_code, *octets[0])

            // v. For each element octet of Octets, do
            pour nombre_d_octets {
                // 1. Let hex be the String representation of octet, formatted as an uppercase hexadecimal number.
                hex := donne_chaine_hex_pour_octet(octets[it])    

                // 2. Set R to the string-concatenation of R, "%", and StringPad(hex, 2, "0", start).
                // À FAIRE : StringPad
                ajoute(R, '%' comme n16)
                ajoute(R, hex[0])
                ajoute(R, hex[1])
            }
        }
    }

    // 7. Return R.
    résultat16 := chaine_depuis_enchaineuse(R)
    // @fuite-de-mémoire ?
    résultat := crée_chaine_utf16_unique(résultat16)
    retourne crée_string_value_completion(interpréteuse, résultat)
}

donne_chaine_hex_pour_octet :: fonc (o: n8) -> [2]n16
{
    caractères_hex_majuscules :: "0123456789ABCDEF"
    a := (o >> 4) & 0xf
    b := o & 0xf

    résultat := [caractères_hex_majuscules[a] comme n16, caractères_hex_majuscules[b] comme n16]
    retourne résultat
}

/* 11.1.3 Static Semantics: UTF16SurrogatePairToCodePoint ( lead, trail )
 * https://tc39.es/ecma262/multipage/ecmascript-language-source-code.html#sec-utf16decodesurrogatepair */
// À FAIRE(langage) : crash si Chaine.utf16_décode_paire_surrogate
utf16_surrogate_pair_to_code_point :: utf16_décode_paire_surrogate

/* 11.1.4 Static Semantics: CodePointAt ( string, position )
 * https://tc39.es/ecma262/multipage/ecmascript-language-source-code.html#sec-codepointat */
InfoPointDeCode :: struct {
    point_de_code: n32
    compte_d_unité_de_code: n8
    est_surrogate_sans_paire: bool
}

code_point_at :: fonc (string: ChaineUTF16, position: z64) -> InfoPointDeCode
{
    // 1. Let size be the length of string.
    size := string.taille()

    // 2. Assert: position ≥ 0 and position < size.
    assert(position >= 0)
    assert(position < size)

    // 3. Let first be the code unit at index position within string.
    first := string.unités[position]

    // 4. Let cp be the code point whose numeric value is the numeric value of first.
    cp := first comme n32

    // 5. If first is neither a leading surrogate nor a trailing surrogate, then
    saufsi est_leading_surrogate(first) || est_trailling_surrogate(first) {
        // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: false }.
        retourne InfoPointDeCode(cp, 1, faux)
    }

    // 6. If first is a trailing surrogate or position + 1 = size, then
    si est_trailling_surrogate(first) || position + 1 == size {
        // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.
        retourne InfoPointDeCode(cp, 1, vrai)
    }

    // 7. Let second be the code unit at index position + 1 within string.
    second := string.unités[position + 1]

    // 8. If second is not a trailing surrogate, then
    saufsi est_trailling_surrogate(second) {
        // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.
        retourne InfoPointDeCode(cp, 1, vrai)
    }

    // 9. Set cp to UTF16SurrogatePairToCodePoint(first, second).
    cp = utf16_surrogate_pair_to_code_point(first, second)

    // 10. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 2, [[IsUnpairedSurrogate]]: false }.
    retourne InfoPointDeCode(cp, 2, faux)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 25.5 The JSON Object
 * https://tc39.es/ecma262/multipage/structured-data.html#sec-json-object
 * \{ */

crée_json_object :: fonc (realm: *Realm)
{
    assert(realm.intrinsics.json == nul)
    assert(realm.intrinsics.object_prototype != nul)

    résultat := ordinary_object_create(realm, realm.intrinsics.object_prototype, object_instance_crée)
    résultat.ajoute_fonction_native(STR_parse, json_parse, 2)

    realm.intrinsics.json = résultat
}

#portée_fichier

/* 25.5.1 JSON.parse ( text [ , reviver ] )
 * https://tc39.es/ecma262/multipage/structured-data.html#sec-json.parse */
json_parse :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let jsonString be ? ToString(text).
    completion := to_string(interpréteuse, params.donne_argument(0))
    saufsi completion.est_normal() {
        retourne completion
    }
    json_string := completion.valeur.V.String

    // 2. Let unfiltered be ? ParseJSON(jsonString).
    completion = parse_json(json_string, interpréteuse)
    saufsi completion.est_normal() {
        retourne completion
    }
    unfiltered := completion.valeur.V

    // À FAIRE : 3. If IsCallable(reviver) is true, then
    // a. Let root be OrdinaryObjectCreate(%Object.prototype%).
    // b. Let rootName be the empty String.
    // c. Perform ! CreateDataPropertyOrThrow(root, rootName, unfiltered).
    // d. Return ? InternalizeJSONProperty(root, rootName, reviver).
    // 4. Else,
    // a. Return unfiltered.
    retourne normal_completion(unfiltered)
}

/* 25.5.1.1 ParseJSON ( text )
 * https://tc39.es/ecma262/multipage/structured-data.html#sec-ParseJSON */
parse_json :: fonc (text: *PrimitiveChaine, interpréteuse: *Interpréteuse) -> CompletionRecord
{
    // À FAIRE 1. If StringToCodePoints(text) is not a valid JSON text as specified in ECMA-404, throw a SyntaxError exception.

    // 2. Let scriptString be the string-concatenation of "(", text, and ");".
    text_en_chaine_native := converti_vers_chaine(text.texte.donne_chaine_utf16())
    diffère déloge(text_en_chaine_native)

    script_string := enchaine("(", text_en_chaine_native, ")")
    diffère déloge(script_string)

    // 3. Let script be ParseText(scriptString, Script).
    source := crée_texte_source(script_string)
    diffère détruit_données_texte_source(*source)

    script: *NoeudScript
    discr (parse_text(interpréteuse.donne_realm(), *source, GoalSymbol.Script)) {
        Erreur(e) {
            // À FAIRE : il est impossible d'avoir des erreurs ici,
            // mais il faut implémenter proprement cette fonction selon la spécification.
            retourne throw_completion(e)
        }
        Ok(noeud) {
            assert(noeud.type == NoeudScript)
            script = noeud comme *NoeudScript
        }
        sinon {}
    }

    // 4. NOTE: The early error rules defined in 13.2.5.1 have special handling for the above invocation of ParseText.

    // 5. Assert: script is a Parse Node.

    // 6. Let result be ! Evaluation of script.
    result := interpréteuse.exécute(script)

    // 7. NOTE: The PropertyDefinitionEvaluation semantics defined in 13.2.5.5 have special handling for the above evaluation.
    // 8. Assert: result is either a String, a Number, a Boolean, an Object that is defined by either an ArrayLiteral or an ObjectLiteral, or null.

    // 9. Return result.
    retourne result
}

/** \} */
