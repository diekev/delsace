importe Chaine
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom Error
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error-objects
 * \{ */

#portée_fichier

table_virtuelle_error := TableVirtuelleObject(classe = Error)

#portée_export

Error :: struct {
    empl objet: Object
    table = *table_virtuelle_error
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ErrorPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-error-prototype-object
 * \{ */

#portée_fichier

table_virtuelle_error_prototype := TableVirtuelleObject(classe = ErrorPrototype)

#portée_export

ErrorPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_error_prototype
}

crée_error_prototype :: fonc (realm: *Realm, prototype: *ObjectPrototype) -> *ErrorPrototype
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(ErrorPrototype)
    résultat.prototype = prototype
    résultat.ajoute_fonction_native(STR_toString, error_prototype_to_string)
    initialise_error_object(realm, résultat, STR_Error, "")
    retourne résultat
}

#portée_fichier

initialise_error_object :: fonc (realm: *Realm, object: *Object, nom: ECMAString, message: chaine)
{
    si realm {
        enchaineuse: Enchaineuse
        initialise_enchaineuse(*enchaineuse)
        diffère détruit_tampons(*enchaineuse)

        ajoute_au_tampon(*enchaineuse, message, "\n")

        imprime_traceback(*enchaineuse, realm)

        message = chaine_depuis_enchaineuse(*enchaineuse)
    }

    desc: PropertyDescriptor
    initialise_property_descriptor(*desc, Valeur(String = crée_chaine(object.donne_tas_de_mémoire(), nom)), Configurable)
    _ := define_property_or_throw(object, STR_name, desc)

    initialise_property_descriptor(*desc, Valeur(String = crée_chaine(object.donne_tas_de_mémoire(), crée_chaine_utf16_unique(message))), DrapeauxPropriété.zéro)
    _ := define_property_or_throw(object, STR_message, desc)
}

imprime_traceback :: fonc (enchaineuse: *Enchaineuse, realm: *Realm)
{
    mv := realm.donne_mv()

    pour > mv.execution_contexts {
        si it.noeud_exécuté_courant {
            si it.script_or_module {
                lexème := it.noeud_exécuté_courant.lexème
                texte := it.script_or_module.source.donne_ligne_pour_lexème(lexème)

                ligne_pour_erreur := donne_ligne_pour_erreur(texte, lexème.texte.pointeur - texte.pointeur)

                ajoute_au_tampon(enchaineuse, "    at '", ligne_pour_erreur, "'\n")
                continue
            }
        }

        si it.function {
            ajoute_au_tampon(enchaineuse, "    at ", it.function.donne_nom(), "\n")
        }
        sinon si it.script_or_module {
            ajoute_au_tampon(enchaineuse, "    at script\n")
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "    at sans fonction ou script\n")
        }
    }
}

donne_ligne_pour_lexème :: fonc (source: &TexteSource, lexème: *Lexème) -> chaine
{
    premier_lexème := source.lexèmes.pointeur
    dernier_lexème := source.lexèmes.pointeur + source.lexèmes.taille

    saufsi premier_lexème <= lexème < dernier_lexème {
        retourne "le lexème ne vient pas du script"
    }

    début_source := source.texte.pointeur
    fin_source := début_source + source.texte.taille

    curseur := lexème.texte.pointeur
    tantque curseur >= début_source {
        si mémoire(curseur) == '\n' {
            curseur += 1
            arrête
        }

        curseur -= 1
    }

    résultat : chaine = ---
    résultat.pointeur = curseur
    résultat.taille = lexème.texte.pointeur - curseur

    curseur = lexème.texte.pointeur
    tantque curseur < fin_source {
        si mémoire(curseur) == '\n' {
            arrête
        }

        résultat.taille += 1
        curseur += 1
    }

    si résultat.taille == 0 {
        retourne "pas de texte trouvé"
    }

    retourne résultat
}

/* 20.5.3.4 Error.prototype.toString ( )
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error.prototype.tostring */
error_prototype_to_string :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let O be the this value.
    O := this_value

    // 2. If O is not an Object, throw a TypeError exception.
    saufsi O.est_object() {
        retourne lance_type_error(interpréteuse, "not an Object")
    }

    // 3. Let name be ? Get(O, "name").
    completion := get(O.donne_objet(), STR_name)
    saufsi completion.est_normal() {
        retourne completion
    }
    name := completion.valeur.V

    // 4. If name is undefined, set name to "Error"; otherwise set name to ? ToString(name).
    si name.est_undefined() {
        name = crée_chaine(interpréteuse.donne_realm(), STR_Error)
    }
    sinon {
        completion = to_string(interpréteuse, name)
        saufsi completion.est_normal() {
            retourne completion
        }
        name = completion.valeur.V
    }

    // 5. Let msg be ? Get(O, "message").
    completion = get(O.donne_objet(), STR_message)
    saufsi completion.est_normal() {
        retourne completion
    }
    msg := completion.valeur.V

    // 6. If msg is undefined, set msg to the empty String; otherwise set msg to ? ToString(msg).
    si msg.est_undefined() {
        msg = crée_chaine(interpréteuse.donne_realm(), crée_chaine_utf16_unique_vide())
    }
    sinon {
        completion = to_string(interpréteuse, msg)
        saufsi completion.est_normal() {
            retourne completion
        }
        msg = completion.valeur.V
    }

    // 7. If name is the empty String, return msg.
    si name.String.texte.est_vide() {
        retourne normal_completion(msg)
    }

    // 8. If msg is the empty String, return name.
    si msg.String.texte.est_vide() {
        retourne normal_completion(name)
    }

    // 9. Return the string-concatenation of name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.
    chn_name := name.String.texte
    chn_msg := msg.String.texte
    chn_résultat := imprime_chaine("%: %", chn_name, chn_msg)

    retourne normal_completion(crée_chaine(interpréteuse.donne_realm(), crée_chaine_utf16_unique(chn_résultat)))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ReferenceError
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-referenceerror
 * \{ */

#portée_fichier

table_virtuelle_reference_error := TableVirtuelleObject(classe = ReferenceError)

#portée_export

ReferenceError :: struct {
    empl error: Error
    table = *table_virtuelle_reference_error

    message: *PrimitiveChaine
}

lance_reference_error :: fonc (interpréteuse: *Interpréteuse, message: chaine) -> CompletionRecord
{
    retourne lance_reference_error(interpréteuse.donne_realm(), message)
}

lance_reference_error :: fonc (realm: *Realm, message: chaine) -> CompletionRecord
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(ReferenceError)
    résultat.prototype = realm.intrinsics.reference_error_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(realm, résultat, STR_ReferenceError, message)
    retourne throw_completion(résultat)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ReferenceErrorPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-nativeerror-prototype-objects
 * \{ */

#portée_fichier

table_virtuelle_reference_error_prototype := TableVirtuelleObject(classe = ReferenceErrorPrototype)

#portée_export

ReferenceErrorPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_reference_error_prototype
}

crée_reference_error_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ErrorPrototype) -> *ReferenceErrorPrototype
{
    résultat := tas_de_mémoire.alloue(ReferenceErrorPrototype)
    résultat.prototype = prototype
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom SyntaxError
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-syntaxerror
 * \{ */

#portée_fichier

table_virtuelle_syntax_error := TableVirtuelleObject(classe = SyntaxError)

#portée_export

SyntaxError :: struct {
    empl error: Error
    table = *table_virtuelle_syntax_error

    message: *PrimitiveChaine
}

crée_erreur_de_parsage :: fonc (realm: *Realm, message: chaine) -> *SyntaxError
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(SyntaxError)
    résultat.prototype = realm.intrinsics.syntax_error_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(nul, résultat, STR_SyntaxError, message)
    retourne résultat
}

lance_syntax_error :: fonc (interpréteuse: *Interpréteuse, message: chaine) -> CompletionRecord
{
    retourne lance_syntax_error(interpréteuse.donne_realm(), message)
}

lance_syntax_error :: fonc (realm: *Realm, message: chaine) -> CompletionRecord
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(SyntaxError)
    résultat.prototype = realm.intrinsics.syntax_error_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(realm, résultat, STR_SyntaxError, message)
    retourne throw_completion(résultat)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom SyntaxErrorPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-nativeerror-prototype-objects
 * \{ */

#portée_fichier

table_virtuelle_syntax_error_prototype := TableVirtuelleObject(classe = SyntaxErrorPrototype)

#portée_export

SyntaxErrorPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_syntax_error_prototype
}

crée_syntax_error_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ErrorPrototype) -> *SyntaxErrorPrototype
{
    résultat := tas_de_mémoire.alloue(SyntaxErrorPrototype)
    résultat.prototype = prototype
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TypeError
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-typeerror
 * \{ */

#portée_fichier

table_virtuelle_type_error := TableVirtuelleObject(classe = TypeError)

#portée_export

TypeError :: struct {
    empl error: Error
    table = *table_virtuelle_type_error

    message: *PrimitiveChaine
}

lance_type_error :: fonc (interpréteuse: *Interpréteuse, message: chaine) -> CompletionRecord
{
    retourne lance_type_error(interpréteuse.donne_realm(), message)
}

lance_type_error :: fonc (realm: *Realm, message: chaine) -> CompletionRecord
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(TypeError)
    résultat.prototype = realm.intrinsics.type_error_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(realm, résultat, STR_TypeError, message)
    retourne throw_completion(résultat)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TypeErrorPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-nativeerror-prototype-objects
 * \{ */

#portée_fichier

table_virtuelle_type_error_prototype := TableVirtuelleObject(classe = TypeErrorPrototype)

#portée_export

TypeErrorPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_type_error_prototype
}

crée_type_error_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ErrorPrototype) -> *TypeErrorPrototype
{
    résultat := tas_de_mémoire.alloue(TypeErrorPrototype)
    résultat.prototype = prototype
    retourne résultat
}

/** \} */
