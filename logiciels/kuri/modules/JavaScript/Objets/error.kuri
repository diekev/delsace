importe Chaine
importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom Error
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error-objects
 * \{ */

#portée_fichier

table_virtuelle_error := TableVirtuelleObject(classe = Error)

#portée_export

Error :: struct {
    empl objet: Object
    table = *table_virtuelle_error

    message: *PrimitiveChaine @slot "[[ErrorData]]"
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ErrorPrototype
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-properties-of-the-error-prototype-object
 * \{ */

#portée_fichier

table_virtuelle_error_prototype := TableVirtuelleObject(classe = ErrorPrototype)

#portée_export

ErrorPrototype :: struct {
    empl objet: Object
    table = *table_virtuelle_error_prototype
}

crée_error_prototype :: fonc (realm: *Realm, prototype: *ObjectPrototype) -> *ErrorPrototype
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(ErrorPrototype)
    résultat.prototype = prototype
    résultat.ajoute_fonction_native(STR_toString, error_prototype_to_string)
    initialise_error_object(realm, résultat, STR_Error, "")
    retourne résultat
}

initialise_error_object :: fonc (realm: *Realm, object: *Object, nom: ECMAString, message: chaine)
{
    si realm {
        enchaineuse: Enchaineuse
        initialise_enchaineuse(*enchaineuse)
        diffère détruit_tampons(*enchaineuse)

        ajoute_au_tampon(*enchaineuse, message, "\n")

        imprime_traceback(*enchaineuse, realm)

        message = chaine_depuis_enchaineuse(*enchaineuse)
    }

    desc: PropertyDescriptor
    initialise_property_descriptor(*desc, Valeur(String = crée_chaine(object.donne_tas_de_mémoire(), nom)), Configurable)
    _ := define_property_or_throw(object, STR_name, desc)

    initialise_property_descriptor(*desc, Valeur(String = crée_chaine(object.donne_tas_de_mémoire(), crée_chaine_utf16_unique(message))), DrapeauxPropriété.zéro)
    _ := define_property_or_throw(object, STR_message, desc)
}

#portée_module

imprime_traceback :: fonc (enchaineuse: *Enchaineuse, realm: *Realm)
{
    mv := realm.donne_mv()

    pour > mv.execution_contexts {
        si it.noeud_exécuté_courant {
            si it.script_or_module {
                lexème := it.noeud_exécuté_courant.lexème
                texte := it.script_or_module.source.donne_ligne_pour_lexème(lexème)

                ligne_pour_erreur := donne_ligne_pour_erreur(texte, lexème.texte.pointeur - texte.pointeur)

                ajoute_au_tampon(enchaineuse, "    at '", ligne_pour_erreur, "'\n")
                continue
            }
        }

        si it.function {
            ajoute_au_tampon(enchaineuse, "    at ", it.function.donne_nom(), "\n")
        }
        sinon si it.script_or_module {
            ajoute_au_tampon(enchaineuse, "    at script\n")
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "    at sans fonction ou script\n")
        }
    }
}

donne_ligne_pour_lexème :: fonc (source: &TexteSource, lexème: *Lexème) -> chaine
{
    premier_lexème := source.lexèmes.pointeur
    dernier_lexème := source.lexèmes.pointeur + source.lexèmes.taille

    saufsi premier_lexème <= lexème < dernier_lexème {
        retourne "le lexème ne vient pas du script"
    }

    début_source := source.texte.pointeur
    fin_source := début_source + source.texte.taille

    curseur := lexème.texte.pointeur
    tantque curseur >= début_source {
        si mémoire(curseur) == '\n' {
            curseur += 1
            arrête
        }

        curseur -= 1
    }

    résultat := chaine(curseur, lexème.texte.pointeur - curseur)

    curseur = lexème.texte.pointeur
    tantque curseur < fin_source {
        si mémoire(curseur) == '\n' {
            arrête
        }

        résultat.taille += 1
        curseur += 1
    }

    si résultat.taille == 0 {
        retourne "pas de texte trouvé"
    }

    retourne résultat
}

/* 20.5.3.4 Error.prototype.toString ( )
 * https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error.prototype.tostring */
error_prototype_to_string :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    // 1. Let O be the this value.
    O := this_value

    // 2. If O is not an Object, throw a TypeError exception.
    saufsi O.est_object() {
        retourne lance_type_error(interpréteuse, "not an Object")
    }

    // 3. Let name be ? Get(O, "name").
    completion := get(O.donne_objet(), STR_name)
    saufsi completion.est_normal() {
        retourne completion
    }
    name := completion.valeur.V

    // 4. If name is undefined, set name to "Error"; otherwise set name to ? ToString(name).
    si name.est_undefined() {
        name = crée_chaine(interpréteuse.donne_realm(), STR_Error)
    }
    sinon {
        completion = to_string(interpréteuse, name)
        saufsi completion.est_normal() {
            retourne completion
        }
        name = completion.valeur.V
    }

    // 5. Let msg be ? Get(O, "message").
    completion = get(O.donne_objet(), STR_message)
    saufsi completion.est_normal() {
        retourne completion
    }
    msg := completion.valeur.V

    // 6. If msg is undefined, set msg to the empty String; otherwise set msg to ? ToString(msg).
    si msg.est_undefined() {
        msg = crée_chaine(interpréteuse.donne_realm(), crée_chaine_utf16_unique_vide())
    }
    sinon {
        completion = to_string(interpréteuse, msg)
        saufsi completion.est_normal() {
            retourne completion
        }
        msg = completion.valeur.V
    }

    // 7. If name is the empty String, return msg.
    si name.String.texte.est_vide() {
        retourne normal_completion(msg)
    }

    // 8. If msg is the empty String, return name.
    si msg.String.texte.est_vide() {
        retourne normal_completion(name)
    }

    // 9. Return the string-concatenation of name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.
    chn_name := name.String.texte
    chn_msg := msg.String.texte
    chn_résultat := imprime_chaine("%: %", chn_name, chn_msg)

    retourne normal_completion(crée_chaine(interpréteuse.donne_realm(), crée_chaine_utf16_unique(chn_résultat)))
}

error_constructor_sur_call_or_construct :: fonc (empl params: *ParamètresCallOrConstruct, native_error_prototype: *Object, rappel_allocation_objet: TypeFonctionAllocationObjet) -> CompletionRecord
{
    realm := interpréteuse.donne_realm()

    // 1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.
    si new_target.est_undefined() {
        new_target.Object = donne_active_function_object(interpréteuse)
    }

    // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, "%NativeError.prototype%", « [[ErrorData]] »).
    new_target_object := new_target.donne_objet().vérifie_comme(Function)
    completion := ordinary_create_from_constructor(realm, new_target_object, native_error_prototype, rappel_allocation_objet)
    saufsi completion.est_normal() {
        retourne completion
    }
    O := completion.valeur.V.Object

    // 3. If message is not undefined, then
    message := params.donne_argument(0)
    saufsi message.est_undefined() {
        // a. Let msg be ? ToString(message).
        completion = to_string(interpréteuse, message)
        saufsi completion.est_normal() {
            retourne completion
        }
        msg := completion.valeur.V

        // À FAIRE b. Perform CreateNonEnumerableDataPropertyOrThrow(O, "message", msg).
        _ := create_data_property_or_throw(O, STR_message, msg)
    }

    // À FAIRE 4. Perform ? InstallErrorCause(O, options).

    // 5. Return O.
    retourne normal_completion(Valeur(Object = O))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Native Errors
 * \{ */

#portée_fichier

table_virtuelle_eval_error := TableVirtuelleObject(classe = EvalError)
table_virtuelle_range_error := TableVirtuelleObject(classe = RangeError)
table_virtuelle_reference_error := TableVirtuelleObject(classe = ReferenceError)
table_virtuelle_syntax_error := TableVirtuelleObject(classe = SyntaxError)
table_virtuelle_type_error := TableVirtuelleObject(classe = TypeError)
table_virtuelle_uri_error := TableVirtuelleObject(classe = URIError)

#portée_export

EvalError :: struct {
    empl error: Error
    table = *table_virtuelle_eval_error
}

RangeError :: struct {
    empl error: Error
    table = *table_virtuelle_range_error
}

ReferenceError :: struct {
    empl error: Error
    table = *table_virtuelle_reference_error
}

SyntaxError :: struct {
    empl error: Error
    table = *table_virtuelle_syntax_error
}

crée_erreur_de_parsage :: fonc (realm: *Realm, message: chaine) -> *SyntaxError
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(SyntaxError)
    résultat.prototype = realm.intrinsics.syntax_error_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(nul, résultat, STR_SyntaxError, message)
    retourne résultat
}

TypeError :: struct {
    empl error: Error
    table = *table_virtuelle_type_error
}

URIError :: struct {
    empl error: Error
    table = *table_virtuelle_uri_error
}

/** \} */

#portée_fichier

importe Compilatrice

génère_structures_native_errors :: fonc ()
{
    InfoNativeError :: struct {
        nom: chaine
        nom_variable: chaine
    }

    infos := [
        InfoNativeError("EvalError", "eval_error"),
        InfoNativeError("RangeError", "range_error"),
        InfoNativeError("ReferenceError", "reference_error"),
        InfoNativeError("SyntaxError", "syntax_error"),
        InfoNativeError("TypeError", "type_error"),
        InfoNativeError("URIError", "uri_error")
    ]

    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "importe Chaine\n")
    ajoute_au_tampon(*enchaineuse, "importe Fondation\n")

    chaine_déclaration_error := «
#portée_fichier

table_virtuelle_\\(1)_prototype := TableVirtuelleObject(classe = \\(0)Prototype)

#portée_export

lance_\\(1) :: fonc (interpréteuse: *Interpréteuse, message: chaine) -> CompletionRecord
{
    retourne lance_\\(1)(interpréteuse.donne_realm(), message)
}

lance_\\(1) :: fonc (realm: *Realm, message: chaine) -> CompletionRecord
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(\\(0))
    résultat.prototype = realm.intrinsics.\\(1)_prototype
    résultat.message = crée_chaine(realm, crée_chaine_utf16_unique(message))
    initialise_error_object(realm, résultat, STR_\\(0), message)
    retourne throw_completion(résultat)
}

\\(0)Prototype :: struct {
    empl objet: Object
    table = *table_virtuelle_\\(1)_prototype
}

crée_\\(1)_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ErrorPrototype) -> *\\(0)Prototype
{
    résultat := tas_de_mémoire.alloue(\\(0)Prototype)
    résultat.prototype = prototype
    retourne résultat
}
»
    chaine_déclaration_constructor := «
\\(0)Constructor :: struct {
    empl builtin_function: BuiltInFunction
    table = *table_virtuelle_\\(1)_constructor

    sur_call_or_construct = \\(1)_call_or_construct
}

crée_\\(1)_constructor :: fonc (realm: *Realm, function_prototype: *FunctionPrototype, prototype: *Object) -> *\\(0)Constructor
{
    assert(prototype == realm.intrinsics.\\(1)_prototype)
    tas_de_mémoire := realm.donne_tas_de_mémoire()
    résultat := tas_de_mémoire.alloue(\\(0)Constructor)
    create_builtin_function(résultat, 1, STR_\\(0), realm, function_prototype)

    résultat.ajoute_propriété(STR_prototype, Valeur(Object = prototype), DrapeauxPropriété.zéro)

    prototype.ajoute_propriété(STR_constructor, Valeur(Object = résultat), DrapeauxPropriété.zéro)

    retourne résultat
}

#portée_fichier

table_virtuelle_\\(1)_constructor := TableVirtuelleBuiltinFunction(classe = \\(0)Constructor)

crée_\\(1)_instance :: fonc (realm: *Realm) -> *Object
{
    retourne realm.donne_tas_de_mémoire().alloue(\\(0))
}

\\(1)_call_or_construct :: fonc (params: *ParamètresCallOrConstruct) -> CompletionRecord
{
    realm := params.interpréteuse.donne_realm()
    retourne error_constructor_sur_call_or_construct(params, realm.intrinsics.\\(1)_prototype, crée_\\(1)_instance)
}
»
    
    fmt_imprime_dans_enchaineuse(*enchaineuse, chaine_déclaration_constructor, "Error", "error")

    pour infos {
        fmt_imprime_dans_enchaineuse(*enchaineuse, chaine_déclaration_error, it.nom, it.nom_variable)
        fmt_imprime_dans_enchaineuse(*enchaineuse, chaine_déclaration_constructor, it.nom, it.nom_variable)
    }

    texte := chaine_depuis_enchaineuse(*enchaineuse)
    ajoute_chaine_au_module(compilatrice_espace_courant(), compilatrice_module_courant(), texte)
    déloge(texte)
}

#exécute génère_structures_native_errors()
