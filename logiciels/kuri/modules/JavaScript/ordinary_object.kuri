/* ------------------------------------------------------------------------- */
/** \nom 10.1 Ordinary Object Internal Methods and Internal Slots
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinary-object-internal-methods-and-internal-slots
 * \{ */

/* 10.1.1.1 OrdinaryGetPrototypeOf ( O )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarygetprototypeof */
ordinary_get_prototype_of :: fonc (object: *Object) -> *Object
{
    // Return O.[[Prototype]].
    retourne object.prototype
}

/* 10.1.2.1 OrdinarySetPrototypeOf ( O, V )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarysetprototypeof */
ordinary_set_prototype_of :: fonc (object: *Object, valeur: Valeur) -> bool
{
    // 1. Let current be O.[[Prototype]].
    current := object.prototype

    // 2. If SameValue(V, current) is true, return true.
    si same_value(valeur, current).est_true() {
        retourne vrai
    }

    // 3. Let extensible be O.[[Extensible]].
    extensible := object.extensible

    // 4. If extensible is false, return false.
    saufsi extensible {
        retourne faux
    }

    // 5. Let p be V.
    p : *Object
    saufsi valeur.est_nulle() {
        p = valeur.donne_objet()
    }

    // 6. Let done be false.
    done := faux

    // 7. Repeat, while done is false,
    tantque done == faux {
        // a. If p is null, then
        si p == nul {
            // i. Set done to true.
            done = vrai
        }
        // b. Else if SameValue(p, O) is true, then
        sinon si same_value(p, object).est_true() {
            // i. Return false.
            retourne faux
        }
        // c. Else,
        sinon {
            // i. If p.[[GetPrototypeOf]] is not the ordinary object internal method defined in 10.1.1, set done to true.
            si p.donne_table().sur_get_prototype_of != ordinary_get_prototype_of {
                done = vrai
            }
            // ii. Else, set p to p.[[Prototype]].
            sinon {
                p = p.prototype
            }
        }
    }

    // 8. Set O.[[Prototype]] to V.
    si valeur.est_nulle() {
        object.prototype = nul
    }
    sinon {
        assert(valeur.est_object())
        object.prototype = valeur.donne_objet()
    }

    // 9. Return true.
    retourne vrai
}

/* 10.1.5.1 OrdinaryGetOwnProperty ( O, P )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarygetownproperty */
ordinary_get_own_property :: fonc (object: *Object, property_key: PropertyKey) -> Optionnel(PropertyDescriptor)
{
    propriété := object.trouve_propriété(property_key)

    // 1. If O does not have an own property with key P, return undefined.
    saufsi propriété {
        retourne
    }

    // 2. Let D be a newly created Property Descriptor with no fields.
    D: PropertyDescriptor

    // 3. Let X be O's own property whose key is P.
    X := mémoire(propriété)

    // 4. If X is a data property, then
    si is_data_propery(X) {
        // a. Set D.[[Value]] to the value of X's [[Value]] attribute.
        D.value = propriété.valeur

        // b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.
        D.writable = propriété.drapeaux.WRITABLE == vrai
    }
    // 5. Else,
    sinon {
        // a. Assert: X is an accessor property.
        assert(is_accessor_propery(X))

        // b. Set D.[[Get]] to the value of X's [[Get]] attribute.
        si propriété.get {
            D.get = propriété.get
        }

        // c. Set D.[[Set]] to the value of X's [[Set]] attribute.
        si propriété.set {
            D.set = propriété.set
        }
    }

    // 6. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.
    D.enumerable = propriété.drapeaux.ENUMERABLE == vrai

    // 7. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.
    D.configurable = propriété.drapeaux.CONFIGURABLE == vrai

    // 8. Return D.
    retourne D
}

/* 10.1.6 [[DefineOwnProperty]] ( P, Desc )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarydefineownproperty */
ordinary_define_own_property :: fonc (object: *Object, property_key: PropertyKey, desc: &PropertyDescriptor) -> bool
{
    // À FAIRE : standardise
    saufsi desc.value.possède_valeur() {
        retourne faux
    }

    valeur := desc.value.Quelque
    drapeaux: DrapeauxPropriété
    si desc.writable.possède_valeur() {
        writable := desc.writable.Quelque
        si writable {
            drapeaux.WRITABLE = vrai
        }
    }
    si desc.configurable.possède_valeur() {
        configurable := desc.configurable.Quelque
        si configurable {
            drapeaux.CONFIGURABLE = vrai
        }
    }
    si desc.enumerable.possède_valeur() {
        enumerable := desc.enumerable.Quelque
        si enumerable {
            drapeaux.ENUMERABLE = vrai
        }
    }

    propriété := trouve_propriété(object, property_key)
    si propriété {
        propriété.valeur = valeur
        retourne vrai
    }

    object.ajoute_propriété(property_key, valeur, drapeaux)
    retourne vrai
}

/* 10.1.7.1 OrdinaryHasProperty ( O, P )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryhasproperty */
ordinary_has_property :: fonc (object: *Object, property_key: PropertyKey) -> bool
{
    // 1. Let hasOwn be ? O.[[GetOwnProperty]](P).
    has_own := internal_get_own_property(object, property_key)
    si object.possède_exception() {
        retourne faux
    }

    // 2. If hasOwn is not undefined, return true.
    si has_own.possède_valeur() {
        retourne vrai
    }

    // 3. Let parent be ? O.[[GetPrototypeOf]]().
    parent := internal_get_prototype_of(object)

    // 4. If parent is not null, then
    si parent {
        // a. Return ? parent.[[HasProperty]](P).
        retourne internal_has_property(parent, property_key)
    }

    // 5. Return false.
    retourne faux
}

/* 10.1.8.1 OrdinaryGet ( O, P, Receiver )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver */
ordinary_get :: fonc (object: *Object, property_key: PropertyKey, receiver: Valeur) -> Valeur
{
    // 1. Let desc be ? O.[[GetOwnProperty]](P).
    opt_desc := internal_get_own_property(object, property_key)
    si object.possède_exception() {
        retourne js_undefined
    }

    // 2. If desc is undefined, then
    saufsi opt_desc.possède_valeur() {
        // a. Let parent be ? O.[[GetPrototypeOf]]().
        parent := internal_get_prototype_of(object)

        // b. If parent is null, return undefined.
        si parent == nul {
            retourne js_undefined
        }

        // c. Return ? parent.[[Get]](P, Receiver).
        retourne parent.internal_get(property_key, receiver)
    }

    desc := opt_desc.Quelque

    // 3. If IsDataDescriptor(desc) is true, return desc.[[Value]].
    si is_data_descriptor(desc) {
        retourne desc.value
    }

    // 4. Assert: IsAccessorDescriptor(desc) is true.
    assert(is_accessor_descriptor(desc))

    // 5. Let getter be desc.[[Get]].
    getter := desc.get

    // 6. If getter is undefined, return undefined.
    saufsi getter.possède_valeur() {
        retourne js_undefined
    }

    // 7. Return ? Call(getter, Receiver).
    mv := receiver.donne_objet().donne_tas_de_mémoire().donne_mv()
    retourne call(mv, getter.Quelque, receiver)
}

/* 10.1.9.1 OrdinarySet ( O, P, V, Receiver )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryset */
ordinary_set :: fonc (object: *Object, property_key: PropertyKey, valeur: Valeur, receiver: Valeur) -> bool
{
    // 1. Let ownDesc be ? O.[[GetOwnProperty]](P).
    own_desc := internal_get_own_property(object, property_key)
    si object.possède_exception() {
        retourne faux
    }

    // 2. Return ? OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc).
    retourne ordinary_set_with_own_descriptor(object, property_key, valeur, receiver, own_desc)
}

/* 10.1.9.2 OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarysetwithowndescriptor */
ordinary_set_with_own_descriptor :: fonc (object: *Object, property_key: PropertyKey, valeur: Valeur, receiver: Valeur, opt_own_desc: Optionnel(PropertyDescriptor)) -> bool
{
    own_desc: PropertyDescriptor

    // 1. If ownDesc is undefined, then
    saufsi opt_own_desc.possède_valeur() {
        // a. Let parent be ? O.[[GetPrototypeOf]]().
        parent := internal_get_prototype_of(object)

        // b. If parent is not null, then
        si parent {
            // i. Return ? parent.[[Set]](P, V, Receiver).
            retourne internal_set(parent, property_key, valeur, receiver)
        }
        // c. Else,
        sinon {
            // i. Set ownDesc to the PropertyDescriptor { [[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.
            own_desc = PropertyDescriptor(value = js_undefined, writable = vrai, enumerable = vrai, configurable = vrai)
        }
    }
    sinon {
        own_desc = opt_own_desc.Quelque
    }

    // 2. If IsDataDescriptor(ownDesc) is true, then
    si is_data_descriptor(own_desc) {
        // a. If ownDesc.[[Writable]] is false, return false.
        si own_desc.writable == faux {
            retourne faux
        }

        // b. If Receiver is not an Object, return false.
        saufsi receiver.est_object() {
            retourne faux
        }

        // c. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).
        opt_existing_descriptor := internal_get_own_property(receiver.donne_objet(), property_key)
        si receiver.donne_objet().possède_exception() {
            retourne faux
        }

        // d. If existingDescriptor is not undefined, then
        si opt_existing_descriptor.possède_valeur() {
            existing_descriptor := opt_existing_descriptor.Quelque

            // i. If IsAccessorDescriptor(existingDescriptor) is true, return false.
            si is_accessor_descriptor(existing_descriptor) {
                retourne faux
            }

            // ii. If existingDescriptor.[[Writable]] is false, return false.
            si existing_descriptor.writable == faux {
                retourne faux
            }

            // iii. Let valueDesc be the PropertyDescriptor { [[Value]]: V }.
            value_desc := PropertyDescriptor(value = valeur)

            // iv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).
            retourne internal_define_own_property(receiver.donne_objet(), property_key, value_desc)
        }
        // e. Else,
        sinon {
            // À FAIRE : i. Assert: Receiver does not currently have a property P.

            // ii. Return ? CreateDataProperty(Receiver, P, V).
            retourne create_data_property(receiver.donne_objet(), property_key, valeur)
        }
    }

    // 3. Assert: IsAccessorDescriptor(ownDesc) is true.
    assert(is_accessor_descriptor(own_desc))

    // 4. Let setter be ownDesc.[[Set]].
    setter := own_desc.set

    // 5. If setter is undefined, return false.
    saufsi setter.possède_valeur() {
        retourne faux
    }

    // 6. Perform ? Call(setter, Receiver, « V »).
    mv := receiver.donne_objet().donne_tas_de_mémoire().donne_mv()

    arguments: []Valeur
    arguments.pointeur = *valeur
    arguments.taille = 1

    _ := call(mv, setter.Quelque, receiver, arguments)
    si mv.interpréteuse.possède_exception() {
        retourne faux
    }

    // 7. Return true.
    retourne vrai
}

/* 10.1.10.1 OrdinaryDelete ( O, P )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarydelete */
ordinary_delete :: fonc (O: *Object, P: PropertyKey) -> bool
{
    // 1. Let desc be ? O.[[GetOwnProperty]](P).
    opt_desc := internal_get_own_property(O, P)
    si O.possède_exception() {
        retourne faux
    }

    // 2. If desc is undefined, return true.
    saufsi opt_desc.possède_valeur() {
        retourne vrai
    }

    desc := opt_desc.Quelque

    // 3. If desc.[[Configurable]] is true, then
    configurable := desc.configurable
    si configurable.possède_valeur() && configurable.Quelque == vrai {
        // a. Remove the own property with name P from O.
        supprime_propriété(O, P)

        // b. Return true.
        retourne vrai
    }

    // 4. Return false.
    retourne faux
}

/* 10.1.12 OrdinaryObjectCreate ( proto [ , additionalInternalSlotsList ] )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate */
ordinary_object_create :: fonc (realm: *Realm, prototype: *Object, rappel_allocation_objet: TypeFonctionAllocationObjet) -> *Object
{
    // 1. Let internalSlotsList be « [[Prototype]], [[Extensible]] ».
    // 2. If additionalInternalSlotsList is present, set internalSlotsList to the list-concatenation of internalSlotsList and additionalInternalSlotsList.

    // 3. Let O be MakeBasicObject(internalSlotsList).
    O := make_basic_object(realm, rappel_allocation_objet)

    // 4. Set O.[[Prototype]] to proto.
    O.prototype = prototype

    // 5. Return O.
    retourne O
}

/* 10.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate */
ordinary_create_from_constructor :: fonc (realm: *Realm, constructor: *Function, intrinsic_default_proto: *Object, rappel_allocation_objet: TypeFonctionAllocationObjet) -> *Object
{
    // 1. Assert: intrinsicDefaultProto is this specification's name of an intrinsic object.
    //    The corresponding object must be an intrinsic that is intended to be used as the
    //    [[Prototype]] value of an object.
    assert(est_intrinsics(realm, intrinsic_default_proto))

    // 2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).
    proto := get_prototype_from_constructor(realm, constructor, intrinsic_default_proto)
    si realm.possède_exception() {
        retourne nul
    }

    // 3. If internalSlotsList is present, let slotsList be internalSlotsList.
    // 4. Else, let slotsList be a new empty List.

    // 5. Return OrdinaryObjectCreate(proto, slotsList).
    retourne ordinary_object_create(realm, proto, rappel_allocation_objet)
}

/* 10.1.14 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-getprototypefromconstructor */
get_prototype_from_constructor :: fonc (realm: *Realm, constructor: *Function, intrinsic_default_proto: *Object) -> *Object
{
    // 1. Assert: intrinsicDefaultProto is this specification's name of an intrinsic object.
    //    The corresponding object must be an intrinsic that is intended to be used as the
    //    [[Prototype]] value of an object.
    assert(est_intrinsics(realm, intrinsic_default_proto))

    // 2. Let proto be ? Get(constructor, "prototype").
    proto := get(constructor, STR_prototype)
    si realm.possède_exception() {
        retourne nul
    }

    // 3. If proto is not an Object, then
    saufsi proto.est_object() {
        // À FAIRE : a. Let realm be ? GetFunctionRealm(constructor).
        // b. Set proto to realm's intrinsic object named intrinsicDefaultProto.
        proto.Object = intrinsic_default_proto
    }

    // 4. Return proto.
    retourne proto.donne_objet()
}

/** \} */
