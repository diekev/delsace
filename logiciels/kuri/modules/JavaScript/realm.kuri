importe Ensemble
importe Fondation
importe #inemployé HTML

/* ------------------------------------------------------------------------- */
/** \nom HostDefined
 * Cette structutre, non-spécifiée, nous sers à tenir les données définis par
 * les hôtes pour les champs [[HostDefined]] définis par le standard.
 * \{ */

HostDefined :: struct {
    données: *rien
    infos: *InfoTypeStructure
}

crée_host_defined :: fonc (données: *$T) -> HostDefined
{
    retourne HostDefined(données, info_de(T))
}

donne_données :: fonc (host_defined: &HostDefined, $T: type_de_données) -> *T
{
    saufsi host_defined.données {
        retourne nul
    }
    assert(est_struct_ou_employeuse_de(host_defined.infos, info_de(T)))
    retourne host_defined.données comme *T
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom MachineVirtuelle
 * Cette structure, non-spécifiée, nous sers à tenir les données pour exécuter
 * des scripts.
 * Chaque client souhaitant exécuter du code JavaScript doit le faire via une
 * instance de MachineVirtuelle.
 * \{ */

MachineVirtuelle :: struct {
    tas_de_mémoire: TasDeMémoire
    user_agent: *HTML.UserAgent
    execution_contexts: [..]*ExecutionContext
}

initialise_mv :: fonc (mv: *MachineVirtuelle)
{
    mv.tas_de_mémoire.mv = mv
}

détruit_données_mv :: fonc (mv: *MachineVirtuelle)
{
    éboue(*mv.tas_de_mémoire, TypeÉbouage.RAMASSE_TOUT)
    détruit_données_tas_de_mémoire(*mv.tas_de_mémoire)
    déloge(mv.execution_contexts)
}

empile_execution_context :: fonc (mv: *MachineVirtuelle, execution_context: *ExecutionContext)
{
    tableau_ajoute(*mv.execution_contexts, execution_context)
}

dépile_execution_context :: fonc (mv: *MachineVirtuelle)
{
    assert(mv.execution_contexts.taille > 0)
    mv.execution_contexts.taille -= 1
}

suspend_running_execution_context :: fonc (mv: *MachineVirtuelle)
{
    suspend(mv.donne_running_execution_context())
}

donne_tas_de_mémoire :: fonc (mv: *MachineVirtuelle) -> *TasDeMémoire
{
    retourne *mv.tas_de_mémoire
}

donne_running_execution_context :: fonc (mv: *MachineVirtuelle) -> *ExecutionContext
{
    retourne mv.execution_contexts[mv.execution_contexts.taille - 1]
}

rassemble_racines :: fonc (mv: *MachineVirtuelle, racines: *[..]*Cellule)
{
    pour mv.execution_contexts {
        ensemble_ajoute(racines, it)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom https://tc39.es/ecma262/#sec-execution-contexts
 * \{ */

#portée_fichier

table_virtuelle_execution_context := TableVirtuelleCellule(classe = ExecutionContext)

#portée_export

ExecutionContext :: struct {
    empl base: Cellule
    table = *table_virtuelle_execution_context

    realm: *Realm
    function: *Function
    script_or_module: *Script // ScriptOrModule

    /* https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts */
    lexical_environment: *Environment
    variable_environment: *Environment
    private_environment: *PrivateEnvironment

    est_suspendu: bool
}

crée_execution_context :: fonc (tas_de_mémoire: *TasDeMémoire) -> *ExecutionContext
{
    retourne tas_de_mémoire.alloue(ExecutionContext)
}

/* 9.4.1 GetActiveScriptOrModule ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-getactivescriptormodule */
get_active_script_or_module :: fonc (mv: *MachineVirtuelle) -> *Script // ScriptOrModule
{
    // 1. If the execution context stack is empty, return null.
    si mv.execution_contexts.taille == 0 {
        retourne nul
    }

    // 2. Let ec be the topmost execution context on the execution context stack whose ScriptOrModule component is not null.
    // 3. If no such execution context exists, return null. Otherwise, return ec's ScriptOrModule.
    pour > mv.execution_contexts {
        si it.script_or_module {
            retourne it.script_or_module
        }
    }

    retourne nul
}

suspend :: fonc (execution_context: *ExecutionContext)
{
    si execution_context.est_suspendu {
        retourne
    }
    execution_context.est_suspendu = vrai
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Intrinsics
 * realm.[[Intrinsics]]
 *
 * Voir "Table 6: Well-Known Intrinsic Objects"
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#table-well-known-intrinsic-objects
 * \{ */

Intrinsics :: struct {
    string_prototype: *StringPrototype
    object_prototype: *ObjectPrototype
    function_prototype: *FunctionPrototype
    array_prototype: *ArrayPrototype
    error_prototype: *ErrorPrototype
    reference_error_prototype: *ReferenceErrorPrototype
    type_error_prototype: *TypeErrorPrototype
    syntax_error_prototype: *SyntaxErrorPrototype

    array: *ArrayConstructor
    eval: *Function
    function: *FunctionConstructor
    object: *ObjectConstructor
    string: *StringConstructor

    host_intrinsics: [..]*Object
}

/* 9.3.2 CreateIntrinsics ( realmRec )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-createintrinsics */
create_intrinsics :: fonc (realm: *Realm)
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()

    realm.intrinsics.object_prototype = crée_object_prototype(tas_de_mémoire)
    realm.intrinsics.string_prototype = crée_string_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.function_prototype = crée_function_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.array_prototype = crée_array_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.error_prototype = crée_error_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.reference_error_prototype = crée_reference_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.type_error_prototype = crée_type_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.syntax_error_prototype = crée_syntax_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)

    realm.intrinsics.array = crée_array_constructor(tas_de_mémoire, realm.intrinsics.function_prototype, realm.intrinsics.array_prototype)
    realm.intrinsics.eval = crée_eval(realm.intrinsics.function_prototype)
    realm.intrinsics.function = crée_function_constructor(tas_de_mémoire, realm.intrinsics.function_prototype)
    realm.intrinsics.object = crée_object_constructor(tas_de_mémoire, realm.intrinsics.function_prototype, realm.intrinsics.object_prototype)
    realm.intrinsics.string = crée_string_constructor(tas_de_mémoire, realm.intrinsics.function_prototype, realm.intrinsics.string_prototype)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom RappelsHôte
 * \{ */

RappelsHôte :: struct {
    crée_objet_global: fonc(*RappelsHôte, *Realm)(*Object)
    crée_host_instrinsics: fonc(*Realm)(rien)
    donne_this_binding_global: fonc(*RappelsHôte)(*Object)
    crée_propriétés_hôte_objet_global: fonc(*RappelsHôte, *Object)(rien)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Realm
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-code-realms
 * \{ */

#portée_fichier

table_virtuelle_realm := TableVirtuelleCellule(classe = Realm, sur_destruction = realm_sur_destruction)

#portée_export

Realm :: struct {
    empl base: Cellule
    table = *table_virtuelle_realm

    intrinsics: Intrinsics
    global_object: *Object
    global_environment: *GlobalEnvironment
    host_defined: HostDefined

    /* Cache pour toutes les chaines littérales. */
    chaines_littérales: [..]*PrimitiveChaine
}

realm_sur_destruction :: fonc (base: *Cellule)
{
    realm := base comme *Realm
    déloge(realm.chaines_littérales)
    déloge(realm.intrinsics.host_intrinsics)
}

donne_mv :: fonc (realm: *Realm) -> *MachineVirtuelle
{
    retourne realm.donne_tas_de_mémoire().donne_mv()
}

/* 9.3.1 InitializeHostDefinedRealm ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-initializehostdefinedrealm */
initialise_host_defined_realm :: fonc (mv: *MachineVirtuelle, rappels : *RappelsHôte = nul) -> *Realm
{
    tas_de_mémoire := mv.donne_tas_de_mémoire()

    // 1. Let realm be a new Realm Record.
    realm := tas_de_mémoire.alloue(Realm)

    // 2. Perform CreateIntrinsics(realm).
    create_intrinsics(realm)

    si rappels && rappels.crée_host_instrinsics {
        rappels.crée_host_instrinsics(realm)
    }

    // À FAIRE
    // 3. Set realm.[[AgentSignifier]] to AgentSignifier().
    // 4. Set realm.[[GlobalObject]] to undefined.
    // 5. Set realm.[[GlobalEnv]] to undefined.
    // 6. Set realm.[[TemplateMap]] to a new empty List.

    // 7. Let newContext be a new execution context.
    new_context := crée_execution_context(tas_de_mémoire)

    // 8. Set the Function of newContext to null.
    new_context.function = nul

    // 9. Set the Realm of newContext to realm.
    new_context.realm = realm

    // 10. Set the ScriptOrModule of newContext to null.
    new_context.script_or_module = nul

    // 11. Push newContext onto the execution context stack; newContext is now the running execution context.
    mv.empile_execution_context(new_context)

    global : *Object = ---
    // 12. If the host requires use of an exotic object to serve as realm's global object, then
    si rappels && rappels.crée_objet_global {
        // a. Let global be such an object created in a host-defined manner.
        global = rappels.crée_objet_global(rappels, realm)
    }
    // 13. Else,
    sinon {
        // a. Let global be OrdinaryObjectCreate(realm.[[Intrinsics]].[[%Object.prototype%]]).
        global = crée_objet(tas_de_mémoire, realm.intrinsics.object_prototype)
    }

    this_value : *Object = ---
    // 14. If the host requires that the this binding in realm's global scope return an object other than the global object, then
    si rappels && rappels.donne_this_binding_global {
        // a. Let thisValue be such an object created in a host-defined manner.
        this_value = rappels.donne_this_binding_global(rappels)
    }
    // 15. Else,
    sinon {
        // a. Let thisValue be global.
        this_value = global
    }

    // 16. Set realm.[[GlobalObject]] to global.
    realm.global_object = global

    // 17. Set realm.[[GlobalEnv]] to NewGlobalEnvironment(global, thisValue).
    realm.global_environment = new_global_environment(tas_de_mémoire, global, this_value)

    // 18. Perform ? SetDefaultGlobalBindings(realm).
    set_default_global_bindings(realm)

    // 19. Create any host-defined global object properties on global.
    si rappels && rappels.crée_propriétés_hôte_objet_global {
        rappels.crée_propriétés_hôte_objet_global(rappels, global)
    }

    // 20. Return UNUSED.
    retourne realm
}

/* 9.3.3 SetDefaultGlobalBindings ( realmRec )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-setdefaultglobalbindings */
set_default_global_bindings :: fonc (realm: *Realm)
{
    // 1. Let global be realmRec.[[GlobalObject]].
    global := realm.global_object

    // À FAIRE : implémente le reste
    // 2. For each property of the Global Object specified in clause 19, do
    // a. Let name be the String value of the property name.
    // b. Let desc be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in 19.2, 19.3, or 19.4 the value of the [[Value]] attribute is the corresponding intrinsic object from realmRec.
    // c. Perform ? DefinePropertyOrThrow(global, name, desc).

    // À FAIRE : utilise la valeur de retour
    desc: PropertyDescriptor
    desc.value = Valeur(Object = realm.global_environment.global_this_value)
    desc.configurable = vrai
    _ := define_property_or_throw(global, STR_globalThis, desc)

    desc = PropertyDescriptor()
    desc.value = js_undefined
    _ := define_property_or_throw(global, STR_undefined, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Number = NaN)
    _ := define_property_or_throw(global, STR_NaN, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Object = realm.intrinsics.array)
    _ := define_property_or_throw(global, STR_Array, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Function = realm.intrinsics.eval)
    _ := define_property_or_throw(global, STR_eval, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Object = realm.intrinsics.function)
    _ := define_property_or_throw(global, STR_Function, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Object = realm.intrinsics.object)
    _ := define_property_or_throw(global, STR_Object, desc)

    desc = PropertyDescriptor()
    desc.value = Valeur(Object = realm.intrinsics.string)
    _ := define_property_or_throw(global, STR_String, desc)

    // 3. Return UNUSED.
}

/** \} */
