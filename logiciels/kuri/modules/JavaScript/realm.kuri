importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom https://tc39.es/ecma262/#sec-execution-contexts
 * \{ */

#portée_fichier

table_virtuelle_execution_context := TableVirtuelleCellule(classe = ExecutionContext)

#portée_export

ExecutionContext :: struct {
    empl base: Cellule
    table = *table_virtuelle_execution_context

    realm: *Realm
    function: *Function
    script_or_module: *Script // ScriptOrModule
    noeud_exécuté_courant: *NoeudSyntaxique @NeVisitePas

    /* https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts */
    lexical_environment: *Environment
    variable_environment: *Environment
    private_environment: *PrivateEnvironment

    est_suspendu: bool
}

crée_execution_context :: fonc (tas_de_mémoire: *TasDeMémoire) -> *ExecutionContext
{
    retourne tas_de_mémoire.alloue(ExecutionContext)
}

/* 9.4.1 GetActiveScriptOrModule ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-getactivescriptormodule */
get_active_script_or_module :: fonc (mv: *MachineVirtuelle) -> *Script // ScriptOrModule
{
    // 1. If the execution context stack is empty, return null.
    si mv.execution_contexts.taille == 0 {
        retourne nul
    }

    // 2. Let ec be the topmost execution context on the execution context stack whose ScriptOrModule component is not null.
    // 3. If no such execution context exists, return null. Otherwise, return ec's ScriptOrModule.
    pour > mv.execution_contexts {
        si it.script_or_module {
            retourne it.script_or_module
        }
    }

    retourne nul
}

suspend :: fonc (execution_context: *ExecutionContext)
{
    si execution_context.est_suspendu {
        retourne
    }
    execution_context.est_suspendu = vrai
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Intrinsics
 * realm.[[Intrinsics]]
 *
 * Voir "Table 6: Well-Known Intrinsic Objects"
 * https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#table-well-known-intrinsic-objects
 * \{ */

Intrinsics :: struct {
    string_prototype: *StringPrototype
    object_prototype: *ObjectPrototype
    function_prototype: *FunctionPrototype
    array_prototype: *ArrayPrototype
    error_prototype: *ErrorPrototype
    reference_error_prototype: *ReferenceErrorPrototype
    type_error_prototype: *TypeErrorPrototype
    uri_error_prototype: *URIErrorPrototype
    syntax_error_prototype: *SyntaxErrorPrototype
    date_prototype: *DatePrototype
    number_prototype: *NumberPrototype
    boolean_prototype: *BooleanPrototype

    array: *ArrayConstructor
    date: *DateConstructor
    eval: *Function
    isnan: *Function
    parse_int: *Function
    function: *FunctionConstructor
    math: *MathObject
    object: *ObjectConstructor
    string: *StringConstructor
    number: *NumberConstructor
    boolean: *BooleanConstructor

    host_intrinsics: [..]*Object
}

/* 9.3.2 CreateIntrinsics ( realmRec )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-createintrinsics */
create_intrinsics :: fonc (realm: *Realm)
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()

    realm.intrinsics.object_prototype = crée_object_prototype(tas_de_mémoire)
    realm.intrinsics.string_prototype = crée_string_prototype(realm, realm.intrinsics.object_prototype)
    realm.intrinsics.function_prototype = crée_function_prototype(realm, realm.intrinsics.object_prototype)
    realm.intrinsics.array_prototype = crée_array_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.error_prototype = crée_error_prototype(realm, realm.intrinsics.object_prototype)
    realm.intrinsics.reference_error_prototype = crée_reference_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.type_error_prototype = crée_type_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.uri_error_prototype = crée_uri_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.syntax_error_prototype = crée_syntax_error_prototype(tas_de_mémoire, realm.intrinsics.error_prototype)
    realm.intrinsics.date_prototype = crée_date_prototype(tas_de_mémoire, realm.intrinsics.object_prototype)
    realm.intrinsics.number_prototype = crée_number_prototype(realm, realm.intrinsics.object_prototype)
    realm.intrinsics.boolean_prototype = crée_boolean_prototype(realm, realm.intrinsics.object_prototype)

    realm.intrinsics.array = crée_array_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.array_prototype)
    realm.intrinsics.date = crée_date_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.date_prototype)
    realm.intrinsics.eval = crée_eval(realm)
    realm.intrinsics.isnan = crée_isnan(realm)
    realm.intrinsics.parse_int = crée_parse_int(realm)
    realm.intrinsics.function = crée_function_constructor(realm, realm.intrinsics.function_prototype)
    realm.intrinsics.math = crée_math_object(realm.intrinsics.object_prototype)
    realm.intrinsics.object = crée_object_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.object_prototype)
    realm.intrinsics.string = crée_string_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.string_prototype)
    realm.intrinsics.number = crée_number_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.number_prototype)
    realm.intrinsics.boolean = crée_boolean_constructor(realm, realm.intrinsics.function_prototype, realm.intrinsics.boolean_prototype)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ConfigurationRealm
 * \{ */

ConfigurationRealm :: struct {
    crée_objet_global: fonc(*ConfigurationRealm, *Realm)(*Object)
    crée_host_instrinsics: fonc(*Realm)(rien)
    donne_this_binding_global: fonc(*ConfigurationRealm)(*Object)
    crée_propriétés_hôte_objet_global: fonc(*ConfigurationRealm, *Object)(rien)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Realm
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-code-realms
 * \{ */

#portée_fichier

table_virtuelle_realm := TableVirtuelleCellule(classe = Realm, sur_destruction = realm_sur_destruction)

#portée_export

Realm :: struct {
    empl base: Cellule
    table = *table_virtuelle_realm

    intrinsics: Intrinsics
    global_object: *Object
    global_environment: *GlobalEnvironment
    host_defined: HostDefined

    /* Cache pour toutes les chaines littérales. */
    chaines_littérales: [..]*PrimitiveChaine
    /* Cache pour les autres chaines. */
    chaines: [..]*PrimitiveChaine
}

est_intrinsics :: fonc (realm: *Realm, object: *Object) -> bool
{
    info := info_de(Intrinsics)
    base := *realm.intrinsics comme *octet

    pour info.membres {
        saufsi it.id.id == GenreInfoType.POINTEUR {
            continue
        }

        /* Charge le membre. */
        adresse := mémoire((base + it.décalage) comme **rien)
        si object == adresse {
            retourne vrai
        }
    }

    pour realm.intrinsics.host_intrinsics {
        si object == it {
            retourne vrai
        }
    }

    retourne faux
}

realm_sur_destruction :: fonc (base: *Cellule)
{
    realm := base.vérifie_comme(Realm)
    déloge(realm.chaines_littérales)
    déloge(realm.chaines)
    déloge(realm.intrinsics.host_intrinsics)
}

donne_mv :: fonc (realm: *Realm) -> *MachineVirtuelle
{
    retourne realm.donne_tas_de_mémoire().donne_mv()
}

/* 9.3.1 InitializeHostDefinedRealm ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-initializehostdefinedrealm */
initialise_host_defined_realm :: fonc (mv: *MachineVirtuelle, configuration : *ConfigurationRealm = nul) -> *Realm
{
    tas_de_mémoire := mv.donne_tas_de_mémoire()

    // 1. Let realm be a new Realm Record.
    realm := tas_de_mémoire.alloue(Realm)

    // 2. Perform CreateIntrinsics(realm).
    create_intrinsics(realm)

    si configuration && configuration.crée_host_instrinsics {
        configuration.crée_host_instrinsics(realm)
    }

    // À FAIRE
    // 3. Set realm.[[AgentSignifier]] to AgentSignifier().
    // 4. Set realm.[[GlobalObject]] to undefined.
    // 5. Set realm.[[GlobalEnv]] to undefined.
    // 6. Set realm.[[TemplateMap]] to a new empty List.

    // 7. Let newContext be a new execution context.
    new_context := crée_execution_context(tas_de_mémoire)

    // 8. Set the Function of newContext to null.
    new_context.function = nul

    // 9. Set the Realm of newContext to realm.
    new_context.realm = realm

    // 10. Set the ScriptOrModule of newContext to null.
    new_context.script_or_module = nul

    // 11. Push newContext onto the execution context stack; newContext is now the running execution context.
    mv.empile_execution_context(new_context)

    global : *Object = ---
    // 12. If the host requires use of an exotic object to serve as realm's global object, then
    si configuration && configuration.crée_objet_global {
        // a. Let global be such an object created in a host-defined manner.
        global = configuration.crée_objet_global(configuration, realm)
    }
    // 13. Else,
    sinon {
        // a. Let global be OrdinaryObjectCreate(realm.[[Intrinsics]].[[%Object.prototype%]]).
        global = ordinary_object_create(realm, realm.intrinsics.object_prototype, object_instance_crée)
    }

    this_value : *Object = ---
    // 14. If the host requires that the this binding in realm's global scope return an object other than the global object, then
    si configuration && configuration.donne_this_binding_global {
        // a. Let thisValue be such an object created in a host-defined manner.
        this_value = configuration.donne_this_binding_global(configuration)
    }
    // 15. Else,
    sinon {
        // a. Let thisValue be global.
        this_value = global
    }

    // 16. Set realm.[[GlobalObject]] to global.
    realm.global_object = global

    // 17. Set realm.[[GlobalEnv]] to NewGlobalEnvironment(global, thisValue).
    realm.global_environment = new_global_environment(tas_de_mémoire, global, this_value)

    // 18. Perform ? SetDefaultGlobalBindings(realm).
    completion := set_default_global_bindings(realm)
    // À FAIRE : retourne la completion au lieu du Realm (standard).
    assert(completion.est_normal())

    // 19. Create any host-defined global object properties on global.
    si configuration && configuration.crée_propriétés_hôte_objet_global {
        configuration.crée_propriétés_hôte_objet_global(configuration, global)
    }

    // 20. Return UNUSED.
    retourne realm
}

/* 9.3.3 SetDefaultGlobalBindings ( realmRec )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-setdefaultglobalbindings */
set_default_global_bindings :: fonc (realm: *Realm) -> CompletionRecord
{
    // 1. Let global be realmRec.[[GlobalObject]].
    global := realm.global_object

    // 2. For each property of the Global Object specified in clause 19, do
    GlobalObjectProperty :: struct {
        nom: ECMAString
        valeur: Valeur
        drapeaux: DrapeauxPropriété
    }

    global_object_properties := [
        /* 19.1 Value Properties of the Global Object */
        GlobalObjectProperty(STR_globalThis, Valeur(Object = realm.global_environment.global_this_value), Configurable | Writable),
        GlobalObjectProperty(STR_Infinity, Valeur(Number = R64_INFINITÉ)),
        GlobalObjectProperty(STR_NaN, Valeur(Number = NaN)),
        GlobalObjectProperty(STR_undefined, js_undefined),

        /* 19.2 Function Properties of the Global Object */
        GlobalObjectProperty(STR_eval, Valeur(Function = realm.intrinsics.eval)),
        // isFinite
        GlobalObjectProperty(STR_isNaN, Valeur(Function = realm.intrinsics.isnan)),
        // parseFloat
        GlobalObjectProperty(STR_parseInt, Valeur(Function = realm.intrinsics.parse_int)),
        // decodeURI
        // decodeURIComponent
        // encodeURI
        // encodeURIComponent
        // Encode
        // Decode
        // ParseHexOctet

        /* 19.3 Constructor Properties of the Global Object */
        // AggregateError
        GlobalObjectProperty(STR_Array, Valeur(Object = realm.intrinsics.array)),
        // ArrayBuffer
        // BigInt
        // BigInt64Array
        // BigUint64Array
        GlobalObjectProperty(STR_Boolean, Valeur(Object = realm.intrinsics.boolean)),
        // DataView
        GlobalObjectProperty(STR_Date, Valeur(Object = realm.intrinsics.date)),
        // Error
        // EvalError
        // FinalizationRegistry
        // Float32Array
        // Float64Array
        GlobalObjectProperty(STR_Function, Valeur(Object = realm.intrinsics.function)),
        // Int8Array
        // Int16Array
        // Int32Array
        // Map
        GlobalObjectProperty(STR_Number, Valeur(Object = realm.intrinsics.number)),
        GlobalObjectProperty(STR_Object, Valeur(Object = realm.intrinsics.object)),
        // Promise
        // Proxy
        // RangeError
        // ReferenceError
        // RegExp
        // Set
        // SharedArrayBuffer
        GlobalObjectProperty(STR_String, Valeur(Object = realm.intrinsics.string)),
        // Symbol
        // SyntaxError
        // TypeError
        // Uint8Array
        // Uint8ClampedArray
        // Uint16Array
        // Uint32Array
        // URIError
        // WeakMap
        // WeakRef
        // WeakSet

        /* 19.4 Other Properties of the Global Object */
        // Atomics
        // JSON
        GlobalObjectProperty(STR_Math, Valeur(Object = realm.intrinsics.math))
        // Reflect
    ]

    pour global_object_properties {
        // a. Let name be the String value of the property name.
        name := it.nom
        
        // b. Let desc be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in 19.2, 19.3, or 19.4 the value of the [[Value]] attribute is the corresponding intrinsic object from realmRec.
        desc: PropertyDescriptor
        initialise_property_descriptor(*desc, it.valeur, it.drapeaux)

        // c. Perform ? DefinePropertyOrThrow(global, name, desc).
        completion := define_property_or_throw(global, name, desc)
        saufsi completion.est_normal() {
            retourne completion
        }
    }

    // 3. Return UNUSED.
    retourne normal_completion(js_undefined)
}

/** \} */
