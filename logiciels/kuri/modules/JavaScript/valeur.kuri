/* ------------------------------------------------------------------------- */
/** \nom Valeur
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
 * \{ */

js_null := Valeur(Null = NullType(0))
js_undefined := Valeur(Undefined = UndefinedType(0))

Valeur :: union {
    Undefined: UndefinedType
    Null: NullType
    Boolean: bool
    Number: r64
    BigInt: BigInt
    String: *PrimitiveChaine
    Symbol: *Symbol
    Function: *Function
    Object: *Object
}

est_valide :: fonc (valeur: Valeur) -> bool #enligne
{
    discr valeur {
        Undefined {}
        Null {}
        Boolean {}
        Number {}
        BigInt {}
        String {}
        Symbol {}
        Function {}
        Object {}
        sinon {
            retourne faux
        }
    }
    retourne vrai
}

donne_type :: fonc (valeur: Valeur) -> z32
{
    info := info_de(Valeur)
    indice := mémoire(((*valeur comme *octet) + info.décalage_indice) comme *z32)
    retourne indice
}

imprime_valeur :: fonc (enchaineuse: *Enchaineuse, valeur: *Valeur)
{
    saufsi valeur {
        ajoute_au_tampon(enchaineuse, "nul")
        retourne
    }

    discr mémoire(valeur) {
        Undefined {
            ajoute_au_tampon(enchaineuse, "undefined")
        }
        Null {
            ajoute_au_tampon(enchaineuse, "null")
        }
        Boolean(b) {
            si b {
                ajoute_au_tampon(enchaineuse, "true")
            }
            sinon {
                ajoute_au_tampon(enchaineuse, "false")
            }
        }
        Number(n) {
            ajoute_au_tampon(enchaineuse, n)
        }
        Object(o) {
            si o.possède_slot("[[ErrorData]]") {
                error := trouve_propriété(o, STR_message).valeur.String
                ajoute_au_tampon(enchaineuse, o.donne_nom_classe(), ": ", error.texte)
            }
            sinon {
                ajoute_au_tampon(enchaineuse, "[object ", o.donne_nom_classe(), "]")
            }
        }
        Function(o) {
            ajoute_au_tampon(enchaineuse, "[object ", o.donne_nom_classe(), "]")
        }
        String(s) {
            ajoute_au_tampon(enchaineuse, s.texte)
        }
        sinon {
            ajoute_au_tampon(enchaineuse, "Valeur inconnue.")
        }
    }
} @FormattageImpression

/* À FAIRE(language) : index_de(valeur) == Number  */
est_fonction :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Function {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_object :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Object {
            retourne vrai
        }
        sinon {
            retourne est_fonction(valeur)
        }
    }
}

donne_objet :: fonc (valeur: Valeur) -> *Object
{
    discr valeur {
        Object(objet) {
            retourne objet
        }
        Function(function) {
            retourne function
        }
        sinon {
            retourne nul
        }
    }
}

est_cellule :: fonc (valeur: Valeur) -> bool
{
    retourne valeur.est_object() || valeur.est_chaine()
}

donne_cellule :: fonc (valeur: Valeur) -> *Cellule
{
    discr valeur {
        Object(o) {
            retourne o
        }
        Function(f) {
            retourne f
        }
        String(s) {
            retourne s
        }
        sinon {
            retourne nul
        }
    }
}

est_nombre :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Number {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_nan :: fonc (valeur: Valeur) -> bool
{
    retourne est_nombre(valeur) && est_nan(valeur.Number)
}

est_chaine :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        String {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_nulle :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Null {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_undefined :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Undefined {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_boolean :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_true :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

est_false :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne !valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

est_big_int :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        BigInt {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_symbol :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Symbol {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

is_non_negative_integral_number :: fonc (valeur: Valeur) -> bool
{
    saufsi valeur.est_nombre() {
        retourne faux
    }
    n := valeur.Number
    si n < 0.0 {
        retourne faux
    }
    in := n comme n64
    retourne n == in comme r64
}

is_array_index :: fonc (valeur: Valeur) -> bool
{
    si valeur.est_chaine() {
        texte := valeur.String.texte.donne_chaine_utf16()

        texte_utf8 := converti_vers_chaine(texte)
        diffère déloge(texte_utf8)

        résultat := tente extrait_r64(texte_utf8) piège _ {
            retourne faux
        }

        retourne is_non_negative_integral_number(résultat)
    }

    retourne is_non_negative_integral_number(valeur)
}

to_uint32 :: fonc (valeur: Valeur) -> n32
{
    si valeur.est_chaine() {
        texte := valeur.String.texte.donne_chaine_utf16()

        texte_utf8 := converti_vers_chaine(texte)
        diffère déloge(texte_utf8)

        résultat := tente extrait_r64(texte_utf8) piège _ {
            assert(faux)
            retourne 0xffffffff
        }

        retourne résultat comme n32
    }

    assert(valeur.est_nombre())
    n := valeur.Number
    assert(n >= 0.0)
    in := n comme n64
    retourne in comme n32
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 7.1 Type Conversion
 * \{ */

/* 7.1.1 ToPrimitive ( input [ , preferredType ] )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive */
to_primitive :: fonc (interpréteuse: *Interpréteuse, valeur: Valeur, type_préféré := TypePréféré.Aucun) -> Valeur
{
    retourne to_primitive(interpréteuse.donne_realm(), valeur, type_préféré)
}

to_primitive :: fonc (realm: *Realm, valeur: Valeur, type_préféré := TypePréféré.Aucun) -> Valeur
{
    // 1. If input is an Object, then
    si valeur.est_object() {
        // À FAIRE : a. Let exoticToPrim be ? GetMethod(input, %Symbol.toPrimitive%).
        // b. If exoticToPrim is not undefined, then
            // i. If preferredType is not present, then
                // 1. Let hint be "default".
            // ii. Else if preferredType is STRING, then
                // 1. Let hint be "string".
            // iii. Else,
                // 1. Assert: preferredType is NUMBER.
                // 2. Let hint be "number".
            // iv. Let result be ? Call(exoticToPrim, input, « hint »).
            // v. If result is not an Object, return result.
            // vi. Throw a TypeError exception.

        // c. If preferredType is not present, let preferredType be NUMBER.
        si type_préféré == TypePréféré.Aucun {
            type_préféré = TypePréféré.Number
        }

        // d. Return ? OrdinaryToPrimitive(input, preferredType).
        retourne ordinary_to_primitive(realm, valeur.donne_objet(), type_préféré)
    }

    // 2. Return input.
    retourne valeur
}

/* 7.1.1.1 OrdinaryToPrimitive ( O, hint )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-ordinarytoprimitive */
ordinary_to_primitive :: fonc (realm: *Realm, object: *Object, hint: TypePréféré) -> Valeur
{
    method_names: [2]ECMAString

    // 1. If hint is string, then
    si hint == TypePréféré.String {
        // a. Let methodNames be « "toString", "valueOf" ».
        method_names = [STR_toString, STR_valueOf]
    }
    // 2. Else,
    sinon {
        // a. Let methodNames be « "valueOf", "toString" ».
        method_names = [STR_valueOf, STR_toString]
    }

    // 3. For each element name of methodNames, do
    pour method_names {
        // a. Let method be ? Get(O, name).
        method := get(object, it)
        si realm.possède_exception() {
            retourne js_undefined
        }

        // b. If IsCallable(method) is true, then
        si is_callable(method) {
            // i. Let result be ? Call(method, O).
            mv := realm.donne_tas_de_mémoire().donne_mv()
            result := call(mv, method, object)
            si realm.possède_exception() {
                retourne js_undefined
            }

            // ii. If result is not an Object, return result.
            saufsi result.est_object() {
                retourne result
            }
        }
    }

    // 4. Throw a TypeError exception.
    retourne lance_type_error(realm, "object cannot be made into a primitive")
}

/* 7.1.2 ToBoolean ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toboolean */
to_boolean :: fonc (valeur: Valeur) -> bool
{
    // 1. If argument is a Boolean, return argument.
    si valeur.est_boolean() {
        retourne valeur.Boolean
    }

    // 2. If argument is one of undefined, null, +0𝔽, -0𝔽, NaN, 0ℤ, or the empty String, return false.
    discr valeur {
        Null {
            retourne faux
        }
        Undefined {
            retourne faux
        }
        Number(n) {
            si n == 0.0 || n == -0.0 {
                retourne faux
            }

            si est_nan(n) {
                retourne faux
            }

            // À FAIRE : 0ℤ
        }
        String(s) {
            si s.texte == crée_chaine_utf16_unique("") {
                retourne faux
            }
        }
        sinon {}
    }

    // 3. If argument is an Object and argument has an [[IsHTMLDDA]] internal slot, return false.
    si valeur.est_object() && possède_slot(valeur.donne_objet(), "[[IsHTMLDDA]]") {
        retourne faux
    }

    // 4. Return true.
    retourne vrai
}

/* 7.1.3 ToNumeric ( value )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumeric */
to_numeric :: fonc (interpréteuse: *Interpréteuse, valeur: Valeur) -> Valeur
{
    // 1. Let primValue be ? ToPrimitive(value, NUMBER).
    valeur_primitive := to_primitive(interpréteuse, valeur, TypePréféré.Number)
    si interpréteuse.possède_exception() {
        retourne js_undefined
    }

    // 2. If primValue is a BigInt, return primValue.
    si valeur_primitive.est_big_int() {
        retourne valeur_primitive
    }

    // 3. Return ? ToNumber(primValue).
    retourne to_number(interpréteuse, valeur_primitive)
}

/* 7.1.4 ToNumber ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber */
to_number :: fonc (interpréteuse: *Interpréteuse, valeur: Valeur) -> r64
{
    // 1. If argument is a Number, return argument.
    si valeur.est_nombre() {
        retourne valeur.Number
    }

    // 2. If argument is either a Symbol or a BigInt, throw a TypeError exception.
    si valeur.est_symbol() {
        _ := lance_type_error(interpréteuse, "can't convert Symbol to number")
        retourne NaN
    }
    si valeur.est_big_int() {
        _ := lance_type_error(interpréteuse, "can't convert BigInt to number")
        retourne NaN
    }

    // 3. If argument is undefined, return NaN.
    si valeur.est_undefined() {
        retourne NaN
    }

    // 4. If argument is either null or false, return +0𝔽.
    si valeur.est_nulle() || valeur.est_false() {
        retourne 0.0
    }

    // 5. If argument is true, return 1𝔽.
    si valeur.est_true() {
        retourne 1.0
    }

    // 6. If argument is a String, return StringToNumber(argument).
    si valeur.est_chaine() {
        retourne string_to_number(interpréteuse.donne_realm(), valeur)
    }

    // 7. Assert: argument is an Object.
    assert(valeur.est_object())

    // 8. Let primValue be ? ToPrimitive(argument, NUMBER).
    prim_value := to_primitive(interpréteuse, valeur, TypePréféré.Number)
    si interpréteuse.possède_exception() {
        retourne js_undefined
    }

    // 9. Assert: primValue is not an Object.
    assert(prim_value.est_object() == faux)

    // 10. Return ? ToNumber(primValue).
    retourne to_number(interpréteuse, prim_value)
}

/* 7.1.4.1.1 StringToNumber ( str )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-stringtonumber */
string_to_number :: fonc (realm: *Realm, valeur: Valeur) -> r64
{
    source := crée_texte_source(valeur.String.texte)
    diffère détruit_données_texte_source(*source)

    // 1. Let literal be ParseText(str, StringNumericLiteral).
    literal := parse_text(realm, *source, GoalSymbol.StringNumericLiteral)

    discr literal {
        Erreur {
            // 2. If literal is a List of errors, return NaN.
            retourne NaN
        }
        Ok(noeud) {
            diffère détruit_arbre(noeud)

            // 3. Return the StringNumericValue of literal.
            numeric := noeud comme *NumericLiteral
            retourne numeric.valeur
        }
        sinon {}
    }

    retourne NaN
}

/* 7.1.5 ToIntegerOrInfinity ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tointegerorinfinity */
to_integer_or_infinity :: fonc (interpréteuse: *Interpréteuse, valeur: Valeur) -> r64
{
    // 1. Let number be ? ToNumber(argument).
    number := to_number(interpréteuse, valeur)
    si interpréteuse.possède_exception() {
        retourne NaN
    }

    // 2. If number is one of NaN, +0𝔽, or -0𝔽, return 0.
    si est_nan(number) || number == 0.0 || number == -0.0 {
        retourne 0.0
    }

    // 3. If number is +∞𝔽, return +∞.
    // 4. If number is -∞𝔽, return -∞.
    si est_infini(number) {
        retourne number
    }

    // À FAIRE : 5. Return truncate(ℝ(number)).
    retourne (number comme z64) comme r64
}

/* 7.1.6 ToInt32 ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32 */
to_int32 :: fonc (argument: Valeur) -> r64
{
    // À FAIRE : standardise
    x := argument.Number comme z32
    retourne x comme r64
}

/* 7.1.17 ToString ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tostring */
to_string :: fonc (interpréteuse: *Interpréteuse, argument: Valeur) -> *PrimitiveChaine
{
    retourne to_string(interpréteuse.donne_realm(), argument)
}

to_string :: fonc (realm: *Realm, argument: Valeur) -> *PrimitiveChaine
{
    // 1. If argument is a String, return argument.
    si argument.est_chaine() {
        retourne argument.String
    }

    // 2. If argument is a Symbol, throw a TypeError exception.
    si argument.est_symbol() {
        retourne lance_type_error(realm, "can't convert Symbol to string")
    }

    // 3. If argument is undefined, return "undefined".
    si argument.est_undefined() {
        retourne crée_chaine(realm, STR_undefined)
    }

    // 4. If argument is null, return "null".
    si argument.est_nulle() {
        retourne crée_chaine(realm, STR_null)
    }

    // 5. If argument is true, return "true".
    si argument.est_true() {
        retourne crée_chaine(realm, STR_true)
    }

    // 6. If argument is false, return "false".
    si argument.est_false() {
        retourne crée_chaine(realm, STR_false)
    }

    // 7. If argument is a Number, return Number::toString(argument, 10).
    si argument.est_nombre() {
        retourne number_to_string(realm, argument, 10)
    }

    // 8. If argument is a BigInt, return BigInt::toString(argument, 10).
    si argument.est_big_int() {
        panique("to_string sur big_int non-implémenté")
    }

    // 9. Assert: argument is an Object.
    assert(argument.est_object())

    // 10. Let primValue be ? ToPrimitive(argument, STRING).
    prim_value := to_primitive(realm, argument, TypePréféré.String)
    si realm.possède_exception() {
        retourne nul
    }

    // 11. Assert: primValue is not an Object.
    assert(!prim_value.est_object())

    // 12. Return ? ToString(primValue).
    retourne to_string(realm, prim_value)
}

TypePréféré :: énum {
    Aucun
    Number
    String
}

/* 7.1.18 ToObject ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toobject */
to_object :: fonc (interpréteuse: *Interpréteuse, valeur: Valeur) -> *Object
{
    retourne to_object(interpréteuse.donne_realm(), valeur)
}

to_object :: fonc (realm: *Realm, valeur: Valeur) -> *Object
{
    si valeur.est_undefined() {
        _ := lance_type_error(realm, "undefined is not an Object")
        retourne nul
    }

    si valeur.est_nulle() {
        _ := lance_type_error(realm, "null is not an Object")
        retourne nul
    }

    si valeur.est_object() {
        retourne valeur.donne_objet()
    }

    si valeur.est_chaine() {
        chn := valeur.String
        saufsi chn.objet {
            chn.objet = crée_chaine(realm.donne_tas_de_mémoire(), realm.intrinsics.string_prototype, valeur.String)
        }
        retourne chn.objet
    }

    si valeur.est_nombre() {
        retourne crée_number_object(realm.donne_tas_de_mémoire(), realm.intrinsics.number_prototype, valeur.Number)
    }

    si valeur.est_boolean() {
        retourne crée_boolean_object(realm, valeur.Boolean)
    }

    panique("to_object non-implémenté pour type")
}

/* 7.1.19 ToPropertyKey ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-topropertykey */
to_property_key :: fonc (interpréteuse: *Interpréteuse, argument: Valeur) -> PropertyKey
{
    retourne to_property_key(interpréteuse.donne_realm(), argument)
}

to_property_key :: fonc (realm: *Realm, argument: Valeur) -> PropertyKey
{
    // 1. Let key be ? ToPrimitive(argument, STRING).
    key := to_primitive(realm, argument, TypePréféré.String)
    si realm.possède_exception() {
        retourne PropertyKey(Symbol = nul)
    }

    // 2. If key is a Symbol, then
    si key.est_symbol() {
        // a. Return key.
        retourne PropertyKey(Symbol = key.Symbol)
    }

    // 3. Return ! ToString(key).
    retourne PropertyKey(to_string(realm, key).texte)
}

/* 7.1.20 ToLength ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tolength */
to_length :: fonc (interpréteuse: *Interpréteuse, argument: Valeur) -> r64
{
    // 1. Let len be ? ToIntegerOrInfinity(argument).
    len := to_integer_or_infinity(interpréteuse, argument)
    si interpréteuse.possède_exception() {
        retourne NaN
    }

    // 2. If len ≤ 0, return +0𝔽.
    si len <= 0.0 {
        retourne 0.0
    }

    // 3. Return 𝔽(min(len, 2**53 - 1)).
    maximum := ((2 comme n64) << 53 - 1) comme r64
    retourne min(len, maximum)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 7.2 Testing and Comparison Operations
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-testing-and-comparison-operations
 * \{ */

/* 7.2.1 RequireObjectCoercible ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-requireobjectcoercible */
require_object_coercible :: fonc (realm: *Realm, value: Valeur) -> Valeur
{
    si value.est_nulle() {
        _ := lance_type_error(realm, "null is not an Object")
        retourne js_undefined
    }
    si value.est_undefined() {
        _ := lance_type_error(realm, "undefined is not an Object")
        retourne js_undefined
    }
    retourne value
}

/* 7.2.3 IsCallable ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iscallable */
is_callable :: fonc (argument: Valeur) -> bool
{
    // 1. If argument is not an Object, return false.
    saufsi argument.est_object() {
        retourne faux
    }

    // 2. If argument has a [[Call]] internal method, return true.
    object := argument.donne_objet()
    si object.donne_table().sur_call {
        retourne vrai
    }

    // 3. Return false.
    retourne faux
}

/* 7.2.4 IsConstructor ( argument )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isconstructor */
is_constructor :: fonc (argument: Valeur) -> bool
{
    // 1. If argument is not an Object, return false.
    saufsi argument.est_object() {
        retourne faux
    }

    // 2. If argument has a [[Construct]] internal method, return true.
    object := argument.donne_objet()
    si object.donne_table().sur_construct {
        retourne vrai
    }

    // 3. Return false.
    retourne faux
}

/* 7.2.5 IsExtensible ( O )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isextensible-o */
is_extensible :: fonc (object: *Object) -> bool
{
    // À FAIRE
    // 1. Return ? O.[[IsExtensible]]().
    retourne object.extensible
}

/* 7.2.8 SameType ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-sametype */
same_type :: fonc (x: Valeur, y: Valeur) -> bool
{
    // 1. If x is undefined and y is undefined, return true.
    si x.est_undefined() && y.est_undefined() {
        retourne vrai
    }

    // 2. If x is null and y is null, return true.
    si x.est_nulle() && y.est_nulle() {
        retourne vrai
    }

    // 3. If x is a Boolean and y is a Boolean, return true.
    si x.est_boolean() && y.est_boolean() {
        retourne vrai
    }

    // 4. If x is a Number and y is a Number, return true.
    si x.est_nombre() && y.est_nombre() {
        retourne vrai
    }

    // 5. If x is a BigInt and y is a BigInt, return true.
    si x.est_big_int() && y.est_big_int() {
        retourne vrai
    }

    // 6. If x is a Symbol and y is a Symbol, return true.
    si x.est_symbol() && y.est_symbol() {
        retourne vrai
    }

    // 7. If x is a String and y is a String, return true.
    si x.est_chaine() && y.est_chaine() {
        retourne vrai
    }

    // 8. If x is an Object and y is an Object, return true.
    si x.est_object() && y.est_object() {
        retourne vrai
    }

    // 9. Return false.
    retourne faux
}

/* 7.2.9 SameValue ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevalue */
same_value :: fonc (x: Valeur, y: Valeur) -> Valeur
{
    // 1. If SameType(x, y) is false, return false.
    saufsi same_type(x, y) {
        retourne faux
    }

    // 2. If x is a Number, then
    si x.est_nombre() {
        // a. Return Number::sameValue(x, y).
        retourne number_same_value(x, y)
    }

    // 3. Return SameValueNonNumber(x, y).
    retourne same_value_non_number(x, y)
}

/* 7.2.10 SameValueZero ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluezero */
same_value_zero :: fonc (x: Valeur, y: Valeur) -> Valeur
{
    // 1. If SameType(x, y) is false, return false.
    saufsi same_type(x, y) {
        retourne faux
    }

    // 2. If x is a Number, then
    si x.est_nombre() {
        // a. Return Number::sameValueZero(x, y).
        retourne number_same_value_zero(x, y)
    }

    // 3. Return SameValueNonNumber(x, y).
    retourne same_value_non_number(x, y)
}

/* 7.2.11 SameValueNonNumber ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluenonnumber */
same_value_non_number :: fonc (x: Valeur, y: Valeur) -> Valeur
{
    // 1. Assert: Type(x) is Type(y).

    // 2. If x is either null or undefined, return true.
    si x.est_nulle() || x.est_undefined() {
        retourne Valeur(Boolean = vrai)
    }

    // 3. If x is a BigInt, then
    si est_big_int(x) {
        // a. Return BigInt::equal(x, y).
        retourne big_int_equal(x, y)
    }

    // 4. If x is a String, then
    si x.est_chaine() {
        // a. If x and y have the same length and the same code units in the same positions, return true; otherwise, return false.
        chnx := x.String
        chny := y.String
        retourne chnx.texte == chny.texte
    }

    // 5. If x is a Boolean, then
    si x.est_boolean() {
        // a. If x and y are both true or both false, return true; otherwise, return false.
        boolx := x.Boolean
        booly := y.Boolean
        retourne boolx == booly
    }

    // 6. NOTE: All other ECMAScript language values are compared by identity.
    // 7. If x is y, return true; otherwise, return false.
    retourne x.donne_objet() == y.donne_objet()
}

/* 7.2.11 IsLessThan ( x, y, LeftFirst )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-islessthan */
is_less_than :: fonc (interpréteuse: *Interpréteuse, x: Valeur, y: Valeur, left_first: bool) -> Valeur
{
    px: Valeur
    py: Valeur

    // 1. If LeftFirst is true, then
    si left_first {
        // a. Let px be ? ToPrimitive(x, NUMBER).
        px = to_primitive(interpréteuse, x, TypePréféré.Number)
        si interpréteuse.possède_exception() {
            retourne faux
        }

        // b. Let py be ? ToPrimitive(y, NUMBER).
        py = to_primitive(interpréteuse, y, TypePréféré.Number)
        si interpréteuse.possède_exception() {
            retourne faux
        }
    }
    // 2. Else,
    sinon {
        // a. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.
        // b. Let py be ? ToPrimitive(y, NUMBER).
        py = to_primitive(interpréteuse, y, TypePréféré.Number)
        si interpréteuse.possède_exception() {
            retourne faux
        }

        // c. Let px be ? ToPrimitive(x, NUMBER).
        px = to_primitive(interpréteuse, x, TypePréféré.Number)
        si interpréteuse.possède_exception() {
            retourne faux
        }
    }

    // 3. If px is a String and py is a String, then
    si px.est_chaine() && py.est_chaine() {
        // À FAIRE : standardise
        // a. Let lx be the length of px.
        // b. Let ly be the length of py.
        // c. For each integer i such that 0 ≤ i < min(lx, ly), in ascending order, do
            // i. Let cx be the numeric value of the code unit at index i within px.
            // ii. Let cy be the numeric value of the code unit at index i within py.
            // iii. If cx < cy, return true.
            // iv. If cx > cy, return false.
        // d. If lx < ly, return true. Otherwise, return false.   
        chn_px := px.String.texte
        chn_py := py.String.texte
        retourne chn_px < chn_py
    }
    // 4. Else,
    sinon {
        // a. If px is a BigInt and py is a String, then
        si px.est_big_int() && py.est_chaine() {
            // i. Let ny be StringToBigInt(py).
            // ii. If ny is undefined, return undefined.
            // iii. Return BigInt::lessThan(px, ny).
            panique("is_less_than non-implémenté pour bigint < chaine")
        }
        // b. If px is a String and py is a BigInt, then
        si px.est_chaine() && py.est_big_int() {
            // i. Let nx be StringToBigInt(px).
            // ii. If nx is undefined, return undefined.
            // iii. Return BigInt::lessThan(nx, py).
            panique("is_less_than non-implémenté pour bigint < chaine")
        }
        // c. NOTE: Because px and py are primitive values, evaluation order is not important.
        // d. Let nx be ? ToNumeric(px).
        nx := to_numeric(interpréteuse, px)
        si interpréteuse.possède_exception() {
            retourne faux
        }

        // e. Let ny be ? ToNumeric(py).
        ny := to_numeric(interpréteuse, py)
        si interpréteuse.possède_exception() {
            retourne faux
        }

        // f. If Type(nx) is Type(ny), then
        si donne_type(nx) == donne_type(ny) {
            // i. If nx is a Number, then
            si nx.est_nombre() {
                // 1. Return Number::lessThan(nx, ny).
                retourne number_less_than(nx, ny)
            }
            // ii. Else,
                // 1. Assert: nx is a BigInt.
                // 2. Return BigInt::lessThan(nx, ny).
            panique("is_less_than non-implémenté pour bigint < bigint")
        }

        // g. Assert: nx is a BigInt and ny is a Number, or nx is a Number and ny is a BigInt.

        // h. If nx or ny is NaN, return undefined.
        si nx.est_nan() || ny.est_nan() {
            retourne js_undefined
        }

        // i. If nx is -∞𝔽 or ny is +∞𝔽, return true.
        // j. If nx is +∞𝔽 or ny is -∞𝔽, return false.
        // k. If ℝ(nx) < ℝ(ny), return true; otherwise return false.
        panique("is_less_than non-implémenté pour bigint|number < bigint|number")
    }
}

/* 7.2.12 IsLooselyEqual ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-islooselyequal */
is_loosely_equal :: fonc (interpréteuse: *Interpréteuse, x: Valeur, y: Valeur) -> bool
{
    // 1. If Type(x) is Type(y), then
    si x.donne_type() == y.donne_type() {
        // a. Return IsStrictlyEqual(x, y).
        retourne is_strictly_equal(x, y)
    }

    // 2. If x is null and y is undefined, return true.
    si x.est_nulle() && y.est_undefined() {
        retourne vrai
    }

    // 3. If x is undefined and y is null, return true.
    si x.est_undefined() && y.est_nulle() {
        retourne vrai
    }

    // À FAIRE 4. NOTE: This step is replaced in section B.3.6.2.

    // 5. If x is a Number and y is a String, return ! IsLooselyEqual(x, ! ToNumber(y)).
    si x.est_nombre() && y.est_chaine() {
        ny := to_number(interpréteuse, y)
        retourne is_loosely_equal(interpréteuse, x, ny)
    }

    // 6. If x is a String and y is a Number, return ! IsLooselyEqual(! ToNumber(x), y).
    si x.est_chaine() && y.est_nombre() {
        nx := to_number(interpréteuse, x)
        retourne is_loosely_equal(interpréteuse, nx, y)
    }

    // 7. If x is a BigInt and y is a String, then
    si x.est_big_int() && y.est_chaine() {
        // a. Let n be StringToBigInt(y).
        // b. If n is undefined, return false.
        // c. Return ! IsLooselyEqual(x, n).
        panique("is_loosely_equal non-implémenté")
    }

    // 8. If x is a String and y is a BigInt, return ! IsLooselyEqual(y, x).
    si x.est_chaine() && y.est_big_int() {
        panique("is_loosely_equal non-implémenté")
    }

    // 9. If x is a Boolean, return ! IsLooselyEqual(! ToNumber(x), y).
    si x.est_boolean() {
        nx := to_number(interpréteuse, x)
        retourne is_loosely_equal(interpréteuse, nx, y)
    }

    // 10. If y is a Boolean, return ! IsLooselyEqual(x, ! ToNumber(y)).
    si y.est_boolean() {
        ny := to_number(interpréteuse, y)
        retourne is_loosely_equal(interpréteuse, x, ny)
    }

    // 11. If x is either a String, a Number, a BigInt, or a Symbol and y is an Object, return ! IsLooselyEqual(x, ? ToPrimitive(y)).
    si (x.est_chaine() || x.est_nombre() || x.est_big_int() || x.est_symbol()) && y.est_object() {
        panique("is_loosely_equal non-implémenté")
    }

    // 12. If x is an Object and y is either a String, a Number, a BigInt, or a Symbol, return ! IsLooselyEqual(? ToPrimitive(x), y).
    si x.est_object() && (y.est_chaine() || y.est_nombre() || y.est_big_int() || y.est_symbol()) {
        panique("is_loosely_equal non-implémenté")
    }

    // 13. If x is a BigInt and y is a Number, or if x is a Number and y is a BigInt, then
    si (x.est_big_int() && y.est_nombre()) || (x.est_nombre() && y.est_big_int()) {
        // a. If x is not finite or y is not finite, return false.
        // b. If ℝ(x) = ℝ(y), return true; otherwise return false.
        panique("is_loosely_equal non-implémenté")
    }

    // 14. Return false.
    retourne faux
}

/* 7.2.13 IsStrictlyEqual ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isstrictlyequal */
is_strictly_equal :: fonc (x: Valeur, y: Valeur) -> bool
{
    // 1. If Type(x) is not Type(y), return false.
    si x.donne_type() != y.donne_type() {
        retourne faux
    }

    // 2. If x is a Number, then
    si x.est_nombre() {
        // a. Return Number::equal(x, y).
        retourne number_equal(x, y)
    }

    // 3. Return SameValueNonNumber(x, y).
    retourne same_value_non_number(x, y)
}

/** \} */
