importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom GénératriceCodeBinaire
 * \{ */

Label :: struct {
    id: n32
    décalage: DécalageBranche
}

LabelsBoucle :: struct {
    id_label_continue: n32
    id_label_break: n32
}

PatchLabelBranche :: struct {
    label: n32
    branche: IndexBranche
}

GénératriceCodeBinaire :: struct {
    flux: *FluxDInstructions

    labels: [..]Label
    labels_boucle: [..]LabelsBoucle
    patchs_labels_branches: [..]PatchLabelBranche
}

génère_code_binaire :: fonc (génératrice: &GénératriceCodeBinaire, noeud: *NoeudSyntaxique) -> Optionnel(Registre)
{
    saufsi noeud.sur_génération_code_binaire {
        infos := donne_info_pour_type_noeud(noeud)
        imprime("[%] noeud non-supporté : %\n", #nom_de_cette_fonction, infos.nom)
        retourne
    }

    retourne noeud.sur_génération_code_binaire(noeud, génératrice)
}

crée_label :: fonc (génératrice: &GénératriceCodeBinaire) -> Label
{
    résultat: Label = ---
    résultat.id = génératrice.labels.taille comme n32
    tableau_ajoute(*génératrice.labels, résultat)
    retourne résultat
}

insère_label :: fonc (génératrice: &GénératriceCodeBinaire, label: Label)
{
    génératrice.labels[label.id].décalage = génératrice.donne_décalage()
}

empile_labels_boucle :: fonc (génératrice: &GénératriceCodeBinaire, label_continue: Label, label_break: Label)
{
    labels: LabelsBoucle
    labels.id_label_continue = label_continue.id
    labels.id_label_break = label_break.id
    tableau_ajoute(*génératrice.labels_boucle, labels)
}

dépile_labels_boucle :: fonc (génératrice: &GénératriceCodeBinaire)
{
    génératrice.labels_boucle.taille -= 1
}

donne_labels_boucle_courante :: fonc (génératrice: &GénératriceCodeBinaire) -> LabelsBoucle
{
    retourne génératrice.labels_boucle[génératrice.labels_boucle.taille - 1]
}

ajoute_patch_label_branche :: fonc (génératrice: &GénératriceCodeBinaire, label: n32, branche: IndexBranche)
{
    patch := tableau_ajoute_élément(*génératrice.patchs_labels_branches)
    patch.label = label
    patch.branche = branche
}

applique_patchs :: fonc (génératrice: &GénératriceCodeBinaire)
{
    pour génératrice.patchs_labels_branches {
        label := génératrice.labels[it.label]
        génératrice.définis_décalage_branche(it.branche, label.décalage)
    }
}

donne_décalage :: fonc (génératrice: &GénératriceCodeBinaire) -> DécalageBranche
{
    flux := génératrice.flux
    retourne DécalageBranche(flux.instructions.taille)
}

définis_décalage_branche :: fonc (génératrice: &GénératriceCodeBinaire, branche: IndexBranche)
{
    définis_décalage_branche(génératrice, branche, génératrice.donne_décalage())
}

définis_décalage_branche :: fonc (génératrice: &GénératriceCodeBinaire, branche: IndexBranche, décalage: DécalageBranche)
{
    flux := génératrice.flux
    instruction := *flux.instructions[branche comme z64] comme *InstructionBranche
    instruction.décalage = décalage
}

crée_instruction :: fonc (génératrice: &GénératriceCodeBinaire, $T: type_de_données) -> *T
{
    flux := génératrice.flux

    décalage := flux.instructions.taille
    tableau_redimensionne(flux.instructions, décalage + taille_de(T) comme z64)
    résultat := *flux.instructions[décalage] comme *T
    init_de(T)(résultat)
    retourne résultat
}

crée_branche :: fonc (génératrice: &GénératriceCodeBinaire, décalage: DécalageBranche)
{
    branche := génératrice.crée_instruction(InstructionBranche)
    branche.décalage = décalage
}

crée_branche :: fonc (génératrice: &GénératriceCodeBinaire) -> IndexBranche
{
    résultat := génératrice.donne_décalage()
    _ := génératrice.crée_instruction(InstructionBranche)
    retourne IndexBranche(résultat comme z64)
}

crée_branche_si_faux :: fonc (génératrice: &GénératriceCodeBinaire) -> IndexBranche
{
    résultat := génératrice.donne_décalage()
    _ := génératrice.crée_instruction(InstructionBrancheSiFaux)
    retourne IndexBranche(résultat comme z64)
}

crée_branche_si_vrai :: fonc (génératrice: &GénératriceCodeBinaire) -> IndexBranche
{
    résultat := génératrice.donne_décalage()
    _ := génératrice.crée_instruction(InstructionBrancheSiVrai)
    retourne IndexBranche(résultat comme z64)
}

crée_charge :: fonc (génératrice: &GénératriceCodeBinaire, valeur: Valeur) -> Registre
{
    gauche := génératrice.crée_instruction(InstructionCharge)
    gauche.vlr = valeur
    retourne Registre(0)
}

crée_stocke :: fonc (génératrice: &GénératriceCodeBinaire) -> Registre
{
    dst := génératrice.alloue_registre()
    gauche := génératrice.crée_instruction(InstructionStocke)
    gauche.dst = dst
    retourne dst
}

crée_crée_chaine :: fonc (génératrice: &GénératriceCodeBinaire, chn: ECMAString) -> Registre
{
    résultat := génératrice.crée_instruction(InstructionCréeChaine)
    résultat.chn = chn
    retourne Registre(0)
}

crée_crée_objet :: fonc (génératrice: &GénératriceCodeBinaire) -> Registre
{
    _ := génératrice.crée_instruction(InstructionCréeObjet)
    retourne Registre(0)
}

crée_expression_binaire :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre, $T: type_de_données) -> Registre
{
    ajout := génératrice.crée_instruction(T)
    ajout.gch = gauche
    retourne Registre(0)
}

crée_ajoute :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre) -> Registre
{
    retourne crée_expression_binaire(génératrice, gauche, InstructionAjoute)
}

crée_soustrait :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre) -> Registre
{
    retourne crée_expression_binaire(génératrice, gauche, InstructionSoustrait)
}

crée_relation_inférieure :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre) -> Registre
{
    retourne crée_expression_binaire(génératrice, gauche, InstructionRelationInférieure)
}

crée_comparaison_égal :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre) -> Registre
{
    retourne crée_expression_binaire(génératrice, gauche, InstructionComparaisonÉgal)
}

crée_comparaison_inégal :: fonc (génératrice: &GénératriceCodeBinaire, gauche: Registre) -> Registre
{
    retourne crée_expression_binaire(génératrice, gauche, InstructionComparaisonInégal)
}

crée_définis_locale :: fonc (génératrice: &GénératriceCodeBinaire, nom: ECMAString)
{
    résultat := génératrice.crée_instruction(InstructionDéfinisLocale)
    résultat.nom = nom
}

crée_charge_locale :: fonc (génératrice: &GénératriceCodeBinaire, nom: ECMAString) -> Registre
{
    résultat := génératrice.crée_instruction(InstructionChargeLocale)
    résultat.nom = nom
    retourne Registre(0)
}

crée_initialise_référence :: fonc (génératrice: &GénératriceCodeBinaire, nom: ECMAString)
{
    résultat := génératrice.crée_instruction(InstructionInitialiseRéférence)
    résultat.nom = nom
}

crée_définis_membre :: fonc (génératrice: &GénératriceCodeBinaire, nom: ECMAString, src: Registre)
{
    résultat := génératrice.crée_instruction(InstructionDéfinisMembre)
    résultat.nom = nom
    résultat.src = src
}

crée_charge_membre :: fonc (génératrice: &GénératriceCodeBinaire, reg_objet: Registre, nom: ECMAString) -> Registre
{
    résultat := génératrice.crée_instruction(InstructionChargeMembre)
    résultat.obj = reg_objet
    résultat.nom = nom
    retourne Registre(0)
}

crée_appel :: fonc (génératrice: &GénératriceCodeBinaire, func: Registre, this_value: Registre, args: []Registre) -> Registre
{
    flux := génératrice.flux
    décalage := flux.instructions.taille
    tableau_redimensionne(flux.instructions, décalage + taille_de(InstructionAppel) comme z64 + args.taille * taille_de(Registre) comme z64)
    résultat := *flux.instructions[décalage] comme *InstructionAppel
    init_de(InstructionAppel)(résultat)

    résultat.func = func
    résultat.this_value = this_value
    résultat.nombre_arguments = args.taille comme z32

    pointeur_args := ((résultat + 1) comme *octet) comme *Registre

    pour args {
        mémoire(pointeur_args) = it
        pointeur_args += 1
    }

    retourne Registre(0)
}

crée_this_value_appel :: fonc (génératrice: &GénératriceCodeBinaire, noeud: *NoeudSyntaxique) -> Registre
{
    résultat := génératrice.crée_instruction(InstructionThisValueAppel)
    résultat.noeud = noeud
    retourne Registre(0)
}

crée_retour :: fonc (génératrice: &GénératriceCodeBinaire)
{
    _ := génératrice.crée_instruction(InstructionRetour)
}

crée_this :: fonc (génératrice: &GénératriceCodeBinaire) -> Registre
{
    _ := génératrice.crée_instruction(InstructionThis)
    retourne Registre(0)
}

alloue_registre :: fonc (empl génératrice: &GénératriceCodeBinaire) -> Registre
{
    résultat := Registre(flux.registres)
    flux.registres += 1
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Génération de code pour les noeuds.
 * \{ */

assignment_expression_sur_code_binaire :: fonc (noeud: *AssignmentExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.opération == AssignmentOperation.Assigne)

    opt_reg := génère_code_binaire(génératrice, noeud.droite)
    assert(opt_reg.possède_valeur())

    si noeud.gauche.type == Identifier {
        nom := (noeud.gauche comme *Identifier).nom
        génératrice.crée_définis_locale(nom)
    }
    sinon si noeud.gauche.type == MemberExpression {
        membre := noeud.gauche comme *MemberExpression
        assert(!membre.calculé)

        opt_reg = génératrice.crée_stocke()

        opt_reg_objet := génératrice.génère_code_binaire(membre.objet)
        assert(opt_reg_objet.possède_valeur())

        assert(membre.propriété.type == Identifier)
        identifier := membre.propriété comme *Identifier

        génératrice.crée_définis_membre(identifier.nom, opt_reg.Quelque)
    }
    sinon {
        panique("non-implémenté")
    }

    retourne opt_reg
}

binary_expression_sur_code_binaire :: fonc (expression: *BinaryExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    opt_reg_gauche := génère_code_binaire(génératrice, expression.gauche)
    assert(opt_reg_gauche.possède_valeur())
    gauche := génératrice.crée_stocke()
    opt_reg_droite := génère_code_binaire(génératrice, expression.droite)
    assert(opt_reg_droite.possède_valeur())

    si expression.opération == BinaryOperation.Plus {
        retourne génératrice.crée_ajoute(gauche)
    }

    si expression.opération == BinaryOperation.Moins {
        retourne génératrice.crée_soustrait(gauche)
    }

    panique("non-implémenté")
}

block_statement_sur_code_binaire :: fonc (block: *BlockStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    résultat: Optionnel(Registre)
    pour block.enfants {
        résultat = génératrice.génère_code_binaire(it)
    }
    retourne résultat
}

boolean_literal_sur_code_binaire :: fonc (noeud: *BooleanLiteral, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_charge(Valeur(Boolean = noeud.valeur))
}

break_statement_sur_code_binaire :: fonc (statement: *BreakStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(statement.target == nul)
    label := génératrice.donne_labels_boucle_courante().id_label_break
    branche := génératrice.crée_branche()
    génératrice.ajoute_patch_label_branche(label, branche)
}

call_expression_sur_code_binaire :: fonc (noeud: *CallExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.appelé.type != CallExpression)

    reg_opt_func := génératrice.génère_code_binaire(noeud.appelé)
    assert(reg_opt_func.possède_valeur())
    reg_opt_func = génératrice.crée_stocke()

    this_value := génératrice.crée_this_value_appel(noeud.appelé)
    this_value = génératrice.crée_stocke()

    registres_arguments: [..]Registre
    diffère déloge(registres_arguments)

    pour noeud.arguments {
        reg_opt_arg := génératrice.génère_code_binaire(it)
        assert(reg_opt_arg.possède_valeur())
        reg_arg := génératrice.crée_stocke()
        tableau_ajoute(*registres_arguments, reg_arg)
    }

    retourne génératrice.crée_appel(reg_opt_func.Quelque, this_value, registres_arguments)
}

continue_statement_sur_code_binaire :: fonc (statement: *ContinueStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(statement.target == nul)
    label := génératrice.donne_labels_boucle_courante().id_label_continue
    branche := génératrice.crée_branche()
    génératrice.ajoute_patch_label_branche(label, branche)
}

do_while_statement_sur_code_binaire :: fonc (noeud: *DoWhileStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    décalage := génératrice.donne_décalage()
    label_continue := génératrice.crée_label()

    label_break := génératrice.crée_label()

    génératrice.empile_labels_boucle(label_continue, label_break)
    diffère génératrice.dépile_labels_boucle()

    _ := génératrice.génère_code_binaire(noeud.body)

    génératrice.insère_label(label_continue)

    reg_opt_test := génératrice.génère_code_binaire(noeud.test)
    assert(reg_opt_test.possède_valeur())

    branche_test := génératrice.crée_branche_si_vrai()
    génératrice.définis_décalage_branche(branche_test, décalage)
    génératrice.insère_label(label_break)

    retourne génératrice.crée_charge(js_undefined)
}

empty_statement_sur_code_binaire :: fonc (statement: *NoeudSyntaxique @inutilisée, génératrice: &GénératriceCodeBinaire @inutilisée) -> Optionnel(Registre)
{
    retourne
}

equality_expression_sur_code_binaire :: fonc (noeud: *EqualityExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    opt_reg_gauche := génère_code_binaire(génératrice, noeud.gauche)
    assert(opt_reg_gauche.possède_valeur())
    gauche := génératrice.crée_stocke()
    opt_reg_droite := génère_code_binaire(génératrice, noeud.droite)
    assert(opt_reg_droite.possède_valeur())

    discr noeud.opération {
        Égal {
            retourne génératrice.crée_comparaison_égal(gauche)
        }
        Inégal {
            retourne génératrice.crée_comparaison_inégal(gauche)
        }
        sinon {
            panique("non-implémenté")
        }
    }
}

expression_statement_sur_code_binaire :: fonc (statement: *ExpressionStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génère_code_binaire(génératrice, statement.expression)
}

function_declaration_sur_code_binaire :: fonc (noeud: *FunctionDeclaration @inutilisée, génératrice: &GénératriceCodeBinaire @inutilisée) -> Optionnel(Registre)
{
    // 1. Return empty.
    retourne
}

identifier_sur_code_binaire :: fonc (noeud: *Identifier, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_charge_locale(noeud.nom)
}

if_statement_sur_code_binaire :: fonc (noeud: *IfStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    reg_opt_test := génératrice.génère_code_binaire(noeud.test)
    assert(reg_opt_test.possède_valeur())

    branche_si_faux := génératrice.crée_branche_si_faux()

    _ := génératrice.génère_code_binaire(noeud.consequent)

    si noeud.alternate {
        branche := génératrice.crée_branche()

        génératrice.définis_décalage_branche(branche_si_faux)
        _ := génératrice.génère_code_binaire(noeud.alternate)

        génératrice.définis_décalage_branche(branche)
    }
    sinon {
        génératrice.définis_décalage_branche(branche_si_faux)
    }

    retourne génératrice.crée_charge(js_undefined)
}

membre_expression_sur_code_binaire :: fonc (noeud: *MemberExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.calculé == faux)

    opt_reg_objet := génératrice.génère_code_binaire(noeud.objet)

    assert(noeud.propriété.type == Identifier)
    identifier := noeud.propriété comme *Identifier

    retourne génératrice.crée_charge_membre(opt_reg_objet.Quelque, identifier.nom)
}

noeud_script_body_sur_code_binaire :: fonc (noeud: *ScriptBody, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    résultat: Optionnel(Registre)

    pour noeud.enfants {
        résultat = génère_code_binaire(génératrice, it)
    }

    retourne résultat
}

noeud_script_sur_code_binaire :: fonc (noeud: *NoeudScript, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génère_code_binaire(génératrice, noeud.script_body)
}

null_literal_sur_code_binaire :: fonc (noeud: *NullLiteral @inutilisée, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_charge(js_null)
}

numeric_literal_sur_code_binaire :: fonc (noeud: *NumericLiteral, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_charge(Valeur(Number = noeud.valeur))
}

object_expression_sur_code_binaire :: fonc (noeud: *ObjectExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.properties.taille == 0)
    retourne génératrice.crée_crée_objet()
}

parenthesized_expression_sur_code_binaire :: fonc (noeud: *ParenthesizedExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    saufsi noeud.expression {
        retourne génératrice.crée_charge(js_undefined)
    }

    retourne génératrice.génère_code_binaire(noeud.expression)
}

relational_expression_sur_code_binaire :: fonc (noeud: *RelationalExpression, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.opération == RelationalOperation.Inférieur)

    opt_reg_gauche := génère_code_binaire(génératrice, noeud.gauche)
    assert(opt_reg_gauche.possède_valeur())
    gauche := génératrice.crée_stocke()
    opt_reg_droite := génère_code_binaire(génératrice, noeud.droite)
    assert(opt_reg_droite.possède_valeur())

    retourne génératrice.crée_relation_inférieure(gauche)
}

return_statement_sur_code_binaire :: fonc (noeud: *ReturnStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    si noeud.argument {
        _ := génératrice.génère_code_binaire(noeud.argument)
    }
    sinon {
        _ := génératrice.crée_charge(js_undefined)
    }

    génératrice.crée_retour()
}

string_literal_sur_code_binaire :: fonc (noeud: *StringLiteral, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_crée_chaine(noeud.valeur)
}

this_expression_sur_code_binaire :: fonc (noeud: *ThisExpression @inutilisée, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    retourne génératrice.crée_this()
}

variable_declaration_sur_code_binaire :: fonc (noeud: *VariableDeclaration, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    dernière_valeur: Optionnel(Registre)

    si noeud.nature == VariableDeclarationKind.Var {
        pour noeud.expressions {
            dernière_valeur = variable_declarator_sur_code_binaire(it, génératrice)
        }
    }
    sinon {
        pour noeud.expressions {
            dernière_valeur = lexical_declarator_sur_code_binaire(it, génératrice)
        }
    }

    retourne dernière_valeur
}

variable_declarator_sur_code_binaire :: fonc (noeud: *VariableDeclarator, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.id.type == Identifier)
    identifier := noeud.id comme *Identifier

    saufsi noeud.init {
        // 1. Return EMPTY
        retourne
    }

    // 1. Let bindingId be the StringValue of BindingIdentifier.
    binding_id := identifier.nom

    // 2. Let lhs be ? ResolveBinding(bindingId).
    // À FAIRE : nous pourrions avoir une exception ici.

    // 3. If IsAnonymousFunctionDefinition(Initializer) is true, then
    si is_anonymous_function_definition(noeud.init) {
        // a. Let value be ? NamedEvaluation of Initializer with argument bindingId.
        panique("non-implémenté")
    }
    // 4. Else,
    sinon {
        // a. Let rhs be ? Evaluation of Initializer.
        // b. Let value be ? GetValue(rhs).
        _ := génératrice.génère_code_binaire(noeud.init)
    }

    // 5. Perform ? PutValue(lhs, value).
    génératrice.crée_définis_locale(binding_id)

    // 6. Return EMPTY.
    retourne
}

lexical_declarator_sur_code_binaire :: fonc (noeud: *VariableDeclarator, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    assert(noeud.id.type == Identifier)
    binding_identifier := noeud.id comme *Identifier

    saufsi noeud.init {
        // 1. Let lhs be ! ResolveBinding(StringValue of BindingIdentifier).
        binding_id := binding_identifier.nom

        // 2. Perform ! InitializeReferencedBinding(lhs, undefined).
        _ := génératrice.crée_charge(js_undefined)
        génératrice.crée_initialise_référence(binding_id)

        // 3. Return empty.
        retourne
    }

    // 1. Let bindingId be the StringValue of BindingIdentifier.
    binding_id := binding_identifier.nom

    // 2. Let lhs be ! ResolveBinding(bindingId).

    // 3. If IsAnonymousFunctionDefinition(Initializer) is true, then
    si is_anonymous_function_definition(noeud.init) {
        // a. Let value be ? NamedEvaluation of Initializer with argument bindingId.
        panique("non-implémenté")
    }
    // 4. Else,
    sinon {
        // a. Let rhs be ? Evaluation of Initializer.
        // b. Let value be ? GetValue(rhs).
        _ := génératrice.génère_code_binaire(noeud.init)
    }

    // 5. Perform ! InitializeReferencedBinding(lhs, value).
    génératrice.crée_initialise_référence(binding_id)

    // 6. Return empty.
    retourne
}

while_statement_sur_code_binaire :: fonc (noeud: *WhileStatement, génératrice: &GénératriceCodeBinaire) -> Optionnel(Registre)
{
    décalage := génératrice.donne_décalage()
    label_continue := génératrice.crée_label()
    génératrice.insère_label(label_continue)

    label_break := génératrice.crée_label()

    génératrice.empile_labels_boucle(label_continue, label_break)
    diffère génératrice.dépile_labels_boucle()

    reg_opt_test := génératrice.génère_code_binaire(noeud.test)
    assert(reg_opt_test.possède_valeur())

    branche_test := génératrice.crée_branche_si_faux()

    _ := génératrice.génère_code_binaire(noeud.body)

    génératrice.crée_branche(décalage)

    décalage = génératrice.donne_décalage()
    génératrice.définis_décalage_branche(branche_test, décalage)
    génératrice.insère_label(label_break)

    retourne génératrice.crée_charge(js_undefined)
}

/** \} */
