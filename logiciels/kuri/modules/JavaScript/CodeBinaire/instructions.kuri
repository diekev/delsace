importe Fondation

/* ------------------------------------------------------------------------- */
/** \nom Instruction
 * \{ */

FluxDInstructions :: struct {
    instructions: [..]octet
    registres: n32
}

imprime_instructions :: fonc (flux: *FluxDInstructions)
{
    imprime("Instructions : (% octets)\n", flux.instructions.taille)

    pour ItéractriceInstruction(flux) {
        imprime_instruction(it, index_it)
    }
}

ItéractriceInstruction :: struct {
    flux: *FluxDInstructions
}

opérateur pour :: fonc (itératrice: ItéractriceInstruction) -> *Instruction
{
    assert(itératrice.flux != nul)

    début := itératrice.flux.instructions.pointeur
    fin := début + itératrice.flux.instructions.taille

    index : z64 = 0

    tantque début < fin {
        instruction := début comme *Instruction

        `it = instruction
        `index_it = index

        #corps_boucle

        index += 1

        début += donne_taille_octet(instruction)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Instruction
 * \{ */

Registre :: #opaque n32

Instruction :: struct {
    type: type_de_données
}

donne_taille_octet :: fonc (instruction: *Instruction) -> n32
{
    infos := __table_des_types[instruction.type]
    résultat := infos.taille_en_octet

    si instruction.type == InstructionAppel {
        appel := instruction comme *InstructionAppel
        résultat += appel.nombre_arguments comme n32 * taille_de(Registre)
    }

    retourne résultat
}

imprime_instruction :: fonc (instruction: *Instruction, index: z64)
{
    infos := __table_des_types[instruction.type] comme *InfoTypeStructure
 
    nom := infos.nom
    si nom.commence_par("Instruction") {
        nom = avance(nom, 11)
    }

    imprime("[%] %", index, nom)

    pointeur_membre := instruction comme *octet

    virgule := " "

    pour infos.membres {
        si it.id == info_de(ECMAString) {
            valeur := (pointeur_membre + it.décalage) comme *ECMAString
            imprime("%%", virgule, mémoire(valeur))
            virgule = ", "
        }
        sinon si it.id == info_de(Registre) {
            valeur := (pointeur_membre + it.décalage) comme *Registre
            imprime("%r:%", virgule, mémoire(valeur))
            virgule = ", "
        }
        sinon si it.id == info_de(Valeur) {
            valeur := (pointeur_membre + it.décalage) comme *Valeur
            imprime("%%", virgule, mémoire(valeur))
            virgule = ", "
        }
    }

    imprime("\n")
}

IndexBranche :: #opaque z64
DécalageBranche :: #opaque z64

InstructionBranche :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    décalage: DécalageBranche
}

InstructionBrancheSiFaux :: struct {
    empl inst_branche: InstructionBranche
    type = #type_de_cette_structure

    reg: Registre
}

InstructionBrancheSiVrai :: struct {
    empl inst_branche: InstructionBranche
    type = #type_de_cette_structure

    reg: Registre
}

InstructionCharge :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    reg: Registre
    vlr: Valeur
}

InstructionCréeChaine :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
    chn: ECMAString

    /* Cache pour l'exécution. */
    index_chaine : z64 = -1
}

InstructionCréeObjet :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
}

InstructionExpressionBinaire :: struct {
    empl inst: Instruction

    dst: Registre
    gch: Registre
    drt: Registre
}

InstructionAjoute :: struct {
    empl inst_binaire: InstructionExpressionBinaire
    type = #type_de_cette_structure
}

InstructionSoustrait :: struct {
    empl inst_binaire: InstructionExpressionBinaire
    type = #type_de_cette_structure
}

InstructionRelationInférieure :: struct {
    empl inst_binaire: InstructionExpressionBinaire
    type = #type_de_cette_structure
}

InstructionComparaisonÉgal :: struct {
    empl inst_binaire: InstructionExpressionBinaire
    type = #type_de_cette_structure
}

InstructionComparaisonInégal :: struct {
    empl inst_binaire: InstructionExpressionBinaire
    type = #type_de_cette_structure
}

InstructionDéfinisLocale :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    nom: ECMAString
    src: Registre

    index_chaine_en_cache : z32 = -1
}

donne_chaine_primitive :: fonc (instruction: *InstructionDéfinisLocale, realm: *Realm) -> *PrimitiveChaine
{
    si instruction.index_chaine_en_cache == -1 {
        pour realm.chaines {
            si it.texte == instruction.nom {
                instruction.index_chaine_en_cache = index_it comme z32
                retourne it
            }
        }

        résultat := realm.crée_chaine(instruction.nom)
        instruction.index_chaine_en_cache = realm.chaines.taille comme z32 - 1
        retourne résultat
    }

    retourne realm.chaines[instruction.index_chaine_en_cache]
}

InstructionChargeLocale :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
    nom: ECMAString

    index_chaine_en_cache : z32 = -1
}

donne_chaine_primitive :: fonc (instruction: *InstructionChargeLocale, realm: *Realm) -> *PrimitiveChaine
{
    si instruction.index_chaine_en_cache == -1 {
        pour realm.chaines {
            si it.texte == instruction.nom {
                instruction.index_chaine_en_cache = index_it comme z32
                retourne it
            }
        }

        résultat := realm.crée_chaine(instruction.nom)
        instruction.index_chaine_en_cache = realm.chaines.taille comme z32 - 1
        retourne résultat
    }

    retourne realm.chaines[instruction.index_chaine_en_cache]
}

/* Pour les déclarations lexicales. */
InstructionInitialiseRéférence :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    nom: ECMAString
    src: Registre
}

InstructionDéfinisMembre :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    obj: Registre
    nom: ECMAString
    src: Registre
}

InstructionChargeMembre :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
    obj: Registre
    nom: ECMAString
}

InstructionAppel :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
    func: Registre
    this_value: Registre
    nombre_arguments: z32
}

donne_arguments :: fonc (appel: *InstructionAppel) -> []Registre
{
    résultat: []Registre
    résultat.pointeur = ((appel + 1) comme *octet) comme *Registre
    résultat.taille = appel.nombre_arguments
    retourne résultat
}

/* Instruction spéciale pour résoudre la valeur "this" pour les appels.
 * Pour l'instant, nous faisons ceci avec une Interpréteuse sur l'arbre au
 * lieu d'utiliser du code binaire en attendant de bien comprendre comment
 * modéliser les ReferenceRecord. */
InstructionThisValueAppel :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    dst: Registre
    /* Ceci est le noeud à gauche de l'appel. */
    noeud: *NoeudSyntaxique
}

InstructionRetour :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure

    src: Registre
}

InstructionThis :: struct {
    empl inst: Instruction
    type = #type_de_cette_structure
    dst: Registre
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom InterprèteCodeBinaire
 * \{ */

InterprèteCodeBinaire :: struct {
    empl base: Interpréteuse
    registres: [..]Valeur
    sur_exécute = exécute_code_binaire

    /* Interpréteuse pour les cas où nous utilisons l'arbre pour exécuter le code. */
    interpréteuse_arbre: *Interpréteuse
}

crée_interprète_code_binaire :: fonc (mv: *MachineVirtuelle) -> *InterprèteCodeBinaire
{
    résultat := loge(InterprèteCodeBinaire)
    résultat.interpréteuse_arbre = loge(Interpréteuse)
    résultat.mv = mv
    retourne résultat
}

détruit_interprète :: fonc (interprète: *InterprèteCodeBinaire)
{
    déloge(interprète.registres)
    déloge(interprète.interpréteuse_arbre)
}

interprète_code_binaire :: fonc (mv: *MachineVirtuelle, noeud: *NoeudScript) -> CompletionRecord
{
    interprète := crée_interprète_code_binaire(mv)
    diffère détruit_interprète(interprète)

    mv.interpréteuse = interprète
    diffère mv.interpréteuse = nul

    retourne exécute_code_binaire(interprète, noeud)
}

donne_code_binaire :: fonc (noeud: *NoeudSyntaxique) -> *FluxDInstructions
{
    /* BlockStatement est utilisé car c'est via lui que nous exécutons les fonctions... */
    assert(noeud.type == FunctionDeclaration || noeud.type == NoeudScript || noeud.type == BlockStatement)

    si noeud.type == FunctionDeclaration {
        decl := noeud comme *FunctionDeclaration
        retourne decl.code_binaire
    }

    si noeud.type == NoeudScript {
        script := noeud comme *NoeudScript
        retourne script.code_binaire
    }

    si noeud.type == BlockStatement {
        block := noeud comme *BlockStatement
        retourne block.code_binaire
    }

    retourne nul
}

définis_code_binaire :: fonc (noeud: *NoeudSyntaxique, flux: *FluxDInstructions)
{
    /* BlockStatement est utilisé car c'est via lui que nous exécutons les fonctions... */
    assert(noeud.type == FunctionDeclaration || noeud.type == NoeudScript || noeud.type == BlockStatement)

    si noeud.type == FunctionDeclaration {
        decl := noeud comme *FunctionDeclaration
        decl.code_binaire = flux
        retourne
    }

    si noeud.type == NoeudScript {
        script := noeud comme *NoeudScript
        script.code_binaire = flux
        retourne
    }

    si noeud.type == BlockStatement {
        block := noeud comme *BlockStatement
        block.code_binaire = flux
        retourne
    }
}

exécute_code_binaire :: fonc (base: *Interpréteuse, noeud: *NoeudSyntaxique) -> CompletionRecord
{
    interprète := base comme *InterprèteCodeBinaire

    flux := donne_code_binaire(noeud)
    saufsi flux {
        flux = loge(FluxDInstructions)
        génératrice := GénératriceCodeBinaire(flux)

        _ := génère_code_binaire(génératrice, noeud)
        applique_patchs(génératrice)

        imprime_instructions(flux)

        définis_code_binaire(noeud, flux)
    }

    si flux.registres comme z64 > interprète.registres.taille {
        tableau_redimensionne(interprète.registres, flux.registres comme z64)
    }

    début := flux.instructions.pointeur
    courant := début
    fin := début + flux.instructions.taille

    tantque courant < fin {
        it := courant comme *Instruction
        courant += donne_taille_octet(it)

        discr it.type {
            InstructionBranche {
                branche := it comme *InstructionBranche
                courant = début + branche.décalage comme z64
                continue
            }
            InstructionBrancheSiFaux {
                branche := it comme *InstructionBrancheSiFaux

                valeur := interprète.registres[branche.reg]
                valeur = to_boolean(valeur)

                si est_false(valeur) {
                    courant = début + branche.décalage comme z64
                    continue
                }
            }
            InstructionBrancheSiVrai {
                branche := it comme *InstructionBrancheSiVrai

                valeur := interprète.registres[branche.reg]
                valeur = to_boolean(valeur)

                si est_true(valeur) {
                    courant = début + branche.décalage comme z64
                    continue
                }
            }
            InstructionCharge {
                inst_charge := it comme *InstructionCharge
                interprète.registres[inst_charge.reg] = inst_charge.vlr
            }
            InstructionAjoute {
                inst_ajout := it comme *InstructionAjoute
                gauche := interprète.registres[inst_ajout.gch]
                droite := interprète.registres[inst_ajout.drt]

                completion := apply_string_or_numeric_binary_operator(interprète, BinaryOperation.Plus, gauche, droite)
                saufsi completion.est_normal() {
                    retourne completion
                }
                interprète.registres[inst_ajout.dst] = completion.valeur.V
            }
            InstructionSoustrait {
                inst := it comme *InstructionSoustrait
                gauche := interprète.registres[inst.gch]
                droite := interprète.registres[inst.drt]

                completion := apply_string_or_numeric_binary_operator(interprète, BinaryOperation.Moins, gauche, droite)
                saufsi completion.est_normal() {
                    retourne completion
                }
                interprète.registres[inst.dst] = completion.valeur.V
            }
            InstructionRelationInférieure {
                relat := it comme *InstructionRelationInférieure
                gauche := interprète.registres[relat.gch]
                droite := interprète.registres[relat.drt]

                completion := is_less_than(interprète, gauche, droite, vrai)
                saufsi completion.est_normal() {
                    retourne completion
                }
                r := completion.valeur.V

                si r.est_undefined() {
                    r = Valeur(Boolean = faux)
                }
                interprète.registres[relat.dst] = completion.valeur.V
            }
            InstructionComparaisonÉgal {
                inst_ajout := it comme *InstructionComparaisonÉgal
                gauche := interprète.registres[inst_ajout.gch]
                droite := interprète.registres[inst_ajout.drt]

                completion := is_loosely_equal(interprète, gauche, droite)
                saufsi completion.est_normal() {
                    retourne completion
                }
                interprète.registres[inst_ajout.dst] = completion.valeur.V
            }
            InstructionComparaisonInégal {
                inst_ajout := it comme *InstructionComparaisonInégal
                gauche := interprète.registres[inst_ajout.gch]
                droite := interprète.registres[inst_ajout.drt]

                completion := is_loosely_equal(interprète, gauche, droite)
                saufsi completion.est_normal() {
                    retourne completion
                }
                résultat := completion.valeur.V
                si résultat.est_true() {
                    résultat.Boolean = faux
                }
                sinon {
                    résultat.Boolean = vrai
                }
                interprète.registres[inst_ajout.dst] = résultat
            }
            InstructionCréeChaine {
                crée_chaine := it comme *InstructionCréeChaine

                realm := donne_realm(interprète)

                chn: *PrimitiveChaine
                si crée_chaine.index_chaine == -1 {
                    chn = crée_chaine(realm, crée_chaine.chn)
                    tableau_ajoute(*realm.chaines_littérales, chn)
                    crée_chaine.index_chaine = realm.chaines_littérales.taille - 1
                }
                sinon {
                    chn = realm.chaines_littérales[crée_chaine.index_chaine]
                }

                interprète.registres[crée_chaine.dst] = Valeur(String = chn)
            }
            InstructionCréeObjet {
                crée_objet := it comme *InstructionCréeObjet

                realm := donne_realm(interprète)
                objet := ordinary_object_create(realm, realm.intrinsics.object_prototype, object_instance_crée)
                interprète.registres[crée_objet.dst] = Valeur(Object = objet)
            }
            InstructionDéfinisLocale {
                définis_locale := it comme *InstructionDéfinisLocale
                realm := donne_realm(interprète)

                résultat := resolve_binding(interprète, définis_locale.donne_chaine_primitive(realm))
                saufsi résultat.est_normal() {
                    retourne résultat
                }

                // À FAIRE
                // référence := résultat.valeur.R
                // noeud.coordonnée = référence.coordonnée

                valeur := interprète.registres[définis_locale.src]
                completion_assignment := put_value(interprète, résultat.valeur, valeur)
                saufsi completion_assignment.est_normal() {
                    retourne completion_assignment
                }
            }
            InstructionChargeLocale {
                charge_locale := it comme *InstructionChargeLocale
                realm := donne_realm(interprète)

                résultat := resolve_binding(interprète, charge_locale.donne_chaine_primitive(realm))
                saufsi résultat.est_normal() {
                    retourne résultat
                }

                completion_rval := get_value(interprète, résultat.valeur)
                saufsi completion_rval.est_normal() {
                    retourne completion_rval
                }
                interprète.registres[charge_locale.dst] = completion_rval.valeur.V
            }
            InstructionInitialiseRéférence {
                init := it comme *InstructionInitialiseRéférence

                realm := donne_realm(interprète)
                valeur := interprète.registres[init.src]

                lhs := resolve_binding(interprète, realm.crée_chaine(init.nom)).valeur.R
                _ := initialize_reference_binding(lhs, valeur)
            }
            InstructionDéfinisMembre {
                membre := it comme *InstructionDéfinisMembre
                realm := donne_realm(interprète)

                referenced_name := crée_chaine(realm, membre.nom)

                référence: ReferenceRecord
                référence.base = interprète.registres[membre.obj]
                référence.referenced_name = Valeur(String = referenced_name)
                // À FAIRE : résultat.strict = strict

                valeur := interprète.registres[membre.src]
                completion_assignment := put_value(interprète, référence, valeur)
                saufsi completion_assignment.est_normal() {
                    retourne completion_assignment
                }
            }
            InstructionChargeMembre {
                membre := it comme *InstructionChargeMembre
                realm := donne_realm(interprète)

                referenced_name := crée_chaine(realm, membre.nom)

                référence: ReferenceRecord
                référence.base = interprète.registres[membre.obj]
                référence.referenced_name = Valeur(String = referenced_name)
                // À FAIRE : résultat.strict = strict

                completion_rval := get_value(interprète, référence)
                saufsi completion_rval.est_normal() {
                    retourne completion_rval
                }
                interprète.registres[membre.dst] = completion_rval.valeur.V
            }
            InstructionAppel {
                appel := it comme *InstructionAppel

                arguments: [..]Valeur
                diffère déloge(arguments)

                pour appel.donne_arguments() {
                    tableau_ajoute(*arguments, interprète.registres[it])
                }

                func := interprète.registres[appel.func]

                this_value := interprète.registres[appel.this_value]

                // 4. If func is not an Object, throw a TypeError exception.
                saufsi func.est_object() {
                    message := imprime_chaine("'%' is not an Object", func)
                    retourne lance_type_error(interprète, message)
                }
                
                // 5. If IsCallable(func) is false, throw a TypeError exception.
                saufsi func.is_callable() {
                    message := imprime_chaine("'%' is not callable", func)
                    retourne lance_type_error(interprète, message)
                }

                // 6. If tailPosition is true, perform PrepareForTailCall().

                // 7. Return ? Call(func, thisValue, argList).
                completion := call(interprète, func, this_value, arguments)
                saufsi completion.est_normal() {
                    retourne completion
                }

                interprète.registres[appel.dst] = completion.valeur.V
            }
            InstructionThisValueAppel {
                this_value := it comme *InstructionThisValueAppel

                résultat := js_undefined

                interpréteuse := interprète.interpréteuse_arbre
                interpréteuse.mv = interprète.mv
                interprète.mv.interpréteuse = interpréteuse
                diffère interprète.mv.interpréteuse = interprète

                completion_ref := exécute(interpréteuse, this_value.noeud)
                saufsi completion_ref.est_normal() {
                    retourne completion_ref
                }

                ref := completion_ref.valeur

                // 1. If ref is a Reference Record, then
                si est_reference_record(ref) {
                    // a. If IsPropertyReference(ref) is true, then
                    si est_référence_propriété(ref) {
                        // i. Let thisValue be GetThisValue(ref).
                        résultat = get_this_value(ref.R)
                    }
                    // b. Else,
                    sinon {
                        // i. Let refEnv be ref.[[Base]].
                        ref_env := ref.R.base.E
                        // ii. Assert: refEnv is an Environment Record.
                        // iii. Let thisValue be refEnv.WithBaseObject().
                        résultat = ref_env.with_base_object()
                    }
                }
                // 2. Else,
                sinon {
                    // a. Let thisValue be undefined.
                    résultat = js_undefined
                }

                interprète.registres[this_value.dst] = résultat
            }
            InstructionRetour {
                retour := it comme *InstructionRetour

                si retour.src comme n32 comme z32 != -1 {
                    valeur := interprète.registres[retour.src]
                    retourne return_completion(valeur)
                }

                retourne normal_completion(js_undefined)
            }
            InstructionThis {
                this := it comme *InstructionThis
                completion := resolve_this_binding(interprète)
                saufsi completion.est_normal() {
                    retourne completion
                }
                interprète.registres[this.dst] = completion.valeur.V
            }
            sinon {
                imprime("intruction inconnue!\n")
                arrête
            }
        }
    }

    imprime_registres(interprète)
    retourne normal_completion(js_undefined)
}

imprime_registres :: fonc (interprète: *InterprèteCodeBinaire)
{
    imprime("Registres :\n")

    pour interprète.registres {
        imprime("- [%] %\n", index_it, it)
    }
}

/** \} */
