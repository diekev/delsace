importe Fondation
importe Introspection


/* ------------------------------------------------------------------------- */
/** \nom NoeudSyntaxique
 * \{ */

NoeudSyntaxique :: struct {
    type := #type_de_cette_structure

    sur_exécution: fonc(*NoeudSyntaxique, &Interpréteuse)(CompletionRecord)
}

exécute_noeud :: fonc (noeud: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    // imprime("Exécution de %\n", noeud.type)
    retourne noeud.sur_exécution(noeud, interpréteuse)
}

/* 8.4.3 Static Semantics: IsAnonymousFunctionDefinition
 * https://tc39.es/ecma262/multipage/syntax-directed-operations.html#sec-isanonymousfunctiondefinition */
is_anonymous_function_definition :: fonc (noeud: *NoeudSyntaxique @inutilisée) -> bool
{
    // À FAIRE
    retourne faux
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NoeudScope
 * Type Utilisé pour Interpréteuse.exécute
 * \{ */

NoeudScope :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_scope

    enfants: [..]*NoeudSyntaxique
}

sur_exécution_scope :: fonc (noeud: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    retourne interpréteuse.exécute(noeud comme *NoeudScope, TypeScope.BLOC)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Programme
 * \{ */

Programme :: struct {
    empl scope: NoeudScope
    type = #type_de_cette_structure

    type_source := "script"
}

crée_programme :: fonc (expressions: ...*NoeudSyntaxique) -> *Programme
{
    résultat := loge(Programme)
    pour expressions {
        tableau_ajoute(*résultat.enfants, it)
    }
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom FunctionDeclaration
 * \{ */

FunctionDeclaration :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_function_declaration

    id: *Identifier
    params: [..]*NoeudSyntaxique
    corps: *NoeudSyntaxique

    generator := faux
    expression := faux
    async := faux
}

crée_function_déclaration :: fonc (id: *Identifier, params: []*NoeudSyntaxique, corps: *NoeudSyntaxique) -> *FunctionDeclaration
{
    résultat := loge(FunctionDeclaration)
    résultat.id = id
    résultat.corps = corps
    pour params {
        tableau_ajoute(*résultat.params, it)
    }
    retourne résultat
}

sur_exécution_function_declaration :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *FunctionDeclaration

    fonction := crée_fonction(interpréteuse.donne_tas_de_mémoire(), noeud.id.nom, noeud.corps)

    objet_global := interpréteuse.get_global_object()
    objet_global.définis_valeur(noeud.id.nom, Valeur(Function = fonction))

    retourne normal_completion(Valeur(Function = fonction))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Identifier
 * \{ */

Identifier :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_identifier

    nom: ECMAString
}

crée_identifier :: fonc (nom: ECMAString) -> *Identifier
{
    résultat := loge(Identifier)
    résultat.nom = nom
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-identifiers-runtime-semantics-evaluation */
sur_exécution_identifier :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *Identifier
    retourne resolve_binding(interpréteuse, noeud.nom)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom BlockStatement
 * \{ */

BlockStatement :: struct {
    empl scope: NoeudScope
    type = #type_de_cette_structure
}

crée_block_statement :: fonc (expressions: ...*NoeudSyntaxique) -> *BlockStatement
{
    résultat := loge(BlockStatement)
    pour expressions {
        tableau_ajoute(*résultat.enfants, it)
    }
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ReturnStatement
 * \{ */

ReturnStatement :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_return

    argument: *NoeudSyntaxique
}

crée_return_statement :: fonc (argument: *NoeudSyntaxique) -> *ReturnStatement
{
    résultat := loge(ReturnStatement)
    résultat.argument = argument
    retourne résultat
}

sur_exécution_return :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *ReturnStatement

    résultat := return_completion(js_null)

    si noeud.argument {
        résultat = exécute_noeud(noeud.argument, interpréteuse)
        si résultat.est_normal() {
            retourne return_completion(résultat.valeur)
        }
    }

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom BinaryExpression
 * \{ */

BinaryOperation :: énum {
    Plus
    Moins
    Multiplie
    Divise

    Supérieur
    Inférieur
    SupérieurÉgal
    InférieurÉgal
}

BinaryExpression :: struct {
    empl  base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_binary_expression

    opération: BinaryOperation
    gauche: *NoeudSyntaxique
    droite: *NoeudSyntaxique
}

crée_binary_expression :: fonc (opération: BinaryOperation, gauche: *NoeudSyntaxique, droite: *NoeudSyntaxique) -> *BinaryExpression
{
    résultat := loge(BinaryExpression)
    résultat.opération = opération
    résultat.gauche = gauche
    résultat.droite = droite
    retourne résultat
}


sur_exécution_binary_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *BinaryExpression
    completion_gauche := exécute_noeud(noeud.gauche, interpréteuse)
    saufsi completion_gauche.est_normal() {
        retourne completion_gauche
    }
    completion_droite := exécute_noeud(noeud.droite, interpréteuse)
    saufsi completion_droite.est_normal() {
        retourne completion_droite
    }
    valeur_complétion_gauche := get_value(interpréteuse, completion_gauche.valeur)
    saufsi valeur_complétion_gauche.est_normal() {
        retourne valeur_complétion_gauche
    }
    valeur_complétion_droite := get_value(interpréteuse, completion_droite.valeur)
    saufsi valeur_complétion_droite.est_normal() {
        retourne valeur_complétion_droite
    }
    gauche := valeur_complétion_gauche.valeur.V
    droite := valeur_complétion_droite.valeur.V
    retourne évalue_expression_binaire(interpréteuse, noeud.opération, gauche, droite)
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-applystringornumericbinaryoperator */
évalue_expression_binaire :: fonc (interpréteuse: &Interpréteuse, opération: BinaryOperation, gauche: Valeur, droite: Valeur) -> CompletionRecord
{
    // 1. If opText is +, then
    si opération == BinaryOperation.Plus {
        // a. Let lprim be ? ToPrimitive(lval).
        complétion_lprim := vers_primitive(interpréteuse, gauche)
        saufsi complétion_lprim.est_normal() {
            retourne complétion_lprim
        }
        lprim := complétion_lprim.valeur.V
        // b. Let rprim be ? ToPrimitive(rval).
        complétion_rprim := vers_primitive(interpréteuse, droite)
        saufsi complétion_rprim.est_normal() {
            retourne complétion_rprim
        }
        rprim := complétion_rprim.valeur.V
        // c. If lprim is a String or rprim is a String, then
        si lprim.est_chaine() || rprim.est_chaine() {
            panique("concaténation chaine non-implémenté")
            // i. Let lstr be ? ToString(lprim).
            // ii. Let rstr be ? ToString(rprim).
            // iii. Return the string-concatenation of lstr and rstr.
        }
    
        // d. Set lval to lprim.
        gauche = lprim
        // e. Set rval to rprim.
        droite = rprim
    }

    // 2. NOTE: At this point, it must be a numeric operation.

    // 3. Let lnum be ? ToNumeric(lval).
    complétion_lnum := to_numeric(interpréteuse, gauche)
    saufsi complétion_lnum.est_normal() {
        retourne complétion_lnum
    }
    gauche = complétion_lnum.valeur.V

    // 4. Let rnum be ? ToNumeric(rval).
    complétion_rnum := to_numeric(interpréteuse, droite)
    saufsi complétion_rnum.est_normal() {
        retourne complétion_rnum
    }
    droite = complétion_rnum.valeur.V

    // 5. If Type(lnum) is not Type(rnum), throw a TypeError exception.
    // si type(lum) != type(rnum) {
    // À FAIRE
    // }

    // À FAIRE : bigint
    // 6. If lnum is a BigInt, then
    // a. If opText is **, return ? BigInt::exponentiate(lnum, rnum).
    // b. If opText is /, return ? BigInt::divide(lnum, rnum).
    // c. If opText is %, return ? BigInt::remainder(lnum, rnum).
    // d. If opText is >>>, return ? BigInt::unsignedRightShift(lnum, rnum).

    // 7. Let operation be the abstract operation associated with opText and Type(lnum) in the following table:

    // 8. Return operation(lnum, rnum).
    valeur := js_undefined

    discr opération {
        Plus {
            valeur = ajoute_valeurs(gauche, droite)
        }
        Moins {
            valeur = soustrait_valeurs(gauche, droite)
        }
        Multiplie {
            valeur = multiplie_valeurs(gauche, droite)
        }
        Divise {
            valeur = divise_valeurs(gauche, droite)
        }
        Supérieur {
            valeur = compare_supérieur_valeurs(gauche, droite)
        }
        Inférieur {
            valeur = compare_inférieur_valeurs(gauche, droite)
        }
        SupérieurÉgal {
            valeur = compare_supérieur_égal_valeurs(gauche, droite)
        }
        InférieurÉgal {
            valeur = compare_inférieur_égal_valeurs(gauche, droite)
        }
    }

    retourne normal_completion(valeur)
}

ajoute_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Number = gauche.Number + droite.Number)
}

soustrait_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Number = gauche.Number - droite.Number)
}

multiplie_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Number = gauche.Number * droite.Number)
}

divise_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Number = gauche.Number / droite.Number)
}

compare_supérieur_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Boolean = gauche.Number > droite.Number)
}

compare_inférieur_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Boolean = gauche.Number < droite.Number)
}

compare_supérieur_égal_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Boolean = gauche.Number >= droite.Number)
}

compare_inférieur_égal_valeurs :: fonc (gauche: Valeur, droite: Valeur) -> Valeur
{
    assert(gauche.est_nombre())
    assert(droite.est_nombre())
    retourne Valeur(Boolean = gauche.Number <= droite.Number)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EqualityExpression
 * \{ */

EqualityOperation :: énum {
    Égal
    Inégal
    ÉgalStrict
    InégalStrict
}

EqualityExpression :: struct {
    empl  base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_equality_expression

    opération: EqualityOperation
    gauche: *NoeudSyntaxique
    droite: *NoeudSyntaxique
}

crée_equality_expression :: fonc (opération: EqualityOperation, gauche: *NoeudSyntaxique, droite: *NoeudSyntaxique) -> *EqualityExpression
{
    résultat := loge(EqualityExpression)
    résultat.opération = opération
    résultat.gauche = gauche
    résultat.droite = droite
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators-runtime-semantics-evaluation */
sur_exécution_equality_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *EqualityExpression
    completion_gauche := exécute_noeud(noeud.gauche, interpréteuse)
    saufsi completion_gauche.est_normal() {
        retourne completion_gauche
    }
    completion_droite := exécute_noeud(noeud.droite, interpréteuse)
    saufsi completion_droite.est_normal() {
        retourne completion_droite
    }
    valeur_complétion_gauche := get_value(interpréteuse, completion_gauche.valeur)
    saufsi valeur_complétion_gauche.est_normal() {
        retourne valeur_complétion_gauche
    }
    valeur_complétion_droite := get_value(interpréteuse, completion_droite.valeur)
    saufsi valeur_complétion_droite.est_normal() {
        retourne valeur_complétion_droite
    }
    gauche := valeur_complétion_gauche.valeur.V
    droite := valeur_complétion_droite.valeur.V
    
    discr noeud.opération {
        Égal {
            retourne is_loosely_equal(interpréteuse, gauche, droite)
        }
        Inégal {
            complétion := is_loosely_equal(interpréteuse, gauche, droite)
            saufsi complétion.est_normal() {
                retourne complétion
            }
            résultat := complétion.valeur.V
            si résultat.est_true() {
                retourne normal_completion(Valeur(Boolean = faux))
            }
            retourne normal_completion(Valeur(Boolean = vrai))
        }
        ÉgalStrict {
            retourne normal_completion(is_strictly_equal(gauche, droite))
        }
        InégalStrict {
            résultat := is_strictly_equal(gauche, droite)
            si résultat.est_true() {
                retourne normal_completion(Valeur(Boolean = faux))
            }
            retourne normal_completion(Valeur(Boolean = vrai))
        }
        sinon {
            panique("noeud.opération non-initialisé")
        }
    }
}

donne_type :: fonc (valeur: Valeur) -> z32
{
    info := info_de(Valeur)
    index := mémoire(((*valeur comme *octet) + info.décalage_index) comme *z32)
    retourne index
}

/* 7.2.12 IsLooselyEqual ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-islooselyequal */
is_loosely_equal :: fonc (interpréteuse: &Interpréteuse @inutilisée, x: Valeur, y: Valeur) -> CompletionRecord
{
    // 1. If Type(x) is Type(y), then
    si x.donne_type() == y.donne_type() {
        // a. Return IsStrictlyEqual(x, y).
        retourne normal_completion(is_strictly_equal(x, y))
    }

    // 2. If x is null and y is undefined, return true.
    si x.est_nulle() && y.est_undefined() {
        retourne normal_completion(Valeur(Boolean = vrai))
    }

    // 3. If x is undefined and y is null, return true.
    si x.est_undefined() && y.est_nulle() {
        retourne normal_completion(Valeur(Boolean = vrai))
    }

    panique("is_loosely_equal non-implémenté")
    // 4. NOTE: This step is replaced in section B.3.6.2.
    // 5. If x is a Number and y is a String, return ! IsLooselyEqual(x, ! ToNumber(y)).
    // 6. If x is a String and y is a Number, return ! IsLooselyEqual(! ToNumber(x), y).
    // 7. If x is a BigInt and y is a String, then
    //     a. Let n be StringToBigInt(y).
    //     b. If n is undefined, return false.
    //     c. Return ! IsLooselyEqual(x, n).
    // 8. If x is a String and y is a BigInt, return ! IsLooselyEqual(y, x).
    // 9. If x is a Boolean, return ! IsLooselyEqual(! ToNumber(x), y).
    // 10. If y is a Boolean, return ! IsLooselyEqual(x, ! ToNumber(y)).
    // 11. If x is either a String, a Number, a BigInt, or a Symbol and y is an Object, return ! IsLooselyEqual(x, ? ToPrimitive(y)).
    // 12. If x is an Object and y is either a String, a Number, a BigInt, or a Symbol, return ! IsLooselyEqual(? ToPrimitive(x), y).
    // 13. If x is a BigInt and y is a Number, or if x is a Number and y is a BigInt, then
    //     a. If x is not finite or y is not finite, return false.
    //     b. If ℝ(x) = ℝ(y), return true; otherwise return false.
    // 14. Return false.
}

/* 7.2.10 SameValueNonNumber ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluenonnumber */
same_value_non_number :: fonc (x: Valeur, y: Valeur) -> Valeur
{
    // 1. Assert: Type(x) is Type(y).

    // 2. If x is either null or undefined, return true.
    si x.est_nulle() || x.est_undefined() {
        retourne Valeur(Boolean = vrai)
    }

    // À FAIRE(BigInt)
    // 3. If x is a BigInt, then
    // a. Return BigInt::equal(x, y).

    // 4. If x is a String, then
    si x.est_chaine() {
        // a. If x and y have the same length and the same code units in the same positions, return true; otherwise, return false.
        chnx := x.String
        chny := y.String
        retourne chnx.texte == chny.texte
    }

    // 5. If x is a Boolean, then
    si x.est_boolean() {
        // a. If x and y are both true or both false, return true; otherwise, return false.
        boolx := x.Boolean
        booly := y.Boolean
        retourne boolx == booly
    }

    // 6. NOTE: All other ECMAScript language values are compared by identity.
    // 7. If x is y, return true; otherwise, return false.
    retourne x.donne_objet() == y.donne_objet()
}

/* 7.2.13 IsStrictlyEqual ( x, y )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isstrictlyequal */
is_strictly_equal :: fonc (x: Valeur, y: Valeur) -> Valeur
{
    // 1. If Type(x) is not Type(y), return false.
    si x.donne_type() != y.donne_type() {
        retourne Valeur(Boolean = faux)
    }

    // 2. If x is a Number, then
    si x.est_nombre() {
        // a. Return Number::equal(x, y).
        // À FAIRE : Numer::equal
        valx := x.Number
        valy := y.Number
        retourne valx == valy
    }

    // 3. Return SameValueNonNumber(x, y).
    retourne same_value_non_number(x, y)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NumericLiteral
 * \{ */

NumericLiteral :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_numeric_literal

    valeur: r64
    // raw: ECMAString
}

crée_literal :: fonc (valeur: r64) -> *NumericLiteral
{
    résultat := loge(NumericLiteral)
    résultat.valeur = valeur
    retourne résultat
}

sur_exécution_numeric_literal :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse @inutilisée) -> CompletionRecord
{
    noeud := base comme *NumericLiteral
    retourne normal_completion(Valeur(Number = noeud.valeur))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom BooleanLiteral
 * \{ */

BooleanLiteral :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_boolean_literal

    valeur: bool
}

crée_boolean_literal :: fonc (valeur: bool) -> *BooleanLiteral
{
    résultat := loge(BooleanLiteral)
    résultat.valeur = valeur
    retourne résultat
}

sur_exécution_boolean_literal :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse @inutilisée) -> CompletionRecord
{
    noeud := base comme *BooleanLiteral
    retourne normal_completion(Valeur(Boolean = noeud.valeur))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom NullLiteral
 * \{ */

NullLiteral :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_null_literal
}

crée_null_literal :: fonc () -> *NullLiteral
{
    résultat := loge(NullLiteral)
    retourne résultat
}

sur_exécution_null_literal :: fonc (base: *NoeudSyntaxique @inutilisée, interpréteuse: &Interpréteuse @inutilisée) -> CompletionRecord
{
    retourne normal_completion(js_null)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom StringLiteral
 * \{ */

StringLiteral :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_string_literal

    valeur: ECMAString
    index_chaine : z64 = -1
}

crée_literal :: fonc (valeur: ECMAString) -> *StringLiteral
{
    résultat := loge(StringLiteral)
    résultat.valeur = valeur
    retourne résultat
}

sur_exécution_string_literal :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *StringLiteral

    realm := interpréteuse.donne_realm()

    chn: *PrimitiveChaine
    si noeud.index_chaine == -1 {
        chn = crée_chaine(interpréteuse.donne_tas_de_mémoire(), noeud.valeur)
        tableau_ajoute(*realm.chaines_littérales, chn)
        noeud.index_chaine = realm.chaines_littérales.taille - 1
    }
    sinon {
        chn = realm.chaines_littérales[noeud.index_chaine]
    }

    retourne normal_completion(chn)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ExpressionStatement
 * \{ */

ExpressionStatement :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_expression_statement

    expression: *NoeudSyntaxique
}

crée_expression_statement :: fonc (expression: *NoeudSyntaxique) -> *NoeudSyntaxique
{
    résultat := loge(ExpressionStatement)
    résultat.expression = expression
    retourne résultat
}

sur_exécution_expression_statement :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *ExpressionStatement
    si noeud.expression {
        retourne exécute_noeud(noeud.expression, interpréteuse)
    }
    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom CallExpression
 * \{ */

CallExpression :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_call_expression

    appelé: *NoeudSyntaxique
    arguments: [..]*NoeudSyntaxique
}

crée_call_expression :: fonc (appelé: *NoeudSyntaxique, arguments: ...*NoeudSyntaxique) -> *CallExpression
{
    résultat := loge(CallExpression)
    résultat.appelé = appelé
    pour arguments {
        tableau_ajoute(*résultat.arguments, it)
    }
    retourne résultat
}

/* 13.3.6 Function Calls
 * https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-function-calls-runtime-semantics-evaluation */
sur_exécution_call_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    // À FAIRE : CoverCallExpressionAndAsyncArrowHead

    // CallExpression : CallExpression Arguments

    noeud := base comme *CallExpression

    // 1. Let ref be ? Evaluation of CallExpression.
    completion_ref := exécute_noeud(noeud.appelé, interpréteuse)
    saufsi completion_ref.est_normal() {
        retourne completion_ref
    }

    ref := completion_ref.valeur

    // 2. Let func be ? GetValue(ref).
    complétion_func := get_value(interpréteuse, ref)
    saufsi complétion_func.est_normal() {
        retourne complétion_func
    }

    func := complétion_func.valeur.V

    // 3. Let thisCall be this CallExpression.
    // this_call := noeud

    // À FAIRE 4. Let tailCall be IsInTailPosition(thisCall).
    tail_call := faux

    // 5. Return ? EvaluateCall(func, ref, Arguments, tailCall).
    retourne evaluate_call(interpréteuse, func, ref, noeud.arguments, tail_call)
}

/* 13.3.6.2 EvaluateCall ( func, ref, arguments, tailPosition )
 * https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-evaluatecall */
evaluate_call :: fonc (interpréteuse: &Interpréteuse, func: Valeur, ref: ValeurCompletion, arguments: [..]*NoeudSyntaxique, tail_position: bool) -> CompletionRecord
{
    this_value: Valeur = ---
    // 1. If ref is a Reference Record, then
    si est_reference_record(ref) {
        // a. If IsPropertyReference(ref) is true, then
        si est_référence_propriété(ref) {
            // i. Let thisValue be GetThisValue(ref).
            this_value = get_this_value(ref.R)
        }
        // b. Else,
        sinon {
            // i. Let refEnv be ref.[[Base]].
            ref_env := ref.R.base.E
            // ii. Assert: refEnv is an Environment Record.
            // iii. Let thisValue be refEnv.WithBaseObject().
            this_value = ref_env.with_base_object()
        }
    }
    // 2. Else,
    sinon {
        // a. Let thisValue be undefined.
        this_value = js_undefined
    }

    // 3. Let argList be ? ArgumentListEvaluation of arguments.
    // À FAIRE : fuite de mémoire
    arg_list: [..]Valeur

    pour arguments {
        complétion_arg := exécute_noeud(it, interpréteuse)
        saufsi complétion_arg.est_normal() {
            déloge(arg_list)
            retourne complétion_arg
        }
        complétion_valeur := get_value(interpréteuse, complétion_arg.valeur)
        saufsi complétion_valeur.est_normal() {
            déloge(arg_list)
            retourne complétion_valeur
        }
        valeur_arg := complétion_valeur.valeur.V
        tableau_ajoute(*arg_list, valeur_arg)
    }

    // 4. If func is not an Object, throw a TypeError exception.
    saufsi func.est_object() {
        message := imprime_chaine("'%' is not an Object", func)
        retourne lance_type_error(interpréteuse, message)
    }
    
    // 5. If IsCallable(func) is false, throw a TypeError exception.
    saufsi func.is_callable() {
        message := imprime_chaine("'%' is not callable", func)
        retourne lance_type_error(interpréteuse, message)
    }

    // 6. If tailPosition is true, perform PrepareForTailCall().
    si tail_position {
        panique("tail position non-implémeté")
    }

    // 7. Return ? Call(func, thisValue, argList).
    retourne call(interpréteuse, func, this_value, arg_list)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom AssignmentExpression
 * \{ */

AssignmentOperation :: énum {
    Assigne /* = */
}

AssignmentExpression :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_assignment_expression

    opération: AssignmentOperation
    gauche: *NoeudSyntaxique
    droite: *NoeudSyntaxique
}

crée_assignment_expression :: fonc (opération: AssignmentOperation, gauche: *NoeudSyntaxique, droite: *NoeudSyntaxique) -> *AssignmentExpression
{
    résultat := loge(AssignmentExpression)
    résultat.opération = opération
    résultat.gauche = gauche
    résultat.droite = droite
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators-runtime-semantics-evaluation */
sur_exécution_assignment_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *AssignmentExpression
    assert(noeud.opération == AssignmentOperation.Assigne)

    // À FAIRE : array literal
    // 1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then
    si noeud.gauche.type != ObjectExpression {
        // a. Let lref be ? Evaluation of LeftHandSideExpression.
        completion_lref := exécute_noeud(noeud.gauche, interpréteuse)
        saufsi completion_lref.est_normal() {
            retourne completion_lref
        }
        lref := completion_lref.valeur

        rval: Valeur
        // À FAIRE
        // b. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, then
            // i. Let lhs be the StringValue of LeftHandSideExpression.
            // ii. Let rval be ? NamedEvaluation of AssignmentExpression with argument lhs.
        // c. Else,
        {
            // i. Let rref be ? Evaluation of AssignmentExpression.
            completion_rref := exécute_noeud(noeud.droite, interpréteuse)
            saufsi completion_rref.est_normal() {
                retourne completion_rref
            }
            rref := completion_rref.valeur

            // ii. Let rval be ? GetValue(rref).
            completion_rval := get_value(interpréteuse, rref)
            saufsi completion_rval.est_normal() {
                retourne completion_rval
            }
            rval = completion_rval.valeur.V
        }

        // d. Perform ? PutValue(lref, rval).
        completion_assignment := put_value(interpréteuse, lref, rval)
        si completion_assignment.est_normal() {
            retourne completion_assignment
        }

        // e. Return rval.
        retourne normal_completion(rval)
    }

    panique("assignement expression non-implémenté")
    // 2. Let assignmentPattern be the AssignmentPattern that is covered by LeftHandSideExpression.
    // 3. Let rref be ? Evaluation of AssignmentExpression.
    // 4. Let rval be ? GetValue(rref).
    // 5. Perform ? DestructuringAssignmentEvaluation of assignmentPattern with argument rval.
    // 6. Return rval.
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom VariableDeclaration
 * \{ */

VariableDeclarationKind :: énum {
    Let
    Var
}

VariableDeclaration :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_variable_declaration

    nature: VariableDeclarationKind
    expressions: [..]*NoeudSyntaxique
}

crée_variable_declaration :: fonc (nature: VariableDeclarationKind, expressions: ...*NoeudSyntaxique) -> *VariableDeclaration
{
    résultat := loge(VariableDeclaration)
    résultat.nature = nature
    pour expressions {
        tableau_ajoute(*résultat.expressions, it)
    }
    retourne résultat
}

sur_exécution_variable_declaration :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *VariableDeclaration
    
    dernière_valeur := normal_completion(js_undefined)

    /* À FAIRE : différence entre let et var. */
    pour noeud.expressions {
        dernière_valeur = exécute_noeud(it, interpréteuse)
    }

    retourne dernière_valeur
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom VariableDeclarator
 * \{ */

VariableDeclarator :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_variable_declarator

    id: *NoeudSyntaxique
    init: *NoeudSyntaxique
}

crée_variable_declarator :: fonc (id: *NoeudSyntaxique, init: *NoeudSyntaxique) -> *VariableDeclarator
{
    résultat := loge(VariableDeclarator)
    résultat.id = id
    résultat.init = init
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-variable-statement */
sur_exécution_variable_declarator :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    noeud := base comme *VariableDeclarator
    assert(noeud.id.type == Identifier)
    identifier := noeud.id comme *Identifier

    // À FAIRE : cas sans init
    assert(noeud.init != nul)

    // 1. Let bindingId be the StringValue of BindingIdentifier.
    binding_id := identifier.nom

    // 2. Let lhs be ? ResolveBinding(bindingId).
    completion_lhs := interpréteuse.resolve_binding(binding_id)
    saufsi completion_lhs.est_normal() {
        retourne completion_lhs
    }
    lhs := completion_lhs.valeur

    valeur := js_undefined
    // 3. If IsAnonymousFunctionDefinition(Initializer) is true, then
    si is_anonymous_function_definition(noeud.init) {
        // a. Let value be ? NamedEvaluation of Initializer with argument bindingId.
        panique("init avec is_anonymous_function non-implémenté")
    }
    // 4. Else,
    sinon {
        // a. Let rhs be ? Evaluation of Initializer.
        completion_valeur := exécute_noeud(noeud.init, interpréteuse)
        saufsi completion_valeur.est_normal() {
            retourne completion_valeur
        }
        // b. Let value be ? GetValue(rhs).
        valeur_complétion := get_value(interpréteuse, completion_valeur.valeur)
        saufsi valeur_complétion.est_normal() {
            retourne valeur_complétion
        }
        valeur = valeur_complétion.valeur.V
    }

    // 5. Perform ? PutValue(lhs, value).
    completion_put_value := put_value(interpréteuse, lhs, valeur)
    saufsi completion_put_value.est_normal() {
        retourne completion_put_value
    }

    // 6. Return EMPTY.
    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ObjectExpression
 * \{ */

ObjectExpression :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_object_expression
}

crée_object_expression :: fonc () -> *ObjectExpression
{
    résultat := loge(ObjectExpression)
    retourne résultat
}

sur_exécution_object_expression :: fonc (base: *NoeudSyntaxique @inutilisée, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    objet := crée_objet(interpréteuse.donne_tas_de_mémoire(), interpréteuse.donne_realm().intrinsics.object_prototype)
    retourne normal_completion(Valeur(Object = objet))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ObjectExpression
 * \{ */

MemberExpression :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_member_expression

    objet: *NoeudSyntaxique
    propriété: *NoeudSyntaxique
    calculé := faux
}

crée_member_expression :: fonc (objet: *NoeudSyntaxique, propriété: *NoeudSyntaxique) -> *MemberExpression
{
    résultat := loge(MemberExpression)
    résultat.objet = objet
    résultat.propriété = propriété
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-property-accessors-runtime-semantics-evaluation */
sur_exécution_member_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    membre := base comme *MemberExpression

    assert(membre.propriété.type == Identifier)
    identifier := membre.propriété comme *Identifier

    // MemberExpression : MemberExpression . IdentifierName

    // 1. Let baseReference be ? Evaluation of MemberExpression.
    completion_base_reference := exécute_noeud(membre.objet, interpréteuse)
    saufsi completion_base_reference.est_normal() {
        retourne completion_base_reference
    }
    base_reference := completion_base_reference.valeur

    // 2. Let baseValue be ? GetValue(baseReference).
    valeur_base_reference := get_value(interpréteuse, base_reference)
    saufsi valeur_base_reference.est_normal() {
        retourne valeur_base_reference
    }
    base_value := valeur_base_reference.valeur.V

    // 3. Let strict be IsStrict(this MemberExpression).
    // À FAIRE : strict
    strict := faux

    retourne evaluate_property_access_with_identifier_key(base_value, identifier, strict)
}

/* 13.3.4 EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )
 * https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-evaluate-property-access-with-identifier-key */
evaluate_property_access_with_identifier_key :: fonc (base_value: Valeur, identifier_name: *Identifier, strict: bool) -> CompletionRecord
{
    // 1. Let propertyNameString be the StringValue of identifierName.
    property_name_string := identifier_name.nom

    // 2. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: propertyNameString, [[Strict]]: strict, [[ThisValue]]: EMPTY }.
    résultat: ReferenceRecord
    résultat.base = base_value
    résultat.referenced_name = property_name_string
    résultat.strict = strict
    retourne normal_completion(résultat)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom UpdateExpression
 * \{ */

UpdateOperation :: énum {
    Increment
    Decrement
}

UpdateExpression :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_update_expression

    argument: *NoeudSyntaxique
    operation: UpdateOperation
}

crée_update_expression :: fonc (argument: *NoeudSyntaxique, operation: UpdateOperation) -> *UpdateExpression
{
    résultat := loge(UpdateExpression)
    résultat.argument = argument
    résultat.operation = operation
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-postfix-increment-operator */
sur_exécution_update_expression :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    update := base comme *UpdateExpression
    assert(update.argument.type == Identifier)

    // 1. Let lhs be ? Evaluation of LeftHandSideExpression.
    complétion_lhs := exécute_noeud(update.argument, interpréteuse)
    saufsi complétion_lhs.est_normal() {
        retourne complétion_lhs
    }
    lhs := complétion_lhs.valeur

    // 2. Let oldValue be ? ToNumeric(? GetValue(lhs)).
    lhs_value := get_value(interpréteuse, lhs)
    saufsi lhs_value.est_normal() {
        retourne lhs_value
    }

    complétion_old_value := to_numeric(interpréteuse, lhs_value.valeur.V)
    saufsi complétion_old_value.est_normal() {
        retourne complétion_old_value
    }
    old_value := complétion_old_value.valeur.V

    nouvelle_valeur: Valeur

    // 3. If oldValue is a Number, then
    si est_nombre(old_value) {
        // a. Let newValue be Number::add(oldValue, 1𝔽).
        // NOTE : nous faison ++ et -- directement.
        si update.operation == UpdateOperation.Increment {
            nouvelle_valeur = ajoute_valeurs(old_value, Valeur(Number = 1))
        }
        sinon {
            nouvelle_valeur = soustrait_valeurs(old_value, Valeur(Number = 1))
        }
    }
    // 4. Else,
    sinon {
        // a. Assert: oldValue is a BigInt.
        // b. Let newValue be BigInt::add(oldValue, 1ℤ).
        panique("update expression sur BigInt non-implémentée")
    }

    // 5. Perform ? PutValue(lhs, newValue).
    complétion_update := put_value(interpréteuse, lhs, nouvelle_valeur)
    saufsi complétion_update.est_normal() {
        retourne complétion_update
    }

    // 6. Return oldValue.
    retourne normal_completion(old_value)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ForStatement
 * \{ */

ForStatement :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_for_statement

    init: *NoeudSyntaxique
    test: *NoeudSyntaxique
    update: *NoeudSyntaxique
    body: *NoeudSyntaxique
}

crée_for_statement :: fonc (init: *NoeudSyntaxique, test: *NoeudSyntaxique, update: *NoeudSyntaxique, body: *NoeudSyntaxique) -> *ForStatement
{
    résultat := loge(ForStatement)
    résultat.init = init
    résultat.test = test
    résultat.update = update
    résultat.body = body
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-statement */
sur_exécution_for_statement :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    for := base comme *ForStatement

    si for.init {
        doit_continuer := exécute_noeud(for.init, interpréteuse)
        saufsi doit_continuer.est_normal() {
            retourne doit_continuer
        }
    }

    boucle {
        si for.test {
            doit_continuer := exécute_noeud(for.test, interpréteuse)
            saufsi doit_continuer.est_normal() {
                retourne doit_continuer
            }
            valeur_complétion := get_value(interpréteuse, doit_continuer.valeur)
            saufsi valeur_complétion.est_normal() {
                retourne valeur_complétion
            }

            valeur := to_boolean(valeur_complétion.valeur.V)
            si valeur.est_false() {
                arrête
            }
        }

        si for.update {
            doit_continuer := exécute_noeud(for.update, interpréteuse)
            saufsi doit_continuer.est_normal() {
                retourne doit_continuer
            }
        }

        doit_continuer := exécute_noeud(for.body, interpréteuse)
        saufsi doit_continuer.est_normal() {
            retourne doit_continuer
        }
    }

    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom IfStatement
 * \{ */

IfStatement :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_if_statement

    test: *NoeudSyntaxique
    consequent: *NoeudSyntaxique
    alternate: *NoeudSyntaxique
}

crée_if_statement :: fonc (test: *NoeudSyntaxique, consequent: *NoeudSyntaxique, alternate: *NoeudSyntaxique) -> *IfStatement
{
    résultat := loge(IfStatement)
    résultat.test = test
    résultat.consequent = consequent
    résultat.alternate = alternate
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-if-statement */
sur_exécution_if_statement :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    if := base comme *IfStatement

    // 1. Let exprRef be ? Evaluation of Expression.
    complétion_expr_ref := exécute_noeud(if.test, interpréteuse)
    saufsi complétion_expr_ref.est_normal() {
        retourne complétion_expr_ref
    }
    expr_ref := complétion_expr_ref.valeur

    // 2. Let exprValue be ToBoolean(? GetValue(exprRef)).
    complétion_valeur_expr_ref := get_value(interpréteuse, expr_ref)
    saufsi complétion_valeur_expr_ref.est_normal() {
        retourne complétion_valeur_expr_ref
    }
    expr_value := to_boolean(complétion_valeur_expr_ref.valeur.V)

    stmt_completion: CompletionRecord

    // 3. If exprValue is true, then
    si expr_value.est_true() {
        // a. Let stmtCompletion be Completion(Evaluation of the first Statement).
        stmt_completion = exécute_noeud(if.consequent, interpréteuse)
    }
    // 4. Else,
    sinon {
        si if.alternate == nul {
            /* NOTE : ceci provient du deuxième cas. */
            retourne normal_completion(js_undefined)
        }

        // a. Let stmtCompletion be Completion(Evaluation of the second Statement).
        stmt_completion = exécute_noeud(if.alternate, interpréteuse)
    }

    // 5. Return ? UpdateEmpty(stmtCompletion, undefined).
    retourne update_empty(stmt_completion, js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom TypeofOperator
 * \{ */

TypeofOperator :: struct {
    empl base: NoeudSyntaxique
    type = #type_de_cette_structure
    sur_exécution = sur_exécution_typeof_operator

    argument: *NoeudSyntaxique
}

crée_typeof_operator :: fonc (argument: *NoeudSyntaxique) -> *TypeofOperator
{
    résultat := loge(TypeofOperator)
    résultat.argument = argument
    retourne résultat
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-typeof-operator-runtime-semantics-evaluation */
sur_exécution_typeof_operator :: fonc (base: *NoeudSyntaxique, interpréteuse: &Interpréteuse) -> CompletionRecord
{
    typeof := base comme *TypeofOperator

    // 1. Let val be ? Evaluation of UnaryExpression.
    completion_val := exécute_noeud(typeof.argument, interpréteuse)
    saufsi completion_val.est_normal() {
        retourne completion_val
    }
    val := completion_val.valeur

    // 2. If val is a Reference Record, then
    si est_reference_record(val) {
        // a. If IsUnresolvableReference(val) is true, return "undefined".
        si est_référence_non_résolvable(val) {
            retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "undefined"))
        }
    }

    // 3. Set val to ? GetValue(val).
    completion_valeur := get_value(interpréteuse, val)
    saufsi completion_valeur.est_normal() {
        retourne completion_valeur
    }
    valeur := completion_valeur.valeur.V

    // 4. If val is undefined, return "undefined".
    si valeur.est_undefined() {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "undefined"))
    }

    // 5. If val is null, return "object".
    si valeur.est_nulle() {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "object"))
    }

    // 6. If val is a String, return "string".
    si valeur.est_chaine() {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "string"))
    }

    // À FAIRE : 7. If val is a Symbol, return "symbol".

    // 8. If val is a Boolean, return "boolean".
    si valeur.est_boolean() {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "boolean"))
    }

    // 9. If val is a Number, return "number".
    si valeur.est_nombre() {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "number"))
    }

    // À FAIRE : 10. If val is a BigInt, return "bigint".

    // 11. Assert: val is an Object.
    objet := valeur.donne_objet()

    // À FAIRE : 12. NOTE: This step is replaced in section B.3.6.3.
    // 13. If val has a [[Call]] internal slot, return "function".
    si objet.sur_call {
        retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "function"))
    }

    // 14. Return "object".
    retourne normal_completion(crée_chaine(interpréteuse.donne_tas_de_mémoire(), "object"))
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Visiteuse arbre.
 * \{ */

DirectionVisiteNoeud :: énum {
    PRÉ_ORDRE
    POST_ORDRE
}

VisiteuseNoeud :: struct {
    arbre: *NoeudSyntaxique
    rappel_pour_noeud: fonc(*VisiteuseNoeud, *NoeudSyntaxique, *InfoTypeStructure)(rien)
    rappel_pour_tableau: fonc(*VisiteuseNoeud, [..]*NoeudSyntaxique)(rien)
    profondeur: z32
    direction_visite: DirectionVisiteNoeud
}

donne_info_pour_type_noeud :: fonc (racine: *NoeudSyntaxique) -> *InfoTypeStructure
{
    résultat := __table_des_types[racine.type] comme *InfoTypeStructure
    assert(est_struct_ou_employeuse_de(résultat, info_de(NoeudSyntaxique)))
    retourne résultat
}

visite_noeud :: fonc (visiteuse: *VisiteuseNoeud, racine: *NoeudSyntaxique, $Rappel: fonc(*VisiteuseNoeud, *NoeudSyntaxique, *InfoTypeStructure)(rien))
{
    infos := donne_info_pour_type_noeud(racine)
    Rappel(visiteuse, racine, infos)
}

visite_noeud_générique :: fonc (visiteuse: *VisiteuseNoeud, racine: *NoeudSyntaxique, info: *InfoTypeStructure)
{
    si visiteuse.direction_visite == DirectionVisiteNoeud.PRÉ_ORDRE && visiteuse.rappel_pour_noeud {
        visiteuse.rappel_pour_noeud(visiteuse, racine, info)
    }

    valeur_eini : eini = ---
    valeur_eini.pointeur = racine
    valeur_eini.info = info

    pour info.membres {
        si it.id == info_de(*NoeudSyntaxique) {
            membre := eini_depuis_info_membre(valeur_eini, it)
            expression := mémoire(membre.pointeur comme **NoeudSyntaxique)
            si expression == nul {
                continue
            }

            si possède_annotation(it, "NeVisitePas") {
                continue
            }

            visiteuse.profondeur += 1
            visite_noeud(visiteuse, expression, visite_noeud_générique)
            visiteuse.profondeur -= 1
            continue
        }

        si it.id == info_de([..]*NoeudSyntaxique) {
            membre := eini_depuis_info_membre(valeur_eini, it)

            tableau := mémoire(membre.pointeur comme *[..]*NoeudSyntaxique)

            pour noeud dans tableau {
                visiteuse.profondeur += 1
                visite_noeud(visiteuse, noeud, visite_noeud_générique)
                visiteuse.profondeur -= 1
            }

            si visiteuse.rappel_pour_tableau {
                visiteuse.profondeur += 1
                visiteuse.rappel_pour_tableau(visiteuse, tableau)
                visiteuse.profondeur -= 1
            }

            continue
        }

        si it.id == info_de(NoeudScope) {
            // À FAIRE : assert(est_base)
            scope := racine comme *NoeudScope
            tableau := scope.enfants

            pour noeud dans tableau {
                visiteuse.profondeur += 1
                visite_noeud(visiteuse, noeud, visite_noeud_générique)
                visiteuse.profondeur -= 1
            }

            si visiteuse.rappel_pour_tableau {
                visiteuse.profondeur += 1
                visiteuse.rappel_pour_tableau(visiteuse, tableau)
                visiteuse.profondeur -= 1
            }

            continue
        }
    }

    si visiteuse.direction_visite == DirectionVisiteNoeud.POST_ORDRE && visiteuse.rappel_pour_noeud {
        visiteuse.rappel_pour_noeud(visiteuse, racine, info)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Impression arbre.
 * \{ */

crée_visiteuse_pour_impression :: fonc (noeud: *NoeudSyntaxique) -> VisiteuseNoeud
{
    rappel_pour_noeud :: fonc (visiteuse: *VisiteuseNoeud, noeud: *NoeudSyntaxique @inutilisée, info: *InfoTypeStructure)
    {
        imprime_tabulation(visiteuse.profondeur)
        imprime("%\n", info.nom)
    }

    résultat: VisiteuseNoeud
    résultat.arbre = noeud
    résultat.rappel_pour_noeud = rappel_pour_noeud
    résultat.direction_visite = DirectionVisiteNoeud.PRÉ_ORDRE
    retourne résultat
}

imprime_arbre :: fonc (noeud: *NoeudSyntaxique)
{
    visiteuse := crée_visiteuse_pour_impression(noeud)
    visite_noeud(*visiteuse, noeud, visite_noeud_générique)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Destruction arbre.
 * \{ */

crée_visiteuse_pour_destruction :: fonc (noeud: *NoeudSyntaxique) -> VisiteuseNoeud
{
    rappel_pour_noeud :: fonc (visiteuse: *VisiteuseNoeud @inutilisée, noeud: *NoeudSyntaxique, info: *InfoTypeStructure)
    {
        déloge_mémoire(info.taille_en_octet comme z64, noeud, info, PositionCodeSource())
    }

    rappel_pour_tableau :: fonc (visiteuse: *VisiteuseNoeud @inutilisée, tableau: [..]*NoeudSyntaxique)
    {
        déloge(tableau)
    }

    résultat: VisiteuseNoeud
    résultat.arbre = noeud
    résultat.rappel_pour_noeud = rappel_pour_noeud
    résultat.rappel_pour_tableau = rappel_pour_tableau
    résultat.direction_visite = DirectionVisiteNoeud.POST_ORDRE
    retourne résultat
}

détruit_arbre :: fonc (noeud: *NoeudSyntaxique)
{
    visiteuse := crée_visiteuse_pour_destruction(noeud)
    visite_noeud(*visiteuse, noeud, visite_noeud_générique)
}

/** \} */
