importe Ensemble
importe Fondation
importe GlibC
importe Introspection
importe #inemployé HTML
importe Temps

DÉBOGUGE_MÉMOIRE :: faux

/* ------------------------------------------------------------------------- */
/** \nom TasDeMémoire
 * Allocatrice servant de ramasse-miette "marque et balaie"
 * \{ */

TasDeMémoire :: struct {
    mv: *MachineVirtuelle
    blocs: [..]*BlocDeMémoire

    doit_ébouer_à_chaque_allocation := faux
    allocations_entre_ébouages := 10_000
    allocations_depuis_dernier_ébouage := 0

    imprime_statistiques := faux
    temps_allocations: z64
}

/* Fonction native pour forcer un ébouage
 * Cette fonction peut être ajoutée à un objet pour être appelée depuis les scripts. */
fonction_native_éboue :: fonc (empl params: *ParamètresObjectCall) -> CompletionRecord
{
    #si DÉBOGUGE_MÉMOIRE {
        imprime("<<<<< ébouage forcé\n")
    }
    éboue(interpréteuse.donne_tas_de_mémoire())
    #si DÉBOGUGE_MÉMOIRE {
        imprime(">>>>> ébouage forcé\n")
    }
    retourne normal_completion(js_undefined)
}

détruit_données_tas_de_mémoire :: fonc (tas_de_mémoire: *TasDeMémoire)
{
    // imprime("[%] %ms\n", #nom_de_cette_fonction, tas_de_mémoire.temps_allocations)
    pour tas_de_mémoire.blocs {
        détruit_bloc(it)
    }

    déloge(tas_de_mémoire.blocs)
}

donne_mv :: fonc (tas_de_mémoire: *TasDeMémoire) -> *MachineVirtuelle
{
    retourne tas_de_mémoire.mv
}

alloue :: fonc (tas_de_mémoire: *TasDeMémoire, $T: type_de_données) -> *T
{
    assert(est_struct_ou_employeuse_de(info_de(T), info_de(Cellule)))
    résultat := alloue_cellule(tas_de_mémoire, taille_de(T)) comme *T
    init_de(T)(résultat)
    assert((résultat comme *Cellule).table != nul)
    assert((résultat comme *Cellule).table.classe == T)
    retourne résultat
}

alloue_cellule :: fonc (tas_de_mémoire: *TasDeMémoire, taille: n64) -> *rien
{
    si tas_de_mémoire.doit_ébouer_à_chaque_allocation {
        éboue(tas_de_mémoire)
    }
    sinon si tas_de_mémoire.allocations_depuis_dernier_ébouage > tas_de_mémoire.allocations_entre_ébouages {
        éboue(tas_de_mémoire)
    }

    début := maintenant_précis()
    diffère tas_de_mémoire.temps_allocations += début.temps_écoulé_millisecondes()

    tas_de_mémoire.allocations_depuis_dernier_ébouage += 1

    pour tas_de_mémoire.blocs {
        si taille > it.taille_cellule {
            continue
        }

        cellule := it.alloue_cellule()
        si cellule {
            retourne cellule
        }
    }

    mémoire_bloc := loge_mémoire_alignée(BlocDeMémoire.TAILLE_BLOC comme z64, BlocDeMémoire.TAILLE_BLOC comme z64, info_de(BlocDeMémoire), PositionCodeSource())
    bloc := mémoire_bloc comme *BlocDeMémoire
    init_de(BlocDeMémoire)(bloc)

    initialise_bloc(bloc, taille)

    bloc.tas_de_mémoire = tas_de_mémoire
    tableau_ajoute(*tas_de_mémoire.blocs, bloc)

    retourne bloc.alloue_cellule()
}

TypeÉbouage :: énum {
    RAMASSE_MIETTES
    /* À n'utiliser que pour la destruction. */
    RAMASSE_TOUT
}

/* Ramasse les miettes. */
éboue :: fonc (tas_de_mémoire: *TasDeMémoire, type_ébouage := TypeÉbouage.RAMASSE_MIETTES)
{
    // début := maintenant_précis()
    // diffère imprime("[%] %ms\n", #nom_de_cette_fonction, début.temps_écoulé_millisecondes())

    racines: [..]*Cellule
    diffère déloge(racines)
    si type_ébouage == TypeÉbouage.RAMASSE_MIETTES {
        rassemble_racines(tas_de_mémoire, *racines)
    }

    visite_cellules_vivantes(tas_de_mémoire, racines)

    balaie_cellules_mortes(tas_de_mémoire)

    si tas_de_mémoire.imprime_statistiques {
        imprime("allocations_depuis_dernier_ébouage : %\n", tas_de_mémoire.allocations_depuis_dernier_ébouage)
        imprime("nombre de blocs : %\n", tas_de_mémoire.blocs.taille)

        blocs_pleins := 0
        blocs_vides := 0
        blocs_utilisables := 0

        pour tas_de_mémoire.blocs {
            si it.est_plein() {
                blocs_pleins += 1
            }
            sinon si it.est_vide() {
                blocs_vides += 1
            }
            sinon {
                blocs_utilisables += 1
            }
        }

        imprime("-- blocs pleins      : %\n", blocs_pleins)
        imprime("-- blocs vides       : %\n", blocs_vides)
        imprime("-- blocs utilisables : %\n", blocs_utilisables)
    }

    tas_de_mémoire.allocations_depuis_dernier_ébouage = 0
}

rassemble_racines :: fonc (tas_de_mémoire: *TasDeMémoire, racines: *[..]*Cellule)
{
    rassemble_racines(tas_de_mémoire.mv, racines)

    rassemble_racines_en_mémoire(tas_de_mémoire, racines)

    #si DÉBOGUGE_MÉMOIRE {
        imprime("% (% racine(s))\n", #nom_de_cette_fonction, racines.taille)
        pour mémoire(racines) {
            imprime("    + %\n", it)
        }
    }
}

rassemble_racines_en_mémoire :: fonc (tas_de_mémoire: *TasDeMémoire, racines: *[..]*Cellule) #sansasan
{
    /* Marqueur pour savoir la fin de la pile de données d'exécution. */
    marqueur_pile: n64

    /* Vérifie la présence de cellules dans les registres. */
    buf: __jmp_buf_tag
    _ := setjmp(*buf)

    pour buf.__jmpbuf {
        cellule_possible := it comme *Cellule
        ajoute_racine_depuis_cellule_possible(tas_de_mémoire, cellule_possible, racines)
    }

    /* Rassemble les cellules sur la pile d'exécution. */
    début_pile := (*marqueur_pile) - 1
    fin_pile := __début_pile
    tantque début_pile < fin_pile {
        cellule_possible := mémoire(début_pile) comme *Cellule
        ajoute_racine_depuis_cellule_possible(tas_de_mémoire, cellule_possible, racines)
        début_pile += 1
    }
}

ajoute_racine_depuis_cellule_possible :: fonc (tas_de_mémoire: *TasDeMémoire, cellule_possible: *Cellule, racines: *[..]*Cellule)
{
    pour tas_de_mémoire.blocs {
        saufsi it == donne_bloc_de_mémoire(cellule_possible) {
            continue
        }

        adresse_bloc := (it + 1) comme *octet
        assert(adresse_bloc == it.donne_cellule(0))
        fin_bloc := it comme *octet + BlocDeMémoire.TAILLE_BLOC

        saufsi adresse_bloc <= cellule_possible < fin_bloc {
            continue
        }

        décalage_cellule := (cellule_possible - adresse_bloc) comme n64
        index_cellule := décalage_cellule / it.taille_cellule

        si cellule_possible.vivante && cellule_possible == it.donne_cellule(index_cellule) {
            ensemble_ajoute(racines, cellule_possible)
        }
    }
}

visite_cellules_vivantes :: fonc (tas_de_mémoire: *TasDeMémoire, racines: []*Cellule)
{
    VisiteuseVivance :: struct {
        empl base: VisiteuseCellule
    }

    sur_a_visité :: fonc (base: *VisiteuseCellule @inutilisée, cellule: *Cellule)
    {
        cellule.marqué = vrai
    }

    sur_a_déjà_visité :: fonc (base: *VisiteuseCellule @inutilisée, cellule: *Cellule) -> bool
    {
        retourne cellule.marqué
    }

    visiteuse: VisiteuseVivance
    diffère déloge(visiteuse.objets_visités)
    diffère déloge(visiteuse.valeurs_à_visiter)

    visiteuse.sur_a_visité = sur_a_visité
    visiteuse.sur_a_déjà_visité = sur_a_déjà_visité

    mv := tas_de_mémoire.donne_mv()
    si mv.user_agent {
        valeur : eini = ---
        valeur.pointeur = mv.user_agent
        valeur.info = info_de(HTML.UserAgent)
        valeur_à_visiter: InfoValeurÀVisiter
        valeur_à_visiter.valeur = valeur
        valeur_à_visiter.structure = info_de(HTML.UserAgent)
        ensemble_ajoute(*visiteuse.objets_visités, mv.user_agent)
        tableau_ajoute(*visiteuse.valeurs_à_visiter, valeur_à_visiter)
    }

    pour racines {
        visite_cellule_générique(*visiteuse, it)
    }

    tantque visiteuse.valeurs_à_visiter.taille != 0 {
        valeur := enlève_dernier_élément(*visiteuse.valeurs_à_visiter)
        visite_valeur(*visiteuse, valeur)
    }

    #si DÉBOGUGE_MÉMOIRE {
        pour racines {
            imprime("    @ %\n", it)
        }
        imprime_cellules_vivantes(tas_de_mémoire)
    }
}

imprime_cellules_vivantes :: fonc (tas_de_mémoire: *TasDeMémoire)
{
    imprime("%\n", #nom_de_cette_fonction)

    pour tas_de_mémoire.blocs {
        pour cellule dans it {
            si cellule.vivante && cellule.marqué {
                imprime("    ! %\n", cellule)
            }
        }
    }
}

balaie_cellules_mortes :: fonc (tas_de_mémoire: *TasDeMémoire)
{
    #si DÉBOGUGE_MÉMOIRE {
        imprime("%\n", #nom_de_cette_fonction)
    }

    blocs_utilisables: [..]*BlocDeMémoire
    blocs_vides: [..]*BlocDeMémoire
    diffère déloge(blocs_vides)

    pour tas_de_mémoire.blocs {
        pour cellule dans it {
            si cellule.vivante && !cellule.marqué {
                it.désalloue(cellule)
                #si DÉBOGUGE_MÉMOIRE {
                    imprime("    ~ %\n", cellule)
                }
            }
            cellule.marqué = faux
        }

        si it.est_vide() {
            tableau_ajoute(*blocs_vides, it)
        }
        sinon {
            tableau_ajoute(*blocs_utilisables, it)
        }
    }

    déloge(tas_de_mémoire.blocs)
    tas_de_mémoire.blocs = blocs_utilisables

    pour blocs_vides {
        détruit_bloc(it)
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom BlocDeMémoire
 * Mémoire pour allouer des Cellules.
 * \{ */

BlocDeMémoire :: struct {
    TAILLE_BLOC : n64 : 16 * 1024

    taille_cellule: n64
    tas_de_mémoire: *TasDeMémoire

    EntréeListeLibre :: struct {
        empl base: Cellule
        suivante: *EntréeListeLibre
    }

    liste_libre: *EntréeListeLibre

    cellules_disponibles: n64
}

initialise_bloc :: fonc (bloc: *BlocDeMémoire, taille_cellule: n64)
{
    bloc.taille_cellule = taille_cellule

    pour bloc {
        liste := it comme *BlocDeMémoire.EntréeListeLibre
        liste.vivante = faux

        si index_it comme n64 == bloc.nombre_de_cellules() - 1 {
            liste.suivante = nul
        }
        sinon {
            liste.suivante = bloc.donne_cellule(index_it comme n64 + 1) comme *BlocDeMémoire.EntréeListeLibre
        }
    }

    bloc.liste_libre = bloc.donne_cellule(0) comme *BlocDeMémoire.EntréeListeLibre
    bloc.cellules_disponibles = bloc.nombre_de_cellules()
}

détruit_bloc :: fonc (bloc: *BlocDeMémoire)
{
    déloge_mémoire(BlocDeMémoire.TAILLE_BLOC comme z64, bloc, info_de(BlocDeMémoire), PositionCodeSource())
}

nombre_de_cellules :: fonc (bloc: *BlocDeMémoire) -> n64 #enligne
{
    retourne (BlocDeMémoire.TAILLE_BLOC - taille_de(BlocDeMémoire)) / bloc.taille_cellule
}

est_plein :: fonc (bloc: *BlocDeMémoire) -> bool #enligne
{
    retourne bloc.cellules_disponibles == 0
}

est_vide :: fonc (bloc: *BlocDeMémoire) -> bool #enligne
{
    retourne bloc.cellules_disponibles == bloc.nombre_de_cellules()
}

est_utilisable :: fonc (bloc: *BlocDeMémoire) -> bool #enligne
{
    retourne bloc.cellules_disponibles < bloc.nombre_de_cellules()
}

donne_cellule :: fonc (bloc: *BlocDeMémoire, index: n64) -> *Cellule
{
    stockage := (bloc + 1) comme *octet
    retourne (stockage + index * bloc.taille_cellule) comme *Cellule
}

alloue_cellule :: fonc (bloc: *BlocDeMémoire) -> *Cellule
{
    saufsi bloc.liste_libre {
        retourne nul
    }

    bloc.cellules_disponibles -= 1

    résultat := bloc.liste_libre
    bloc.liste_libre = bloc.liste_libre.suivante
    retourne résultat
}

désalloue :: fonc (bloc: *BlocDeMémoire, cellule: *Cellule)
{
    assert(cellule.vivante == vrai)
    assert(cellule.marqué == faux)

    détruit_cellule(cellule)

    entrée := cellule comme *BlocDeMémoire.EntréeListeLibre
    entrée.vivante = faux
    entrée.suivante = bloc.liste_libre
    bloc.liste_libre = entrée

    bloc.cellules_disponibles += 1
}

opérateur pour :: fonc (bloc: *BlocDeMémoire) -> *Cellule
{
    pour bloc.nombre_de_cellules() {
        cellule := bloc.donne_cellule(index_it)

        `it = cellule
        `index_it = index_it comme z64

        #corps_boucle
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Cellule
 * Structure de base pour être éboué.
 * \{ */

TableVirtuelleCellule :: struct {
    classe: type_de_données
    sur_destruction: fonc(*Cellule)(rien)
}

#portée_fichier

table_virtuelle_cellule := TableVirtuelleCellule(classe = Cellule)

#portée_export

Cellule :: struct {
    table := *table_virtuelle_cellule
    marqué := faux
    vivante := vrai
}

donne_info_type_cellule :: fonc (racine: *Cellule) -> *InfoTypeStructure
{
    résultat := __table_des_types[racine.table.classe] comme *InfoTypeStructure
    assert(résultat != nul)
    assert(résultat.id == GenreInfoType.STRUCTURE)
    assert(est_struct_ou_employeuse_de(résultat, info_de(Cellule)))
    retourne résultat
}

donne_nom_classe :: fonc (cellule: *Cellule) -> chaine
{
    infos := donne_info_type_cellule(cellule)
    retourne infos.nom
}

donne_classe :: fonc (cellule: *Cellule) -> type_de_données
{
    retourne cellule.table.classe
}

imprime_cellule :: fonc (enchaineuse: *Enchaineuse, addr_cellule: **Cellule)
{
    saufsi addr_cellule && mémoire(addr_cellule) {
        ajoute_au_tampon(enchaineuse, "{nul}")
        retourne
    }

    cellule := mémoire(addr_cellule)
    imprime_dans_enchaineuse(enchaineuse, "%{%}", cellule.donne_nom_classe(), cellule comme *rien)
} @FormattageImpression

détruit_cellule :: fonc (cellule: *Cellule)
{
    si cellule.table.sur_destruction {
        cellule.table.sur_destruction(cellule)
    }
}

donne_bloc_de_mémoire :: fonc (cellule: *Cellule) -> *BlocDeMémoire #enligne
{
    v := cellule comme n64
    retourne (v & ~(BlocDeMémoire.TAILLE_BLOC - 1)) comme *BlocDeMémoire
}

donne_tas_de_mémoire :: fonc (cellule: *Cellule) -> *TasDeMémoire #enligne
{
    bloc := cellule.donne_bloc_de_mémoire()
    retourne bloc.tas_de_mémoire
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom VisiteuseCellule
 * \{ */

InfoValeurÀVisiter :: struct {
    structure: *InfoTypeStructure
    membre: chaine
    valeur: eini
}

VisiteuseCellule :: struct {
    sur_a_visité: fonc(*VisiteuseCellule, *Cellule)(rien)
    sur_a_déjà_visité: fonc(*VisiteuseCellule, *Cellule)(bool)

    objets_visités: [..]*rien
    valeurs_à_visiter: [..]InfoValeurÀVisiter
}

a_visité :: fonc (visiteuse: *VisiteuseCellule, cellule: *Cellule)
{
    si visiteuse.sur_a_visité {
        visiteuse.sur_a_visité(visiteuse, cellule)
    }
}

a_déjà_visité :: fonc (visiteuse: *VisiteuseCellule, cellule: *Cellule) -> bool
{
    si visiteuse.sur_a_déjà_visité {
        retourne visiteuse.sur_a_déjà_visité(visiteuse, cellule)
    }

    retourne faux
}

visite_cellule_générique :: fonc (visiteuse: *VisiteuseCellule, racine: *Cellule)
{
    saufsi racine {
        retourne
    }

    si a_déjà_visité(visiteuse, racine) {
        retourne
    }

    a_visité(visiteuse, racine)

    info := donne_info_type_cellule(racine)

    valeur_eini : eini = ---
    valeur_eini.pointeur = racine
    valeur_eini.info = info

    visite_structure(visiteuse, valeur_eini)
}

visite_structure :: fonc (visiteuse: *VisiteuseCellule, structure: eini)
{
    info := structure.info comme *InfoTypeStructure
    pour info.membres {
        saufsi type_est_intéressant_pour_visite(it.id, faux) {
            continue
        }
        membre := eini_depuis_info_membre(structure, it)
        si possède_annotation(it, "NeVisitePas") {
            continue
        }
        tableau_ajoute(*visiteuse.valeurs_à_visiter, InfoValeurÀVisiter(info, it.nom, membre))
    }
}

visite_valeur :: fonc (visiteuse: *VisiteuseCellule, valeur_à_visiter: InfoValeurÀVisiter)
{
    valeur := valeur_à_visiter.valeur
    info := valeur.info

    // chaine_type := chaine_pour_type(info)
    // diffère déloge(chaine_type)

    // si valeur_à_visiter.membre {
    //     imprime("[%] %.%: % (%)\n", #nom_de_cette_fonction, valeur_à_visiter.structure.nom, valeur_à_visiter.membre, chaine_type, valeur.pointeur)
    // }
    // sinon {
    //     imprime("[%] %: % (%)\n", #nom_de_cette_fonction, valeur_à_visiter.structure.nom, chaine_type, valeur.pointeur)
    // }

    si info == info_de(*Cellule) {
        cellule := mémoire(valeur.pointeur comme **Cellule)
        si cellule == nul {
            retourne
        }

        visite_cellule_générique(visiteuse, cellule)
        retourne
    }

    si info.id == GenreInfoType.POINTEUR {
        infos_pointeur := info comme *InfoTypePointeur
        type_élément := infos_pointeur.type_pointé

        saufsi type_élément.id == GenreInfoType.STRUCTURE {
            retourne
        }

        si est_struct_ou_employeuse_de(type_élément comme *InfoTypeStructure, info_de(Cellule)) {
            /* À FAIRE : la cellule doit être le premier élément. */
            cellule := mémoire(valeur.pointeur comme **Cellule)
            // imprime("[visite_cellule_générique] % -> %\n", valeur.pointeur, cellule comme *rien)
            visite_cellule_générique(visiteuse, cellule)
        }
        sinon {
            adresse := mémoire(valeur.pointeur comme **rien)
            saufsi adresse {
                retourne
            }

            si ensemble_possède(*visiteuse.objets_visités, adresse) {
                retourne
            }

            ensemble_ajoute(*visiteuse.objets_visités, adresse)

            valeur_à_visiter.valeur.pointeur = adresse
            valeur_à_visiter.valeur.info = type_élément
            tableau_ajoute(*visiteuse.valeurs_à_visiter, valeur_à_visiter)
        }

        retourne
    }

    si info.id == GenreInfoType.STRUCTURE {
        si info == info_de(HostDefined) {
            host_defined := mémoire(valeur.pointeur comme *HostDefined)

            si host_defined.données == nul {
                retourne
            }

            valeur_à_visiter.valeur.pointeur = host_defined.données
            valeur_à_visiter.valeur.info = host_defined.infos
            tableau_ajoute(*visiteuse.valeurs_à_visiter, valeur_à_visiter)
            retourne
        }

        visite_structure(visiteuse, valeur)
        retourne
    }

    si info.id == GenreInfoType.UNION {
        si info == info_de(Valeur) {
            valeur_ := mémoire(valeur.pointeur comme *Valeur)
            si valeur_.est_cellule() {
                visite_cellule_générique(visiteuse, valeur_.donne_cellule())
            }
        }
        retourne
    }

    si info.id == GenreInfoType.TABLEAU_FIXE || info.id == GenreInfoType.TABLEAU {
        itératrice := crée_itératrice_tableau(valeur)
        si itératrice.type_pointé == info_de(Lexème) {
            retourne
        }
        saufsi type_est_intéressant_pour_visite(itératrice.type_pointé, faux) {
            retourne
        }
        boucle {
            élément := itératrice.valeur_suivante()
            saufsi élément.est_valide() {
                arrête
            }
            valeur_à_visiter.valeur = élément
            tableau_ajoute(*visiteuse.valeurs_à_visiter, valeur_à_visiter)
        }
        retourne
    }
}

type_est_intéressant_pour_visite :: fonc (info: *InfoType, est_récurif: bool) -> bool
{
    discr info.id {
        ENTIER,
        RÉEL,
        BOOLÉEN,
        CHAINE,
        ADRESSE_FONCTION,
        FONCTION,
        EINI,
        RIEN,
        ÉNUM,
        OCTET,
        TYPE_DE_DONNÉES {
            retourne faux
        }
        TABLEAU {
            info_tableau := info comme *InfoTypeTableau
            retourne type_est_intéressant_pour_visite(info_tableau.type_pointé, vrai)
        }
        POINTEUR {
            info_pointeur := info comme *InfoTypePointeur
            retourne type_est_intéressant_pour_visite(info_pointeur.type_pointé, vrai)
        }
        UNION,
        OPAQUE,
        TRANCHE,
        TABLEAU_FIXE,
        VARIADIQUE {}
        STRUCTURE {
            si info == info_de(Cellule) {
                retourne !est_récurif
            }

            si info == info_de(Lexème) || info == info_de(ECMAString) || info == info_de(TasDeMémoire) || info == info_de(MachineVirtuelle) {
                retourne faux
            }

            si info == info_de(Chaine.ChaineUTF16) {
                retourne faux
            }
        }
    }
    retourne vrai
}

/** \} */
