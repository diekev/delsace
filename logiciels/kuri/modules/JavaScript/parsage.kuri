importe Fondation
importe Structures

parse :: fonc (script: *Script) -> Résultat(*Programme, ErreurCompilation)
{
    saufsi script.lexèmes {
        retourne ErreurCompilation(message = copie_chaine("Le texte est vide"))
    }

    parseuse: Parseuse
    diffère détruit_données_parseuse(*parseuse)

    parseuse.script = script
    parseuse.lexèmes = script.lexèmes

    expressions := parse_bloc(*parseuse, faux)

    si parseuse.possède_erreur {
        retourne parseuse.erreur_de_compilation
    }

    retourne crée_programme(*parseuse, expressions)
}

Parseuse :: struct {
    script: *Script
    lexèmes: [..]Lexème
    position := 0
    erreur_de_compilation: ErreurCompilation
    possède_erreur: bool

    noeuds: [..]*NoeudSyntaxique
}

crée_noeud :: fonc (parseuse: *Parseuse, $T: type_de_données) -> *T
{
    résultat := loge(T)
    tableau_ajoute(*parseuse.noeuds, résultat)
    retourne résultat
}

donne_parseuse_locale :: fonc (parseuse: *Parseuse) -> Parseuse
{
    résultat: Parseuse
    résultat.lexèmes = parseuse.lexèmes
    résultat.position = parseuse.position
    retourne résultat
}

détruit_données_parseuse :: fonc (parseuse: *Parseuse)
{
    déloge(parseuse.noeuds)
}

lexème_courant :: fonc (parseuse: *Parseuse) -> *Lexème
{
    retourne *parseuse.lexèmes[parseuse.position]
}

fini :: fonc (parseuse: *Parseuse) -> bool
{
    retourne parseuse.possède_erreur || parseuse.position >= parseuse.lexèmes.taille
}

consomme :: fonc (parseuse: *Parseuse)
{
    parseuse.position += 1
}

consomme :: fonc (parseuse: *Parseuse, genre_lexème: GenreLexème)
{
    saufsi apparie(parseuse, genre_lexème) {
        si genre_lexème == GenreLexème.ParenthèseOuvrante {
            parseuse.rapporte_erreur("expected a '('")
        }
        sinon si genre_lexème == GenreLexème.ParenthèseFermante {
            parseuse.rapporte_erreur("expected a ')'")
        }
        sinon si genre_lexème == GenreLexème.AccoladeOuvrante {
            parseuse.rapporte_erreur("expected a '{'")
        }
        sinon si genre_lexème == GenreLexème.AccoladeFermante {
            parseuse.rapporte_erreur("expected a '}'")
        }
        sinon si genre_lexème == GenreLexème.CrochetOuvrant {
            parseuse.rapporte_erreur("expected a '['")
        }
        sinon si genre_lexème == GenreLexème.CrochetFermant {
            parseuse.rapporte_erreur("expected a ']'")
        }
        sinon si genre_lexème == GenreLexème.PointVirgule {
            parseuse.rapporte_erreur("expected a ';'")
        }
        sinon si genre_lexème == GenreLexème.DoublePoint {
            parseuse.rapporte_erreur("expected a ':'")
        }
        sinon  {
            parseuse.rapporte_erreur("unexpected token")
        }
    }
    parseuse.consomme()
}

consomme_point_virgule_potentiel :: fonc (parseuse: *Parseuse)
{
    si parseuse.apparie(GenreLexème.PointVirgule) {
        parseuse.consomme()
    }
}

apparie :: fonc (parseuse: *Parseuse, genre_lexème: GenreLexème) -> bool
{
    si parseuse.fini() {
        retourne faux
    }
    retourne parseuse.lexème_courant().genre == genre_lexème
}

apparie_expression :: fonc (parseuse: *Parseuse) -> bool
{
    si parseuse.fini() {
        retourne faux
    }
    genre := parseuse.lexème_courant().genre
    drapeaux := données_lexèmes_pour_parsage[genre].drapeaux
    retourne drapeaux.EstExpression == vrai || drapeaux.EstExpressionUnaire == vrai
}

apparie_expression_unaire :: fonc (parseuse: *Parseuse) -> bool #enligne
{
    genre := parseuse.lexème_courant().genre
    si données_lexèmes_pour_parsage[genre].drapeaux.EstExpressionUnaire == vrai {
        retourne vrai
    }
    retourne faux
}

apparie_expression_secondaire :: fonc (parseuse: *Parseuse) -> bool #enligne
{
    si parseuse.fini() {
        retourne faux
    }
    genre := parseuse.lexème_courant().genre
    si données_lexèmes_pour_parsage[genre].drapeaux.EstExpressionSecondaire == vrai {
        retourne vrai
    }
    retourne faux
}

apparie_instruction :: fonc (parseuse: *Parseuse) -> bool #enligne
{
    si parseuse.fini() {
        retourne faux
    }
    genre := parseuse.lexème_courant().genre
    si données_lexèmes_pour_parsage[genre].drapeaux.EstInstruction == vrai {
        retourne vrai
    }
    retourne faux
}

parse_instruction :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    lexème := parseuse.lexème_courant()

    discr lexème.genre {
        Function {
            retourne parse_function_declaration(parseuse)
        }
        Return {
            retourne parse_return_statement(parseuse)
        }
        For {
            retourne parse_for_statement(parseuse)
        }
        While {
            retourne parse_while_statement(parseuse)
        }
        Do {
            retourne parse_do_while_statement(parseuse)
        }
        If {
            retourne parse_if_statement(parseuse)
        }
        Try {
            retourne parse_try_statement(parseuse)
        }
        Throw {
            retourne parse_throw_statement(parseuse)
        }
        Continue {
            retourne parse_continue_statement(parseuse)
        }
        Break {
            retourne parse_break_statement(parseuse)
        }
        Switch {
            retourne parse_switch_statement(parseuse)
        }
        sinon {
            panique("Instruction inconnue")
        }
    }

    retourne nul
}

/* À FAIRE : différencie proprement FunctionDeclaration et FunctionExpression */
parse_function_declaration :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    parseuse.consomme()

    id: *Identifier
    si apparie(parseuse, GenreLexème.Identifiant) {
        id = crée_identifier(parseuse, lexème_courant(parseuse).texte)
        parseuse.consomme()
    }

    parseuse.consomme(GenreLexème.ParenthèseOuvrante)

    paramètres: [..]*NoeudSyntaxique
    saufsi parseuse.apparie(GenreLexème.ParenthèseFermante) {
        paramètres = parse_expression_virgule(parseuse)
    }

    parseuse.consomme(GenreLexème.ParenthèseFermante)

    expressions := parse_bloc(parseuse, vrai)

    bloc := crée_block_statement(parseuse, expressions)

    si id {
        retourne crée_function_déclaration(parseuse, id, paramètres, bloc)
    }

    retourne crée_function_expression(parseuse, id, paramètres, bloc)
}

parse_variable_declaration :: fonc (parseuse: *Parseuse, nature: VariableDeclarationKind) -> *VariableDeclaration
{
    parseuse.consomme()

    declarators: [..]*NoeudSyntaxique

    tantque !fini(parseuse) {
        declarator := parse_variable_declarator(parseuse)
        saufsi declarator {
            déloge(declarators)
            retourne nul
        }

        tableau_ajoute(*declarators, declarator)

        si apparie(parseuse, GenreLexème.Virgule) {
            parseuse.consomme()
            continue
        }

        arrête
    }

    retourne crée_variable_declaration(parseuse, nature, declarators)
}

parse_variable_declarator :: fonc (parseuse: *Parseuse) -> *VariableDeclarator
{
    id := parse_binding_identifier(parseuse)

    init: *NoeudSyntaxique
    si apparie(parseuse, GenreLexème.Égal) {
        parseuse.consomme()
        init = parseuse.parse_expression()
    }

    retourne crée_variable_declarator(parseuse, id, init)
}

parse_return_statement :: fonc (parseuse: *Parseuse) -> *ReturnStatement
{
    parseuse.consomme()

    argument: *NoeudSyntaxique

    si parseuse.apparie_expression() {
        argument = parse_expression(parseuse)
    }

    retourne crée_return_statement(parseuse, argument)
}

TypeFor :: énum {
    Normal
    ForOf
    ForIn
}

détermine_type_for :: fonc (parseuse: *Parseuse) -> TypeFor
{
    parseuse_locale := parseuse.donne_parseuse_locale()

    tantque !fini(*parseuse_locale) {
        si apparie(*parseuse_locale, GenreLexème.Of) {
            retourne TypeFor.ForOf
        }
        si apparie(*parseuse_locale, GenreLexème.In) {
            retourne TypeFor.ForIn
        }
        si apparie(*parseuse_locale, GenreLexème.ParenthèseFermante) {
            arrête
        }

        consomme(*parseuse_locale)
    }

    retourne TypeFor.Normal
}

parse_for_statement :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    parseuse.consomme()

    parseuse.consomme(GenreLexème.ParenthèseOuvrante)

    type_for := détermine_type_for(parseuse)

    si type_for != TypeFor.Normal {
        retourne parseuse.parse_for_of_in_statement(type_for)
    }

    init: *NoeudSyntaxique
    si parseuse.apparie_expression() {
        init = parseuse.parse_expression()
    }
    parseuse.consomme(GenreLexème.PointVirgule)

    test: *NoeudSyntaxique
    si parseuse.apparie_expression() {
        test = parseuse.parse_expression()
    }
    parseuse.consomme(GenreLexème.PointVirgule)

    update: *NoeudSyntaxique
    si parseuse.apparie_expression() {
        update = parseuse.parse_expression()
    }
    parseuse.consomme(GenreLexème.ParenthèseFermante)

    body := parse_bloc_statement_ou_expression(parseuse)

    retourne crée_for_statement(parseuse, init, test, update, body)
}

parse_for_of_in_statement :: fonc (parseuse: *Parseuse, type_for: TypeFor) -> *NoeudSyntaxique
{
    left := parseuse.parse_expression()

    si type_for == TypeFor.ForOf && !apparie(parseuse, GenreLexème.Of) {
        parseuse.rapporte_erreur("Attendu 'of'")
        retourne nul
    }
    si type_for == TypeFor.ForIn && !apparie(parseuse, GenreLexème.In) {
        parseuse.rapporte_erreur("Attendu 'in'")
        retourne nul
    }

    /* Consomme in/of */
    parseuse.consomme()

    right := parseuse.parse_expression()

    parseuse.consomme(GenreLexème.ParenthèseFermante)

    body := parseuse.parse_bloc_statement_ou_expression()

    si type_for == TypeFor.ForIn {
        retourne crée_for_in_statement(parseuse, left, right, body)
    }

    retourne crée_for_of_statement(parseuse, left, right, body)
}

parse_while_statement :: fonc (parseuse: *Parseuse) -> *WhileStatement
{
    parseuse.consomme()

    parseuse.consomme(GenreLexème.ParenthèseOuvrante)
    test := parseuse.parse_expression()
    parseuse.consomme(GenreLexème.ParenthèseFermante)

    body := parse_bloc_statement_ou_expression(parseuse)

    retourne crée_while_statement(parseuse, test, body)
}

parse_do_while_statement :: fonc (parseuse: *Parseuse) -> *DoWhileStatement
{
    parseuse.consomme()
    
    body := parse_bloc_statement_ou_expression(parseuse)

    parseuse.consomme(GenreLexème.While)
    parseuse.consomme(GenreLexème.ParenthèseOuvrante)
    test := parseuse.parse_expression()
    parseuse.consomme(GenreLexème.ParenthèseFermante)

    retourne crée_do_while_statement(parseuse, body, test)
}

parse_if_statement :: fonc (parseuse: *Parseuse) -> *IfStatement
{
    parseuse.consomme()

    parseuse.consomme(GenreLexème.ParenthèseOuvrante)

    test := parseuse.parse_expression()

    parseuse.consomme(GenreLexème.ParenthèseFermante)

    consequent := parseuse.parse_bloc_statement_ou_expression()

    consomme_point_virgule_potentiel(parseuse)

    alternate: *NoeudSyntaxique
    si parseuse.apparie(GenreLexème.Else) {
        parseuse.consomme()

        si parseuse.apparie(GenreLexème.If) {
            alternate = parseuse.parse_if_statement()
        }
        sinon {
            alternate = parseuse.parse_bloc_statement_ou_expression()
        }
    }

    retourne crée_if_statement(parseuse, test, consequent, alternate)
}

parse_try_statement :: fonc (parseuse: *Parseuse) -> *TryStatement
{
    parseuse.consomme()

    block := parse_bloc_statement_ou_expression(parseuse)

    handler: *CatchClause
    si parseuse.apparie(GenreLexème.Catch) {
        parseuse.consomme()

        param: *NoeudSyntaxique
        si parseuse.apparie(GenreLexème.ParenthèseOuvrante) {
            parseuse.consomme()

            param = parseuse.parse_expression()

            parseuse.consomme(GenreLexème.ParenthèseFermante)
        }

        body := parse_bloc_statement_ou_expression(parseuse)

        handler = crée_catch_clause(parseuse, param, body)
    }

    finalizer: *NoeudSyntaxique
    si parseuse.apparie(GenreLexème.Finally) {
        parseuse.consomme()
        finalizer = parse_bloc_statement_ou_expression(parseuse)
    }

    retourne crée_try_statement(parseuse, block, handler, finalizer)
}

parse_throw_statement :: fonc (parseuse: *Parseuse) -> *ThrowStatement
{
    parseuse.consomme()
    argument := parse_expression(parseuse)
    retourne crée_throw_statement(parseuse, argument)
}

parse_continue_statement :: fonc (parseuse: *Parseuse) -> *ContinueStatement
{
    parseuse.consomme()
    target := parse_label_identifier(parseuse, faux)
    retourne crée_continue_statement(parseuse, target)
}

parse_break_statement :: fonc (parseuse: *Parseuse) -> *BreakStatement
{
    parseuse.consomme()
    target := parse_label_identifier(parseuse, faux)
    retourne crée_break_statement(parseuse, target)
}

parse_switch_statement :: fonc (parseuse: *Parseuse) -> *SwitchStatement
{
    parseuse.consomme()

    parseuse.consomme(GenreLexème.ParenthèseOuvrante)
    discriminant := parseuse.parse_expression()
    parseuse.consomme(GenreLexème.ParenthèseFermante)

    parseuse.consomme(GenreLexème.AccoladeOuvrante)
    cases: [..]*CaseClause
    index_default_clause : z64 = -1

    tantque !parseuse.fini() {
        si apparie(parseuse, GenreLexème.Case) {
            case := parseuse.parse_case_clause()
            tableau_ajoute(*cases, case)
            continue
        }

        si apparie(parseuse, GenreLexème.Default) {
            si index_default_clause != -1 {
                parseuse.rapporte_erreur("duplicate default case")
                arrête
            }

            case := parseuse.parse_default_clause()
            index_default_clause = cases.taille
            tableau_ajoute(*cases, case)
            continue
        }

        arrête
    }

    parseuse.consomme(GenreLexème.AccoladeFermante)

    retourne crée_switch_statement(parseuse, discriminant, cases, index_default_clause)
}

parse_case_clause :: fonc (parseuse: *Parseuse) -> *CaseClause
{
    parseuse.consomme()

    test := parseuse.parse_expression()
    parseuse.consomme(GenreLexème.DoublePoint)

    consequent: *BlockStatement
    si apparie_expression(parseuse) || apparie_instruction(parseuse) {
        expressions := parse_bloc(parseuse, parseuse.apparie(GenreLexème.AccoladeOuvrante))
        consequent = crée_block_statement(parseuse, expressions)
    }

    retourne crée_case_clause(parseuse, test, consequent)
}

parse_default_clause :: fonc (parseuse: *Parseuse) -> *DefaultClause
{
    parseuse.consomme()
    parseuse.consomme(GenreLexème.DoublePoint)

    consequent: *BlockStatement
    si apparie_expression(parseuse) || apparie_instruction(parseuse) {
        expressions := parse_bloc(parseuse, parseuse.apparie(GenreLexème.AccoladeOuvrante))
        consequent = crée_block_statement(parseuse, expressions)
    }

    retourne crée_default_clause(parseuse, consequent)
}

parse_bloc_statement_ou_expression :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    si parseuse.apparie(GenreLexème.AccoladeOuvrante) {
        expressions := parse_bloc(parseuse, vrai)
        retourne crée_block_statement(parseuse, expressions)
    }

    si parseuse.apparie_expression() {
        retourne parseuse.parse_expression()
    }

    retourne parseuse.parse_instruction()
}

parse_expression :: fonc (parseuse: *Parseuse, précédence : z32 = 0, associativité : Associativité = Associativité.Gauche) -> *NoeudSyntaxique
{
    saufsi parseuse.apparie_expression() {
        parseuse.rapporte_erreur("Attendu une expression primaire")
        retourne nul
    }

    expression := parseuse.parse_expression_primaire()

    tantque !parseuse.fini() && parseuse.apparie_expression_secondaire() {
        données := données_lexèmes_pour_parsage[parseuse.lexème_courant().genre]

        nouvelle_précédence := données.précédence

        si nouvelle_précédence < précédence {
            arrête
        }

        si nouvelle_précédence == précédence && associativité == Associativité.Gauche {
            arrête
        }

        expression = parseuse.parse_expression_secondaire(expression, nouvelle_précédence, données.associativité)
    }

    retourne expression
}

parse_expression_primaire :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    lexème := parseuse.lexème_courant()

    si parseuse.apparie_expression_unaire() {
        retourne parseuse.parse_expression_unaire()
    }

    discr lexème.genre {
        ChaineLittérale {
            parseuse.consomme()
            retourne crée_literal(parseuse, lexème.texte)
        }
        NombreLittéral {
            parseuse.consomme()
            valeur := parse_nombre_depuis_lexème(lexème)
            retourne crée_literal(parseuse, valeur)
        }
        True {
            parseuse.consomme()
            retourne crée_boolean_literal(parseuse, vrai)
        }
        False {
            parseuse.consomme()
            retourne crée_boolean_literal(parseuse, faux)
        }
        Null {
            parseuse.consomme()
            retourne crée_null_literal(parseuse)
        }
        This {
            parseuse.consomme()
            retourne crée_this_expression(parseuse)
        }
        Identifiant {
            parseuse.consomme()
            retourne crée_identifier(parseuse, lexème.texte)
        }
        ParenthèseOuvrante {
            parseuse.consomme()

            expression := parseuse.parse_expression()

            parseuse.consomme(GenreLexème.ParenthèseFermante)
            retourne expression
        }
        AccoladeOuvrante {
            parseuse.consomme()

            properties: [..]*PropertyDefinition

            tantque !fini(parseuse) {
                si apparie(parseuse, GenreLexème.AccoladeFermante) {
                    arrête
                }

                nom_membre := parse_identifier_reference(parseuse)

                parseuse.consomme(GenreLexème.DoublePoint)

                expression := parseuse.parse_expression()

                property := crée_property_definition(parseuse, nom_membre, expression)
                tableau_ajoute(*properties, property)

                saufsi apparie(parseuse, GenreLexème.Virgule) {
                    arrête
                }

                parseuse.consomme()
            }

            parseuse.consomme(GenreLexème.AccoladeFermante)

            retourne crée_object_expression(parseuse, properties)
        }
        CrochetOuvrant {
            parseuse.consomme()

            si apparie(parseuse, GenreLexème.CrochetFermant) {
                parseuse.consomme()
                éléments: [..]*NoeudSyntaxique
                retourne crée_array_literal(parseuse, éléments)
            }

            éléments := parseuse.parse_expression_virgule()

            parseuse.consomme(GenreLexème.CrochetFermant)

            retourne crée_array_literal(parseuse, éléments)
        }
        Let {
            retourne parse_variable_declaration(parseuse, VariableDeclarationKind.Let)
        }
        Var {
            retourne parse_variable_declaration(parseuse, VariableDeclarationKind.Var)
        }
        Const {
            retourne parse_variable_declaration(parseuse, VariableDeclarationKind.Const)
        }
        Function {
            retourne parse_function_declaration(parseuse)
        }
        sinon {
            parseuse.rapporte_erreur("lexème non géré dans parse_expression_primaire")
        }
    }

    retourne nul
}

/* https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-IdentifierReference */
parse_identifier_reference :: fonc (parseuse: *Parseuse) -> *Identifier
{
    retourne parse_identifiant_yield_ou_await(parseuse, vrai)
}

parse_binding_identifier :: fonc (parseuse: *Parseuse) -> *Identifier
{
    retourne parse_identifiant_yield_ou_await(parseuse, vrai)
}

parse_label_identifier :: fonc (parseuse: *Parseuse, émets_erreur_si_manquant: bool) -> *Identifier
{
    retourne parse_identifiant_yield_ou_await(parseuse, émets_erreur_si_manquant)
}

parse_identifier :: fonc (parseuse: *Parseuse, émets_erreur_si_manquant: bool) -> *Identifier
{
    lexème := parseuse.lexème_courant()

    si apparie_lexème_identifier(parseuse) {
        parseuse.consomme()
        retourne crée_identifier(parseuse, lexème.texte)
    }

    si émets_erreur_si_manquant {
        parseuse.rapporte_erreur("expected an identifier")
        panique("expected an identifier")
    }
    retourne nul
}

apparie_lexème_identifier :: fonc (parseuse: *Parseuse) -> bool
{
    lexème := parseuse.lexème_courant()

    // as, async, from, get, meta, of, set, and target
    lexèmes_autorisés := [GenreLexème.Identifiant, GenreLexème.As, GenreLexème.Async, GenreLexème.From, GenreLexème.Get, GenreLexème.Meta, GenreLexème.Of, GenreLexème.Set, GenreLexème.Target]
    pour lexèmes_autorisés {
        si lexème.genre == it {
            retourne vrai
        }
    }
    retourne faux
}

apparie_lexème_identifier_property :: fonc (parseuse: *Parseuse) -> bool
{
    si apparie_lexème_identifier(parseuse) {
        retourne vrai
    }
    si apparie(parseuse, GenreLexème.Delete) {
        retourne vrai
    }
    retourne faux
}

parse_identifiant_yield_ou_await :: fonc (parseuse: *Parseuse, émets_erreur_si_manquant: bool) -> *Identifier
{
    lexème := parseuse.lexème_courant()

    si lexème.genre == GenreLexème.Yield {
        parseuse.consomme()
        retourne crée_identifier(parseuse, lexème.texte)
    }

    si lexème.genre == GenreLexème.Await {
        parseuse.consomme()
        retourne crée_identifier(parseuse, lexème.texte)
    }

    retourne parse_identifier(parseuse, émets_erreur_si_manquant)
}

donne_opération_binaire_pour_genre_lexème :: fonc (genre: GenreLexème) -> BinaryOperation
{
    discr genre {
        Plus {
            retourne BinaryOperation.Plus
        }
        Moins {
            retourne BinaryOperation.Moins
        }
        Étoile {
            retourne BinaryOperation.Multiplie
        }
        Slash {
            retourne BinaryOperation.Divise
        }
        sinon {
            panique("genre opérateur non-géré")
        }
    }

    retourne BinaryOperation.Plus
}

donne_opération_égalitaire_pour_genre_lexème :: fonc (genre: GenreLexème) -> EqualityOperation
{
    discr genre {
        EstÉgal {
            retourne EqualityOperation.Égal
        }
        NEspaPasÉgal {
            retourne EqualityOperation.Inégal
        }
        EstÉgalStrict {
            retourne EqualityOperation.ÉgalStrict
        }
        NEspaPasÉgalStrict {
            retourne EqualityOperation.InégalStrict
        }
        sinon {
            panique("genre opérateur non-géré")
        }
    }
    retourne EqualityOperation.Égal
}

donne_opération_relationnelle_pour_genre_lexème :: fonc (genre: GenreLexème) -> RelationalOperation
{
    discr genre {
        Inférieur {
            retourne RelationalOperation.Inférieur
        }
        Supérieur {
            retourne RelationalOperation.Supérieur
        }
        InférieurÉgal {
            retourne RelationalOperation.InférieurÉgal
        }
        SupérieurÉgal {
            retourne RelationalOperation.SupérieurÉgal
        }
        sinon {
            panique("genre opérateur non-géré")
        }
    }

    retourne RelationalOperation.Inférieur
}
parse_expression_secondaire :: fonc (parseuse: *Parseuse, gauche: *NoeudSyntaxique, précédence: z32, associativité: Associativité) -> *NoeudSyntaxique
{
    lexème := parseuse.lexème_courant()

    discr lexème.genre {
        Plus,
        Moins,
        Étoile,
        Slash {
            opération := donne_opération_binaire_pour_genre_lexème(lexème.genre)
            parseuse.consomme()
            opérande_droite := parseuse.parse_expression(précédence, associativité)
            retourne crée_binary_expression(parseuse, opération, gauche, opérande_droite)
        }
        Inférieur,
        Supérieur,
        InférieurÉgal,
        SupérieurÉgal {
            opération := donne_opération_relationnelle_pour_genre_lexème(lexème.genre)
            parseuse.consomme()
            opérande_droite := parseuse.parse_expression(précédence, associativité)
            retourne crée_relational_expression(parseuse, opération, gauche, opérande_droite)
        }
        EstÉgal,
        NEspaPasÉgal,
        EstÉgalStrict,
        NEspaPasÉgalStrict {
            opération := donne_opération_égalitaire_pour_genre_lexème(lexème.genre)
            parseuse.consomme()
            opérande_droite := parseuse.parse_expression(précédence, associativité)
            retourne crée_equality_expression(parseuse, opération, gauche, opérande_droite)
        }
        PlusPlus,
        MoinsMoins {
            parseuse.consomme()

            operation := si lexème.genre == GenreLexème.PlusPlus { UpdateOperation.PostfixIncrement } sinon { UpdateOperation.PostfixDecrement }
            update := crée_update_expression(parseuse, gauche, operation)

            si parseuse.apparie_expression_secondaire() {
                retourne parseuse.parse_expression_secondaire(update, précédence, associativité)
            }

            retourne update
        }
        Égal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Assigne, précédence, associativité)
        }
        PlusÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Ajoute, précédence, associativité)
        }
        MoinsÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Soustrait, précédence, associativité)
        }
        ÉtoileÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Multiplie, précédence, associativité)
        }
        SlashÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Divise, précédence, associativité)
        }
        PourcentÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.Modulo, précédence, associativité)
        }
        DécalageGaucheÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.DécalageGauche, précédence, associativité)
        }
        DécalageDroiteÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.DécalageDroite, précédence, associativité)
        }
        EtBinaireÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.EtBinaire, précédence, associativité)
        }
        OuBinaireÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.OuBinaire, précédence, associativité)
        }
        OuExclusifÉgal {
            retourne parse_assignement_expression(parseuse, gauche, AssignmentOperation.OuExBinaire, précédence, associativité)
        }
        Point {
            parseuse.consomme()

            saufsi apparie_lexème_identifier_property(parseuse) {
                parseuse.rapporte_erreur("Attendu un identifiant après '.'")
                retourne nul
            }

            lexème = parseuse.lexème_courant()
            parseuse.consomme()

            propriété := crée_identifier(parseuse, lexème.texte)
            retourne crée_member_expression(parseuse, gauche, propriété, faux)
        }
        ParenthèseOuvrante {
            parseuse.consomme()

            arguments: [..]*NoeudSyntaxique
            saufsi parseuse.apparie(GenreLexème.ParenthèseFermante) {
                arguments = parse_expression_virgule(parseuse)
            }

            parseuse.consomme(GenreLexème.ParenthèseFermante)

            retourne crée_call_expression(parseuse, gauche, arguments)
        }
        CrochetOuvrant {
            parseuse.consomme()

            propriété := parseuse.parse_expression()

            parseuse.consomme(GenreLexème.CrochetFermant)

            retourne crée_member_expression(parseuse, gauche, propriété, vrai)
        }
        EtLogique {
            parseuse.consomme()
            droite := parseuse.parse_expression()
            retourne crée_logical_and(parseuse, gauche, droite)
        }
        OuLogique {
            parseuse.consomme()
            droite := parseuse.parse_expression()
            retourne crée_logical_or(parseuse, gauche, droite)
        }
        Interrogation {
            parseuse.consomme()

            consequent := parseuse.parse_expression()
            parseuse.consomme(GenreLexème.DoublePoint)

            alternate := parseuse.parse_expression()
            retourne crée_conditionnal_expression(parseuse, gauche, consequent, alternate)
        }
        sinon {
            rapporte_erreur(parseuse, lexème, "Genre de lexème non géré dans parse_expression_secondaire\n")
        }
    }

    retourne nul
}

parse_assignement_expression :: fonc (parseuse: *Parseuse, gauche: *NoeudSyntaxique, opération: AssignmentOperation, précédence: z32, associativité: Associativité) -> *AssignmentExpression
{
    parseuse.consomme()
    expression := parseuse.parse_expression(précédence, associativité)
    retourne crée_assignment_expression(parseuse, opération, gauche, expression)
}

parse_expression_virgule :: fonc (parseuse: *Parseuse) -> [..]*NoeudSyntaxique
{
    résultat: [..]*NoeudSyntaxique
    tantque !fini(parseuse) {
        expr := parseuse.parse_expression()

        tableau_ajoute(*résultat, expr)

        saufsi parseuse.apparie(GenreLexème.Virgule) {
            arrête
        }

        parseuse.consomme()
    }
    retourne résultat
}

parse_expression_unaire :: fonc (parseuse: *Parseuse) -> *NoeudSyntaxique
{
    lexème := parseuse.lexème_courant()

    discr lexème.genre {
        Plus {
            parseuse.consomme()
            argument := parseuse.parse_expression_primaire()
            retourne crée_unary_plus_operator(parseuse, argument)
        }
        Moins {
            parseuse.consomme()
            argument := parseuse.parse_expression_primaire()
            retourne crée_unary_minus_operator(parseuse, argument)
        }
        NonBinaire {
            parseuse.rapporte_erreur("opérateur unaire non-géré")
        }
        NonLogique {
            parseuse.consomme()
            argument := parseuse.parse_expression_primaire()
            retourne crée_logical_not(parseuse, argument)
        }
        PlusPlus,
        MoinsMoins {
            parseuse.consomme()
            argument := parseuse.parse_expression_primaire()
            operation := si lexème.genre == GenreLexème.PlusPlus { UpdateOperation.PrefixIncrement } sinon { UpdateOperation.PrefixDecrement }
            retourne crée_update_expression(parseuse, argument, operation)
        }
        Typeof {
            parseuse.consomme()
            argument := parseuse.parse_expression_primaire()
            retourne crée_typeof_operator(parseuse, argument)
        }
        New {
            parseuse.consomme()
            argument := parseuse.parse_expression()
            retourne crée_new_expression(parseuse, argument);
        }
        sinon {
            parseuse.rapporte_erreur("genre de lexème non géré dans parse_expression_unaire")
        }
    }

    retourne nul
}

parse_bloc :: fonc (parseuse: *Parseuse, requiers_accolades: bool) -> [..]*NoeudSyntaxique
{
    si requiers_accolades {
        parseuse.consomme(GenreLexème.AccoladeOuvrante)
    }

    expressions: [..]*NoeudSyntaxique

    tantque !fini(parseuse) {
        parseuse.consomme_point_virgule_potentiel()

        si apparie_expression(parseuse) {
            expression := parse_expression(parseuse)
            parseuse.consomme_point_virgule_potentiel()
            tableau_ajoute(*expressions, expression)
            continue
        }

        si apparie_instruction(parseuse) {
            instruction := parse_instruction(parseuse)
            tableau_ajoute(*expressions, instruction)
            continue
        }

        arrête
    }

    si requiers_accolades {
        parseuse.consomme(GenreLexème.AccoladeFermante)
    }

    retourne expressions
}

rapporte_erreur :: fonc (parseuse: *Parseuse, message: chaine)
{
    lexème := si parseuse.fini() {
        *parseuse.lexèmes[parseuse.lexèmes.taille - 1]
    }
    sinon {
        parseuse.lexème_courant()
    }

    rapporte_erreur(parseuse, lexème, message)
}

rapporte_erreur :: fonc (parseuse: *Parseuse, lexème: *Lexème, message: chaine)
{
    si parseuse.possède_erreur {
        parseuse.consomme()
        retourne
    }

    position := donne_position_source(parseuse.script.source, mémoire(lexème))

    erreur_de_compilation := crée_erreur_de_compilation("Erreur de parsage", message, position)
    parseuse.erreur_de_compilation = erreur_de_compilation
    parseuse.possède_erreur = vrai
}
