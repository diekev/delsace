charge "arbre"
charge "interpr√©teuse"

ECMAString :: chaine

/* ------------------------------------------------------------------------- */
/** \nom Valeur
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
 * \{ */

/* Ceux-l√† ne sont pas dans le standard, ce n'est que pour avoir des types pour l'union. */
UndefinedType :: #opaque z32
NullType :: #opaque z32

Valeur :: union {
    Undefined: UndefinedType
    Null: NullType
    Boolean: bool
    Number: r64
    // BigInt
    String: ECMAString
    // Symbol
    Function: *Function
    Object: *Object
}

/* √Ä FAIRE(language) : index_de(valeur) == Number  */
est_fonction :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Function {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_object :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Object {
            retourne vrai
        }
        sinon {
            retourne est_fonction(valeur)
        }
    }
}

est_nombre :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Number {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_chaine :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        String {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_nulle :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Null {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_undefined :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Undefined {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_true :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

est_false :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne !valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

concat√®ne :: fonc (str_gauche: ECMAString, str_droite: ECMAString) -> Valeur
{
    r√©sultat := enchaine(str_gauche, str_droite)
    retourne Valeur(String = r√©sultat)
}

js_null := Valeur(Null = NullType(0))
js_undefined := Valeur(Undefined = UndefinedType(0))

TypePr√©f√©r√© :: √©num {
    Aucun

}

vers_chaine :: fonc (valeur: Valeur) -> ECMAString
{

}

/* https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive */
vers_primitive :: fonc (valeur: Valeur, type_pr√©f√©r√© := TypePr√©f√©r√©.Aucun) -> Valeur
{
    saufsi valeur.est_object() {
        retourne valeur
    }
}

vers_numeric :: fonc (valeur: Valeur) -> Valeur
{
    valeur_primitive := valeur.vers_primitive()

    // √Ä FAIRE(BigInt)
    // If primValue is a BigInt, return primValue.

    retourne vers_nombre(valeur_primitive)
}

/* https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber */
vers_nombre :: fonc (valeur: Valeur) -> Valeur
{
    // 1. If argument is a Number, return argument.
    si valeur.est_nombre() {
        retourne valeur
    }

    // 2. If argument is either a Symbol or a BigInt, throw a TypeError exception.

    // 3. If argument is undefined, return NaN.

    // 4. If argument is either null or false, return +0ùîΩ.
    si valeur.est_nulle() || valeur.est_false() {
        retourne Valeur(Number = 0.0)
    }

    // 5. If argument is true, return 1ùîΩ.
    si valeur.est_true() {
        retourne Valeur(Number = 1.0)
    }

    // 6. If argument is a String, return StringToNumber(argument).
    // 7. Assert: argument is an Object.
    // 8. Let primValue be ? ToPrimitive(argument, NUMBER).
    // 9. Assert: primValue is not an Object.
    // 10. Return ? ToNumber(primValue).
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Object
 * \{ */

Object :: struct {
    Propri√©t√© :: struct {
        nom: ECMAString
        valeur: Valeur
    }

    propri√©t√©s: [..]Propri√©t√©
}

cr√©e_objet :: fonc () -> *Object
{
    retourne loge(Object)
}

d√©finis_valeur :: fonc (objet: *Object, nom: ECMAString, valeur: Valeur)
{
    tableau_ajoute(*objet.propri√©t√©s, Object.Propri√©t√©(nom, valeur))
}

donne_valeur :: fonc (objet: *Object, nom: ECMAString) -> Valeur
{
    pour objet.propri√©t√©s {
        si it.nom == nom {
            retourne it.valeur
        }
    }
    
    retourne js_undefined
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonction
 * \{ */

Function :: struct {
    empl base: Object

    nom: ECMAString
    corps: *NoeudSyntaxique
}

cr√©e_fonction :: fonc (nom: ECMAString, corps: *NoeudSyntaxique) -> *Function
{
    r√©sultat := loge(Function)
    r√©sultat.nom = nom
    r√©sultat.corps = corps
    retourne r√©sultat
}

/** \} */
