importe Chaine
importe Ensemble
importe Fondation

charge "arbre"
charge "enveloppe"
charge "environment"
charge "évaluation"
charge "interpréteuse"
charge "lexage"
charge "lexèmes"
charge "object_operations"
charge "ordinary_object"
charge "parsage"
charge "realm"
charge "script"
charge "tas_de_mémoire"
charge "terminologie"
charge "types"
charge "valeur"

charge "CodeBinaire/génération_code"
charge "CodeBinaire/instructions"

charge "Objets/array_buffer"
charge "Objets/array"
charge "Objets/boolean"
charge "Objets/console"
charge "Objets/date"
charge "Objets/error"
charge "Objets/function"
charge "Objets/global_object"
charge "Objets/object"
charge "Objets/math"
charge "Objets/number"
charge "Objets/string"

ECMAString :: ChaineUTF16Unique

NaN : r64 : 0r7ff8000000000000

/* ------------------------------------------------------------------------- */
/** \nom Hôte
 * Structure de base pour les applications clientes.
 * \{ */

Hôte :: struct {
    sur_visite_cellules: fonc(*Hôte, *VisiteuseCellule)(rien)
}

visite_cellules_hôte :: fonc (hôte: *Hôte, visiteuse: *VisiteuseCellule)
{
    saufsi hôte.sur_visite_cellules {
        retourne
    }
    hôte.sur_visite_cellules(hôte, visiteuse)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom HostDefined
 * Cette structutre, non-spécifiée, nous sers à tenir les données définis par
 * les hôtes pour les champs [[HostDefined]] définis par le standard.
 * \{ */

HostDefined :: struct {
    données: *rien
    infos: *InfoTypeStructure
}

crée_host_defined :: fonc (données: *$T) -> HostDefined
{
    retourne HostDefined(données, info_de(T))
}

donne_données :: fonc (host_defined: &HostDefined, $T: type_de_données) -> *T
{
    saufsi host_defined.données {
        retourne nul
    }
    assert(est_struct_ou_employeuse_de(host_defined.infos, info_de(T)))
    retourne host_defined.données comme *T
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom MachineVirtuelle
 * Cette structure, non-spécifiée, nous sers à tenir les données pour exécuter
 * des scripts.
 * Chaque client souhaitant exécuter du code JavaScript doit le faire via une
 * instance de MachineVirtuelle.
 * \{ */

MachineVirtuelle :: struct {
    tas_de_mémoire: TasDeMémoire
    hôte: *Hôte
    execution_contexts: [..]*ExecutionContext
    interpréteuse: *Interpréteuse
    utilise_code_binaire: bool

    exception: Valeur
}

initialise_mv :: fonc (hôte: *Hôte, mv: *MachineVirtuelle)
{
    mv.hôte = hôte
    mv.tas_de_mémoire.mv = mv
}

détruit_données_mv :: fonc (mv: *MachineVirtuelle)
{
    éboue(*mv.tas_de_mémoire, TypeÉbouage.RAMASSE_TOUT)
    détruit_données_tas_de_mémoire(*mv.tas_de_mémoire)
    déloge(mv.execution_contexts)
}

empile_execution_context :: fonc (mv: *MachineVirtuelle, execution_context: *ExecutionContext)
{
    tableau_ajoute(*mv.execution_contexts, execution_context)

    si mv.interpréteuse != nul && mv.interpréteuse.sur_execution_context != nul {
        mv.interpréteuse.sur_execution_context(mv.interpréteuse, execution_context)
    }
}

dépile_execution_context :: fonc (mv: *MachineVirtuelle)
{
    assert(mv.execution_contexts.taille > 0)
    mv.execution_contexts.taille -= 1

    si mv.interpréteuse != nul && mv.interpréteuse.sur_execution_context != nul {
        si mv.execution_contexts.taille == 0 {
            mv.interpréteuse.sur_execution_context(mv.interpréteuse, nul)
        }
        sinon {
            mv.interpréteuse.sur_execution_context(mv.interpréteuse, mv.donne_running_execution_context())
        }
    }
}

suspend_running_execution_context :: fonc (mv: *MachineVirtuelle)
{
    suspend(mv.donne_running_execution_context())
}

donne_tas_de_mémoire :: fonc (mv: *MachineVirtuelle) -> *TasDeMémoire
{
    retourne *mv.tas_de_mémoire
}

/* https://tc39.es/ecma262/#current-realm */
donne_current_realm :: fonc (mv: *MachineVirtuelle) -> *Realm
{
    retourne donne_running_execution_context(mv).realm
}

donne_running_execution_context :: fonc (mv: *MachineVirtuelle) -> *ExecutionContext #enligne
{
    retourne mv.execution_contexts[mv.execution_contexts.taille - 1]
}

rassemble_racines :: fonc (mv: *MachineVirtuelle, racines: *[..]*Cellule)
{
    pour mv.execution_contexts {
        ensemble_ajoute(racines, it)
    }

    si mv.exception.est_cellule() {
        ensemble_ajoute(racines, mv.exception.donne_cellule())
    }
}

possède_exception :: fonc (mv: *MachineVirtuelle) -> bool #enligne
{
    retourne mv.exception.est_valide()
}

définis_exception :: fonc (mv: *MachineVirtuelle, completion: CompletionRecord)
{
    saufsi completion.est_throw() {
        retourne
    }
    définis_exception(mv, completion.valeur.V)
}

définis_exception :: fonc (mv: *MachineVirtuelle, valeur: Valeur)
{
    si mv.possède_exception() {
        retourne
    }
    mv.exception = valeur
}

donne_exception :: fonc (mv: *MachineVirtuelle) -> Valeur
{
    résultat := mv.exception
    init_de(Valeur)(*mv.exception)
    retourne résultat
}

possède_exception :: fonc (realm: *Realm) -> bool #enligne
{
    retourne possède_exception(realm.donne_tas_de_mémoire().mv)
}

donne_exception :: fonc (realm: *Realm) -> Valeur #enligne
{
    retourne donne_exception(realm.donne_tas_de_mémoire().mv)
}

possède_exception :: fonc (cellule: *Cellule) -> bool #enligne
{
    retourne possède_exception(cellule.donne_tas_de_mémoire().mv)
}

donne_exception :: fonc (cellule: *Cellule) -> Valeur #enligne
{
    retourne donne_exception(cellule.donne_tas_de_mémoire().mv)
}

/** \} */
