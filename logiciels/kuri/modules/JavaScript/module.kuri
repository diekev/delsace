importe Fondation

charge "arbre"
charge "interpréteuse"
charge "lexage"
charge "lexèmes"
charge "script"
charge "tas_de_mémoire"

ECMAString :: chaine

/* ------------------------------------------------------------------------- */
/** \nom Valeur
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
 * \{ */

/* Ceux-là ne sont pas dans le standard, ce n'est que pour avoir des types pour l'union. */
UndefinedType :: #opaque z32
NullType :: #opaque z32

Valeur :: union {
    Undefined: UndefinedType
    Null: NullType
    Boolean: bool
    Number: r64
    // BigInt
    String: *PrimitiveChaine
    // Symbol
    Function: *Function
    Object: *Object
}

/* À FAIRE(language) : index_de(valeur) == Number  */
est_fonction :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Function {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_object :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Object {
            retourne vrai
        }
        sinon {
            retourne est_fonction(valeur)
        }
    }
}

donne_objet :: fonc (valeur: Valeur) -> *Object
{
    discr valeur {
        Object(objet) {
            retourne objet
        }
        Function(function) {
            retourne function
        }
        sinon {
            retourne nul
        }
    }
}

est_cellule :: fonc (valeur: Valeur) -> bool
{
    retourne valeur.est_object() || valeur.est_chaine()
}

donne_cellule :: fonc (valeur: Valeur) -> *Cellule
{
    discr valeur {
        Object(o) {
            retourne o
        }
        Function(f) {
            retourne f
        }
        String(s) {
            retourne s
        }
        sinon {
            retourne nul
        }
    }
}

est_nombre :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Number {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_chaine :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        String {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_nulle :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Null {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_undefined :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Undefined {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_boolean :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne vrai
        }
        sinon {
            retourne faux
        }
    }
}

est_true :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

est_false :: fonc (valeur: Valeur) -> bool
{
    discr valeur {
        Boolean {
            retourne !valeur.Boolean
        }
        sinon {
            retourne faux
        }
    }
}

concatène :: fonc (str_gauche: ECMAString, str_droite: ECMAString) -> Valeur
{
    résultat := enchaine(str_gauche, str_droite)
    retourne Valeur(String = résultat)
}

js_null := Valeur(Null = NullType(0))
js_undefined := Valeur(Undefined = UndefinedType(0))

TypePréféré :: énum {
    Aucun
}

vers_objet :: fonc (interpréteuse: &Interpréteuse, valeur: Valeur) -> *Object
{
    si valeur.est_object() {
        retourne valeur.donne_objet()
    }

    assert(valeur.est_chaine())
    objet := crée_chaine(*interpréteuse.tas_de_mémoire, interpréteuse.string_prototype, valeur.String)
    retourne Valeur(Object = objet)
}

vers_chaine :: fonc (valeur: Valeur) -> ECMAString
{

}

/* https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive */
vers_primitive :: fonc (valeur: Valeur, type_préféré := TypePréféré.Aucun) -> Valeur
{
    saufsi valeur.est_object() {
        retourne valeur
    }

    panique("to_primitive non-implémenté")
}

/* 7.1.3 ToNumeric ( value )
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumeric */
to_numeric :: fonc (valeur: Valeur) -> Valeur
{
    // 1. Let primValue be ? ToPrimitive(value, NUMBER).
    // 2. If primValue is a BigInt, return primValue.
    // 3. Return ? ToNumber(primValue).
    valeur_primitive := valeur.vers_primitive()

    // À FAIRE(BigInt)
    // If primValue is a BigInt, return primValue.

    retourne vers_nombre(valeur_primitive)
}

/* https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber */
vers_nombre :: fonc (valeur: Valeur) -> Valeur
{
    // 1. If argument is a Number, return argument.
    si valeur.est_nombre() {
        retourne valeur
    }

    // 2. If argument is either a Symbol or a BigInt, throw a TypeError exception.

    // 3. If argument is undefined, return NaN.

    // 4. If argument is either null or false, return +0𝔽.
    si valeur.est_nulle() || valeur.est_false() {
        retourne Valeur(Number = 0.0)
    }

    // 5. If argument is true, return 1𝔽.
    si valeur.est_true() {
        retourne Valeur(Number = 1.0)
    }

    // 6. If argument is a String, return StringToNumber(argument).
    // 7. Assert: argument is an Object.
    // 8. Let primValue be ? ToPrimitive(argument, NUMBER).
    // 9. Assert: primValue is not an Object.
    // 10. Return ? ToNumber(primValue).
    panique("to_number non-implémenté")
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Object
 * \{ */

Object :: struct {
    empl base: Cellule
    type = #type_de_cette_structure
    sur_destruction = sur_destruction_objet
    sur_visite_graphe = sur_visite_graphe_objet

    /* https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-property-attributes */
    Propriété :: struct {
        nom: ECMAString
        valeur: Valeur
        get: fonc(*Object)(Valeur)
        set: fonc(*Object, Valeur)(rien)
    }

    propriétés: [..]Propriété

    prototype: *Object

    /* Table virtuelle. */
    sur_get_prototype_of := ordinary_get_prototype_of
    sur_get_own_property := ordinary_get_own_property
    sur_get := ordinary_get
}

crée_objet :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ObjectPrototype) -> *Object
{
    résultat := tas_de_mémoire.alloue(Object)
    résultat.prototype = prototype
    retourne résultat
}

sur_destruction_objet :: fonc (base: *Cellule)
{
    objet := base comme *Object
    déloge(objet.propriétés)
}

définis_valeur :: fonc (objet: *Object, nom: ECMAString, valeur: Valeur)
{
    propriété := trouve_propriété(objet, nom)
    si propriété {
        propriété.valeur = valeur
        retourne
    }

    tableau_ajoute(*objet.propriétés, Object.Propriété(nom, valeur))
}

get_prototype_of :: fonc (object: *Object) -> *Object
{
    retourne ordinary_get_prototype_of(object)
}

/* 7.3.2 Get
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p */
get :: fonc (object: *Object, property_key: ECMAString) -> CompletionRecord
{
    // À FAIRE : type property_key
    // 1. Return ? O.[[Get]](P, O).
    retourne object.sur_get(object, property_key, Valeur(Object = object))
}

get_own_property :: fonc (object: *Object, property_key: ECMAString) -> Valeur
{
    retourne ordinary_get_own_property(object, property_key)
}

/* 7.3.4 Set
 * https://tc39.es/ecma262/multipage/abstract-operations.html#sec-set-o-p-v-throw */
set :: fonc (object: *Object, property_key: ECMAString, valeur: Valeur, throw: bool @inutilisée) -> CompletionRecord
{
    // À FAIRE : type property_key

    // 1. Let success be ? O.[[Set]](P, V, O).
    // À FAIRE : différentes méthodes pour différents objets
    définis_valeur(object, property_key, valeur)
    // À FAIRE(langage)
    // succès := vrai

    // // 2. If success is false and Throw is true, throw a TypeError exception.
    // si succès == faux && throw == vrai {
    //     panique("exceptions non-implémentées")
    // }

    // 3. Return UNUSED.
    retourne normal_completion(js_undefined)
}

donne_valeur :: fonc (objet: *Object, nom: ECMAString) -> Valeur
{
    propriété := trouve_propriété(objet, nom)
    si propriété {
        retourne propriété.valeur
    }
    
    retourne js_undefined
}

trouve_propriété :: fonc (objet: *Object, nom: ECMAString) -> *Object.Propriété
{
    pour * objet.propriétés {
        si it.nom == nom {
            retourne it
        }
    }
    retourne nul
}

sur_visite_graphe_objet :: fonc (base: *Cellule, visiteuse: *VisiteuseCellule)
{
    cellule_sur_visite_graphe(base, visiteuse)

    objet := base comme *Object

    si objet.prototype {
        visite_graphe(objet.prototype, visiteuse)
    }

    pour objet.propriétés {
        si it.valeur.est_cellule() {
            visite_graphe(it.valeur.donne_cellule(), visiteuse)
        }
    }
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Ordinary Object
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinary-object-internal-methods-and-internal-slots
 * \{ */

/* 10.1.1.1 OrdinaryGetPrototypeOf ( O )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarygetprototypeof */
ordinary_get_prototype_of :: fonc (object: *Object) -> *Object
{
    // Return O.[[Prototype]].
    retourne object.prototype
}

/* 10.1.5.1 OrdinaryGetOwnProperty ( O, P )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinarygetownproperty */
ordinary_get_own_property :: fonc (object: *Object, property_key: ECMAString) -> Valeur
{
    retourne donne_valeur(object, property_key)
    // À FAIRE
    // 1. If O does not have an own property with key P, return undefined.
    // 2. Let D be a newly created Property Descriptor with no fields.
    // 3. Let X be O's own property whose key is P.
    // 4. If X is a data property, then
    // a. Set D.[[Value]] to the value of X's [[Value]] attribute.
    // b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.
    // 5. Else,
    // a. Assert: X is an accessor property.
    // b. Set D.[[Get]] to the value of X's [[Get]] attribute.
    // c. Set D.[[Set]] to the value of X's [[Set]] attribute.
    // 6. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.
    // 7. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.
    // 8. Return D.
}

/* 10.1.8.1 OrdinaryGet ( O, P, Receiver )
 * https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver */
ordinary_get :: fonc (object: *Object, property_key: ECMAString, receiver: Valeur) -> CompletionRecord
{
    // 1. Let desc be ? O.[[GetOwnProperty]](P).
    desc := get_own_property(object, property_key)

    // 2. If desc is undefined, then
    si desc.est_undefined() {
        // a. Let parent be ? O.[[GetPrototypeOf]]().
        parent := get_prototype_of(object)

        // b. If parent is null, return undefined.
        si parent == nul {
            retourne normal_completion(desc)
        }

        // c. Return ? parent.[[Get]](P, Receiver).
        retourne parent.sur_get(parent, property_key, receiver)
    }

    /* À FAIRE : descripteurs */
    // 3. If IsDataDescriptor(desc) is true, return desc.[[Value]].
    // 4. Assert: IsAccessorDescriptor(desc) is true.
    // 5. Let getter be desc.[[Get]].
    // 6. If getter is undefined, return undefined.
    // 7. Return ? Call(getter, Receiver).
    retourne normal_completion(desc)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ObjetChaine
 * \{ */

ObjetChaine :: struct {
    empl objet: Object
    type = #type_de_cette_structure
    sur_visite_graphe = sur_visite_graphe_chaine

    chn: *PrimitiveChaine
}

crée_chaine :: fonc (tas_de_mémoire: *TasDeMémoire, string_prototype: *StringPrototype, chn: *PrimitiveChaine) -> *ObjetChaine
{
    résultat := tas_de_mémoire.alloue(ObjetChaine)
    résultat.prototype = string_prototype
    résultat.chn = chn

    résultat.définis_valeur("length", Valeur(Number = chn.texte.taille comme r64))

    retourne résultat
}

sur_visite_graphe_chaine :: fonc (base: *Cellule, visiteuse: *VisiteuseCellule)
{
    objet_chaine := base comme *ObjetChaine
    sur_visite_graphe_objet(objet_chaine, visiteuse)
    cellule_sur_visite_graphe(objet_chaine.chn, visiteuse)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ObjectPrototype
 * \{ */

ObjectPrototype :: struct {
    empl objet: Object
    type = #type_de_cette_structure
}

crée_object_prototype :: fonc (tas_de_mémoire: *TasDeMémoire) -> *ObjectPrototype
{
    résultat := tas_de_mémoire.alloue(ObjectPrototype)
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom StringPrototype
 * \{ */

StringPrototype :: struct {
    empl objet: Object
    type = #type_de_cette_structure
}

crée_string_prototype :: fonc (tas_de_mémoire: *TasDeMémoire, prototype: *ObjectPrototype) -> *StringPrototype
{
    résultat := tas_de_mémoire.alloue(StringPrototype)
    résultat.prototype = prototype

    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonction
 * \{ */

Function :: struct {
    empl objet: Object
    type = #type_de_cette_structure

    nom: ECMAString
    corps: *NoeudSyntaxique
}

crée_fonction :: fonc (tas_de_mémoire: *TasDeMémoire, nom: ECMAString, corps: *NoeudSyntaxique) -> *Function
{
    résultat := tas_de_mémoire.alloue(Function)
    résultat.nom = nom
    résultat.corps = corps
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom PrimitiveChaine
 * \{ */

PrimitiveChaine :: struct {
    empl objet: Cellule
    type = #type_de_cette_structure
    sur_destruction = sur_destruction_primitive_chaine

    texte: ECMAString
}

crée_chaine :: fonc (tas_de_mémoire: *TasDeMémoire, texte: ECMAString) -> *PrimitiveChaine
{
    résultat := tas_de_mémoire.alloue(PrimitiveChaine)
    résultat.texte = copie_chaine(texte)
    retourne résultat
}

sur_destruction_primitive_chaine :: fonc (base: *Cellule)
{
    primitive := base comme *PrimitiveChaine
    déloge(primitive.texte)
}

/** \} */
