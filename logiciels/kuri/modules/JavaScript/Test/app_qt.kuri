importe Chaine
importe Fondation
importe HTML
importe JavaScript
importe Qt
importe SysFichier

/* ------------------------------------------------------------------------- */
/** \nom Fonction principale.
 * \{ */

principale :: fonc () -> z32
{
    mémoire_entrée := mémoire_utilisée()

    arguments := __arguments_ligne_commande

    /* Création application. */
    taille_arguments := arguments.taille comme z32
    app := QT_cree_application(*taille_arguments, arguments.pointeur)
    diffère QT_detruit_application(app)

    rappel_fermeture: RappelFermetureApp
    rappel_fermeture.mémoire_entrée = mémoire_entrée
    QT_application_sur_fin_boucle_evenement(app, *rappel_fermeture)

    QT_core_application_definis_nom_organisation(vers_qt("delsace"))
    QT_core_application_definis_nom_application(vers_qt("JavaScript"))

    /* Création fenêtre. */
    rappels_fenêtre : RappelsFenetrePrincipale

    fenêtre := QT_cree_fenetre_principale(*rappels_fenêtre)
    diffère QT_detruit_fenetre_principale(fenêtre)

    rappel_sauvegarde: RappelSauvegarde
    rappel_sauvegarde.rappels_fenêtre = *rappels_fenêtre
    raccourcis := QT_shortcut_cree(fenêtre)
    QT_shortcut_definis_touches(raccourcis, QT_Keyboard_Modifier.CTRL, QT_Key.S)
    QT_shortcut_sur_activation(raccourcis, *rappel_sauvegarde)

    QT_widget_definis_titre_fenetre(fenêtre, vers_qt("JavaScript"))
    QT_widget_affiche_maximisee(fenêtre)

    /* Création widgets. */
    widget := QT_cree_widget(nul, fenêtre)
    QT_fenetre_principale_definis_widget_central(fenêtre, widget)

    fonte: QT_Font
    fonte.famille = vers_qt("Monospace")
    feuille_de_style := vers_qt("QPlainTextEdit { background: black; color: white; }")

    éditeur := QT_cree_plain_text_edit(nul, widget)
    QT_widget_definis_feuille_de_style(éditeur, *feuille_de_style)
    QT_widget_definis_fonte(éditeur, *fonte)
    ouvre_fichier(éditeur)

    sortie := QT_cree_plain_text_edit(nul, widget)
    QT_plain_text_edit_definis_lecture_seule(sortie, vrai)
    QT_widget_definis_feuille_de_style(sortie, *feuille_de_style)
    QT_widget_definis_fonte(sortie, *fonte)

    sortie_console := QT_cree_plain_text_edit(nul, widget)
    QT_plain_text_edit_definis_lecture_seule(sortie_console, vrai)
    QT_widget_definis_feuille_de_style(sortie_console, *feuille_de_style)
    QT_widget_definis_fonte(sortie_console, *fonte)

    rappels_fenêtre.éditeur = éditeur
    rappels_fenêtre.sortie = sortie
    rappels_fenêtre.sortie_console = sortie_console

    dispv := QT_cree_vbox_layout(QT_widget_nul())
    QT_layout_ajoute_widget(dispv, sortie)
    QT_layout_ajoute_widget(dispv, sortie_console)

    disp := QT_cree_hbox_layout(widget)
    QT_layout_ajoute_widget(disp, éditeur)
    QT_box_layout_ajoute_layout(disp, dispv)

    retourne QT_application_exec(app)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Sur fermeture application.
 * \{ */

RappelFermetureApp :: struct {
    empl base: QT_Rappel_Generique

    mémoire_entrée: z64

    sur_rappel = sur_fermeture_application
}

sur_fermeture_application :: fonc (base: *QT_Rappel_Generique)
{
    rappel := base comme *RappelFermetureApp
    imprime("mémoire_utilisée %\n", mémoire_utilisée() - rappel.mémoire_entrée)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Données fenêtre principale.
 * \{ */

RappelsFenetrePrincipale :: struct {
    empl base : QT_Rappels_Fenetre_Principale

    éditeur: *QT_PlainTextEdit
    sortie: *QT_PlainTextEdit
    sortie_console: *QT_PlainTextEdit
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Sauvegarde/Évaluation du fichier de test.
 * \{ */

RappelSauvegarde :: struct {
    empl base: QT_Rappel_Generique

    rappels_fenêtre: *RappelsFenetrePrincipale

    sur_rappel = sur_rappel_sauvegarde
}

ouvre_fichier :: fonc (éditeur: *QT_PlainTextEdit)
{
    contenu := contenu_fichier_texte("/tmp/test.js")
    qcontenu := contenu.vers_qt()
    QT_plain_text_edit_definis_texte(éditeur, *qcontenu)
    déloge(contenu)
}

sauvegarde_fichier :: fonc (contenu: chaine)
{
    chemin := "/tmp/test.js"
    fichier := tente ouvre_fichier_crée_si_non_existant(CheminFichier(chemin), pour_écriture_tronquée) piège err {
        imprime("%\n", err)
        retourne
    }

    diffère _ := ferme(*fichier)

    _ := écris(*fichier, contenu)
}

Console :: struct {
    empl enveloppable: Enveloppable
    sortie: *QT_PlainTextEdit
    sur_création_enveloppe = console_sur_création_enveloppe

    historique: chaine
}

console_sur_création_enveloppe :: fonc (base: *Enveloppable @inutilisée, enveloppe: *Enveloppe)
{
    fonction_native_log :: fonc (object: *Object @inutilisée, interpréteuse: &Interpréteuse @inutilisée, this_value: Valeur, arguments: []Valeur) -> CompletionRecord
    {
        envellope_console := this_value.donne_objet() comme *Enveloppe
        console := envellope_console.enveloppable comme *Console

        enchaineuse: Enchaineuse
        initialise_enchaineuse(*enchaineuse)
        diffère détruit_tampons(*enchaineuse)

        ajoute_au_tampon(*enchaineuse, console.historique)

        pour arguments {
            ajoute_au_tampon(*enchaineuse, it)
        }
        ajoute_au_tampon(*enchaineuse, "\n")

        texte := chaine_depuis_enchaineuse(*enchaineuse)
        déloge(console.historique)
        console.historique = texte

        qtexte := texte.vers_qt()

        sortie := console.sortie
        QT_plain_text_edit_definis_texte(sortie, *qtexte)

        retourne normal_completion(js_undefined)
    }

    enveloppe.type = Console
    enveloppe.ajoute_fonction_native("log", fonction_native_log)
}

/* ------------------------------------------------------------------------- */
/** \nom ObjetHTML
 * \{ */

ObjetHTML :: struct {
    empl enveloppable: Enveloppable
    sur_création_enveloppe = objet_html_sur_création_enveloppe

    enveloppe_document: EnveloppeDocument
}

objet_html_sur_création_enveloppe :: fonc (base: *Enveloppable @inutilisée, enveloppe: *Enveloppe)
{
    fonction_native_ouvre_document :: fonc (object: *Object, interpréteuse: &Interpréteuse, this_value: Valeur, arguments: []Valeur) -> CompletionRecord
    {
        envellope_html := this_value.donne_objet() comme *Enveloppe
        html := envellope_html.enveloppable comme *ObjetHTML

        si arguments.taille == 0 {
            retourne lance_type_error(interpréteuse, "ouvre_document requiers 1 argument")
        }

        saufsi arguments[0].est_chaine() {
            retourne lance_type_error(interpréteuse, "argument n'est pas une chaine")
        }

        texte := arguments[0].String.texte
        contenu := contenu_fichier_texte(texte)

        parsat := parse_document(contenu)
        html.enveloppe_document.document = parsat.document

        tas_de_mémoire := object.donne_tas_de_mémoire()
        document := crée_enveloppe(tas_de_mémoire, *html.enveloppe_document)
        retourne normal_completion(Valeur(Object = document))
    }

    enveloppe.type = ObjetHTML
    enveloppe.ajoute_fonction_native("ouvre_document", fonction_native_ouvre_document)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EnveloppeDocument
 * \{ */

EnveloppeDocument :: struct {
    empl enveloppable: Enveloppable
    sur_création_enveloppe = enveloppe_document_sur_création_enveloppe

    document: *Document

    enveloppe_élément: EnveloppeÉlément
}

enveloppe_document_sur_création_enveloppe :: fonc (base: *Enveloppable @inutilisée, enveloppe: *Enveloppe)
{
    fonction_native_get_element_by_id :: fonc (object: *Object @inutilisée, interpréteuse: &Interpréteuse, this_value: Valeur, arguments: []Valeur) -> CompletionRecord
    {
        envellope := this_value.donne_objet() comme *Enveloppe
        enveloppe_document := envellope.enveloppable comme *EnveloppeDocument
        document := enveloppe_document.document

        si arguments.taille == 0 {
            retourne lance_type_error(interpréteuse, "getElementByID requiers 1 argument")
        }

        saufsi arguments[0].est_chaine() {
            retourne lance_type_error(interpréteuse, "argument n'est pas une chaine")
        }

        texte := arguments[0].String.texte

        chn := crée_chaine_utf16(texte)
        diffère détruit_chaine(chn)

        élément := document.get_element_by_id(chn)

        saufsi élément {
            retourne normal_completion(js_null)
        }

        enveloppe_document.enveloppe_élément.élément = élément

        tas_de_mémoire := envellope.donne_tas_de_mémoire()
        objet_élément := crée_enveloppe(tas_de_mémoire, *enveloppe_document.enveloppe_élément)
        retourne normal_completion(Valeur(Object = objet_élément))
    }

    enveloppe.type = EnveloppeDocument
    enveloppe.ajoute_fonction_native("getElementById", fonction_native_get_element_by_id)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom EnveloppeDocument
 * \{ */

EnveloppeÉlément :: struct {
    empl enveloppable: Enveloppable
    sur_création_enveloppe = enveloppe_élément_sur_création_enveloppe

    élément: *Élément
}

enveloppe_élément_sur_création_enveloppe :: fonc (base: *Enveloppable @inutilisée, enveloppe: *Enveloppe)
{
    fonction_native_get_element_by_class_name :: fonc (object: *Object, interpréteuse: &Interpréteuse, this_value: Valeur, arguments: []Valeur) -> CompletionRecord
    {
        envellope := this_value.donne_objet() comme *Enveloppe
        enveloppe_élément := envellope.enveloppable comme *EnveloppeÉlément
        élément := enveloppe_élément.élément

        si arguments.taille == 0 {
            retourne lance_type_error(interpréteuse, "getElementsByClassName requiers 1 argument")
        }

        saufsi arguments[0].est_chaine() {
            retourne lance_type_error(interpréteuse, "argument n'est pas une chaine")
        }

        texte := arguments[0].String.texte

        imprime("getElementsByClassName : %\n", texte)

        retourne normal_completion(js_null)
    }

    enveloppe.type = EnveloppeÉlément
    enveloppe.ajoute_fonction_native("getElementsByClassName", fonction_native_get_element_by_class_name)
}

/** \} */

fonction_native_éboue :: fonc (object: *Object @inutilisée, interpréteuse: &Interpréteuse, this_value: Valeur @inutilisée, arguments: []Valeur @inutilisée) -> CompletionRecord
{
    imprime("<<<<< ébouage forcé\n")
    éboue(interpréteuse.donne_tas_de_mémoire())
    imprime(">>>>> ébouage forcé\n")
    retourne normal_completion(js_undefined)
}

RappelsHôteTest :: struct {
    empl base: RappelsHôte

    console: Console
    html: ObjetHTML
}

crée_propriétés_hôte_objet_global :: fonc(base: *RappelsHôte, global: *Object)
{
    rappels := base comme *RappelsHôteTest

    global.ajoute_fonction_native("rm", fonction_native_éboue)
    global.ajoute_objet_natif("console", *rappels.console)
    global.ajoute_objet_natif("html", *rappels.html)
}

sur_rappel_sauvegarde :: fonc (base: *QT_Rappel_Generique)
{
    rappel := base comme *RappelSauvegarde
    rappels_fenêtre := rappel.rappels_fenêtre

    éditeur := rappels_fenêtre.éditeur
    sortie := rappels_fenêtre.sortie

    texte := QT_plain_text_edit_donne_texte(éditeur)
    contenu := texte.vers_kuri()

    sauvegarde_fichier(contenu)

    mv: MachineVirtuelle
    diffère détruit_données_mv(*mv)
    initialise_mv(*mv)

    diffère éboue(donne_tas_de_mémoire(*mv))

    rappels_hôte: RappelsHôteTest
    rappels_hôte.console.sortie = rappels_fenêtre.sortie_console
    rappels_hôte.crée_propriétés_hôte_objet_global = crée_propriétés_hôte_objet_global

    realm := initialise_host_defined_realm(*mv, *rappels_hôte)

    script: *Script
    discr parse_script(contenu, realm) {
        Ok(s) {
            script = s
        }
        Erreur(e) {
            chn := e.message.vers_qt()
            QT_plain_text_edit_definis_texte(sortie, *chn)
            déloge(e.message)
            retourne
        }
        sinon {
            chn := "Erreur inconnue".vers_qt()
            QT_plain_text_edit_definis_texte(sortie, *chn)
            retourne
        }
    }

    résultat := script_evaluation(script)

    texte_résultat := imprime_chaine("%\n", get_value(realm, résultat.valeur))
    diffère déloge(texte_résultat)

    chn := texte_résultat.vers_qt()
    QT_plain_text_edit_definis_texte(sortie, *chn)
}

/** \} */
