importe Fondation
importe Numérique
importe Unicode

TexteSource :: struct {
    texte: chaine

    /* Les lexèmes du script, les lexèmes des noeuds sont des adresses dans ce tableau. */
    lexèmes: [..]Lexème @NeVisitePas
}

détruit_données_texte_source :: fonc (source: *TexteSource)
{
    déloge(source.texte)
    déloge(source.lexèmes)
}

PositionSource :: struct {
    texte_ligne: chaine
    ligne: z32
    colonne: z32
}

donne_position_source :: fonc (texte: *TexteSource, lexème: &Lexème) -> PositionSource
{
    résultat: PositionSource

    décalage_lexème := (lexème.texte.pointeur - texte.texte.pointeur)

    si décalage_lexème < 0 || décalage_lexème >= texte.texte.taille {
        retourne résultat
    }

    /* Compte les lignes. */
    début_ligne := texte.texte.pointeur
    décalage := début_ligne
    ligne := 0
    pour texte.texte {
        si it == '\n' {
            début_ligne = décalage + 1
            ligne += 1
        }

        décalage += 1
        si décalage >= lexème.texte.pointeur {
            arrête
        }
    }

    résultat.ligne = ligne
    résultat.colonne = (lexème.texte.pointeur - début_ligne) comme z32

    résultat.texte_ligne = construit_chaine(début_ligne, 0)

    fin_texte := texte.texte.pointeur + texte.texte.taille
    tantque début_ligne < fin_texte {
        si mémoire(début_ligne) == '\n' {
            arrête
        }

        résultat.texte_ligne.taille += 1
        début_ligne += 1
    }

    retourne résultat
}

crée_texte_source :: fonc (texte: chaine) -> TexteSource
{
    résultat : TexteSource = ---
    résultat.texte = copie_chaine(texte)
    retourne résultat
}

/* ------------------------------------------------------------------------- */
/** \nom 16.1.4 Script Record.
 * https://tc39.es/ecma262/#sec-script-records
 * \{ */

#portée_fichier

table_virtuelle_script := TableVirtuelleCellule(classe = Script, sur_destruction = sur_destruction_script)

#portée_export

Script :: struct {
    empl base: Cellule
    table = *table_virtuelle_script

    source: TexteSource @NeVisitePas

    realm: *Realm

    /* Arbre syntaxique. */
    ecma_script_code: *Programme @NeVisitePas

    host_defined: HostDefined
}

initialise_script :: fonc (résultat: *Script, realm: *Realm, source: TexteSource, script: *Programme, host_defined: HostDefined)
{
    résultat.source = source
    résultat.realm = realm
    résultat.ecma_script_code = script
    résultat.host_defined = host_defined
}

sur_destruction_script :: fonc (base: *Cellule)
{
    script := base.vérifie_comme(Script)
    détruit_données_script(script)
}

détruit_données_script :: fonc (script: *Script)
{
    détruit_données_texte_source(*script.source)
    si script.ecma_script_code {
        détruit_arbre(script.ecma_script_code)
    }
}

/* 16.1.5 ParseScript ( sourceText, realm, hostDefined )
 * https://tc39.es/ecma262/#sec-parse-script */
parse_script :: fonc (source_texte: chaine, realm: *Realm, host_defined := HostDefined()) -> Résultat(*Script, *SyntaxError)
{
    tas_de_mémoire := realm.donne_tas_de_mémoire()

    source := crée_texte_source(source_texte)

    // 1. Let script be ParseText(sourceText, Script).
    script := parse_text(realm, *source, GoalSymbol.Script)
    discr (script) {
        Erreur(e) {
            // 2. If script is a List of errors, return script.
            retourne e
        }
        Ok(noeud) {
            assert(noeud.type == Programme)
            // 3. Return Script Record { [[Realm]]: realm, [[ECMAScriptCode]]: script, [[LoadedModules]]: « », [[HostDefined]]: hostDefined }.
            résultat := tas_de_mémoire.alloue(Script)
            initialise_script(résultat, realm, source, noeud comme *Programme, host_defined)
            retourne résultat
        }
        sinon {}
    }

    panique("aucune valeur de retour pour parse_script")
}

/* 16.1.6 ScriptEvaluation ( scriptRecord )
 * https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation */
script_evaluation :: fonc (script_record: *Script) -> CompletionRecord
{
    tas_de_mémoire := script_record.donne_tas_de_mémoire()
    mv := tas_de_mémoire.donne_mv()

    // 1. Let globalEnv be scriptRecord.[[Realm]].[[GlobalEnv]].
    global_env := script_record.realm.global_environment

    // 2. Let scriptContext be a new ECMAScript code execution context.
    script_context := crée_execution_context(tas_de_mémoire)

    // 3. Set the Function of scriptContext to null.
    script_context.function = nul

    // 4. Set the Realm of scriptContext to scriptRecord.[[Realm]].
    script_context.realm = script_record.realm

    // 5. Set the ScriptOrModule of scriptContext to scriptRecord.
    script_context.script_or_module = script_record

    // 6. Set the VariableEnvironment of scriptContext to globalEnv.
    script_context.variable_environment = global_env

    // 7. Set the LexicalEnvironment of scriptContext to globalEnv.
    script_context.lexical_environment = global_env

    // 8. Set the PrivateEnvironment of scriptContext to null.
    script_context.private_environment = nul

    // 9. Suspend the running execution context.
    mv.suspend_running_execution_context()

    // 10. Push scriptContext onto the execution context stack; scriptContext is now the running execution context.
    mv.empile_execution_context(script_context)

    // 11. Let script be scriptRecord.[[ECMAScriptCode]].
    script := script_record.ecma_script_code

    // 12. Let result be Completion(GlobalDeclarationInstantiation(script, globalEnv)).
    résultat := global_declaration_instantiation(script_record.realm, script, global_env)

    // 13. If result is a normal completion, then
    si résultat.est_normal() {
        // a. Set result to Completion(Evaluation of script).
        interpréteuse: Interpréteuse
        interpréteuse.mv = mv
        résultat = exécute(*interpréteuse, script)

        // À FAIRE : b. If result is a normal completion and result.[[Value]] is EMPTY, then
        // i. Set result to NormalCompletion(undefined).
    }

    // 14. Suspend scriptContext and remove it from the execution context stack.
    mv.suspend_running_execution_context()
    mv.dépile_execution_context()

    // 15. Assert: The execution context stack is not empty.
    assert(mv.execution_contexts.taille != 0)

    // 16. À FAIRE : Resume the context that is now on the top of the execution context stack as the running execution context.

    // 17. Return ? result.
    retourne résultat
}

/* 16.1.7 GlobalDeclarationInstantiation( script, env )
 * https://tc39.es/ecma262/#sec-globaldeclarationinstantiation */
global_declaration_instantiation :: fonc (realm: *Realm, script: *Programme, env: *GlobalEnvironment) -> CompletionRecord
{
    // À FAIRE : complète
    // 1. Let lexNames be the LexicallyDeclaredNames of script.
    // 2. Let varNames be the VarDeclaredNames of script.
    // 3. For each element name of lexNames, do
        // a. If env.HasVarDeclaration(name) is true, throw a SyntaxError exception.
        // b. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.
        // c. Let hasRestrictedGlobal be ? env.HasRestrictedGlobalProperty(name).
        // d. If hasRestrictedGlobal is true, throw a SyntaxError exception.
    // 4. For each element name of varNames, do
        // a. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.
    // 5. Let varDeclarations be the VarScopedDeclarations of script.
    // 6. Let functionsToInitialize be a new empty List.
    // 7. Let declaredFunctionNames be a new empty List.
    // 8. For each element d of varDeclarations, in reverse List order, do
        // a. If d is not either a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
            // i. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.
            // ii. NOTE: If there are multiple function declarations for the same name, the last declaration is used.
            // iii. Let fn be the sole element of the BoundNames of d.
            // iv. If declaredFunctionNames does not contain fn, then
                // 1. Let fnDefinable be ? env.CanDeclareGlobalFunction(fn).
                // 2. If fnDefinable is false, throw a TypeError exception.
                // 3. Append fn to declaredFunctionNames.
                // 4. Insert d as the first element of functionsToInitialize.
    // 9. Let declaredVarNames be a new empty List.
    // 10. For each element d of varDeclarations, do
        // a. If d is either a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
            // i. For each String vn of the BoundNames of d, do
                // 1. If declaredFunctionNames does not contain vn, then
                    // a. Let vnDefinable be ? env.CanDeclareGlobalVar(vn).
                    // b. If vnDefinable is false, throw a TypeError exception.
                    // c. If declaredVarNames does not contain vn, then
                        // i. Append vn to declaredVarNames.

    // 11. NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.

    // À FAIRE : 12. NOTE: Annex B.3.2.2 adds additional steps at this point.

    // 13. Let lexDeclarations be the LexicallyScopedDeclarations of script.
    lex_declarations := donne_lexically_scoped_declarations(script)
    diffère déloge(lex_declarations)

    // 14. Let privateEnv be null.
    private_env: *PrivateEnvironment

    // 15. For each element d of lexDeclarations, do
    pour lex_declarations {
        // a. NOTE: Lexically declared names are only instantiated here but not initialized.

        // b. For each element dn of the BoundNames of d, do
        pour dn dans it.expressions {
            assert(dn.id.type == Identifier)
            name := (dn.id comme *Identifier).nom

            // i. If IsConstantDeclaration of d is true, then
            si it.nature == VariableDeclarationKind.Const {
                // 1. Perform ? env.CreateImmutableBinding(dn, true).
                completion := env.create_immutable_binding(realm, name, vrai)
                saufsi completion.est_normal() {
                    retourne completion
                }
            }
            // ii. Else,
            sinon {
                // 1. Perform ? env.CreateMutableBinding(dn, false).
                env.create_mutable_binding(name, faux)
            }
        }
    }

    // 16. For each Parse Node f of functionsToInitialize, do
    pour script.enfants {
        saufsi it.type == FunctionDeclaration {
            continue
        }

        function := it comme *FunctionDeclaration
        si function.id == nul {
            continue
        }

        // a. Let fn be the sole element of the BoundNames of f.
        fn := function.id.nom

        // b. Let fo be InstantiateFunctionObject of f with arguments env and privateEnv.
        fo := instantiate_function_object(realm, function, env, private_env)
    
        // c. Perform ? env.CreateGlobalFunctionBinding(fn, fo, false).
        completion := env.create_global_function_binding(fn, Valeur(Object = fo), faux)
        saufsi completion.est_normal() {
            retourne completion
        }
    }

    // 17. For each String vn of declaredVarNames, do
        // a. Perform ? env.CreateGlobalVarBinding(vn, false).

    // 18. Return unused.
    retourne normal_completion(js_undefined)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Erreur de compilation.
 * \{ */

crée_erreur_de_compilation :: fonc (realm: *Realm, message: chaine, position: PositionSource) -> *SyntaxError
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    ligne := position.texte_ligne

    ajoute_au_tampon(*enchaineuse, message, "\n\n")

    ligne_pour_erreur := donne_ligne_pour_erreur(ligne, position.colonne)
    imprime_dans_enchaineuse(*enchaineuse, " % |%\n", position.ligne + 1, ligne_pour_erreur)

    /* +2 pour les espaces autour du nombre de la ligne. */
    pour magnitude_décimale(position.ligne + 1) + 2 {
        ajoute_au_tampon(*enchaineuse, " ")
    }
    ajoute_au_tampon(*enchaineuse, "| ")

    index_colonne := ligne_pour_erreur.index_colonne
    tantque index_colonne < position.colonne {
        nombre_octets := nombre_octets_utf8(*ligne[index_colonne])
        si nombre_octets == 0 {
            // À FAIRE : déplace ceci dans la lexeuse
            nombre_octets = 1
        }

        si ligne[index_colonne] == '\t' {
            ajoute_au_tampon(*enchaineuse, "\t")
        }
        sinon {
            ajoute_au_tampon(*enchaineuse, " ")
        }

        index_colonne += nombre_octets
    }
    ajoute_au_tampon(*enchaineuse, "^\n\n")

    retourne crée_erreur_de_parsage(realm, chaine_depuis_enchaineuse(*enchaineuse))
}

TroncageLigne :: énum {
    /* La ligne ne fut pas tronquée. */
    AUCUN
    /* La ligne fut tronquée à la fin. */
    FIN
    /* La ligne fut tronquée au début et à la fin. */
    AUTOUR
}

LignePourErreur :: struct {
    texte: chaine
    index_colonne: z64
    troncage: TroncageLigne
}

imprime_ligne_pour_erreur :: fonc (enchaineuse: *Enchaineuse, ligne: *LignePourErreur)
{
    saufsi ligne {
        retourne
    }

    si ligne.troncage == TroncageLigne.AUTOUR {
        ajoute_au_tampon(enchaineuse, " ... ")
    }
    ajoute_au_tampon(enchaineuse, ligne.texte)
    si ligne.troncage != TroncageLigne.AUCUN {
        ajoute_au_tampon(enchaineuse, " ... ")
    }
} @FormattageImpression

donne_ligne_pour_erreur :: fonc (texte: chaine, colonne: z64) -> LignePourErreur
{
    résultat: LignePourErreur

    MAX_CARACTÈRES_PAR_LIGNE :: 80

    si texte.taille > MAX_CARACTÈRES_PAR_LIGNE {
        décalage := MAX_CARACTÈRES_PAR_LIGNE / 2

        si colonne < décalage {
            ligne_coupée: chaine
            ligne_coupée.pointeur = texte.pointeur
            ligne_coupée.taille = MAX_CARACTÈRES_PAR_LIGNE

            résultat.texte = ligne_coupée
            résultat.troncage = TroncageLigne.FIN
            retourne résultat
        }

        /* Enlève 5 pour le " ... " au début de l'impression. */
        index_colonne := colonne - décalage - 5
        ligne_coupée: chaine
        ligne_coupée.pointeur = texte.pointeur + colonne - décalage
        ligne_coupée.taille = décalage * 2

        résultat.texte = ligne_coupée
        résultat.index_colonne = index_colonne
        résultat.troncage = TroncageLigne.AUTOUR
        retourne résultat
    }

    résultat.texte = texte
    retourne résultat
}

/** \} */

GoalSymbol :: énum {
    Script
    StringNumericLiteral
}

/* 11.1.6 Static Semantics: ParseText ( sourceText, goalSymbol )
 * https://tc39.es/ecma262/#sec-parsetext */
parse_text :: fonc (realm: *Realm, source_text: *TexteSource, goal_symbol: GoalSymbol) -> Résultat(*NoeudSyntaxique, *SyntaxError)
{
    opt_erreur := lèxe(realm, source_text)
    si opt_erreur.possède_valeur() {
        retourne opt_erreur.Quelque
    }

    discr parse(realm, source_text, goal_symbol) {
        Ok(noeud) {
            retourne noeud
        }
        Erreur(e) {
            retourne e
        } 
        sinon {}
    }

    panique("Aucun résultat dans parse_text")
}
