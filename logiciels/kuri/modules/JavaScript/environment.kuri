/* ------------------------------------------------------------------------- */
/** \nom Environment Record
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-environment-records
 * \{ */

Environment :: struct {
    empl cellule: Cellule

    outer_environment: *Environment

    sur_has_binding: fonc(*Environment, ECMAString, *z32)(bool)
    sur_create_immutable_binding: fonc(*Environment, *Realm, ECMAString, bool)(bool)
    sur_create_mutable_binding: fonc(*Environment, *Realm, ECMAString, bool)(rien)
    sur_initialize_binding: fonc(*Environment, ECMAString, Valeur)(rien)
    sur_get_binding_value: fonc(*Environment, *Realm, ECMAString, bool)(Valeur)
    sur_set_mutable_binding: fonc(*Environment, *Realm, ECMAString, Valeur, bool)(rien)
    sur_with_base_object: fonc(*Environment)(Valeur)
    sur_create_global_function_binding: fonc(*Environment, ECMAString, Valeur, bool)(rien)
    sur_has_this_binding: fonc(*Environment)(bool)
    sur_get_this_binding: fonc(*Environment, *Realm)(Valeur)
}

has_binding :: fonc (environment: *Environment, nom: ECMAString, index : *z32 = nul) -> bool
{
    assert(environment.sur_has_binding != nul)
    retourne environment.sur_has_binding(environment, nom, index)
}

set_mutable_binding :: fonc (environment: *Environment, realm: *Realm, nom: ECMAString, valeur: Valeur, strict: bool)
{
    assert(environment.sur_set_mutable_binding != nul)
    environment.sur_set_mutable_binding(environment, realm, nom, valeur, strict)
}

create_immutable_binding :: fonc (environment: *Environment, realm: *Realm, nom: ECMAString, strict: bool) -> bool
{
    assert(environment.sur_create_immutable_binding != nul)
    retourne environment.sur_create_immutable_binding(environment, realm, nom, strict)
}

create_mutable_binding :: fonc (environment: *Environment, realm: *Realm, nom: ECMAString, supprimable: bool)
{
    assert(environment.sur_create_mutable_binding != nul)
    environment.sur_create_mutable_binding(environment, realm, nom, supprimable)
}

initialize_binding :: fonc (environment: *Environment, nom: ECMAString, valeur: Valeur)
{
    assert(environment.sur_initialize_binding != nul)
    environment.sur_initialize_binding(environment, nom, valeur)
}

get_binding_value :: fonc (environment: *Environment, realm: *Realm, nom: ECMAString, strict: bool) -> Valeur
{
    assert(environment.sur_get_binding_value != nul)
    retourne environment.sur_get_binding_value(environment, realm, nom, strict)
}

with_base_object :: fonc (environment: *Environment) -> Valeur
{
    assert(environment.sur_with_base_object != nul)
    retourne environment.sur_with_base_object(environment)
}

create_global_function_binding :: fonc (environment: *Environment, N: ECMAString, V: Valeur, D: bool)
{
    assert(environment.sur_create_global_function_binding != nul)
    environment.sur_create_global_function_binding(environment, N, V, D)
}

has_this_binding :: fonc (environment: *Environment) -> bool
{
    assert(environment.sur_has_this_binding != nul)
    retourne environment.sur_has_this_binding(environment)
}

get_this_binding :: fonc (environment: *Environment, realm: *Realm) -> Valeur
{
    assert(environment.sur_get_this_binding != nul)
    retourne environment.sur_get_this_binding(environment, realm)
}

/* 9.1.2.1 GetIdentifierReference
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-getidentifierreference */
get_identifier_reference :: fonc (interpréteuse: *Interpréteuse, environment: *Environment, nom: *PrimitiveChaine, strict: bool) -> ReferenceRecord
{
    // NOTE : Nous utilisons une boucle au lieu d'appels récursifs comme spécifié.
    //        La première étape spécifiée est faite à la fin.

    récursion := 0

    tantque environment != nul {
        index := -1

        // 2. Let exists be ? env.HasBinding(name).
        exists := has_binding(environment, nom.texte, *index)
        si interpréteuse.possède_exception() {
            retourne référence_non_résolvable(Valeur(String = nom), strict)
        }

        // 3. If exists is true, then
        si exists {
            // a. Return the Reference Record { [[Base]]: env, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: EMPTY }.
            résultat: ReferenceRecord
            résultat.base = environment
            résultat.referenced_name = Valeur(String = nom)
            résultat.strict = strict

            si index != -1 {
                assert(est_declarative_environment(environment))
                coordonnée: CoordonnéeEnvironnement
                coordonnée.index = index
                coordonnée.sauts = récursion
                résultat.coordonnée = coordonnée
            }

            retourne résultat
        }

        // 4. Else,
        // a. Let outer be env.[[OuterEnv]].
        outer := environment.outer_environment
        // b. Return ? GetIdentifierReference(outer, name, strict).
        environment = outer

        récursion += 1
    }

    // 1. If env is null, then
    // a. Return the Reference Record { [[Base]]: UNRESOLVABLE, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: EMPTY }.
    retourne référence_non_résolvable(Valeur(String = nom), strict)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Declarative Environment Record
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records
 * \{ */

#portée_fichier

table_virtuelle_decl_env := TableVirtuelleCellule(classe = DeclarativeEnvironment, sur_destruction = declarative_environment_sur_destruction)

declarative_environment_sur_destruction :: fonc (base: *Cellule)
{
    env := base.vérifie_comme(DeclarativeEnvironment)
    déloge(env.bindings)
}

#portée_export

DeclarativeEnvironment :: struct {
    empl base: Environment

    Binding :: struct {
        nom: ECMAString
        valeur: Valeur
        mutable: bool
        initialisé: bool
        peut_être_détruit_par_delete: bool
        strict: bool
    }

    bindings: [..]Binding

    /* Cellule */
    table = *table_virtuelle_decl_env

    /* Environment */
    sur_has_binding = declarative_environment_has_binding
    sur_create_immutable_binding = declarative_environment_create_immutable_binding
    sur_create_mutable_binding = declarative_environment_create_mutable_binding
    sur_initialize_binding = declarative_environment_initialize_binding
    sur_get_binding_value = declarative_environment_get_binding_value
    sur_set_mutable_binding = declarative_environment_set_mutable_binding
    sur_with_base_object = declarative_environment_with_base_object
    sur_has_this_binding = declarative_environment_has_this_binding
}

est_declarative_environment :: fonc (environment: *Environment) -> bool
{
    retourne environment.donne_classe() == DeclarativeEnvironment || environment.donne_classe() == FunctionEnvironment
}

/* 9.1.2.2 NewDeclarativeEnvironment ( E )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-newdeclarativeenvironment */
new_declarative_environment :: fonc (tas_de_mémoire: *TasDeMémoire, environment: *Environment) -> *DeclarativeEnvironment
{
    // 1. Let env be a new Declarative Environment Record containing no bindings.
    env := tas_de_mémoire.alloue(DeclarativeEnvironment)

    // 2. Set env.[[OuterEnv]] to E.
    env.outer_environment = environment

    // 3. Return env.
    retourne env
}

/* 9.1.1.2.1 HasBinding
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-hasbinding-n */
declarative_environment_has_binding :: fonc (base: *Environment, nom: ECMAString, index: *z32) -> bool
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)

    // 1. If envRec has a binding for N, return true.
    si donne_binding(env_rec, nom, index) {
        retourne vrai
    }

    // 2. Return false.
    retourne faux
}

/* 9.1.1.1.2 CreateMutableBinding ( N, D )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-createmutablebinding-n-d */
declarative_environment_create_mutable_binding :: fonc (base: *Environment, realm: *Realm @inutilisée, N: ECMAString, D: bool)
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)

    // 1. Assert: envRec does not already have a binding for N.
    assert(env_rec.donne_binding(N) == nul)

    // 2. Create a mutable binding in envRec for N and record that it is uninitialized. If D is true, record that the newly created binding may be deleted by a subsequent DeleteBinding call.
    binding := tableau_ajoute_élément(*env_rec.bindings)
    binding.nom = N
    binding.mutable = vrai
    binding.initialisé = faux
    binding.peut_être_détruit_par_delete = D

    // 3. Return unused.
}

/* 9.1.1.1.2 CreateImmutableBinding ( N, D )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-createimmutablebinding-n-s */
declarative_environment_create_immutable_binding :: fonc (base: *Environment, realm: *Realm @inutilisée, N: ECMAString, S: bool) -> bool
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)

    // 1. Assert: envRec does not already have a binding for N.
    assert(env_rec.donne_binding(N) == nul)

    // 2. Create an immutable binding in envRec for N and record that it is uninitialized.
    //    If S is true, record that the newly created binding is a strict binding.
    binding := tableau_ajoute_élément(*env_rec.bindings)
    binding.nom = N
    binding.mutable = faux
    binding.initialisé = faux
    binding.strict = S

    // 3. Return unused.
    retourne vrai
}

/* 9.1.1.1.4 InitializeBinding ( N, V )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-initializebinding-n-v */
declarative_environment_initialize_binding :: fonc (base: *Environment, N: ECMAString, V: Valeur)
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)
    binding := donne_binding(env_rec, N)

    // 1. Assert: envRec must have an uninitialized binding for N.
    assert(binding != nul && binding.initialisé == faux)

    // 2. Set the bound value for N in envRec to V.
    binding.valeur = V

    // 3. Record that the binding for N in envRec has been initialized.
    binding.initialisé = vrai
    
    // 4. Return unused.
}

donne_binding :: fonc (env: *DeclarativeEnvironment, nom: ECMAString, index : *z32 = nul) -> *DeclarativeEnvironment.Binding
{
    pour * env.bindings {
        si it.nom == nom {
            si index {
                mémoire(index) = indice_it comme z32
            }
            retourne it
        }
    }

    retourne nul
}

/* 9.1.1.1.5 SetMutableBinding ( N, V, S )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-setmutablebinding-n-v-s */
declarative_environment_set_mutable_binding :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, valeur: Valeur, strict: bool)
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)
    binding := donne_binding(env_rec, nom)

    // 1. If envRec does not have a binding for N, then
    si binding == nul {
        // a. If S is true, throw a ReferenceError exception.
        si strict {
            message := imprime_chaine("unknown reference to '%'", nom)
            _ := lance_reference_error(realm, message)
            retourne
        }

        // b. Perform ! envRec.CreateMutableBinding(N, true).
        env_rec.create_mutable_binding(realm, nom, vrai)

        // c. Perform ! envRec.InitializeBinding(N, V).
        env_rec.initialize_binding(nom, valeur)

        // d. Return unused.
        retourne
    }

    // 2. If the binding for N in envRec is a strict binding, set S to true.
    si binding.strict {
        strict = vrai
    }

    // 3. If the binding for N in envRec has not yet been initialized, then
    saufsi binding.initialisé {
        // a. Throw a ReferenceError exception.
        message := imprime_chaine("unitialized binding for '%'", nom)
        _ := lance_reference_error(realm, message)
        retourne
    }
    // 4. Else if the binding for N in envRec is a mutable binding, then
    sinon si binding.mutable {
        // a. Change its bound value to V.
        binding.valeur = valeur

    }
    // 5. Else,
    sinon {
        // a. Assert: This is an attempt to change the value of an immutable binding.
        // b. If S is true, throw a TypeError exception.
        si strict {
            _ := lance_type_error(realm, "setting value on unmutable object")
            retourne
        }
    }

    // 6. Return unused.
}

/* 9.1.1.1.6 GetBindingValue ( N, S )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-getbindingvalue-n-s */
declarative_environment_get_binding_value :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, strict: bool @inutilisée) -> Valeur
{
    env_rec := base.vérifie_comme(DeclarativeEnvironment)
    binding := donne_binding(env_rec, nom)

    // 1. Assert: envRec has a binding for N.
    assert(binding != nul)

    // 2. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.
    saufsi binding.initialisé {
        retourne lance_reference_error(realm, "unknown variable")
    }

    // 3. Return the value currently bound to N in envRec.
    retourne binding.valeur
}

/* 9.1.1.1.8 HasThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-hasthisbinding */
declarative_environment_has_this_binding :: fonc (base: *Environment @inutilisée) -> bool
{
    // 1. Return false.
    retourne faux
}

/* 9.1.1.1.10 WithBaseObject ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-withbaseobject */
declarative_environment_with_base_object :: fonc (base: *Environment @inutilisée) -> Valeur
{
    // 1. Return undefined.
    retourne js_undefined
}

/** \} */

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Function Environment Record
 * \{ */

#portée_fichier

table_virtuelle_func_env := TableVirtuelleCellule(classe = FunctionEnvironment, sur_destruction = declarative_environment_sur_destruction)

#portée_export

ThisBindingStatus :: énum {
    LEXICAL
    INITIALIZED
    UNINITIALIZED
}

FunctionEnvironment :: struct {
    empl base_decl: DeclarativeEnvironment
    table = *table_virtuelle_func_env

    function_object: *ECMAScriptFunction
    new_target: Valeur
    this_value: Valeur
    this_binding_status: ThisBindingStatus

    sur_has_this_binding = function_environment_has_this_binding
    sur_get_this_binding = function_environment_get_this_binding
}

/* 9.1.2.4 NewFunctionEnvironment ( F, newTarget )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-newfunctionenvironment */
new_function_environment :: fonc (F: *ECMAScriptFunction, new_target: Valeur) -> *FunctionEnvironment
{
    tas_de_mémoire := F.donne_tas_de_mémoire()

    // 1. Let env be a new Function Environment Record containing no bindings.
    env := tas_de_mémoire.alloue(FunctionEnvironment)

    // 2. Set env.[[FunctionObject]] to F.
    env.function_object = F

    // 3. If F.[[ThisMode]] is LEXICAL, set env.[[ThisBindingStatus]] to LEXICAL.
    si F.this_mode == ThisMode.LEXICAL {
        env.this_binding_status = ThisBindingStatus.LEXICAL
    }
    // 4. Else, set env.[[ThisBindingStatus]] to UNINITIALIZED.
    sinon {
        env.this_binding_status = ThisBindingStatus.UNINITIALIZED
    }

    // 5. Set env.[[NewTarget]] to newTarget.
    env.new_target = new_target

    // 6. Set env.[[OuterEnv]] to F.[[Environment]].
    env.outer_environment = F.environment

    // 7. Return env.
    retourne env
}

/* 9.1.1.3.1 BindThisValue ( V )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-bindthisvalue */
bind_this_value :: fonc (env_rec: *FunctionEnvironment, V: Valeur) -> Valeur
{
    // 1. Assert: envRec.[[ThisBindingStatus]] is not LEXICAL.
    assert(env_rec.this_binding_status != ThisBindingStatus.LEXICAL)

    // 2. If envRec.[[ThisBindingStatus]] is INITIALIZED, throw a ReferenceError exception.
    si env_rec.this_binding_status == ThisBindingStatus.INITIALIZED {
        retourne lance_reference_error(env_rec.function_object.realm, "this value already bound")
    }

    // 3. Set envRec.[[ThisValue]] to V.
    env_rec.this_value = V

    // 4. Set envRec.[[ThisBindingStatus]] to INITIALIZED.
    env_rec.this_binding_status = ThisBindingStatus.INITIALIZED

    // 5. Return V.
    retourne V
}

/* 9.1.1.3.2 HasThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-function-environment-records-hasthisbinding */
function_environment_has_this_binding :: fonc (base: *Environment) -> bool
{
    env_rec := base.vérifie_comme(FunctionEnvironment)
    // 1. If envRec.[[ThisBindingStatus]] is lexical, return false; otherwise, return true.
    retourne env_rec.this_binding_status != ThisBindingStatus.LEXICAL
}

/* 9.1.1.3.3 HasSuperBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-function-environment-records-hassuperbinding */
has_super_binding :: fonc (env_rec: *FunctionEnvironment) -> bool
{
    // 1. If envRec.[[ThisBindingStatus]] is lexical, return false.
    si env_rec.this_binding_status == ThisBindingStatus.LEXICAL {
        retourne faux
    }

    // 2. If envRec.[[FunctionObject]].[[HomeObject]] is undefined, return false; otherwise return true.
    si env_rec.function_object.home_object == nul {
        retourne faux
    }

    retourne vrai
}

/* 9.1.1.3.4 GetThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-function-environment-records-getthisbinding */
function_environment_get_this_binding :: fonc (base: *Environment, realm: *Realm) -> Valeur
{
    env_rec := base.vérifie_comme(FunctionEnvironment)

    // 1. Assert: envRec.[[ThisBindingStatus]] is not lexical.
    assert(env_rec.this_binding_status != ThisBindingStatus.LEXICAL)

    // 2. If envRec.[[ThisBindingStatus]] is uninitialized, throw a ReferenceError exception.
    si env_rec.this_binding_status == ThisBindingStatus.UNINITIALIZED {
        retourne lance_reference_error(realm, "unknown reference to 'this'")
    }

    // 3. Return envRec.[[ThisValue]].
    retourne env_rec.this_value
}

/* 9.1.1.3.5 GetSuperBase ( envRec )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-getsuperbase */
get_super_base :: fonc (env_rec: *FunctionEnvironment) -> *Object
{
    // 1. Let home be envRec.[[FunctionObject]].[[HomeObject]].
    home := env_rec.function_object.home_object

    // 2. If home is undefined, return undefined.
    si home == nul {
        retourne nul
    }

    // À FAIRE 3. Assert: home is an ordinary object.

    // 4. Return ! home.[[GetPrototypeOf]]().
    retourne internal_get_prototype_of(home)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Module Environment Record
 * \{ */

ModuleEnvironment :: struct {
    empl base_decl: DeclarativeEnvironment

}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Object Environment Record
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records
 * \{ */

#portée_fichier

table_virtuelle_obj_env := TableVirtuelleCellule(classe = ObjectEnvironment)

#portée_export

ObjectEnvironment :: struct {
    empl base: Environment

    binding_object: *Object
    is_with_environment: bool

    /* Cellule */
    table = *table_virtuelle_obj_env

    /* Environment */
    sur_has_binding = object_environment_has_binding
    sur_get_binding_value = object_environment_get_binding_value
    sur_set_mutable_binding = object_environment_set_mutable_binding
    sur_with_base_object = object_environment_with_base_object
    sur_has_this_binding = object_environment_has_this_binding
}

/* 9.1.2.3 NewObjectEnvironment ( O, W, E )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-newobjectenvironment */
new_object_environment :: fonc (tas_de_mémoire: *TasDeMémoire, global: *Object, is_with_environment: bool, environment: *Environment) -> *ObjectEnvironment
{
    // 1. Let env be a new Object Environment Record.
    env := tas_de_mémoire.alloue(ObjectEnvironment)

    // 2. Set env.[[BindingObject]] to O.
    env.binding_object = global

    // 3. Set env.[[IsWithEnvironment]] to W.
    env.is_with_environment = is_with_environment

    // 4. Set env.[[OuterEnv]] to E.
    env.outer_environment = environment

    // 5. Return env.
    retourne env
}

/* 9.1.1.2.1 HasBinding
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-hasbinding-n */
object_environment_has_binding :: fonc (base: *Environment, nom: ECMAString, index: *z32 @inutilisée) -> bool
{
    environment := base.vérifie_comme(ObjectEnvironment)

    // 1. Let bindingObject be envRec.[[BindingObject]].
    binding_object := environment.binding_object

    // 2. Let foundBinding be ? HasProperty(bindingObject, N).
    found_binding := has_property(binding_object, nom)

    // 3. If foundBinding is false, return false.
    saufsi found_binding {
        retourne faux
    }

    // 4. If envRec.[[IsWithEnvironment]] is false, return true.
    saufsi environment.is_with_environment {
        retourne vrai
    }

    panique("is_with_environment non-implémenté")

    // 5. Let unscopables be ? Get(bindingObject, @@unscopables).
    // 6. If unscopables is an Object, then
    // a. Let blocked be ToBoolean(? Get(unscopables, N)).
    // b. If blocked is true, return false.
    // 7. Return true.
    // retourne vrai
}

/* 9.1.1.2.5 SetMutableBinding ( N, V, S )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-setmutablebinding-n-v-s */
object_environment_set_mutable_binding :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, valeur: Valeur, strict: bool)
{
    environment := base.vérifie_comme(ObjectEnvironment)

    // 1. Let bindingObject be envRec.[[BindingObject]].
    binding_object := environment.binding_object

    // OPTIMISATION : si nous ne sommes pas en mode strict, appelons directement "set"
    //                car "has_property" est redondant avec "set" et n'est utile qu'en
    //                mode strict.
    //                Peut-être que "set" pourrait être modifié afin de retourner plus
    //                d'information quant la présence de la propriété.
    saufsi strict {
        set(binding_object, nom, valeur, faux)
        retourne
    }

    // 2. Let stillExists be ? HasProperty(bindingObject, N).
    still_exists := has_property(binding_object, nom)
    si realm.possède_exception() {
        retourne
    }

    // 3. If stillExists is false and S is true, throw a ReferenceError exception.
    si still_exists == faux && strict == vrai {
        _ := lance_reference_error(realm, "cannot create property")
        retourne
    }

    // 4. Perform ? Set(bindingObject, N, V, S).
    set(binding_object, nom, valeur, strict)
    si realm.possède_exception() {
        retourne
    }

    // 5. Return UNUSED.
}

/* 9.1.1.2.6 GetBindingValue ( N, S ) 
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-getbindingvalue-n-s */
object_environment_get_binding_value :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, strict: bool) -> Valeur
{
    environment := base.vérifie_comme(ObjectEnvironment)

    // 1. Let bindingObject be envRec.[[BindingObject]].
    binding_object := environment.binding_object

    // OPTIMISATION : si nous ne sommes pas en mode strict, appelons directement "get"
    //                car "has_property" est redondant avec "get" et n'est utile qu'en
    //                mode strict.
    //                Peut-être que "get" pourrait être modifié afin de retourner plus
    //                d'information quant la présence de la propriété.
    saufsi strict {
        retourne get(binding_object, nom)
    }

    // 2. Let value be ? HasProperty(bindingObject, N).
    value := has_property(binding_object, nom)
    si realm.possède_exception() {
        retourne js_undefined
    }

    // 3. If value is false, then
    si value.est_false() {
        // a. If S is false, return undefined; otherwise throw a ReferenceError exception.
        si strict == faux {
            retourne js_undefined
        }

        retourne lance_reference_error(realm, "unknown property")
    }

    // 4. Return ? Get(bindingObject, N).
    retourne get(binding_object, nom)
}

/* 9.1.1.2.8 HasThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-hasthisbinding */
object_environment_has_this_binding :: fonc (base: *Environment @inutilisée) -> bool
{
    // 1. Return false.
    retourne faux
}

/* 9.1.1.2.10 WithBaseObject ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-object-environment-records-withbaseobject */
object_environment_with_base_object :: fonc (base: *Environment) -> Valeur
{
    environment := base.vérifie_comme(ObjectEnvironment)

    // 1. If envRec.[[IsWithEnvironment]] is true, return envRec.[[BindingObject]].
    si environment.is_with_environment {
        retourne Valeur(Object = environment.binding_object)
    }
    // 2. Otherwise, return undefined.
    retourne js_undefined
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Global Environment Record
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records
 * \{ */

#portée_fichier

table_virtuelle_glob_env := TableVirtuelleCellule(classe = GlobalEnvironment)

#portée_export

GlobalEnvironment :: struct {
    empl base: Environment

    /* Cellule */
    table = *table_virtuelle_glob_env

    /* Environment */
    object_record: *ObjectEnvironment
    global_this_value: *Object
    declarative_record: *DeclarativeEnvironment
    var_names: [..]ECMAString

    sur_has_binding = global_environment_has_binding
    sur_create_mutable_binding = global_environment_create_mutable_binding
    sur_create_immutable_binding = global_environment_create_immutable_binding
    sur_initialize_binding = global_environment_initialize_binding
    sur_get_binding_value = global_environment_get_binding_value
    sur_set_mutable_binding = global_environment_set_mutable_binding
    sur_with_base_object = global_environment_with_base_object
    sur_create_global_function_binding = global_environment_create_global_function_binding
    sur_has_this_binding = global_environment_has_this_binding
    sur_get_this_binding = global_environment_get_this_binding
}

/* 9.1.2.5 NewGlobalEnvironment ( G, thisValue )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-newglobalenvironment */
new_global_environment :: fonc (tas_de_mémoire: *TasDeMémoire, global: *Object, this_value: *Object) -> *GlobalEnvironment
{
    // 1. Let objRec be NewObjectEnvironment(G, false, null).
    obj_rec := new_object_environment(tas_de_mémoire, global, faux, nul)

    // 2. Let dclRec be NewDeclarativeEnvironment(null).
    dcl_rec := new_declarative_environment(tas_de_mémoire, nul)

    // 3. Let env be a new Global Environment Record.
    env := tas_de_mémoire.alloue(GlobalEnvironment)

    // 4. Set env.[[ObjectRecord]] to objRec.
    env.object_record = obj_rec

    // 5. Set env.[[GlobalThisValue]] to thisValue.
    env.global_this_value = this_value

    // 6. Set env.[[DeclarativeRecord]] to dclRec.
    env.declarative_record = dcl_rec

    // 7. Set env.[[VarNames]] to a new empty List.

    // 8. Set env.[[OuterEnv]] to null.
    env.outer_environment = nul

    // 9. Return env.
    retourne env
}

/* 9.1.1.4.1 HasBinding
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-hasbinding-n */
global_environment_has_binding :: fonc (base: *Environment, nom: ECMAString, index: *z32 @inutilisée) -> bool
{
    environment := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    dclrec := environment.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, return true.
    si has_binding(dclrec, nom) {
        retourne vrai
    }

    // 3. Let ObjRec be envRec.[[ObjectRecord]].
    objrec := environment.object_record

    // 4. Return ? ObjRec.HasBinding(N).
    retourne has_binding(objrec, nom)
}

/* 9.1.1.4.2 CreateMmutableBinding ( N, D )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-createmutablebinding-n-d */
global_environment_create_mutable_binding :: fonc (base: *Environment, realm: *Realm, N: ECMAString, S: bool)
{
    env_rec := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    decl_rec := env_rec.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, throw a TypeError exception.
    si decl_rec.has_binding(N) {
        message := imprime_chaine("redefinition of mutable variable '%'", N)
        _ := lance_type_error(realm, message)
        retourne
    }

    // 3. Return ! DclRec.CreateMutableBinding(N, S).
    decl_rec.create_mutable_binding(realm, N, S)
}

/* 9.1.1.4.3 CreateImmutableBinding ( N, D )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-declarative-environment-records-createimmutablebinding-n-s */
global_environment_create_immutable_binding :: fonc (base: *Environment, realm: *Realm, N: ECMAString, S: bool) -> bool
{
    env_rec := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    decl_rec := env_rec.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, throw a TypeError exception.
    si decl_rec.has_binding(N) {
        message := imprime_chaine("redefinition of immutable variable '%'", N)
        _ := lance_type_error(realm, message)
        retourne faux
    }

    // 3. Return ! DclRec.CreateImmutableBinding(N, S).
    retourne decl_rec.create_immutable_binding(realm, N, S)
}

/* 9.1.1.4.4 InitializeBinding ( N, V )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-initializebinding-n-v */
global_environment_initialize_binding :: fonc (base: *Environment, N: ECMAString, V: Valeur)
{
    env_rec := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    decl_rec := env_rec.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, then
    si decl_rec.has_binding(N) {
        // a. Return ! DclRec.InitializeBinding(N, V).
        decl_rec.initialize_binding(N, V)
        retourne
    }

    // 3. Assert: If the binding exists, it must be in the Object Environment Record.

    // 4. Let ObjRec be envRec.[[ObjectRecord]].
    obj_rec := env_rec.object_record

    // 5. Return ? ObjRec.InitializeBinding(N, V).
    obj_rec.initialize_binding(N, V)
}

/* 9.1.1.4.5 SetMutableBinding ( N, V, S )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-setmutablebinding-n-v-s */
global_environment_set_mutable_binding :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, valeur: Valeur, strict: bool)
{
    environment := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    dclrec := environment.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, then
    si has_binding(dclrec, nom) {
        // a. Return ? DclRec.SetMutableBinding(N, V, S).
        set_mutable_binding(dclrec, realm, nom, valeur, strict)
        retourne
    }

    // 3. Let ObjRec be envRec.[[ObjectRecord]].
    objrec := environment.object_record

    // 4. Return ? ObjRec.SetMutableBinding(N, V, S).
    set_mutable_binding(objrec, realm, nom, valeur, strict)
}

/* 9.1.1.4.6 GetBindingValue ( N, S )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-getbindingvalue-n-s */
global_environment_get_binding_value :: fonc (base: *Environment, realm: *Realm, nom: ECMAString, strict: bool) -> Valeur
{
    environment := base.vérifie_comme(GlobalEnvironment)

    // 1. Let DclRec be envRec.[[DeclarativeRecord]].
    dclrec := environment.declarative_record

    // 2. If ! DclRec.HasBinding(N) is true, then
    si has_binding(dclrec, nom) {
        // a. Return ? DclRec.GetBindingValue(N, S).
        retourne get_binding_value(dclrec, realm, nom, strict)
    }

    // 3. Let ObjRec be envRec.[[ObjectRecord]].
    objrec := environment.object_record

    // 4. Return ? ObjRec.GetBindingValue(N, S).
    retourne get_binding_value(objrec, realm, nom, strict)
}

/* 9.1.1.4.8 HasThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-hasthisbinding */
global_environment_has_this_binding :: fonc (base: *Environment @inutilisée) -> bool
{
    // 1. Return true.
    retourne vrai
}

/* 9.1.1.4.10 WithBaseObject ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-withbaseobject */
global_environment_with_base_object :: fonc (base: *Environment @inutilisée) -> Valeur
{
    // 1. Return undefined.
    retourne js_undefined
}

/* 9.1.1.4.11 GetThisBinding ( )
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-getthisbindinghttps://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-global-environment-records-getthisbinding */
global_environment_get_this_binding :: fonc (base: *Environment, realm: *Realm @inutilisée) -> Valeur
{
    env_rec := base.vérifie_comme(GlobalEnvironment)
    // 1. Return envRec.[[GlobalThisValue]].
    retourne env_rec.global_this_value
}

/* 9.1.1.4.18 CreateGlobalFunctionBinding ( N, V, D )
 * https://tc39.es/ecma262/#sec-createglobalfunctionbinding */
global_environment_create_global_function_binding :: fonc (base: *Environment, N: ECMAString, V: Valeur, D: bool @inutilisée)
{
    env_rec := base.vérifie_comme(GlobalEnvironment)

    // 1. Let ObjRec be envRec.[[ObjectRecord]].
    obj_rec := env_rec.object_record

    // 2. Let globalObject be ObjRec.[[BindingObject]].
    global_object := obj_rec.binding_object

    // À FAIRE : 3. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
    // 4. If existingProp is undefined or existingProp.[[Configurable]] is true, then
        // a. Let desc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D }.
    // 5. Else,
        // a. Let desc be the PropertyDescriptor { [[Value]]: V }.
    // 6. Perform ? DefinePropertyOrThrow(globalObject, N, desc).

    // 7. Perform ? Set(globalObject, N, V, false).
    set(global_object, N, V, faux)
    mv := global_object.donne_tas_de_mémoire().mv
    si mv.possède_exception() {
        retourne
    }

    // À FAIRE : 8. If envRec.[[VarNames]] does not contain N, then
        // a. Append N to envRec.[[VarNames]].

    // 9. Return unused.
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom 9.2 PrivateEnvironment
 * https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-privateenvironment-records
 * \{ */

#portée_fichier

table_virtuelle_priv_env := TableVirtuelleCellule(classe = PrivateEnvironment)

#portée_export

PrivateEnvironment :: struct {
    empl base: Cellule
    table = *table_virtuelle_priv_env

    outer_private_environment: *PrivateEnvironment
    names: [..]PrivateName
}

possède_nom :: fonc (private_environment: *PrivateEnvironment, nom: ECMAString) -> bool
{
    pour private_environment.names {
        si it.description == nom {
            retourne vrai
        }
    }
    retourne faux
}

/* 9.2.1.1 NewPrivateEnvironment ( outerPrivEnv ) */
new_private_environment :: fonc (tas_de_mémoire: *TasDeMémoire, outer_priv_env: *PrivateEnvironment) -> *PrivateEnvironment
{
    // 1. Let names be a new empty List.
    // 2. Return the PrivateEnvironment Record { [[OuterPrivateEnvironment]]: outerPrivEnv, [[Names]]: names }.
    résultat := tas_de_mémoire.alloue(PrivateEnvironment)
    résultat.outer_private_environment = outer_priv_env
    retourne résultat
}

/* 9.2.1.2 ResolvePrivateIdentifier ( privEnv, identifier ) */
resolve_private_identifier :: fonc (priv_env: *PrivateEnvironment, identifier: ECMAString) -> PrivateName
{
    // 1. Let names be privEnv.[[Names]].
    names := priv_env.names

    // 2. For each Private Name pn of names, do
    pour pn dans names {
        // a. If pn.[[Description]] is identifier, then
        si pn.description == identifier {
            // i. Return pn.
            retourne pn
        }
    }

    // 3. Let outerPrivEnv be privEnv.[[OuterPrivateEnvironment]].
    outer_priv_env := priv_env.outer_private_environment

    // 4. Assert: outerPrivEnv is not null.
    assert(outer_priv_env != nul)
    
    // 5. Return ResolvePrivateIdentifier(outerPrivEnv, identifier).
    retourne resolve_private_identifier(outer_priv_env, identifier)
}

/** \} */
