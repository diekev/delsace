importe Fondation

// --------------------------------------------
// Différents caractères spéciaux sous forme de point de code

NUL :: 0x0 comme n32
TABULATION :: '\t' comme n32
ESPACE :: ' ' comme n32
NOUVELLE_LIGNE :: '\n' comme n32
RETOUR_CHARIOT :: '\r' comme n32
ESPERLUETTE :: '&' comme n32
A_MINUSCULE :: 'a' comme n32
F_MINUSCULE :: 'f' comme n32
X_MINUSCULE :: 'x' comme n32
Z_MINUSCULE :: 'z' comme n32
A_MAJUSCULE :: 'A' comme n32
F_MAJUSCULE :: 'F' comme n32
X_MAJUSCULE :: 'X' comme n32
Z_MAJUSCULE :: 'Z' comme n32
SIGNE_NOMBRE :: '#' comme n32
CROCHET_OUVRANT :: '[' comme n32
CROCHET_FERMANT :: ']' comme n32
EGAL :: '=' comme n32
GUILLEMET :: '"' comme n32
APOSTROPHE :: '\'' comme n32
ACCENT_GRAVE :: '`' comme n32
POINT_INTERROGATION :: '?' comme n32
POINT_EXCLAMATION :: '!' comme n32
POINT_VIRGULE :: ';' comme n32
CHEVRON_OUVRANT :: '<' comme n32
CHEVRON_FERMANT :: '>' comme n32
SLASH :: '/' comme n32
MOINS :: '-' comme n32
CARACTÈRE_REMPLACEMENT :: 0xFFFD comme n32

est_surrogate :: fonc (point_de_code: n32) -> bool
{
    retourne 0xD800 <= point_de_code <= 0xDFFF
}

est_leading_surrogate :: fonc (unité: n16) -> bool #enligne
{
    retourne 0xD800 <= unité <= 0xDBFF
}

est_trailling_surrogate :: fonc (unité: n16) -> bool #enligne
{
    retourne 0xDC00 <= unité <= 0xDFFF
}

est_valeur_scalaire :: fonc (point_de_code: n32) -> bool
{
    retourne !est_surrogate(point_de_code)
}

est_noncaractère :: fonc (point_de_code: n32) -> bool
{
    si (0xFDD0 <= point_de_code <= 0xFDEF) {
        retourne vrai
    }

    retourne fait_partie_de(point_de_code,
        0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE,
        0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF,
        0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF, 0xAFFFE,
        0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF,
        0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, 0x10FFFF)
}

est_ascii :: fonc (point_de_code: n32) -> bool
{
    retourne 0x0 <= point_de_code <= 0x7F
}

est_ascii_tab_ou_nouvelle_ligne :: fonc (point_de_code: n32) -> bool
{
    retourne point_de_code == 0x09 || point_de_code == 0x0A || point_de_code == 0x0D
}

est_ascii_espace_blanc :: fonc (point_de_code: n32) -> bool
{
    retourne est_ascii_tab_ou_nouvelle_ligne(point_de_code) || point_de_code == 0x0C || point_de_code == 0x20
}

est_controle_C0 :: fonc (point_de_code: n32) -> bool
{
    retourne point_de_code <= 0x1F
}

est_controle_C0_ou_espace :: fonc (point_de_code: n32) -> bool
{
    retourne est_controle_C0(point_de_code) || point_de_code == 0x20
}

est_controle :: fonc (point_de_code: n32) -> bool
{
    retourne est_controle_C0(point_de_code) || (0x7F <= point_de_code <= 0x9F)
}

est_ascii_chiffre :: fonc (point_de_code: n32) -> bool
{
    retourne (0x30 <= point_de_code <= 0x39)
}

est_ascii_chiffre_hex_maj :: fonc (point_de_code: n32) -> bool
{
    retourne est_ascii_chiffre(point_de_code) || (A_MAJUSCULE <= point_de_code <= F_MAJUSCULE)
}

est_ascii_chiffre_hex_min :: fonc (point_de_code: n32) -> bool
{
    retourne est_ascii_chiffre(point_de_code) || (A_MINUSCULE <= point_de_code <= F_MINUSCULE)
}

est_ascii_hexadecimal :: fonc (point_de_code: n32) -> bool
{
    retourne est_ascii_chiffre_hex_min(point_de_code) || est_ascii_chiffre_hex_maj(point_de_code)
}

est_ascii_alpha_majuscule :: fonc (point_de_code: n32) -> bool
{
    retourne A_MAJUSCULE <= point_de_code <= Z_MAJUSCULE
}

est_ascii_alpha_minuscule :: fonc (point_de_code: n32) -> bool
{
    retourne A_MINUSCULE <= point_de_code <= Z_MINUSCULE
}

est_ascii_alpha :: fonc (point_de_code: n32) -> bool
{
    retourne A_MAJUSCULE <= point_de_code <= Z_MAJUSCULE || A_MINUSCULE <= point_de_code <= Z_MINUSCULE
}

est_ascii_alphanumérique :: fonc (point_de_code: n32) -> bool
{
    retourne est_ascii_alpha(point_de_code) || est_ascii_chiffre(point_de_code)
}

/* Utilisé par/pour HTML. */
est_caractère_espace_blanc :: fonc (point_de_code: n32) -> bool #enligne
{
    retourne point_de_code == ESPACE || point_de_code == TABULATION || point_de_code == RETOUR_CHARIOT || point_de_code == NOUVELLE_LIGNE || point_de_code == 0x0C
}
