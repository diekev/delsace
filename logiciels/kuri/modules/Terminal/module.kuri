// Module d'interface avec le terminal/la console

importe Chaine
importe Fondation
importe SysFichier

CouleurTerminal :: énum {
    BLANC
    BLEU
    CYAN
    GRIS
    JAUNE
    MAGENTA
    ROUGE
    VERT
}

StyleTexte :: énum {
    RÉINIT
    GRAS
    FONCÉ
    ITALIC
    SOUSLIGNÉ
    CLIGNOTE
    INVERSE
    CACHE
    CROISÉ
}

chaine_style_texte :: fonc (style: StyleTexte) -> chaine
{
    discr style {
        RÉINIT { retourne "\x1b[00m" }
        GRAS { retourne "\x1b[1m" }
        FONCÉ { retourne "\x1b[2m" }
        ITALIC { retourne "\x1b[3m" }
        SOUSLIGNÉ { retourne "\x1b[4m" }
        CLIGNOTE { retourne "\x1b[5m" }
        INVERSE { retourne "\x1b[7m" }
        CACHE { retourne "\x1b[8m" }
        CROISÉ { retourne "\x1b[9m" }
    }

    retourne ""
}

chaine_pour_avant_plan :: fonc (couleur: CouleurTerminal) -> chaine
{
    discr couleur {
        GRIS { retourne "\x1b[30m" }
        ROUGE { retourne "\x1b[31m" }
        VERT { retourne "\x1b[32m" }
        JAUNE { retourne "\x1b[33m" }
        BLEU { retourne "\x1b[34m" }
        MAGENTA { retourne "\x1b[35m" }
        CYAN { retourne "\x1b[36m" }
        BLANC { retourne "\x1b[37m" }
    }

    retourne ""
}

chaine_pour_arrière_plan :: fonc (couleur: CouleurTerminal) -> chaine
{
    discr couleur {
        GRIS { retourne "\x1b[40m" }
        ROUGE { retourne "\x1b[41m" }
        VERT { retourne "\x1b[42m" }
        JAUNE { retourne "\x1b[43m" }
        BLEU { retourne "\x1b[44m" }
        MAGENTA { retourne "\x1b[45m" }
        CYAN { retourne "\x1b[46m" }
        BLANC { retourne "\x1b[47m" }
    }

    retourne ""
}

// --------------------------------------------

demande_utilisateur :: fonc (message: chaine)
{
    si message {
        imprime("> % : ", message)
    }
    sinon {
        imprime("> ")
    }
}

lis_réponse_utilisateur :: fonc () -> chaine
{
    réponse := entrée_standarde().lis_tout()
    réponse = recule(réponse, 1)
    retourne réponse
}

DécisionBoucleLEIB :: énum {
    Continue
    Arrête
}

// Lis Exécute Imprime Boucle
// Read Execute Print Loop
LEIB :: struct {
    rappel_chaine_prompt: fonc(*LEIB)(chaine)
    rappel_exécute: fonc(*LEIB, chaine)(DécisionBoucleLEIB)
}

lance :: fonc (leib: *LEIB)
{
    saufsi leib.rappel_exécute {
        retourne
    }

    boucle {
        chaine_prompt := ""
        si leib.rappel_chaine_prompt {
            chaine_prompt = leib.rappel_chaine_prompt(leib)
        }

        demande_utilisateur(chaine_prompt)
        entrée := lis_réponse_utilisateur()

        décision := leib.rappel_exécute(leib, entrée)

        si décision == DécisionBoucleLEIB.Arrête {
            arrête
        }
    }
}
