importe CodecDonnées
importe Fondation
importe Numérique

MessageHTTP :: struct {
    version: chaine
    entêtes: []Entête
    contenu: chaine

    cookies : []Cookie
}

détruit_message :: fonc (message: *MessageHTTP)
{
    pour message.cookies {
        détruit_cookie(it)
    }

    déloge(message.cookies)
    déloge(message.entêtes)
}

ajoute_cookie :: fonc (message: *MessageHTTP, cookie: Cookie)
{
    tableau_ajoute(*message.cookies, cookie)
}

est_type_contenu :: fonc (message: *MessageHTTP, type_contenu: chaine) -> bool
{
    entête_type_contenu := entête(message, "Content-Type")

    saufsi entête_type_contenu {
        retourne faux
    }

    retourne entête_type_contenu.valeur == type_contenu
}

valeur_entête_ou :: fonc (message: *MessageHTTP, nom: chaine, défaut: chaine) -> chaine
{
    entête_pour_nom := entête(message, nom)

    saufsi entête_pour_nom {
        retourne défaut
    }

    retourne entête_pour_nom.valeur
}

MessageClienteHTTP :: struct {
    empl base: MessageHTTP

    méthode: chaine
    requête: chaine

    uri: URI
}

initialise_depuis_message :: fonc (message_serveuse: *MessageClienteHTTP, message: MessageHTTP)
{
    mémoire(message_serveuse comme *MessageHTTP) = message
}

ContenuHTTP :: struct {
    type: chaine
    contenu: chaine
}

contenu_html :: fonc (html: chaine) -> ContenuHTTP
{
    retourne ContenuHTTP("text/html;charset=utf-8", html)
}

contenu_json :: fonc (json: chaine) -> ContenuHTTP
{
    retourne ContenuHTTP("application/json;charset=utf-8", json)
}

crée_message_avec_contenu :: fonc (code_état: CodeÉtatHTTP, contenu: ContenuHTTP) -> MessageServeuseHTTP
{
    message: MessageServeuseHTTP
    message.version = "HTTP/1.1"
    message.contenu = contenu.contenu
    ajoute_entête(*message, "Content-Type", contenu.type)
    message.code_état = code_état

    retourne message
}

MessageServeuseHTTP :: struct {
    empl base: MessageHTTP

    status: z32
    code_état: CodeÉtatHTTP
}

initialise_depuis_message :: fonc (message_serveuse: *MessageServeuseHTTP, message: MessageHTTP)
{
    mémoire(message_serveuse comme *MessageHTTP) = message
}

possède_entête :: fonc (message: &MessageHTTP, nom: chaine) -> bool
{
    pour message.entêtes {
        si it.nom == nom {
            retourne vrai
        }
    }

    retourne faux
}

entête :: fonc (message: &MessageHTTP, nom: chaine) -> *Entête
{
    pour * message.entêtes {
        si it.nom == nom {
            retourne it
        }
    }

    retourne nul
}

possède_entête :: fonc (message: *MessageHTTP, nom: chaine) -> bool
{
    pour message.entêtes {
        si it.nom == nom {
            retourne vrai
        }
    }

    retourne faux
}

entête :: fonc (message: *MessageHTTP, nom: chaine) -> *Entête
{
    pour * message.entêtes {
        si it.nom == nom {
            retourne it
        }
    }

    retourne nul
}

fusionne_entête :: fonc (message: *MessageHTTP, nom: chaine, valeur: chaine)
{
    entête_existant := message.entête(nom)

    si entête_existant {
        entête_existant.valeur = valeur
        retourne
    }

    ajoute_entête(message, nom, valeur)
}

ajoute_entête :: fonc (message: *MessageHTTP, nom: chaine, valeur: chaine)
{
    entête := Entête(nom, valeur)
    tableau_ajoute(*message.entêtes, entête)
}

parse_message_cliente :: fonc (texte: chaine) -> MessageClienteHTTP
{
    parseuse := ParseuseChaine(prépare_message_pour_parseuse(texte))
    message : MessageClienteHTTP

    // parse la ligne METHODE CHEMIN VERSION
    méthodes : []chaine = ["GET", "POST", "PUT", "DELETE", "HEAD", "CONNECT", "OPTIONS", "TRACE", "PATCH"]

    index := apparie_un_de(*parseuse, ...méthodes)

    si index == -1 {
        retourne message
    }

    positionne(*parseuse, méthodes[index].taille)

    si !consomme(*parseuse, ' ') {
        retourne message
    }

    pos_prochain_espace := trouve_prochain(*parseuse, ' ')

    si pos_prochain_espace <= 0 {
        retourne message
    }

    requête := sous_chaine_jusque_index(*parseuse, pos_prochain_espace)
    positionne(*parseuse, pos_prochain_espace + 1)

    pos_nouvelle_ligne := trouve_prochain(*parseuse, '\n')

    si pos_nouvelle_ligne <= 0 {
        retourne message
    }

    version := sous_chaine_jusque_index(*parseuse, pos_nouvelle_ligne)
    positionne(*parseuse, pos_nouvelle_ligne + 1)

    message.version = version
    message.méthode = méthodes[index]
    message.requête = requête

    résoud_échappement_url_localement(message.requête)

    // parse le reste du message
    parse_message(*parseuse, *message)

    retourne message
}

parse_message_serveuse :: fonc (texte: chaine) -> MessageServeuseHTTP
{
    parseuse := ParseuseChaine(prépare_message_pour_parseuse(texte))
    message: MessageServeuseHTTP

    si (fini(*parseuse)) {
        retourne message
    }

    // parse la ligne METHODE CHEMIN VERSION

    //imprime("texte: %\n", parseuse.chn)

    si !consomme(*parseuse, "HTTP/1.1") {
        //imprime("Pas de version")
        retourne message
    }

    si !consomme(*parseuse, ' ') {
        retourne message
    }

    si !consomme_nombre(*parseuse, 3) {
        retourne message
    }

    message.status = parseuse.nombre

    //imprime("status: %\n", parseuse.nombre)

    pos := trouve_prochain(*parseuse, '\n')

    si pos <= 0 {
        retourne message
    }

    positionne(*parseuse, pos + 1)

    parse_message(*parseuse, *message)
    retourne message;
}

parse_message :: fonc (parseuse: *ParseuseChaine, message: *MessageHTTP)
{
    tantque !fini(parseuse) {
        pos_nouvelle_ligne := trouve_prochain(parseuse, '\n')

        // une ligne vide indique la fin des entêtes
        si pos_nouvelle_ligne == parseuse.curseur {
            avance(parseuse, 1)
            arrête
        }

        // nom
        pos_double_points := trouve_prochain(parseuse, ':')

        si pos_double_points <= 0 {
            retourne
        }

        nom := sous_chaine_jusque_index(parseuse, pos_double_points)

        positionne(parseuse, pos_double_points + 1)

        saute_espace_blanc(parseuse)

        // valeur
        si pos_nouvelle_ligne <= 0 {
            retourne
        }

        valeur := sous_chaine_jusque_index(parseuse, pos_nouvelle_ligne)

        positionne(parseuse, pos_nouvelle_ligne + 1)

        message.ajoute_entête(nom, valeur)
    }

    si fini(parseuse) {
        retourne
    }

    message.contenu = sous_chaine_jusque_index(parseuse, parseuse.chn.taille)
}

// supprime tous les caractères '\r' sur place
prépare_message_pour_parseuse :: fonc (texte: chaine) -> chaine
{
    pointeur_entrée := texte.pointeur
    pointeur_sortie := texte.pointeur

    pour 0 ... texte.taille - 1 {
        si pointeur_entrée[it] == '\r' {
            continue
        }

        mémoire(pointeur_sortie) = pointeur_entrée[it]
        pointeur_sortie += 1
    }

    texte.taille = pointeur_sortie - texte.pointeur
    retourne texte
}

parse_contenu_message_url_encoded :: fonc (message: &MessageClienteHTTP, $T: type_de_données) -> bool, T
{
    //  À FAIRE : message.parse_contenu() -> Contenu(type_contenu, chaine) | Rien
    si !possède_entête(message, "Content-Length") {
        retourne faux, T()
    }

    si !possède_entête(message, "Content-Type") {
        retourne faux, T()
    }

    chn_taille_contenu := entête(message, "Content-Length").valeur

    taille_contenu := tente extrait_z32(chn_taille_contenu) piège err {
        retourne faux, T()
    }

    type_contenu := entête(message, "Content-Type").valeur

    si type_contenu != "application/x-www-form-urlencoded" {
        retourne faux, T()
    }

    si taille_contenu != message.contenu.taille {
        retourne faux, T()
    }

    raison, résultat_parsage, info := parse_texte_format_url(message.contenu, T)

    si raison != RésultatParsage.Succès {
        retourne faux, T()
    }

    si !tous_les_champs_sont_renseignés(résultat_parsage) {
        retourne faux, T()
    }

    retourne vrai, info
}

// ---------------------------------------------------------
// Formattage/Impression

chaine_pour_message_cliente :: fonc (message: &MessageClienteHTTP) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    imprime_dans_enchaineuse(*enchaineuse, "% % HTTP/1.1\r\n", message.méthode, message.uri.chemin)
    imprime_dans_enchaineuse(*enchaineuse, "Host: %\r\n", message.uri.hôte)
    imprime_dans_enchaineuse(*enchaineuse, "Connection: close\r\n")

    pour message.entêtes {
        imprime_dans_enchaineuse(*enchaineuse, "%: %\r\n", it.nom, it.valeur)
    }

    imprime_cookie_client(*enchaineuse, message.cookies, vrai)

    si message.contenu {
        imprime_dans_enchaineuse(*enchaineuse, "Content-Length: %\r\n", message.contenu.taille)
    }

    ajoute_au_tampon(*enchaineuse, "\r\n")
    ajoute_au_tampon(*enchaineuse, message.contenu)

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

chaine_pour_message_serveuse :: fonc (message: &MessageServeuseHTTP) -> chaine
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    imprime_dans_enchaineuse(*enchaineuse, "% %\r\n", message.version, chaine_code_état_http(message.code_état))

    pour message.entêtes {
        imprime_dans_enchaineuse(*enchaineuse, "%: %\r\n", it.nom, it.valeur)
    }

    // imprime_cookie_client(*enchaineuse, message.cookies, vrai)

    ajoute_au_tampon(*enchaineuse, "\r\n")
    ajoute_au_tampon(*enchaineuse, message.contenu)

    retourne chaine_depuis_enchaineuse(*enchaineuse)
}
