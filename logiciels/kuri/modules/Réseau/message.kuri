importe Fondation

MessageHTTP :: struct {
    version: chaine
    entêtes: []Entête
    contenu: chaine
}

MessageClienteHTTP :: struct {
    empl base: MessageHTTP

    méthode: chaine
    requête: chaine
}

MessageServeuseHTTP :: struct {
    empl base: MessageHTTP

    status: z32
}

possède_entête :: fonc (message: &MessageHTTP, nom: chaine) -> bool
{
    pour message.entêtes {
        si it.nom == nom {
            retourne vrai
        }
    }

    retourne faux
}

entête :: fonc (message: &MessageHTTP, nom: chaine) -> *Entête
{
    pour * message.entêtes {
        si it.nom == nom {
            retourne it
        }
    }

    retourne nul
}

possède_entête :: fonc (message: *MessageHTTP, nom: chaine) -> bool
{
    pour message.entêtes {
        si it.nom == nom {
            retourne vrai
        }
    }

    retourne faux
}

entête :: fonc (message: *MessageHTTP, nom: chaine) -> *Entête
{
    pour * message.entêtes {
        si it.nom == nom {
            retourne it
        }
    }

    retourne nul
}

ajoute_entête :: fonc (message: *MessageHTTP, nom: chaine, valeur: chaine)
{
    entête := Entête(nom, valeur)
    tableau_ajoute(*message.entêtes, entête)
}

parse_message_cliente :: fonc (texte: chaine) -> MessageClienteHTTP
{
    parseuse := ParseuseChaine(prépare_message_pour_parseuse(texte))
    message : MessageClienteHTTP

    // parse la ligne METHODE CHEMIN VERSION
    méthodes : []chaine = ["GET", "POST", "PUT", "DELETE", "HEAD", "CONNECT", "OPTIONS", "TRACE", "PATCH"]

    index := apparie_un_de(*parseuse, ...méthodes)

    si index == -1 {
        retourne message
    }

    positionne(*parseuse, méthodes[index].taille)

    si !consomme(*parseuse, ' ') {
        retourne message
    }

    pos_prochain_espace := trouve_prochain(*parseuse, ' ')

    si pos_prochain_espace <= 0 {
        retourne message
    }

    requête := sous_chaine_jusque_index(*parseuse, pos_prochain_espace)
    positionne(*parseuse, pos_prochain_espace + 1)

    pos_nouvelle_ligne := trouve_prochain(*parseuse, '\n')

    si pos_nouvelle_ligne <= 0 {
        retourne message
    }

    version := sous_chaine_jusque_index(*parseuse, pos_nouvelle_ligne)
    positionne(*parseuse, pos_nouvelle_ligne + 1)

    message.version = version
    message.méthode = méthode
    message.requête = chemin

    // parse le reste du message
    parse_message(*parseuse, *message)

    retourne message
}

parse_message_serveuse :: fonc (texte: chaine) -> MessageServeuseHTTP
{
    parseuse := ParseuseChaine(prépare_message_pour_parseuse(texte))
    message: MessageServeuseHTTP

    si (fini(*parseuse)) {
        retourne message
    }

    // parse la ligne METHODE CHEMIN VERSION

    //imprime("texte: %\n", parseuse.chn)

    si !consomme(*parseuse, "HTTP/1.1") {
        //imprime("Pas de version")
        retourne message
    }

    si !consomme(*parseuse, ' ') {
        retourne message
    }

    si !consomme_nombre(*parseuse, 3) {
        retourne message
    }

    message.status = parseuse.nombre

    //imprime("status: %\n", parseuse.nombre)

    pos := trouve_prochain(*parseuse, '\n')

    si pos <= 0 {
        retourne message
    }

    positionne(*parseuse, pos + 1)

    parse_message(*parseuse, *message)
    retourne message;
}

parse_message :: fonc (parseuse: *ParseuseChaine, message: *MessageHTTP)
{
    tantque !fini(parseuse) {
        pos_nouvelle_ligne := trouve_prochain(parseuse, '\n')

        // une ligne vide indique la fin des entêtes
        si pos_nouvelle_ligne == parseuse.curseur {
            avance(parseuse, 1)
            arrête
        }

        // nom
        pos_double_points := trouve_prochain(parseuse, ':')

        si pos_double_points <= 0 {
            retourne
        }

        nom := sous_chaine_jusque_index(parseuse, pos_double_points)

        positionne(parseuse, pos_double_points + 1)

        saute_espace_blanc(parseuse)

        // valeur
        si pos_nouvelle_ligne <= 0 {
            retourne
        }

        valeur := sous_chaine_jusque_index(parseuse, pos_nouvelle_ligne)

        positionne(parseuse, pos_nouvelle_ligne + 1)

        message.ajoute_entête(nom, valeur)
    }

    si fini(parseuse) {
        retourne
    }

    message.contenu = sous_chaine_jusque_index(parseuse, parseuse.chn.taille)
}

// supprime tous les caractères '\r' sur place
prépare_message_pour_parseuse :: fonc (texte: chaine) -> chaine
{
    pointeur_entrée := texte.pointeur
    pointeur_sortie := texte.pointeur

    pour 0 ... texte.taille - 1 {
        si pointeur_entrée[it] == '\r' {
            continue
        }

        mémoire(pointeur_sortie) = pointeur_entrée[it]
        pointeur_sortie += 1
    }

    texte.taille = pointeur_sortie - texte.pointeur
    retourne texte
}
