// Bibliothèque de manipulation d'uri.
//
// Un URI est une chaine de caractère identifiant une ressource sur un réseau, et
// possède la structure suivante :
// URI = schéma:[//autorité]chemin[?requête][#fragment]
// autorité = [nom_utilisateur:mot_de_passe@]hôte[:port]
//
// Le standard détaillant la structure est accessible ici : https://tools.ietf.org/html/rfc3986
//
// Le parsage des URI s'inspire en partie sur l'implémentation de Chromium et Firefox,
// notamment pour l'utilisation de '\' comme caractère de séparation d'autorité valide
// (pour être compatible avec IE).
// Voir :
// https://source.chromium.org/chromium/chromium/src/+/master:url/third_party/mozilla/url_parse.cc
// https://bugs.xdavidhu.me/google/2020/03/08/the-unexpected-google-wide-domain-check-bypass/
//
// Toutefois, notre implémentation valide également le parsage selon le standard, et renvoie
// les erreurs correspondantes.

/*
 liste de schémas :
 https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
*/

importe Fondation

// ------------------------------
// fonctions auxilliares

est_lettre :: fonc (c: z8) -> bool
{
    retourne ('a' <= c <= 'z') || ('A' <= c <= 'Z')
}

est_slash_uri :: fonc (c: z8) -> bool
{
    retourne (c == '/') || (c == '\\')
}

// l'autorité peut directement être suivie par la requête ou le fragment, sans avoir de chemin
est_terminateur_autorité :: fonc (c: z8) -> bool
{
    retourne est_slash_uri(c) || (c == '?') || (c == '#')
}

// utilisée pour enlever les espaces en début et en fin de la chaine à parser
doit_rogner_de_l_url :: fonc (c: z8) -> bool
{
    retourne c <= ' '
}

// ------------------------------

// Les différentes erreurs possibles lors du parsage
ErreurURI :: erreur {
    SCHÉMA_VIDE
    HÔTE_VIDE
    AUTORITÉ_MANQUANTE
    CHEMIN_NE_COMMENCE_PAS_PAR_SLASH
    CARACTÈRE_INVALIDE_DANS_SCHÉMA
    CARACTÈRE_INVALIDE_DANS_PORT
    PORT_TROP_GRAND
}

URI :: struct {
    // la chaine originale
	uri : chaine

    // les différents composants de l'URI
    schéma : chaine
	autorité : chaine
	chemin_complet : chaine

    // les différents composants du chemin
    chemin : chaine
	requête : chaine
	fragment : chaine

    // les différents composants de l'autorité
	nom_utilisateur : chaine
    mot_de_passe : chaine
	hôte : chaine
	port : chaine

    // un composant est défini si son séparateur est présent, mais il peut tout de même
    // être vide
    schéma_est_défini := faux
    autorité_est_définie := faux
    requête_est_définie := faux
    fragment_est_défini := faux
}

RésultatURI :: union {
    err : ErreurURI
    uri : URI
}

RésultatExtraction :: union {
    b: bool
    e: ErreurURI
}

extrait_schéma :: fonc (chn: chaine, schéma: *chaine) -> RésultatExtraction
{
    chn = avance_si(chn, doit_rogner_de_l_url)

    // l'entrée est vide ou ne contenant que des espaces blancs
    si chn.taille == 0 {
        retourne faux
    }

    pour c, i dans chn {
        si c == ':' {
            mémoire(schéma) = construit_chaine(*chn[0], i)
            retourne vrai
        }

        si est_lettre(c) {
            continue
        }

        si est_nombre_décimal(c) {
            continue
        }

        si c == '+' || c == '-' || c == '.' {
            continue
        }

        retourne ErreurURI.CARACTÈRE_INVALIDE_DANS_SCHÉMA
    }

    retourne faux
}

parse_info_serveur :: fonc (uri: *URI, info_serveur: chaine) -> ErreurURI
{
    terminateur_ipv6 : z64 = -1

    si info_serveur[0] == '[' {
        terminateur_ipv6 = info_serveur.taille - 1
    }

    double_point : z64 = -1

    pour c, idx dans info_serveur {
        si c == ']' {
            terminateur_ipv6 = idx
        }
        sinon si c == ':' {
            double_point = idx
        }
    }

    si double_point > terminateur_ipv6 {
        uri.hôte = construit_chaine(info_serveur.pointeur, double_point)

        uri.port = avance(info_serveur, double_point + 1)

        si uri.port.taille > 5 {
            retourne ErreurURI.PORT_TROP_GRAND
        }

        pour c dans uri.port {
            si !est_nombre_décimal(c) {
                retourne ErreurURI.CARACTÈRE_INVALIDE_DANS_PORT
            }
        }
    }
    sinon {
        uri.hôte = info_serveur
    }

    retourne 0 comme ErreurURI
}

parse_info_usager :: fonc (uri: *URI, info_usager: chaine) -> rien
{
    // trouve la séparation entre le nom et le mot de passe
    double_point := trouve_caractère_depuis_le_début(info_usager, ':')

    si double_point == -1 {
        double_point = info_usager.taille
    }

    uri.nom_utilisateur = construit_chaine(info_usager.pointeur, double_point)
    uri.mot_de_passe = avance(info_usager, double_point + 1)
}

parse_autorité :: fonc (uri: *URI) -> ErreurURI
{
    début := trouve_caractère_depuis_la_fin(uri.autorité, '@')

    si uri.autorité[début] == '@' {
        composant_usager := construit_chaine(uri.autorité.pointeur, début)
        composant_serveur := avance(uri.autorité, début + 1)

        parse_info_usager(uri, composant_usager)

        tente parse_info_serveur(uri, composant_serveur) piège err {
            retourne err
        }
    }
    sinon {
        composant_serveur := avance(uri.autorité, début)

        tente parse_info_serveur(uri, composant_serveur) piège err {
            retourne err
        }
    }

    si uri.autorité.taille != 0 {
        si uri.hôte.taille == 0 {
            retourne ErreurURI.HÔTE_VIDE
        }
    }

    retourne 0 comme ErreurURI
}

parse_chemin :: fonc (uri: *URI) -> ErreurURI
{
    séparateur_requête : z64 = -1
    séparateur_fragment : z64 = -1

    pour c, idx dans uri.chemin_complet {
        si c == '?' {
            si séparateur_requête < 0 {
                uri.requête_est_définie = vrai
                séparateur_requête = idx
            }
        }
        sinon si c == '#' {
            si séparateur_fragment < 0 {
                uri.fragment_est_défini = vrai
                séparateur_fragment = idx
                arrête
            }
        }
    }

    fin_requête : z64 = 0
    fin_fichier := uri.chemin_complet.taille

    si séparateur_fragment >= 0 {
        fin_requête = séparateur_fragment
        fin_fichier = fin_requête
        uri.fragment = avance(uri.chemin_complet, séparateur_fragment + 1)
    }
    sinon {
        fin_requête = fin_fichier
        fin_fichier = fin_requête
    }

    si séparateur_requête >= 0 {
        fin_fichier = séparateur_requête
        uri.requête = construit_chaine(uri.chemin_complet.pointeur + séparateur_requête + 1, fin_requête - séparateur_requête - 1)
    }

    si fin_fichier != 0 {
        uri.chemin = construit_chaine(uri.chemin_complet.pointeur, fin_fichier)

        si uri.chemin.taille != 0 && uri.autorité != "" {
            si uri.chemin[0] != '/' {
                retourne ErreurURI.CHEMIN_NE_COMMENCE_PAS_PAR_SLASH
            }
        }
    }

    retourne 0 comme ErreurURI
}

parse_uri_standard :: fonc (chn: chaine) -> RésultatURI
{
    chn = avance_si(chn, doit_rogner_de_l_url)
    chn = recule_si(chn, doit_rogner_de_l_url)

    uri : URI
    uri.uri = chn

    eu_schéma := tente extrait_schéma(chn, *uri.schéma) piège err {
        retourne err
    }

    si eu_schéma {
        chn = avance(chn, uri.schéma.taille + 1)
        uri.schéma_est_défini = vrai
    }

    nombre_slashs := compte_consécutifs_si(chn, est_slash_uri)

    // l'autorité doit commencé par deux slashs
    si nombre_slashs == 2 {
        après_slashs := avance(chn, nombre_slashs)
        fin_autorité := trouve_position_si(après_slashs, est_terminateur_autorité)

        si fin_autorité == 0 {
            retourne ErreurURI.AUTORITÉ_MANQUANTE
        }

        uri.autorité = construit_chaine(après_slashs.pointeur, fin_autorité)
        uri.autorité_est_définie = vrai
        uri.chemin_complet = avance(après_slashs, fin_autorité)

        tente parse_autorité(*uri) piège err {
            retourne err
        }
    }
    sinon {
        uri.chemin_complet = chn
    }

    tente parse_chemin(*uri) piège err {
        retourne err
    }

    retourne uri
}

parse_uri_depuis_chemin_requête :: fonc (chn: chaine) -> RésultatURI
{
	uri : URI
	uri.uri = chn
	uri.chemin_complet = chn

	tente parse_chemin(*uri) piège err {
		retourne err
	}

	retourne uri
}

// Retourne une chaine contenant la recomposition de l'URI depuis ses composants.
// Voir RFC3986, section 5.3
recompose_uri :: fonc (uri: *URI) -> chaine
{
    résultat : chaine

    si uri.schéma_est_défini {
        append(*résultat, uri.schéma)
        append(*résultat, ":")
    }

    si uri.autorité_est_définie {
        append(*résultat, "//")
        append(*résultat, uri.autorité)
    }

    append(*résultat, uri.chemin)

    si uri.requête_est_définie {
        append(*résultat, "?")
        append(*résultat, uri.requête)
    }

    si uri.fragment_est_défini {
        append(*résultat, "#")
        append(*résultat, uri.fragment)
    }

    retourne résultat
}

// Calcul une somme de controle, sur 64bit, pour un URI selon l'algorithme de Fletcher
// https://en.wikipedia.org/wiki/Fletcher%27s_checksum
somme_controle :: fonc(uri : &URI) -> n64
{
    // nous ne considérons que l'autorité, le chemin et la requête
    somme1 := 0;
    somme2 := 0;

    pour c dans uri.autorité {
        somme1 = (somme1 + c comme z32) % 0xffffffff
        somme2 = (somme1 + somme2) % 0xffffffff
    }

    pour c dans uri.chemin {
        somme1 = (somme1 + c comme z32) % 0xffffffff
        somme2 = (somme1 + somme2) % 0xffffffff
    }

    pour c dans uri.requête {
        somme1 = (somme1 + c comme z32) % 0xffffffff
        somme2 = (somme1 + somme2) % 0xffffffff
    }

    retourne (somme2 comme n64 << 32) | somme1 comme n64;
}

port_pour_uri :: fonc(uri : &URI) -> n16
{
    si uri.port.taille == 0 {
        si uri.schéma == "http" {
            retourne 80
        }

        si uri.schéma == "https" {
            retourne 443
        }
    }

    retourne extrait_nombre_entier(uri.port) comme n16
}

résoud_échappement_url :: fonc (chn: chaine) -> chaine
{
    nchn : chaine

    i := 0

    tantque i < chn.taille {
        si chn[i] == '%' {
            i += 1

            si i + 2 >= chn.taille {
                arrête
            }

            c := chn[i]

            v : z8

            si 'a' <= c <= 'f' {
                v = (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v = (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v = (c - '0')
            }

            i += 1
            c = chn[i]

            v *= 16

            si 'a' <= c <= 'f' {
                v += (c - 'a') + 10
            }
            sinon si 'A' <= c <= 'F' {
                v += (c - 'a') + 10
            }
            sinon si '0' <= c <= '9' {
                v += (c - '0')
            }

            chaine_ajoute(*nchn, v)
            i += 1
        }
        sinon {
            chaine_ajoute(*nchn, chn[i])
            i += 1
        }
    }

    retourne nchn
}

// -----------------------------------------------
// tests unitaires

importe Compilatrice

#test {
	uri := tente parse_uri_standard("https://john.doe@www.example.com:123/forum/questions/?tag=networking&order=newest#top") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "https")
	compilatrice_vérifie_égalité(uri.autorité, "john.doe@www.example.com:123")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "john.doe")
	compilatrice_vérifie_égalité(uri.hôte, "www.example.com")
	compilatrice_vérifie_égalité(uri.port, "123")
	compilatrice_vérifie_égalité(uri.chemin, "/forum/questions/")
	compilatrice_vérifie_égalité(uri.requête, "tag=networking&order=newest")
	compilatrice_vérifie_égalité(uri.fragment, "top")
}

#test {
	uri := tente parse_uri_standard("ldap://[2001:db8::7]/c=GB?objectClass?one") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "ldap")
	compilatrice_vérifie_égalité(uri.autorité, "[2001:db8::7]")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "[2001:db8::7]")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "/c=GB")
	compilatrice_vérifie_égalité(uri.requête, "objectClass?one")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
	uri := tente parse_uri_standard("mailto:John.Doe@example.com") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "mailto")
	compilatrice_vérifie_égalité(uri.autorité, "")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "John.Doe@example.com")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
	uri := tente parse_uri_standard("news:comp.infosystems.www.servers.unix") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "news")
	compilatrice_vérifie_égalité(uri.autorité, "")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "comp.infosystems.www.servers.unix")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
	uri := tente parse_uri_standard("tel:+1-816-555-1212") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "tel")
	compilatrice_vérifie_égalité(uri.autorité, "")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "+1-816-555-1212")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
	uri := tente parse_uri_standard("telnet://192.0.2.16:80/") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "telnet")
	compilatrice_vérifie_égalité(uri.autorité, "192.0.2.16:80")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "192.0.2.16")
	compilatrice_vérifie_égalité(uri.port, "80")
	compilatrice_vérifie_égalité(uri.chemin, "/")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
	uri := tente parse_uri_standard("urn:oasis:names:specification:docbook:dtd:xml:4.1.2") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "urn")
	compilatrice_vérifie_égalité(uri.autorité, "")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "oasis:names:specification:docbook:dtd:xml:4.1.2")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
    /* vérifie que le parsage est résistant aux attaques sémantiques :
     * ici on pourrait croire que nous allons sur cnn.example.com, alors que nous allons sur 10.0.0.1
     *
     * voir aussi :
     * - https://www.giac.org/paper/gsec/650/semantic-attacks-url/101497
     */
    uri := tente parse_uri_standard("ftp://cnn.example.com&story=breaking_news@10.0.0.1/top_story.htm") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "ftp")
	compilatrice_vérifie_égalité(uri.autorité, "cnn.example.com&story=breaking_news@10.0.0.1")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "cnn.example.com&story=breaking_news")
	compilatrice_vérifie_égalité(uri.hôte, "10.0.0.1")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "/top_story.htm")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
    /* vérifie que le parsage est résistant aux attaques sémantiques :
     * ici on pourrait croire que nous allons sur www.microsoft.com, alors que nous allons sur www.hwnd.net
     *
     * voir aussi :
     * - https://www.giac.org/paper/gsec/650/semantic-attacks-url/101497
     */
	uri := tente parse_uri_standard("http://www.microsoft.com&item%3Dq209354@www.hwnd.net/pub/mskb/Q209354.asp") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "http")
	compilatrice_vérifie_égalité(uri.autorité, "www.microsoft.com&item%3Dq209354@www.hwnd.net")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "www.microsoft.com&item%3Dq209354")
	compilatrice_vérifie_égalité(uri.hôte, "www.hwnd.net")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "/pub/mskb/Q209354.asp")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}

#test {
    /* L'hôte peut également être la valeur décimal de l'adresse IPv4 :
     * pour l'adresse 167.216.133.33, la valeur décimale est 167*256^3+216*256^2+133*256+33 = 2815984929
     *
     * À FAIRE : tests dans IPv4
     */
	uri := tente parse_uri_standard("http://2815984929") piège nonatteignable

	compilatrice_vérifie_égalité(uri.schéma, "http")
	compilatrice_vérifie_égalité(uri.autorité, "2815984929")
	compilatrice_vérifie_égalité(uri.nom_utilisateur, "")
	compilatrice_vérifie_égalité(uri.hôte, "2815984929")
	compilatrice_vérifie_égalité(uri.port, "")
	compilatrice_vérifie_égalité(uri.chemin, "")
	compilatrice_vérifie_égalité(uri.requête, "")
	compilatrice_vérifie_égalité(uri.fragment, "")
}
