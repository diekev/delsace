importe Fondation
importe GlibC
importe SysFichier

ErreurConnexion :: erreur {
    RésolutionHôteImpossible
    CréationPriseImpossible
    ConnexionPriseImpossible
    LiaisonPriseImpossible
    ÉcoutePriseImpossible
}

FichierOuErreur :: union {
    e: ErreurConnexion
    f: Fichier
}

ouvre_connexion_serveur :: fonc (hôte: chaine, port: n16) -> FichierOuErreur
{
    ptr_tampon := chaine_c_temp(hôte)
    he := gethostbyname(ptr_tampon)

    si he == nul {
        retourne ErreurConnexion.RésolutionHôteImpossible
    }

    prise := socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)

    si prise == -1 {
        retourne ErreurConnexion.CréationPriseImpossible
    }

    their_addr : sockaddr_in
    their_addr.sin_family = AF_INET comme n16
    their_addr.sin_port = htons(port)
    their_addr.sin_zero[0] = 0
    their_addr.sin_zero[1] = 0
    their_addr.sin_zero[2] = 0
    their_addr.sin_zero[3] = 0
    their_addr.sin_zero[4] = 0
    their_addr.sin_zero[5] = 0
    their_addr.sin_zero[6] = 0
    their_addr.sin_zero[7] = 0

    x := he.h_addr_list[0]
    their_addr.sin_addr = mémoire(x comme *in_addr)

	si connect(prise, *their_addr comme *sockaddr, taille_de(sockaddr) comme z64) == -1 {
        retourne ErreurConnexion.ConnexionPriseImpossible
    }

    retourne Fichier(desc = prise)
}

ouvre_connexion_serveur :: fonc (uri: &URI) -> FichierOuErreur
{
    retourne ouvre_connexion_serveur(uri.hôte, port_pour_uri(uri))
}

ouvre_connexion_serveur_pour_écoute :: fonc(port: n16, connexions_max: z32) -> FichierOuErreur
{
    prise := socket(PF_INET, SOCK_STREAM, 0)

    si prise == -1 {
        retourne ErreurConnexion.CréationPriseImpossible
    }

    addr : sockaddr_in
    addr.sin_family = PF_INET comme n16
    addr.sin_port = htons(port)
    addr.sin_addr.s_addr = INADDR_ANY
    addr.sin_zero[0] = 0
    addr.sin_zero[1] = 0
    addr.sin_zero[2] = 0
    addr.sin_zero[3] = 0
    addr.sin_zero[4] = 0
    addr.sin_zero[5] = 0
    addr.sin_zero[6] = 0
    addr.sin_zero[7] = 0

    si bind(prise, *addr comme *sockaddr, taille_de(sockaddr) comme n64) != 0 {
        retourne ErreurConnexion.LiaisonPriseImpossible
    }

    si listen(prise, connexions_max) != 0 {
        retourne ErreurConnexion.ÉcoutePriseImpossible
    }

    retourne Fichier(desc = prise)
}
