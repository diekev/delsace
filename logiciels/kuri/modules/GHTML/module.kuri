importe Fondation // pour imprime_valeur
importe Introspection

// À FAIRE: ajout d'un message aux erreurs
ErreurGénérationPage :: énum z32 {
    AUCUNE
    OBJET_NON_ITÉRABLE
    OBJET_NON_TROUVÉ
}

DonnéesGénération :: struct {
    valeur : eini
    nom_variable_boucle : chaine
    données_variable_boucle : eini
}

trouve_variable :: fonc (données: *DonnéesGénération, nom: chaine) -> eini
{
    valeur := trouve_valeur_membre(données.valeur, nom)

    si valeur.est_valide() {
        retourne valeur
    }

    si nom == données.nom_variable_boucle {
        retourne données.données_variable_boucle
    }

    /* la valeur est invalide, donc nous pouvons sûrement la retourner */
    retourne valeur
}

génère_page :: fonc(
    données: *DonnéesGénération,
    noeud: *NoeudSyntaxique,
    enchaineuse: *Enchaineuse) -> ErreurGénérationPage
{
    discr noeud.type {
        BLOC {
            pour enfant dans noeud.enfants {
                erreur_ := génère_page(données, enfant, enchaineuse)

                si erreur_ != ErreurGénérationPage.AUCUNE {
                    retourne erreur_
                }
            }
        }
        CHAINE_CARACTÈRE {
            ajoute_au_tampon(enchaineuse, noeud.données.chn)
        }
        VARIABLE {
            variable := noeud.données.chn
            valeur := trouve_variable(données, variable)

            saufsi valeur.est_valide() {
                retourne ErreurGénérationPage.OBJET_NON_TROUVÉ
            }

            imprime_valeur(enchaineuse, valeur, faux)
        }
        POUR {
            propriété := noeud.enfants[1].données.chn
            valeur := trouve_variable(données, propriété)

            saufsi valeur.est_valide() {
                retourne ErreurGénérationPage.OBJET_NON_TROUVÉ
            }

            variable := noeud.enfants[0].données.chn

            si valeur.est_tableau() {
                itératrice := crée_itératrice_tableau(valeur)

                boucle {
                    valeur_ := itératrice.valeur_suivante()

                    saufsi valeur_.est_valide() {
                        arrête
                    }

                    données.nom_variable_boucle = variable
                    données.données_variable_boucle = valeur_

                    erreur_ := génère_page(données, noeud.enfants[2], enchaineuse)

                    si erreur_ != ErreurGénérationPage.AUCUNE {
                        retourne erreur_
                    }
                }
            }
            sinon {
                ajoute_au_tampon(enchaineuse, "Objet nul n'est pas itérable !")
                retourne ErreurGénérationPage.OBJET_NON_ITÉRABLE
            }
        }
        SI {
            variable := noeud.enfants[0].données.chn
            valeur := trouve_variable(données, variable)

            idx_enfant := 0

            si évalue_condition(valeur) {
                idx_enfant = 1
            }
            sinon si noeud.enfants.taille > 2 {
                idx_enfant = 2
            }

            erreur_ := génère_page(données, noeud.enfants[idx_enfant], enchaineuse)

            si erreur_ != ErreurGénérationPage.AUCUNE {
                retourne erreur_
            }
        }
        ACCÈS_MEMBRE {
            valeur := trouve_valeur_pour_expression(données, noeud)

            saufsi valeur.est_valide() {
                retourne ErreurGénérationPage.OBJET_NON_TROUVÉ
            }

            imprime_valeur(enchaineuse, valeur, faux)
        }
    }

    retourne ErreurGénérationPage.AUCUNE
} @IgnoreNASA

évalue_condition :: fonc (valeur: eini) -> bool
{
    saufsi valeur.est_valide() {
        retourne faux
    }

    si valeur.est_bool() {
        retourne valeur.comme_bool()
    }

    si valeur.est_chaine() {
        retourne valeur.comme_chaine() != ""
    }

    retourne faux
}

trouve_valeur_pour_expression :: fonc (données: *DonnéesGénération, noeud: *NoeudSyntaxique) -> eini
{
    résultat : eini

    discr noeud.type {
        VARIABLE {
            variable := noeud.données.chn
            résultat = trouve_variable(données, variable)
        }
        ACCÈS_MEMBRE {
            accédé := noeud.enfants[0]
            membre := noeud.enfants[1].données.chn

            valeur_accédée := trouve_valeur_pour_expression(données, accédé)

            saufsi valeur_accédée.est_valide() {
                retourne résultat
            }

            résultat = trouve_valeur_membre(valeur_accédée, membre)
        }
        sinon {
            // mauvais type de neoud
        }
    }

    retourne résultat
}
