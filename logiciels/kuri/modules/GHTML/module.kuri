importe Fondation // pour imprime_valeur
importe Introspection

charge "assemblage_arbre"
charge "catalogue_fichier"
charge "fichier_texte"
charge "formulaire"
charge "lexage"
charge "rendeuse_page"
charge "syntaxage"

DonnéesGénération :: struct {
    nom_court_page: chaine
    valeur: eini
    nom_variable_boucle: chaine
    données_variable_boucle: eini
}

erreur_de_génération :: fonc (données_génération: *DonnéesGénération, chns: ...chaine) -> chaine #sanstrace
{
    enchaineuse: Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère détruit_tampons(*enchaineuse)

    ajoute_au_tampon(*enchaineuse, "Alors que je génère la page pour « ", données_génération.nom_court_page, " », j'ai rencontré une erreur :\n\n")

    pour chns {
        ajoute_au_tampon(*enchaineuse, it)
    }

    ajoute_au_tampon(*enchaineuse, "\n\n")

    trace_appel := enregistre_liste_trace_appels(contexte().trace_appel)
    diffère détruit_liste_trace_appels(trace_appel)

    imprime_trace(trace_appel, *enchaineuse)
    retourne chaine_depuis_enchaineuse(*enchaineuse)
}

trouve_variable :: fonc (données: *DonnéesGénération, nom: chaine) -> eini
{
    valeur := trouve_valeur_membre(données.valeur, nom)

    si valeur.est_valide() {
        retourne valeur
    }

    si nom == données.nom_variable_boucle {
        retourne données.données_variable_boucle
    }

    /* la valeur est invalide, donc nous pouvons sûrement la retourner */
    retourne valeur
}

imprime_valeur :: fonc (enchaineuse: *Enchaineuse, valeur: eini)
{
    si valeur.info.id == GenreInfoType.CHAINE {
        chn := valeur.comme_chaine()

        pour chn {
            /* Remplace les caractères sensibles par leurs échappements.
             * '<', '/', et '>' sont échappés notamment pour éviter les attaques XSS.
             * '\'' et '"' le sont pour les attributs, mais nous le faisons toujours pour éviter des bugs de logiques.
             * '&' l'est pour s'assurer que le parseur ne le considère pas comme un caractère de début d'échappement.
             * Voir https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
             * pour plus de détails. */
            si it == '&' {
                ajoute_au_tampon(enchaineuse, "&amp;")
            }
            sinon si it == '<' {
                ajoute_au_tampon(enchaineuse, "&lt;")
            }
            sinon si it == '>' {
                ajoute_au_tampon(enchaineuse, "&gt;")
            }
            sinon si it == '"' {
                ajoute_au_tampon(enchaineuse, "&quot;")
            }
            sinon si it == '\'' {
                ajoute_au_tampon(enchaineuse, "&#39;")
            }
            sinon si it == '/' {
                ajoute_au_tampon(enchaineuse, "&#x2f;")
            }
            sinon {
                ajoute_au_tampon(enchaineuse, it)
            }
        }
    }
    sinon {
        Fondation.imprime_valeur(enchaineuse, valeur, faux)
    }
}

aucune_erreur :: fonc () -> chaine
{
    retourne ""
}

génère_page :: fonc (données: *DonnéesGénération, noeud: *NoeudSyntaxique, enchaineuse: *Enchaineuse) -> chaine
{
    discr noeud.type {
        BLOC {
            pour enfant dans noeud.enfants {
                erreur_ := génère_page(données, enfant, enchaineuse)

                si erreur_ {
                    retourne erreur_
                }
            }

            retourne aucune_erreur()
        }
        CHAINE_CARACTÈRE {
            pour noeud.données.chn {
            }

            ajoute_au_tampon(enchaineuse, noeud.données.chn)
            retourne aucune_erreur()
        }
        VARIABLE {
            valeur := trouve_valeur_pour_expression(données, noeud)

            saufsi valeur.est_valide() {
                retourne erreur_de_génération(données, "Variable « ", noeud.données.chn, " » inconnue !")
            }

            imprime_valeur(enchaineuse, valeur)
            retourne aucune_erreur()
        }
        POUR {
            valeur := trouve_valeur_pour_expression(données, noeud.enfants[1])

            saufsi valeur.est_valide() {
                retourne erreur_de_génération(données, "Impossible de trouver « ", noeud.enfants[1].données.chn, " » !")
            }

            variable := noeud.enfants[0].données.chn

            si valeur.est_tableau() {
                itératrice := crée_itératrice_tableau(valeur)

                boucle {
                    valeur_ := itératrice.valeur_suivante()

                    saufsi valeur_.est_valide() {
                        arrête
                    }

                    données.nom_variable_boucle = variable
                    données.données_variable_boucle = valeur_

                    erreur_ := génère_page(données, noeud.enfants[2], enchaineuse)

                    si erreur_ {
                        retourne erreur_
                    }
                }

                retourne aucune_erreur()
            }

            retourne erreur_de_génération(données, "« ", noeud.enfants[1].données.chn, " » n'est pas itérable !")
        }
        SI {
            variable := noeud.enfants[0].données.chn
            valeur := trouve_variable(données, variable)

            si évalue_condition(valeur) {
                retourne génère_page(données, noeud.enfants[1], enchaineuse)
            }

            si noeud.enfants.taille > 2 {
                retourne génère_page(données, noeud.enfants[2], enchaineuse)
            }

            retourne aucune_erreur()
        }
        ACCÈS_MEMBRE {
            valeur := trouve_valeur_pour_expression(données, noeud)

            saufsi valeur.est_valide() {
                retourne erreur_de_génération(données, "Impossible de résoudre l'expression « ", noeud.enfants[0].données.chn, ".", noeud.enfants[1].données.chn, " » !")
            }

            imprime_valeur(enchaineuse, valeur)
            retourne aucune_erreur()
        }
    }

    retourne erreur_de_génération(données, "Type de noeud inconnus !")
} @FonctionLongue

évalue_condition :: fonc (valeur: eini) -> bool
{
    saufsi valeur.est_valide() {
        retourne faux
    }

    si valeur.est_bool() {
        retourne valeur.comme_bool()
    }

    si valeur.est_chaine() {
        retourne valeur.comme_chaine() != ""
    }

    retourne faux
}

trouve_valeur_pour_expression :: fonc (données: *DonnéesGénération, noeud: *NoeudSyntaxique) -> eini
{
    résultat: eini

    discr noeud.type {
        VARIABLE {
            variable := noeud.données.chn
            résultat = trouve_variable(données, variable)
        }
        ACCÈS_MEMBRE {
            accédé := noeud.enfants[0]
            membre := noeud.enfants[1].données.chn

            valeur_accédée := trouve_valeur_pour_expression(données, accédé)

            saufsi valeur_accédée.est_valide() {
                retourne résultat
            }

            résultat = trouve_valeur_membre(valeur_accédée, membre)
        }
        sinon {
            // mauvais type de neoud
        }
    }

    retourne résultat
}
