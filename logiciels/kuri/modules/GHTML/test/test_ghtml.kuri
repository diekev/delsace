importe Fondation
importe GHTML

ancien_test :: fonc ()
{
    DonnéesPage :: struct {
        titre_page := "Accueil"
        évènements : [3]z32
        variable := "eh ouais..."
        lien := "http://aaa"
    }

    chn := "{%pour x dans évènements%}<a href='{{lien}}'>{%si variable%}{{variable}} {{x}}{% sinon %}texte{% finsi %}</a>\n{% finpour %}"

    imprime("script :\n\n", chn, "\n\n")

    /* ------------------------------------------------------------------------- */
    // Lexage du script

    lexeuse := construit_lexeuse(chn)
    diffère { détruit_lexeuse(lexeuse) }

    lexeuse.performe_lexage()

    imprime("lexèmes :\n\n")

    pour lexème dans lexeuse.lexèmes {
        imprime("% : %\n", lexème.type_lexème, lexème.chn)
    }

    imprime("\n")

    /* ------------------------------------------------------------------------- */
    // Syntaxage du script

    syntaxeuse := construit_syntaxeuse(lexeuse.lexèmes)
    diffère { détruit_assembleuse(syntaxeuse.assembleuse) }

    syntaxeuse.performe_syntaxage()

    racine := syntaxeuse.assembleuse.pile.haut()

    imprime("arbre :\n\n")
    imprime_arbre(racine, 0)
    imprime("\n")

    /* ------------------------------------------------------------------------- */
    // Génération de la page

    données_page : DonnéesPage
    données_page.titre_page = "Accueil"
    données_page.évènements[0] = 127
    données_page.évènements[1] = 255
    données_page.évènements[2] = 511

    données_génération : DonnéesGénération
    données_génération.valeur = données_page

    enchaineuse : Enchaineuse
    initialise_enchaineuse(*enchaineuse)
    diffère { détruit_tampons(*enchaineuse) }

    erreur_ := génère_page(*données_génération, racine, *enchaineuse)

    si erreur_ != ErreurGénérationPage.AUCUNE {
        imprime("Erreur lors de la génération de la page : %\n", erreur_)
    }
    sinon {
        imprime("Page :\n\n")
        résultat := chaine_depuis_enchaineuse(*enchaineuse)
        imprime("%\n", résultat)
        déloge(résultat)
    }

/*
    gestionnaire : GestionnaireObjet
    diffère { détruit(@gestionnaire) }

    dico := crée_dictionnaire(@gestionnaire)

    // À FAIRE: simplifie la création d'objet en passant les paramètres
    liste := crée_liste(@gestionnaire)
    obj1 := crée_entier(@gestionnaire)
    obj1.valeur = 127
    obj2 := crée_réel(@gestionnaire)
    obj2.valeur = 36.0
    obj3 := crée_chaine(@gestionnaire)
    obj3.valeur = "chaine test"

    tableau_ajoute(@liste.valeur, obj1)
    tableau_ajoute(@liste.valeur, obj2)
    tableau_ajoute(@liste.valeur, obj3)

    dico.insère("evenements", liste)

    chaine1 := crée_chaine(@gestionnaire)
    chaine1.valeur = "http://aaa"

    dico.insère("lien", chaine1)

    chaine1 = crée_chaine(@gestionnaire)
    chaine1.valeur = "eh ouais..."

    dico.insère("variable", chaine1)

    enchaineuse : Enchaineuse
    intialise_enchaineuse(@enchaineuse)
    diffère { détruit_tampons(@enchaineuse) }

    erreur := génère_page(racine, @gestionnaire, dico, @enchaineuse)

    si erreur != ErreurGénérationPage.AUCUNE {
        imprime("Erreur lors de la génération de la page : %\n", erreur)
    }
    sinon {
        imprime("Page :\n\n")
        chn := chaine_depuis_enchaineuse(@enchaineuse)
        imprime(enchaineuse.résultat, "\n")
        déloge(chn)
    }
*/
}

principale :: fonc () -> z32
{
    diffère { imprime("mémoire utilisée : %o\n", mémoire_utilisée()) }

    rendeuse_page: RendeusePage
    diffère { détruit_rendeuse(*rendeuse_page) }

    ajoute_fichier(*rendeuse_page.catalogue, "base", "base.html")
    ajoute_fichier(*rendeuse_page.catalogue, "corps", "corps.html")
    ajoute_fichier(*rendeuse_page.catalogue, "extra", "extra.html")

    DonnéesPage :: struct {
        titre := "Page Test"
    }

    Indirection :: struct {
        indirection : DonnéesPage
    }

    données_page : Indirection

    chn := rends_page(*rendeuse_page, "base", données_page)

    imprime("résultat :\n%\n", chn)
    déloge(chn)

    chn = rends_page(*rendeuse_page, "corps", données_page)

    imprime("résultat :\n%\n", chn)
    déloge(chn)

    retourne 0
}
