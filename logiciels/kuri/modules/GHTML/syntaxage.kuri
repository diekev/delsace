charge "assemblage_arbre"
charge "lexage"

importe Fondation

Syntaxeuse :: struct {
    lexèmes : []DonnéesLexème
    assembleuse : AssembleuseArbre

    position := 0
}

construit_syntaxeuse :: fonc(lexèmes : &[]DonnéesLexème) -> Syntaxeuse
{
    dyn syntaxeuse : Syntaxeuse
    syntaxeuse.lexèmes = lexèmes
	syntaxeuse.assembleuse = construit_assembleuse()

    retourne syntaxeuse
}

lexème_courant :: fonc(syntaxeuse : &Syntaxeuse) -> TypeLexème
{
	retourne syntaxeuse.lexèmes[syntaxeuse.position].type_lexème
}

avance :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	syntaxeuse.position += 1
}

recule :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	syntaxeuse.position -= 1
}

requiers_lexème :: fonc(syntaxeuse : &Syntaxeuse, type : TypeLexème) -> bool
{
	t := syntaxeuse.lexème_courant()
	syntaxeuse.avance()
	retourne t == type
}

est_lexème :: fonc(syntaxeuse : &Syntaxeuse, type : TypeLexème) -> bool
{
	retourne syntaxeuse.lexème_courant() == type
}

données :: fonc(syntaxeuse : &Syntaxeuse) -> &DonnéesLexème
{
	retourne syntaxeuse.lexèmes[syntaxeuse.position - 1]
}

position :: fonc(syntaxeuse : &Syntaxeuse) -> z32
{
    retourne syntaxeuse.position - 1
}

fini :: fonc(syntaxeuse : &Syntaxeuse) -> bool
{
    retourne syntaxeuse.position >= syntaxeuse.lexèmes.taille
}

performe_syntaxage :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	syntaxeuse.position = 0

	si (syntaxeuse.lexèmes.taille == 0) {
		retourne
	}

    données_lexème : DonnéesLexème
	syntaxeuse.assembleuse.empile_noeud(TypeNoeud.BLOC, données_lexème)

	syntaxeuse.analyse_page()

	syntaxeuse.assembleuse.attend_type(TypeNoeud.BLOC)
}

analyse_page :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	tantque !syntaxeuse.fini() {
		si (syntaxeuse.est_lexème(TypeLexème.CHAINE_CARACTÈRE)) {
			syntaxeuse.avance()
			syntaxeuse.assembleuse.ajoute_noeud(TypeNoeud.CHAINE_CARACTÈRE, syntaxeuse.données())
		}
		sinon si (syntaxeuse.est_lexème(TypeLexème.DÉBUT_EXPRESSION)) {
			syntaxeuse.analyse_expression()
		}
		sinon si (syntaxeuse.est_lexème(TypeLexème.DÉBUT_VARIABLE)) {
			syntaxeuse.avance()

			si (!syntaxeuse.requiers_lexème(TypeLexème.CHAINE_CARACTÈRE)) {
				//lance_erreur("Attendu identsiiant de la variable après '{{'")
			}

			syntaxeuse.assembleuse.ajoute_noeud(TypeNoeud.VARIABLE, syntaxeuse.données())

			si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_VARIABLE)) {
				//lance_erreur("Attendu '}}' à la fin de la déclaration d'une variable")
			}
		}
	}
}

analyse_expression :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	si (!syntaxeuse.requiers_lexème(TypeLexème.DÉBUT_EXPRESSION)) {
		//lance_erreur("Attendu '{%'")
	}

	si (syntaxeuse.est_lexème(TypeLexème.SI)) {
		syntaxeuse.analyse_si()
	}
	sinon si (syntaxeuse.est_lexème(TypeLexème.POUR)) {
		syntaxeuse.analyse_pour()
	}
	sinon si (syntaxeuse.est_lexème(TypeLexème.SINON)) {
		//assert(syntaxeuse.assembleuse.noeud_courant() == "SI")
		syntaxeuse.avance()

		si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_EXPRESSION)) {
			//lance_erreur("Attendu '%}'")
		}

		syntaxeuse.assembleuse.dépile_noeud(TypeNoeud.BLOC)

		syntaxeuse.assembleuse.attend_type(TypeNoeud.SI)

		syntaxeuse.assembleuse.empile_noeud(TypeNoeud.BLOC, syntaxeuse.données())

		syntaxeuse.analyse_page()
	}
	sinon si (syntaxeuse.est_lexème(TypeLexème.FINSI)) {
		syntaxeuse.avance()

		syntaxeuse.assembleuse.dépile_noeud(TypeNoeud.BLOC)

		syntaxeuse.assembleuse.dépile_noeud(TypeNoeud.SI)

		si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_EXPRESSION)) {
			//lance_erreur("Attendu '%}'")
		}
	}
	sinon si (syntaxeuse.est_lexème(TypeLexème.FINPOUR)) {
		syntaxeuse.avance()

		syntaxeuse.assembleuse.dépile_noeud(TypeNoeud.BLOC)

		syntaxeuse.assembleuse.dépile_noeud(TypeNoeud.POUR)

		si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_EXPRESSION)) {
			//lance_erreur("Attendu '%}'")
		}
	}
	sinon {
		//lance_erreur("Identsiiant inconnu")
	}
}

analyse_si :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	si (!syntaxeuse.requiers_lexème(TypeLexème.SI)) {
		//lance_erreur("Attendu 'si'")
	}

	syntaxeuse.assembleuse.empile_noeud(TypeNoeud.SI, syntaxeuse.données())

	si (!syntaxeuse.requiers_lexème(TypeLexème.CHAINE_CARACTÈRE)) {
		//lance_erreur("Attendu une chaîne de caractère après 'si'")
	}

	syntaxeuse.assembleuse.ajoute_noeud(TypeNoeud.VARIABLE, syntaxeuse.données())

	si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_EXPRESSION)) {
		//lance_erreur("Attendu '%}'")
	}

	syntaxeuse.assembleuse.empile_noeud(TypeNoeud.BLOC, syntaxeuse.données())

	syntaxeuse.analyse_page()
}

analyse_pour :: fonc(dyn syntaxeuse : &Syntaxeuse) -> rien
{
	si (!syntaxeuse.requiers_lexème(TypeLexème.POUR)) {
		//lance_erreur("Attendu 'pour'")
	}

	syntaxeuse.assembleuse.empile_noeud(TypeNoeud.POUR, syntaxeuse.données())

	si (!syntaxeuse.requiers_lexème(TypeLexème.CHAINE_CARACTÈRE)) {
		//lance_erreur("Attendu une chaîne de caractère après 'pour'")
	}

	syntaxeuse.assembleuse.ajoute_noeud(TypeNoeud.VARIABLE, syntaxeuse.données())

	si (!syntaxeuse.requiers_lexème(TypeLexème.DANS)) {
		//lance_erreur("Attendu 'dans'")
	}

	si (!syntaxeuse.requiers_lexème(TypeLexème.CHAINE_CARACTÈRE)) {
		//lance_erreur("Attendu une chaîne de caractère après 'dans'")
	}

	syntaxeuse.assembleuse.ajoute_noeud(TypeNoeud.VARIABLE, syntaxeuse.données())

	si (!syntaxeuse.requiers_lexème(TypeLexème.FIN_EXPRESSION)) {
		//lance_erreur("Attendu '%}'")
	}

	syntaxeuse.assembleuse.empile_noeud(TypeNoeud.BLOC, syntaxeuse.données())

	syntaxeuse.analyse_page()
}

imprime_arbre :: fonc(racine : *NoeudSyntaxique, tab : z32) -> rien
{
	pour i dans 0 ... tab - 1 {
		imprime_sans_format("  ")
	}

	imprime("% (%)\n", racine.type, racine.données.chn)

	pour noeud dans racine.enfants {
		imprime_arbre(noeud, tab + 1)
	}
}
