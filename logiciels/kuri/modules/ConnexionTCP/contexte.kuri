
Contexte :: struct {
    boucle_prises : *Boucle

    /* rappels */
    quand_ouverture_ : fonc (*Prise)(rien)
    quand_données_reçues_ : fonc (*Prise, []octet)(rien)
    quand_écriture_ : fonc (*Prise)(rien)
    quand_fermeture_ : fonc (*Prise)(rien)
    quand_timeout_ : fonc (*Prise)(rien)
    quand_fin_ : fonc (*Prise)(rien)
    quand_erreur_connexion_ : fonc (*Prise)(rien)

    taille_mémoire : z64
    info_utilisateur : *InfoType

    /* serveuse : optionnel */
    serveuse_: *rien
    info_serveuse : *InfoType
}

mute_serveuse :: fonc (contexte_: *Contexte, serveuse: *$T)
{
    contexte_.serveuse_ = serveuse
    contexte_.info_serveuse = info_de(T)
}

accède_serveuse :: fonc (contexte_: *Contexte, $T: type_de_données) -> *T
{
    si info_de(T) != contexte_.info_serveuse {
        retourne nul
    }

    retourne contexte_.serveuse_ comme *T
}

données_utilisateur :: fonc (contexte_: *Contexte, $TypeDonnées: type_de_données) -> *TypeDonnées
{
    si contexte_.taille_mémoire == 0 {
        retourne nul
    }

    si contexte_.info_utilisateur != info_de(TypeDonnées) {
        retourne nul
    }

    retourne (contexte_ + 1) comme *TypeDonnées
}

crée_contexte :: fonc (boucle_prises: *Boucle, $TypeDonnées: type_de_données) -> *Contexte
{
    taille_à_loger := (taille_de(Contexte) + taille_de(TypeDonnées)) comme z64
    mém_contexte_ := loge_mémoire(taille_à_loger, info_de(Contexte), PositionCodeSource())

    contexte_ := mém_contexte_ comme *Contexte
    init_de(Contexte)(contexte_)

    contexte_.boucle_prises = boucle_prises

    contexte_.taille_mémoire = taille_à_loger
    contexte_.info_utilisateur = info_de(TypeDonnées)

    retourne contexte_
}

détruit_contexte :: fonc (ctx: *Contexte)
{
    déloge_mémoire(ctx.taille_mémoire, ctx, info_de(Contexte), PositionCodeSource())
}

// -----------------------------------------------------
// Mise en place des rappels.

mute_quand_ouverture :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_ouverture_ = rappel
}

mute_quand_données_reçues :: fonc (ctx: *Contexte, rappel: fonc (*Prise, []octet)(rien))
{
    ctx.quand_données_reçues_ = rappel
}

mute_quand_écriture :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_écriture_ = rappel
}

mute_quand_fermeture :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_fermeture_ = rappel
}

mute_quand_timeout :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_timeout_ = rappel
}

mute_quand_fin :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_fin_ = rappel
}

mute_quand_erreur_connexion :: fonc (ctx: *Contexte, rappel: fonc (*Prise)(rien))
{
    ctx.quand_erreur_connexion_ = rappel
}
