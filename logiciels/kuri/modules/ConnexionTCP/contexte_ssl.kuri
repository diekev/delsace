importe Fondation
importe OpenSSL

// ------------------------------------------------------
// ContextePriseSSL

ContextePriseSSL :: struct {
    empl base: Contexte

    ctx_ssl : *SSL_CTX

    /* Ces rappels correspondent aux rappels mis en place via mute_quand_* par l'application cliente.
     * Les rappels situés dans le Contexte de base sont remplacés par des fonctions définies ci-après
     * afin de gérer manuellement les logiques d'écritures/lectures/etc. nécessaires pour SSL. Ces
     * fonctions appeleront a leurs tours les rappels de l'application qui sont stockés ici.
     */
    sur_écriture_base : fonc(*Prise)(rien)
    sur_données_reçues_base : fonc(*Prise, []octet)(rien)
    sur_ouverture_base : fonc(*Prise, bool)(rien)
    sur_fermeture_base : fonc(*Prise)(rien)
}

// ------------------------------------------------------
// Création/Destruction

crée_contexte_ssl :: fonc (boucle_évènements: *Boucle, options: OptionsCréationContexteSSL, $TypeDonnées: type_de_données) -> *Contexte
{
    initialise_données_ssl_boucle(boucle_évènements)
    saufsi boucle_évènements.données_ssl {
        retourne nul
    }

    ctx_ssl := crée_contexte_ssl_depuis_options(options)
    saufsi ctx_ssl {
        retourne nul
    }

    ctx_ := crée_contexte_impl(boucle_évènements, ContextePriseSSL, TypeDonnées)
    ctx_.est_ssl_ = vrai

    /* Then we extend its SSL parts */
    ctx_.ctx_ssl = ctx_ssl
    // ctx_.is_parent = 1;

    /* We, as parent context, may ignore data */
    // ctx_.sc.ignore_data = (int (*)(struct us_socket_t *)) ssl_ignore_data;
    // ctx_.on_server_name = NULL;

    /* Parent contexts may use SNI */
    // SSL_CTX_set_tlsext_servername_callback(ctx_.ssl_context, sni_cb);
    // SSL_CTX_set_tlsext_servername_arg(ctx_.ssl_context, context);

    /* Also create the SNI tree */
    // ctx_.sni = sni_new();

    retourne ctx_
}

détruit_contexte_ssl :: fonc (ctx: *ContextePriseSSL)
{
    /* If we are parent then we need to free our OpenSSL context */
    // if (context->is_parent) {
        détruit_contexte_ssl(ctx.ctx_ssl)

        /* Here we need to register a temporary callback for all still-existing hostnames
         * and their contexts. Only parents have an SNI tree */
        // sni_free(context->sni, sni_hostname_destructor);
    // }

    déloge_mémoire(ctx.taille_mémoire, ctx, info_de(ContextePriseSSL), PositionCodeSource())
}

// ------------------------------------------------------
// Fonctions de rappels pour parasiter le contexte de base
// avec un contexte SSL

/* Ici nous initialisons les données SSL pour chaque prise avant d'appeler le rappel de l'application cliente. */
sur_ouverture_ssl :: fonc (prise: *Prise, est_client: bool) -> rien
{
    ctx_prise_ssl := prise.contexte_ comme *ContextePriseSSL
    prise_ssl := prise comme *PriseSSL
    boucle_ := ctx_prise_ssl.boucle_prises
    données_ssl_boucle := boucle_.données_ssl

    prise_ssl.ssl = SSL_new(ctx_prise_ssl.ctx_ssl)
    prise_ssl.écriture_ssl_veut_lire = faux
    prise_ssl.lecture_ssl_veut_écrire = faux
    SSL_set_bio(prise_ssl.ssl, données_ssl_boucle.bio_partagé_lecture, données_ssl_boucle.bio_partagé_écriture)

    _ := BIO_up_ref(données_ssl_boucle.bio_partagé_lecture)
    _ := BIO_up_ref(données_ssl_boucle.bio_partagé_écriture)

    si est_client {
        SSL_set_connect_state(prise_ssl.ssl)
    }
    sinon {
        SSL_set_accept_state(prise_ssl.ssl)
    }

    /* Appel le rappel de l'application cliente. */
    ctx_prise_ssl.sur_ouverture_base(prise, est_client)
}

sur_données_reçues_ssl :: fonc (prise: *Prise, données: []octet)
{
    ctx_prise_ssl := prise.contexte_ comme *ContextePriseSSL
    prise_ssl := prise comme *PriseSSL
    boucle_ := ctx_prise_ssl.boucle_prises
    données_ssl_boucle := boucle_.données_ssl

    // note: if we put data here we should never really clear it (not in write either, it still should be available for SSL_write to read from!)
    données_ssl_boucle.ssl_read_input = données.pointeur
    données_ssl_boucle.ssl_read_input_length = données.taille comme z32
    données_ssl_boucle.ssl_read_input_offset = 0;
    données_ssl_boucle.prise_ssl = prise_ssl;
    // données_ssl_boucle.msg_more = 0;

    // if (us_internal_ssl_socket_is_shut_down(s)) {
    //     ret := SSL_shutdown(prise_ssl.ssl)
    //     si ret == 1 {
    //         // two phase shutdown is complete here
    //         //printf("Two step SSL shutdown complete\n");

    //         /* Todo: this should also report some kind of clean shutdown */
    //         return us_internal_ssl_socket_close(s, 0, NULL);
    //     }
    //     si ret < 0 {
    //         err := SSL_get_error(prise_ssl.ssl, ret)
    //         efface_file_erreur_locale(err)
    //     }

    //     // no further processing of data when in shutdown state
    //     retourne
    // }

    // bug checking: this loop needs a lot of attention and clean-ups and check-ups
    octets_lus := 0
    boucle {
        just_read := SSL_read(prise_ssl.ssl, (données_ssl_boucle.ssl_read_output + MARGE_TAMPON_RÉCEPTION + octets_lus) comme *z8, TAILLE_TAMPON_RÉCEPTION_DONNÉES - octets_lus);

        si just_read <= 0 {
            err := SSL_get_error(prise_ssl.ssl, just_read)

            /* Nous ne gérons que ces deux erreurs pour le moment. */
            si err != SSL_ERROR_WANT_READ && err != SSL_ERROR_WANT_WRITE {
                efface_file_erreur_locale(err)
                /* Erreur critique, fermons la connexion. */
                prise.ferme()
                retourne
            }

            /* Émettons les données que nous avons, et sortons. */
            si err == SSL_ERROR_WANT_WRITE {
                /* Assurons nous de déclencher un évènement d'écriture à la prochaine lecture. */
                prise_ssl.lecture_ssl_veut_écrire = vrai
            }

            /* Présumons que nous avons vider le tampon, ou alors il y eu une erreur. */
            si données_ssl_boucle.ssl_read_input_length {
                prise.ferme()
                retourne
            }

            /* Pas la peine d'appeler l'application cliente, s'il n'y a aucune donnée. */
            saufsi octets_lus {
                arrête
            }

            ctx_prise_ssl = prise.contexte_ comme *ContextePriseSSL

            données_déchiffrées : []octet = ---
            données_déchiffrées.pointeur = données_ssl_boucle.ssl_read_output + MARGE_TAMPON_RÉCEPTION
            données_déchiffrées.taille = octets_lus

            ctx_prise_ssl.sur_données_reçues_base(prise, données_déchiffrées)

            si prise.est_fermée() {
                retourne
            }

            arrête
        }

        octets_lus += just_read;

        // at this point we might be full and need to emit the data to application and start over
        // if (octets_lus == TAILLE_TAMPON_RÉCEPTION_DONNÉES) {
        //     context = (struct us_internal_ssl_socket_context_t *) us_socket_context(0, &s->s);

        //     // emit data and restart
        //     s = context->on_data(s, données_ssl_boucle.ssl_read_output + LIBUS_RECV_BUFFER_PADDING, read);
        //     if (us_socket_is_closed(0, &s->s)) {
        //         return s;
        //     }

        //     octets_lus = 0;
        // }
    }

    /* Déclenchons un évènement d'écriture si la dernière écriture voulu lire (par exemple,
     * notre écriture fut interrompu par un serrage de main, donc il faut réécrire). */
    si prise_ssl.écriture_ssl_veut_lire {
        prise_ssl.écriture_ssl_veut_lire = faux

        ctx_prise_ssl = prise.contexte_ comme *ContextePriseSSL
        ctx_prise_ssl.quand_écriture_(prise)

        si prise.est_fermée() {
            retourne
        }
    }

    // // check this then?
    // if (SSL_get_shutdown(s->ssl) & SSL_RECEIVED_SHUTDOWN) {
    //     // not correct anyways!
    //     s = us_internal_ssl_socket_close(s, 0, NULL);
    // }
}

sur_écriture_ssl :: fonc (prise: *Prise) -> rien
{
    ctx_prise_ssl := prise.contexte_ comme *ContextePriseSSL
    prise_ssl := prise comme *PriseSSL

    si prise_ssl.lecture_ssl_veut_écrire {
        prise_ssl.lecture_ssl_veut_écrire = faux

        ctx_prise_ssl = prise.contexte_ comme *ContextePriseSSL
        données : []octet
        ctx_prise_ssl.quand_données_reçues_(prise, données)
    }

    ctx_prise_ssl.sur_écriture_base(prise)
}

sur_fermeture_ssl :: fonc (prise: *Prise) -> rien
{
    prise_ssl := prise comme *PriseSSL
    ctx_prise_ssl := prise.contexte_ comme *ContextePriseSSL
    SSL_free(prise_ssl.ssl)
    ctx_prise_ssl.sur_fermeture_base(prise)
}

sur_fin_ssl :: fonc (prise: *Prise) -> rien
{
    prise.ferme()
}

// ------------------------------------------------------
// Mutation des rappels de base.

contexte_ssl_parasite_quand_ouverture :: fonc (ctx: *ContextePriseSSL, rappel: fonc (*Prise, bool)(rien)) -> type_de(rappel)
{
    ctx.sur_ouverture_base = rappel
    retourne sur_ouverture_ssl
}

contexte_ssl_parasite_quand_données_reçues :: fonc (ctx: *ContextePriseSSL, rappel: fonc (*Prise, []octet)(rien)) -> type_de(rappel)
{
    ctx.sur_données_reçues_base = rappel
    retourne sur_données_reçues_ssl
}

contexte_ssl_parasite_quand_écriture :: fonc (ctx: *ContextePriseSSL, rappel: fonc (*Prise)(rien)) -> type_de(rappel)
{
    ctx.sur_écriture_base = rappel
    retourne sur_écriture_ssl
}

contexte_ssl_parasite_quand_fermeture :: fonc (ctx: *ContextePriseSSL, rappel: fonc (*Prise)(rien)) -> type_de(rappel)
{
    ctx.sur_fermeture_base = rappel
    retourne sur_fermeture_ssl
}

contexte_ssl_parasite_quand_timeout :: fonc (ctx: *ContextePriseSSL @inutilisée, rappel: fonc (*Prise)(rien)) -> type_de(rappel)
{
    retourne rappel
}

contexte_ssl_parasite_quand_fin :: fonc (ctx: *ContextePriseSSL @inutilisée, rappel: fonc (*Prise)(rien) @inutilisée) -> type_de(rappel)
{
    /* Si SSL est utilisée, nous n'utilisons pas le rappel renseigné par l'application, car SSL ne supporte pas les prises à moitié fermées.
     * Nous fermons directement la prise. */
    retourne sur_fin_ssl
}

contexte_ssl_parasite_quand_erreur_connexion :: fonc (ctx: *ContextePriseSSL @inutilisée, rappel: fonc (*Prise)(rien)) -> type_de(rappel)
{
    retourne rappel
}
