libz :: #bibliothèque "z"

#dépendance_bibliothèque libmodule_c_compression libz

importe Fondation
importe SysFichier

charge "interface_compression"

/* Création d'un flux de compression pour un fichier. */

crée_flux_compression_pour_fichier :: fonc (fichier: *Fichier) -> FluxCompression
{
    flux: FluxCompression
    flux.donnees_utilisateur = fichier
    flux.lis = flux_compression_fichier_lis
    flux.ecris = flux_compression_fichier_ecris
    flux.possede_erreur = flux_compression_fichier_possede_erreur
    flux.fin_de_flux = flux_compression_fichier_fin_de_flux
    retourne flux
}

flux_compression_fichier_ecris :: fonc (flux: *FluxCompression, taille: n32, données: *n8) -> n32
{
    taille_écrite: n32

    fichier := flux.donnees_utilisateur comme *Fichier

    tampon : []octet = ---
    tampon.pointeur = données comme *octet
    tampon.taille = taille comme z64

    résultat := fichier.écris(tampon)

    discr résultat {
        e {
            taille_écrite = 0
        }
        r {
            taille_écrite = résultat.r comme n32
        }
    }

    retourne taille_écrite
}

flux_compression_fichier_lis :: fonc (flux: *FluxCompression, taille: n32, données: *n8) -> n32
{
    taille_lue: n32

    fichier := flux.donnees_utilisateur comme *Fichier

    tampon := chaine(données comme *z8, taille comme z64)

    résultat := fichier.lis(tampon)

    discr résultat {
        e {
            taille_lue = 0
        }
        r {
            taille_lue = résultat.r comme n32
        }
    }

    retourne taille_lue
}

flux_compression_fichier_fin_de_flux :: fonc (flux: *FluxCompression) -> bool
{
    fichier := flux.donnees_utilisateur comme *Fichier
    retourne est_fin_de_fichier(fichier)
}

flux_compression_fichier_possede_erreur :: fonc (flux: *FluxCompression) -> bool
{
    // À FAIRE
    retourne faux
}

/* Création d'un flux de compression pour une chaine. */

crée_flux_compression_pour_chaine :: fonc (chn: *chaine) -> FluxCompression
{
    flux: FluxCompression
    flux.donnees_utilisateur = chn
    flux.lis = flux_compression_chaine_lis
    flux.ecris = flux_compression_chaine_ecris
    flux.possede_erreur = flux_compression_chaine_possede_erreur
    flux.fin_de_flux = flux_compression_chaine_fin_de_flux
    retourne flux
}

flux_compression_chaine_ecris :: fonc (flux: *FluxCompression, taille: n32, données: *n8) -> n32
{
    taille_écrite: n32

    chn := flux.donnees_utilisateur comme *chaine

    tampon := chaine(données comme *z8, taille comme z64)

    taille_écrite = taille

    chaine_ajoute(chn, tampon)

    retourne taille_écrite
}

flux_compression_chaine_lis :: fonc (flux: *FluxCompression, taille: n32, données: *n8) -> n32
{
    taille_lue: n32

    chn := flux.donnees_utilisateur comme *chaine

    taille_z64 := taille comme z64

    si taille_z64 > chn.taille {
        taille_z64 = chn.taille
    }

    copie_mem_nonsur(src = chn.pointeur, dst = données, taille = taille_z64)

    taille_lue = taille_z64 comme n32
    mémoire(chn) = avance(mémoire(chn), taille_z64)

    retourne taille_lue
}

flux_compression_chaine_fin_de_flux :: fonc (flux: *FluxCompression) -> bool
{
    chn := flux.donnees_utilisateur comme *chaine
    retourne chn.taille == 0
}

flux_compression_chaine_possede_erreur :: fonc (flux: *FluxCompression @inutilisée) -> bool
{
    retourne faux
}

taille_stockage_temporaire_ctx :: fonc (ctx: *ContexteCompression @inutilisée) -> n32
{
    retourne 1024
}

cree_stockage_temporaire_ctx :: fonc (ctx: *ContexteCompression @inutilisée, taille: n32) -> *n8
{
    retourne loge_mémoire(taille comme z64, nul, PositionCodeSource())
}

detruit_stockage_temporaire_ctx :: fonc (ctx: *ContexteCompression @inutilisée, pointeur: *n8, taille: n32) -> rien
{
    déloge_mémoire(taille comme z64, pointeur, nul, PositionCodeSource())
}
