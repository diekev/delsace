importe Couleur
importe Fondation
importe Géométrie
importe Périphériques
importe PeintureInterface
importe Typographie

/* ------------------------------------------------------------------------- */
/** \nom Bouton
 * \{ */

Bouton :: struct {
    // À FAIRE : icone
    // À FAIRE : métadonnées
    texte: chaine
    sur_clique: fonc(*Bouton)(rien)
}

crée_bouton :: fonc (texte: chaine, sur_clique: fonc(*Bouton)(rien)) -> *Bouton
{
    résultat := loge(Bouton)
    résultat.texte = texte
    résultat.sur_clique = sur_clique
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Panneau Bouton
 * \{ */

PanneauBouton :: struct {
    empl base: Panneau

    bouton: *Bouton
    souris_pressée := faux
    souris_dans_rect := faux
}

crée_panneau_bouton :: fonc (ctx: *ContexteInterface, parent: *Panneau, bouton: *Bouton) -> *PanneauBouton
{
    sur_déplacement_souris :: fonc (panneau_bouton: *PanneauBouton, souris: ÉtatSouris)
    {
        panneau_bouton.souris_dans_rect = panneau_bouton.rect.contient(souris.où)
    }

    sur_clique_souris :: fonc (panneau_bouton: *PanneauBouton, clique: CliqueSouris) -> bool
    {
        saufsi panneau_bouton.rect.contient(clique.état.où) {
            panneau_bouton.souris_pressée = faux
            retourne faux
        }

        si clique.action == ActionSouris.PRESSÉE {
            panneau_bouton.souris_pressée = vrai
        }
        sinon si clique.action == ActionSouris.RELACHÉE {
            fut_pressé := panneau_bouton.souris_pressée
            panneau_bouton.souris_pressée = faux

            si fut_pressé {
                bouton := panneau_bouton.bouton
                si bouton.sur_clique {
                    bouton.sur_clique(bouton)
                }
            }
        }

        retourne vrai
    }

    sur_dessin :: fonc (panneau_bouton: *PanneauBouton, ctx: *ContexteAffichage)
    {
        peintre := ctx.peintre
        thème := ctx.thème

        fonte := panneau_bouton.contexte.fonte
        métriques := donne_métriques_fonte(fonte)

        /* Calcul rect. */
        hauteur_de_ligne := métriques.donne_hauteur_ligne() comme z32
        hauteur_bouton := hauteur_de_ligne + 10
        espaçage := donne_largeur_texte(fonte, "0")
        largeur_texte := fonte.donne_largeur_texte(panneau_bouton.bouton.texte)

        largeur_bouton := largeur_texte + espaçage * 2

        // À FAIRE : codé en dur !
        rect_parent := panneau_bouton.rect
        rect := rect_parent
        // rect.x = rect_parent.largeur - largeur_bouton - 10
        // rect.y = rect_parent.hauteur - hauteur_bouton - 64 - 10
        rect.largeur = largeur_bouton
        rect.hauteur = hauteur_bouton

        panneau_bouton.rect = rect

        couleur := thème.couleur_bouton
        si panneau_bouton.souris_pressée {
            couleur = thème.couleur_bouton_pressé
        }
        sinon si panneau_bouton.souris_dans_rect {
            couleur = thème.couleur_bouton_survolé
        }

        peintre.remplis_rectangle(panneau_bouton.rect, couleur)

        rect_texte := rect
        rect_texte.x += espaçage
        rect_texte.y += 5

        peintre.dessine_texte(fonte, panneau_bouton.bouton.texte, rect_texte, thème.couleur_texte)
    }

    résultat := ctx.crée_panneau(PanneauBouton)
    résultat.bouton = bouton

    si parent {
        ajoute_enfant(parent, résultat)
    }

    résultat.sur_déplacement_souris = enveloppe_rappel(sur_déplacement_souris)
    résultat.sur_clique_souris = enveloppe_rappel(sur_clique_souris)
    résultat.sur_dessin = enveloppe_rappel(sur_dessin)
    retourne résultat
}

/** \} */
