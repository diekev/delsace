/* Module pour dessiner et gérer des interfaces graphiques. */

importe Couleur
importe Fondation
importe Géométrie
importe Périphériques
importe PeintureInterface
importe Typographie

charge "menu"

/* ------------------------------------------------------------------------- */
/** \nom Contexte pour le dessin.
 * \{ */

ContexteAffichage :: struct {
    peintre: *Peintre
    fonte: *Fonte
    thème: *Thème
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom ContexteInterface.
 * \{ */

/* Le ContexteInterface doit être instancié par fenêtre.
 * Il permet de créer les panneaux pour chaque fenêtre.
 * Il stocke l'état de l'interface : les éléments actifs/focalisés.
 * Chaque panneau possède une référence à ce contexte.
 *
 * rappel_définis_curseur_souris peut être mise en place par les applications
 * cliente afin que les panneaux puissent définir un curseur (par exemple
 * lorsque survolé). Il est suggéré d'utiliser son propre type de contexte par
 * composition avec celui-ci afin de pouvoir savoir pour quel contexte le
 * curseur doit être définis.
 */
ContexteInterface :: struct {
    /* Le menu étant affiché. */
    menu_affiché: *PanneauMenu
    fonte: *Fonte

    panneau_racine: *Panneau

    panneau_cliqué: *Panneau

    rappel_définis_curseur_souris: fonc(*ContexteInterface, TypeCurseurSystème)(rien)
}

initialise_un_contexte_interface :: fonc (fonte: *Fonte) -> ContexteInterface
{
    résultat: ContexteInterface
    résultat.fonte = fonte
    retourne résultat
}

crée_panneau :: fonc (contexte: *ContexteInterface, $TypePanneau: type_de_données) -> *TypePanneau
{
    résultat := loge(TypePanneau)
    résultat.contexte = contexte
    résultat.sur_redimension = sur_redimension_impl_défaut
    résultat.sur_destruction = sur_destruction_générique(TypePanneau)
    résultat.identifiant = info_de(TypePanneau).nom
    retourne résultat
}

définis_panneau_menu :: fonc (contexte: *ContexteInterface, panneau: *PanneauMenu)
{
    contexte.menu_affiché = panneau
}

détruit_panneau_menu :: fonc (contexte: *ContexteInterface)
{
    si contexte.menu_affiché {
        détruit_panneau_menu(contexte.menu_affiché)
    }
}

gère_clique_souris :: fonc (empl contexte: *ContexteInterface, clique: CliqueSouris)
{
    si gère_clique_souris(panneau_cliqué, clique) {
        // imprime("Clique géré par %\n", panneau_cliqué.identifiant)
        retourne
    }

    panneau_cliqué = trouve_panneau_cliqué(contexte.panneau_racine, clique)

    // si panneau_cliqué {
    //     imprime("Clique sur panneau '%'\n", panneau_cliqué.identifiant)
    // }
    // sinon {
    //     imprime("Cliqué sur aucun panneau\n")
    // }
}

trouve_panneau_cliqué :: fonc (panneau_racine: *Panneau, clique: CliqueSouris) -> *Panneau
{
    saufsi panneau_racine {
        retourne nul
    }

    pour panneau_racine.enfants {
        panneau_candidat := trouve_panneau_cliqué(it, clique)
        si panneau_candidat {
            retourne panneau_candidat
        }
    }

    si gère_clique_souris(panneau_racine, clique) {
        retourne panneau_racine
    }

    retourne nul
}

sur_déplacement_souris :: fonc (empl contexte: *ContexteInterface, état: ÉtatSouris)
{
    sur_déplacement_souris_récursif(panneau_racine, état)
}

dessine_panneaux :: fonc (empl contexte: *ContexteInterface, contexte_affichage: *ContexteAffichage)
{
    saufsi panneau_racine {
        retourne
    }

    sur_dessin_récursif(panneau_racine, contexte_affichage)

    /* Dessine le menu au dessus du reste. */
    si menu_affiché {
        sur_dessin_récursif(menu_affiché, contexte_affichage)
    }
}

définis_curseur_souris :: fonc (empl contexte: *ContexteInterface, type_curseur: TypeCurseurSystème)
{
    saufsi rappel_définis_curseur_souris {
        retourne
    }

    rappel_définis_curseur_souris(contexte, type_curseur)
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Panneau
 * Structure pour représenter un élément de l'interface graphique.
 * \{ */

Panneau :: struct {
    contexte: *ContexteInterface
    parent: *Panneau
    enfants: []*Panneau

    identifiant : chaine

    /* Dimension du panneau. */
    rect: RectanglePosDim(z32)

    besoin_ajournement_disposition := vrai

    /* Fonctions de rappels à implémenter pour chaque type dérivé. */
    sur_destruction: fonc(*Panneau)(rien)
    sur_déplacement_souris: fonc(*Panneau, ÉtatSouris)(rien)
    sur_clique_souris: fonc(*Panneau, CliqueSouris)(bool)
    sur_dessin: fonc(*Panneau, *ContexteAffichage)(rien)
    sur_redimension: fonc(*Panneau, RectanglePosDim(z32))(rien)
}

ajoute_enfant :: fonc (panneau: *Panneau, enfant: *Panneau)
{
    assert(enfant.parent == nul)
    enfant.parent = panneau
    tableau_ajoute(*panneau.enfants, enfant)
}

/* Implémentation par défaut du rappel sur_redimension */
sur_redimension_impl_défaut :: fonc (panneau: *Panneau, rect_disponible: RectanglePosDim(z32))
{
    panneau.rect = rect_disponible
    panneau.besoin_ajournement_disposition = vrai
}

détruit_panneau :: fonc (panneau: *Panneau)
{
    déloge_tableau_et_ses_éléments(disposition.panneaux, détruit_panneau)

    si panneau.sur_destruction {
        panneau.sur_destruction(panneau)
    }
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Enveloppes pour les rappels de Panneau.
 * \{ */

sur_dessin_récursif :: fonc (panneau: *Panneau, ctx: *ContexteAffichage)
{
    si panneau.sur_dessin {
        panneau.sur_dessin(panneau, ctx)
    }

    pour panneau.enfants {
        sur_dessin_récursif(it, ctx)
    }
}

gère_clique_souris :: fonc (panneau: *Panneau, clique: CliqueSouris) -> bool
{
    /* Permet de passer nul. */
    saufsi panneau {
        retourne faux
    }

    saufsi panneau.sur_clique_souris {
        retourne faux
    }

    retourne panneau.sur_clique_souris(panneau, clique)
}

redimensionne_panneau :: fonc (panneau: *Panneau, rect: RectanglePosDim(z32))
{
    panneau.sur_redimension(panneau, rect)
}

sur_déplacement_souris_récursif :: fonc (panneau: *Panneau, état: ÉtatSouris)
{
    saufsi panneau {
        retourne
    }

    si panneau.sur_déplacement_souris {
        panneau.sur_déplacement_souris(panneau, état)
    }

    pour panneau.enfants {
        sur_déplacement_souris_récursif(it, état)
    }
}

/** } */

/* ------------------------------------------------------------------------- */
/** \nom Panneau Interface
 * Structure pour le panneau principal de l'interface.
 * \{ */

PanneauInterface :: struct {
    empl base: Panneau

    barre_de_menu: *PanneauBarreDeMenu
    élément_central: *Panneau
}

crée_panneau_interface :: fonc (ctx: *ContexteInterface, rect: RectanglePosDim(z32), élément_central: *Panneau) -> *PanneauInterface
{
    sur_déplacement_souris :: fonc (panneau_interface: *PanneauInterface, souris: ÉtatSouris)
    {
        observe_souris(panneau_interface, souris)
    }

    sur_clique_souris :: fonc (panneau_interface: *PanneauInterface, clique: CliqueSouris) -> bool
    {
        retourne reçoie_clique_souris(panneau_interface, clique)
    }

    sur_dessin :: fonc (panneau_interface: *PanneauInterface, contexte_affichage: *ContexteAffichage)
    {
        dessine_panneau_interface(panneau_interface, contexte_affichage)
    }

    sur_redimension :: fonc (panneau: *Panneau, rect: RectanglePosDim(z32))
    {
        panneau_interface := panneau comme *PanneauInterface
        panneau_interface.rect = rect
        calcule_rect_interne(panneau_interface)
    }

    résultat := ctx.crée_panneau(PanneauInterface)
    résultat.élément_central = élément_central
    ajoute_enfant(résultat, élément_central)

    /* Rappels. */
    résultat.sur_clique_souris = enveloppe_rappel(sur_clique_souris)
    résultat.sur_déplacement_souris = enveloppe_rappel(sur_déplacement_souris)
    résultat.sur_dessin = enveloppe_rappel(sur_dessin)
    résultat.sur_redimension = sur_redimension

    résultat.redimensionne_panneau(rect)

    retourne résultat
}

installe_barre_de_menu :: fonc (panneau: *PanneauInterface, barre_de_menu: *BarreDeMenu)
{
    assert(panneau.barre_de_menu == nul)
    panneau.barre_de_menu = crée_panneau_barre_de_menu(panneau.contexte, barre_de_menu)
    // ajoute_enfant(panneau, panneau.barre_de_menu)
    panneau.barre_de_menu.parent = panneau
    calcule_rect_interne(panneau)
}

calcule_rect_interne :: fonc (panneau: *PanneauInterface)
{
    rect_interne := panneau.rect

    si panneau.barre_de_menu {
        panneau.barre_de_menu.besoin_ajournement_disposition = vrai
        ajourne_disposition(panneau.barre_de_menu)
        rect_interne.hauteur -= panneau.barre_de_menu.rect.hauteur
    }

    si panneau.élément_central {
        panneau.élément_central.besoin_ajournement_disposition = vrai
        redimensionne_panneau(panneau.élément_central, rect_interne)
    }
}

installe_élément_central :: fonc (panneau: *PanneauInterface)
{
    panneau.élément_central = élément_central
    panneau.calcule_rect_interne()
}

dessine_panneau_interface :: fonc (empl panneau: *PanneauInterface, ctx: *ContexteAffichage)
{
    si barre_de_menu {
        barre_de_menu.sur_dessin(barre_de_menu, ctx)
    }
}

reçoie_clique_souris :: fonc (empl panneau: *PanneauInterface, clique: CliqueSouris) -> bool
{
    si gère_clique_souris(contexte.menu_affiché, clique) {
        imprime("Clique dans menu affiché !\n")
        retourne vrai
    }

    si gère_clique_souris(barre_de_menu, clique) {
        imprime("Clique dans barre de menu !\n")
        retourne vrai
    }

    /* Ni le menu actif, ni la barre de menu n'ont géré le clique, n'affiche plus le menu. */
    contexte.détruit_panneau_menu()
    si barre_de_menu {
        barre_de_menu.sur_menu_fermé()
    }

    retourne faux
}

observe_souris :: fonc (empl panneau: *PanneauInterface, souris: ÉtatSouris)
{
    si barre_de_menu {
        barre_de_menu.sur_déplacement_souris(barre_de_menu, souris)
    }

    si contexte.menu_affiché {
        contexte.menu_affiché.sur_déplacement_souris(contexte.menu_affiché, souris)
    }
}

/** } */
