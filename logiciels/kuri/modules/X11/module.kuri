importe Périphériques

charge "interface"

Status :: z32
False :: 0
True :: 1

/* ------------------------------------------------------------------------- */
/** \nom Définitions et macros définis par X.h
 * \{ */

None : z64 :                 0	/* universal null resource or null atom */

ParentRelative : z64 :       1	/* background pixmap in CreateWindow
				    and ChangeWindowAttributes */

CopyFromParent : z64 :       0	/* border pixmap in CreateWindow
				       and ChangeWindowAttributes
				   special VisualID and special window
				       class passed to CreateWindow */

PointerWindow : z64 :        0	/* destination window in SendEvent */
InputFocus : z64 :           1	/* destination window in SendEvent */

PointerRoot : z64 :          1	/* focus window in SetInputFocus */

AnyPropertyType : z64 :      0	/* special Atom, passed to GetProperty */

AnyKey : z64 :		     0	/* special Key Code, passed to GrabKey */

AnyButton : z64 :            0	/* special Button Code, passed to GrabButton */

AllTemporary : z64 :         0	/* special Resource ID passed to KillClient */

CurrentTime : z64 :          0	/* special Time */

NoSymbol : z64 :	     0	/* special KeySym */

/*****************************************************************
 * EVENT DEFINITIONS
 *****************************************************************/

/* Input Event Masks. Used as event-mask window attribute and as arguments
   to Grab requests.  Not to be confused with event names.  */

NoEventMask : z64 :			0
KeyPressMask : z64 :			(1<<0)
KeyReleaseMask : z64 :			(1<<1)
ButtonPressMask : z64 :			(1<<2)
ButtonReleaseMask : z64 :		(1<<3)
EnterWindowMask : z64 :			(1<<4)
LeaveWindowMask : z64 :			(1<<5)
PointerMotionMask : z64 :		(1<<6)
PointerMotionHintMask : z64 :		(1<<7)
Button1MotionMask : z64 :		(1<<8)
Button2MotionMask : z64 :		(1<<9)
Button3MotionMask : z64 :		(1<<10)
Button4MotionMask : z64 :		(1<<11)
Button5MotionMask : z64 :		(1<<12)
ButtonMotionMask : z64 :		(1<<13)
KeymapStateMask : z64 :			(1<<14)
ExposureMask : z64 :			(1<<15)
VisibilityChangeMask : z64 :		(1<<16)
StructureNotifyMask : z64 :		(1<<17)
ResizeRedirectMask : z64 :		(1<<18)
SubstructureNotifyMask : z64 :		(1<<19)
SubstructureRedirectMask : z64 :	(1<<20)
FocusChangeMask : z64 :			(1<<21)
PropertyChangeMask : z64 :		(1<<22)
ColormapChangeMask : z64 :		(1<<23)
OwnerGrabButtonMask : z64 :		(1<<24)

/* Event names.  Used in "type" field in XEvent structures.  Not to be
confused with event masks above.  They start from 2 because 0 and 1
are reserved in the protocol for errors and replies. */

KeyPress ::		2
KeyRelease ::		3
ButtonPress ::		4
ButtonRelease ::		5
MotionNotify ::		6
EnterNotify ::		7
LeaveNotify ::		8
FocusIn ::			9
FocusOut ::		10
KeymapNotify ::		11
Expose ::			12
GraphicsExpose ::		13
NoExpose ::		14
VisibilityNotify ::	15
CreateNotify ::		16
DestroyNotify ::		17
UnmapNotify ::		18
MapNotify ::		19
MapRequest ::		20
ReparentNotify ::		21
ConfigureNotify ::		22
ConfigureRequest ::	23
GravityNotify ::		24
ResizeRequest ::		25
CirculateNotify ::		26
CirculateRequest ::	27
PropertyNotify ::		28
SelectionClear ::		29
SelectionRequest ::	30
SelectionNotify ::		31
ColormapNotify ::		32
ClientMessage ::		33
MappingNotify ::		34
GenericEvent ::		35
LASTEvent ::		36	/* must be bigger than any event # */


/* Key masks. Used as modifiers to GrabButton and GrabKey, results of QueryPointer,
   state in various key-, mouse-, and button-related events. */

ShiftMask ::		(1<<0)
LockMask ::		(1<<1)
ControlMask ::		(1<<2)
Mod1Mask ::		(1<<3)
Mod2Mask ::		(1<<4)
Mod3Mask ::		(1<<5)
Mod4Mask ::		(1<<6)
Mod5Mask ::		(1<<7)

/* modifier names.  Used to build a SetModifierMapping request or
   to read a GetModifierMapping request.  These correspond to the
   masks defined above. */
ShiftMapIndex ::		0
LockMapIndex ::		1
ControlMapIndex ::		2
Mod1MapIndex ::		3
Mod2MapIndex ::		4
Mod3MapIndex ::		5
Mod4MapIndex ::		6
Mod5MapIndex ::		7


/* button masks.  Used in same manner as Key masks above. Not to be confused
   with button names below. */

Button1Mask ::		(1<<8)
Button2Mask ::		(1<<9)
Button3Mask ::		(1<<10)
Button4Mask ::		(1<<11)
Button5Mask ::		(1<<12)

AnyModifier ::		(1<<15)  /* used in GrabButton, GrabKey */


/* button names. Used as arguments to GrabButton and as detail in ButtonPress
   and ButtonRelease events.  Not to be confused with button masks above.
   Note that 0 is already defined above as "AnyButton".  */

Button1 : n32 :			1
Button2 : n32 :			2
Button3 : n32 :			3
Button4 : n32 :			4
Button5 : n32 :			5

/* Notify modes */

NotifyNormal ::		0
NotifyGrab ::		1
NotifyUngrab ::		2
NotifyWhileGrabbed ::	3

NotifyHint ::		1	/* for MotionNotify events */

/* Notify detail */

NotifyAncestor ::		0
NotifyVirtual ::		1
NotifyInferior ::		2
NotifyNonlinear ::		3
NotifyNonlinearVirtual ::	4
NotifyPointer ::		5
NotifyPointerRoot ::	6
NotifyDetailNone ::	7

/* Visibility notify */

VisibilityUnobscured ::		0
VisibilityPartiallyObscured ::	1
VisibilityFullyObscured ::		2

/* Circulation request */

PlaceOnTop ::		0
PlaceOnBottom ::		1

/* protocol families */

FamilyInternet ::		0	/* IPv4 */
FamilyDECnet ::		1
FamilyChaos ::		2
FamilyInternet6 ::		6	/* IPv6 */

/* authentication families not tied to a specific protocol */
FamilyServerInterpreted :: 5

/* Property notification */

PropertyNewValue ::	0
PropertyDelete ::		1

/* Color Map notification */

ColormapUninstalled ::	0
ColormapInstalled ::	1

/* GrabPointer, GrabButton, GrabKeyboard, GrabKey Modes */

GrabModeSync ::		0
GrabModeAsync ::		1

/* GrabPointer, GrabKeyboard reply status */

GrabSuccess ::		0
AlreadyGrabbed ::		1
GrabInvalidTime ::		2
GrabNotViewable ::		3
GrabFrozen ::		4

/* AllowEvents modes */

AsyncPointer ::		0
SyncPointer ::		1
ReplayPointer ::		2
AsyncKeyboard ::		3
SyncKeyboard ::		4
ReplayKeyboard ::		5
AsyncBoth ::		6
SyncBoth ::		7

/* Used in SetInputFocus, GetInputFocus */

RevertToNone ::		None comme z32
RevertToPointerRoot ::	PointerRoot comme z32
RevertToParent ::		2

/*****************************************************************
 * ERROR CODES
 *****************************************************************/

Success ::		   0	/* everything's okay */
BadRequest ::	   1	/* bad request code */
BadValue ::	   2	/* int parameter out of range */
BadWindow ::	   3	/* parameter not a Window */
BadPixmap ::	   4	/* parameter not a Pixmap */
BadAtom ::		   5	/* parameter not an Atom */
BadCursor ::	   6	/* parameter not a Cursor */
BadFont ::		   7	/* parameter not a Font */
BadMatch ::	   8	/* parameter mismatch */
BadDrawable ::	   9	/* parameter not a Pixmap or Window */
BadAccess ::	  10	/* depending on context:
				 - key/button already grabbed
				 - attempt to free an illegal
				   cmap entry
				- attempt to store into a read-only
				   color map entry.
 				- attempt to modify the access control
				   list from other than the local host.
				*/
BadAlloc ::	  11	/* insufficient resources */
BadColor ::	  12	/* no such colormap */
BadGC ::		  13	/* parameter not a GC */
BadIDChoice ::	  14	/* choice not in range or already used */
BadName ::		  15	/* font or color name doesn't exist */
BadLength ::	  16	/* Request length incorrect */
BadImplementation :: 17	/* server is defective */

FirstExtensionError ::	128
LastExtensionError ::	255

/*****************************************************************
 * WINDOW DEFINITIONS
 *****************************************************************/

/* Window classes used by CreateWindow */
/* Note that CopyFromParent is already defined as 0 above */

InputOutput ::		1
InputOnly ::		2

/* Window attributes for CreateWindow and ChangeWindowAttributes */

CWBackPixmap : z64 :		(1<<0)
CWBackPixel : z64 :		(1<<1)
CWBorderPixmap : z64 :		(1<<2)
CWBorderPixel : z64 :           (1<<3)
CWBitGravity : z64 :		(1<<4)
CWWinGravity : z64 :		(1<<5)
CWBackingStore : z64 :          (1<<6)
CWBackingPlanes : z64 :	        (1<<7)
CWBackingPixel : z64 :	        (1<<8)
CWOverrideRedirect : z64 :	(1<<9)
CWSaveUnder : z64 :		(1<<10)
CWEventMask : z64 :		(1<<11)
CWDontPropagate : z64 :	        (1<<12)
CWColormap : z64 :		(1<<13)
CWCursor : z64 :	        (1<<14)

/* ConfigureWindow structure */

CWX ::			(1<<0)
CWY ::			(1<<1)
CWWidth ::			(1<<2)
CWHeight ::		(1<<3)
CWBorderWidth ::		(1<<4)
CWSibling ::		(1<<5)
CWStackMode ::		(1<<6)


/* Bit Gravity */

ForgetGravity ::		0
NorthWestGravity ::	1
NorthGravity ::		2
NorthEastGravity ::	3
WestGravity ::		4
CenterGravity ::		5
EastGravity ::		6
SouthWestGravity ::	7
SouthGravity ::		8
SouthEastGravity ::	9
StaticGravity ::		10

/* Window gravity + bit gravity above */

UnmapGravity ::		0

/* Used in CreateWindow for backing-store hint */

NotUseful ::               0
WhenMapped ::              1
Always ::                  2

/* Used in GetWindowAttributes reply */

IsUnmapped ::		0
IsUnviewable ::		1
IsViewable ::		2

/* Used in ChangeSaveSet */

SetModeInsert ::           0
SetModeDelete ::           1

/* Used in ChangeCloseDownMode */

DestroyAll ::              0
RetainPermanent ::         1
RetainTemporary ::         2

/* Window stacking method (in configureWindow) */

Above ::                   0
Below ::                   1
TopIf ::                   2
BottomIf ::                3
Opposite ::                4

/* Circulation direction */

RaiseLowest ::             0
LowerHighest ::            1

/* Property modes */

PropModeReplace ::         0
PropModePrepend ::         1
PropModeAppend ::          2

/*****************************************************************
 * GRAPHICS DEFINITIONS
 *****************************************************************/

/* graphics functions, as in GC.alu */

GXclear ::			0x0		/* 0 */
GXand ::			0x1		/* src AND dst */
GXandReverse ::		0x2		/* src AND NOT dst */
GXcopy ::			0x3		/* src */
GXandInverted ::		0x4		/* NOT src AND dst */
GXnoop ::			0x5		/* dst */
GXxor ::			0x6		/* src XOR dst */
GXor ::			0x7		/* src OR dst */
GXnor ::			0x8		/* NOT src AND NOT dst */
GXequiv ::			0x9		/* NOT src XOR dst */
GXinvert ::		0xa		/* NOT dst */
GXorReverse ::		0xb		/* src OR NOT dst */
GXcopyInverted ::		0xc		/* NOT src */
GXorInverted ::		0xd		/* NOT src OR dst */
GXnand ::			0xe		/* NOT src OR NOT dst */
GXset ::			0xf		/* 1 */

/* LineStyle */

LineSolid ::		0
LineOnOffDash ::		1
LineDoubleDash ::		2

/* capStyle */

CapNotLast ::		0
CapButt ::			1
CapRound ::		2
CapProjecting ::		3

/* joinStyle */

JoinMiter ::		0
JoinRound ::		1
JoinBevel ::		2

/* fillStyle */

FillSolid ::		0
FillTiled ::		1
FillStippled ::		2
FillOpaqueStippled ::	3

/* fillRule */

EvenOddRule ::		0
WindingRule ::		1

/* subwindow mode */

ClipByChildren ::		0
IncludeInferiors ::	1

/* SetClipRectangles ordering */

Unsorted ::		0
YSorted ::			1
YXSorted ::		2
YXBanded ::		3

/* CoordinateMode for drawing routines */

CoordModeOrigin ::		0	/* relative to the origin */
CoordModePrevious ::       1	/* relative to previous point */

/* Polygon shapes */

Complex ::			0	/* paths may intersect */
Nonconvex ::		1	/* no paths intersect, but not convex */
Convex ::			2	/* wholly convex */

/* Arc modes for PolyFillArc */

ArcChord ::		0	/* join endpoints of arc */
ArcPieSlice ::		1	/* join endpoints to center of arc */

/* GC components: masks used in CreateGC, CopyGC, ChangeGC, OR'ed into
   GC.stateChanges */

GCFunction : z64 :              (1<<0)
GCPlaneMask : z64 :             (1<<1)
GCForeground : z64 :            (1<<2)
GCBackground : z64 :            (1<<3)
GCLineWidth : z64 :             (1<<4)
GCLineStyle : z64 :             (1<<5)
GCCapStyle : z64 :              (1<<6)
GCJoinStyle : z64 :		(1<<7)
GCFillStyle : z64 :		(1<<8)
GCFillRule : z64 :		(1<<9)
GCTile : z64 :			(1<<10)
GCStipple : z64 :		(1<<11)
GCTileStipXOrigin : z64 :	(1<<12)
GCTileStipYOrigin : z64 :	(1<<13)
GCFont : z64 : 			(1<<14)
GCSubwindowMode : z64 :		(1<<15)
GCGraphicsExposures : z64 :     (1<<16)
GCClipXOrigin : z64 :		(1<<17)
GCClipYOrigin : z64 :		(1<<18)
GCClipMask : z64 :		(1<<19)
GCDashOffset : z64 :		(1<<20)
GCDashList : z64 :		(1<<21)
GCArcMode : z64 :		(1<<22)

GCLastBit ::		22
/*****************************************************************
 * FONTS
 *****************************************************************/

/* used in QueryFont -- draw direction */

FontLeftToRight ::		0
FontRightToLeft ::		1

FontChange ::		255

/*****************************************************************
 *  IMAGING
 *****************************************************************/

/* ImageFormat -- PutImage, GetImage */

XYBitmap ::		0	/* depth 1, XYFormat */
XYPixmap ::		1	/* depth == drawable depth */
ZPixmap ::			2	/* depth == drawable depth */

/*****************************************************************
 *  COLOR MAP STUFF
 *****************************************************************/

/* For CreateColormap */

AllocNone ::		0	/* create map with no entries */
AllocAll ::		1	/* allocate entire map writeable */


/* Flags used in StoreNamedColor, StoreColors */

DoRed ::			(1<<0)
DoGreen ::			(1<<1)
DoBlue ::			(1<<2)

/*****************************************************************
 * CURSOR STUFF
 *****************************************************************/

/* QueryBestSize Class */

CursorShape ::		0	/* largest size that can be displayed */
TileShape ::		1	/* size tiled fastest */
StippleShape ::		2	/* size stippled fastest */

/*****************************************************************
 * KEYBOARD/POINTER STUFF
 *****************************************************************/

AutoRepeatModeOff ::	0
AutoRepeatModeOn ::	1
AutoRepeatModeDefault ::	2

LedModeOff ::		0
LedModeOn ::		1

/* masks for ChangeKeyboardControl */

KBKeyClickPercent : z64 :	(1<<0)
KBBellPercent : z64 :		(1<<1)
KBBellPitch : z64 :		(1<<2)
KBBellDuration : z64 :		(1<<3)
KBLed : z64 :			(1<<4)
KBLedMode : z64 :		(1<<5)
KBKey : z64 :			(1<<6)
KBAutoRepeatMode : z64 :	(1<<7)

MappingSuccess ::     	0
MappingBusy ::        	1
MappingFailed ::		2

MappingModifier ::		0
MappingKeyboard ::		1
MappingPointer ::		2

/*****************************************************************
 * SCREEN SAVER STUFF
 *****************************************************************/

DontPreferBlanking ::	0
PreferBlanking ::		1
DefaultBlanking ::		2

DisableScreenSaver ::	0
DisableScreenInterval ::	0

DontAllowExposures ::	0
AllowExposures ::		1
DefaultExposures ::	2

/* for ForceScreenSaver */

ScreenSaverReset :: 0
ScreenSaverActive :: 1

/*****************************************************************
 * HOSTS AND CONNECTIONS
 *****************************************************************/

/* for ChangeHosts */

HostInsert ::		0
HostDelete ::		1

/* for ChangeAccessControl */

EnableAccess ::		1
DisableAccess ::		0

/* Display classes  used in opening the connection
 * Note that the statically allocated ones are even numbered and the
 * dynamically changeable ones are odd numbered */

StaticGray ::		0
GrayScale ::		1
StaticColor ::		2
PseudoColor ::		3
TrueColor ::		4
DirectColor ::		5


/* Byte order  used in imageByteOrder and bitmapBitOrder */

LSBFirst ::		0
MSBFirst ::		1

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Définitions et macros définis par Xlib.h
 * \{ */

XlibSpecificationRelease :: 6

QueuedAlready :: 0
QueuedAfterReading :: 1
QueuedAfterFlush :: 2

// #define ConnectionNumber(dpy) 	(((_XPrivDisplay)(dpy))->fd)

RootWindow :: fonc (display: *Display, parent: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, parent).root
}

DefaultScreen :: fonc (display: *Display) -> z32 #enligne
{
    retourne XDefaultScreen(display)
}

// #define DefaultRootWindow(dpy) 	(ScreenOfDisplay(dpy,DefaultScreen(dpy))->root)
// #define DefaultVisual(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_visual)

DefaultGC :: fonc (display: *Display, s: z32) -> *_XGC #enligne
{
    retourne XScreenOfDisplay(display, s).default_gc
}

BlackPixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).black_pixel
}

WhitePixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).white_pixel
}

// #define AllPlanes 		((unsigned long)~0L)
// #define QLength(dpy) 		(((_XPrivDisplay)(dpy))->qlen)
// #define DisplayWidth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->width)
// #define DisplayHeight(dpy, scr) (ScreenOfDisplay(dpy,scr)->height)
// #define DisplayWidthMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mwidth)
// #define DisplayHeightMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mheight)
// #define DisplayPlanes(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_depth)
// #define DisplayCells(dpy, scr) 	(DefaultVisual(dpy,scr)->map_entries)
// #define ScreenCount(dpy) 	(((_XPrivDisplay)(dpy))->nscreens)
// #define ServerVendor(dpy) 	(((_XPrivDisplay)(dpy))->vendor)
// #define ProtocolVersion(dpy) 	(((_XPrivDisplay)(dpy))->proto_major_version)
// #define ProtocolRevision(dpy) 	(((_XPrivDisplay)(dpy))->proto_minor_version)
// #define VendorRelease(dpy) 	(((_XPrivDisplay)(dpy))->release)
// #define DisplayString(dpy) 	(((_XPrivDisplay)(dpy))->display_name)
// #define DefaultDepth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->root_depth)
// #define DefaultColormap(dpy, scr)(ScreenOfDisplay(dpy,scr)->cmap)
// #define BitmapUnit(dpy) 	(((_XPrivDisplay)(dpy))->bitmap_unit)
// #define BitmapBitOrder(dpy) 	(((_XPrivDisplay)(dpy))->bitmap_bit_order)
// #define BitmapPad(dpy) 		(((_XPrivDisplay)(dpy))->bitmap_pad)
// #define ImageByteOrder(dpy) 	(((_XPrivDisplay)(dpy))->byte_order)
// #define NextRequest(dpy)	(((_XPrivDisplay)(dpy))->request + 1)
// #define LastKnownRequestProcessed(dpy)	(((_XPrivDisplay)(dpy))->last_request_read)

// /* macros for screen oriented applications (toolkit) */
// #define ScreenOfDisplay(dpy, scr)(&((_XPrivDisplay)(dpy))->screens[scr])
// #define DefaultScreenOfDisplay(dpy) ScreenOfDisplay(dpy,DefaultScreen(dpy))
// #define DisplayOfScreen(s)	((s)->display)
// #define RootWindowOfScreen(s)	((s)->root)
// #define BlackPixelOfScreen(s)	((s)->black_pixel)
// #define WhitePixelOfScreen(s)	((s)->white_pixel)
// #define DefaultColormapOfScreen(s)((s)->cmap)
// #define DefaultDepthOfScreen(s)	((s)->root_depth)
// #define DefaultGCOfScreen(s)	((s)->default_gc)
// #define DefaultVisualOfScreen(s)((s)->root_visual)
// #define WidthOfScreen(s)	((s)->width)
// #define HeightOfScreen(s)	((s)->height)
// #define WidthMMOfScreen(s)	((s)->mwidth)
// #define HeightMMOfScreen(s)	((s)->mheight)
// #define PlanesOfScreen(s)	((s)->root_depth)
// #define CellsOfScreen(s)	(DefaultVisualOfScreen((s))->map_entries)
// #define MinCmapsOfScreen(s)	((s)->min_maps)
// #define MaxCmapsOfScreen(s)	((s)->max_maps)
// #define DoesSaveUnders(s)	((s)->save_unders)
// #define DoesBackingStore(s)	((s)->backing_store)
// #define EventMaskOfScreen(s)	((s)->root_input_mask)

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Définitions de Xlib.h
 * \{ */

XIMPreeditArea		 : z64 : 0x0001
XIMPreeditCallbacks	 : z64 : 0x0002
XIMPreeditPosition	 : z64 : 0x0004
XIMPreeditNothing	 : z64 : 0x0008
XIMPreeditNone		 : z64 : 0x0010
XIMStatusArea		 : z64 : 0x0100
XIMStatusCallbacks	 : z64 : 0x0200
XIMStatusNothing	 : z64 : 0x0400
XIMStatusNone		 : z64 : 0x0800

XNVaNestedList :: "XNVaNestedList"
XNQueryInputStyle :: "queryInputStyle"
XNClientWindow :: "clientWindow"
XNInputStyle :: "inputStyle"
XNFocusWindow :: "focusWindow"
XNResourceName :: "resourceName"
XNResourceClass :: "resourceClass"
XNGeometryCallback :: "geometryCallback"
XNDestroyCallback :: "destroyCallback"
XNFilterEvents :: "filterEvents"
XNPreeditStartCallback :: "preeditStartCallback"
XNPreeditDoneCallback :: "preeditDoneCallback"
XNPreeditDrawCallback :: "preeditDrawCallback"
XNPreeditCaretCallback :: "preeditCaretCallback"
XNPreeditStateNotifyCallback :: "preeditStateNotifyCallback"
XNPreeditAttributes :: "preeditAttributes"
XNStatusStartCallback :: "statusStartCallback"
XNStatusDoneCallback :: "statusDoneCallback"
XNStatusDrawCallback :: "statusDrawCallback"
XNStatusAttributes :: "statusAttributes"
XNArea :: "area"
XNAreaNeeded :: "areaNeeded"
XNSpotLocation :: "spotLocation"
XNColormap :: "colorMap"
XNStdColormap :: "stdColorMap"
XNForeground :: "foreground"
XNBackground :: "background"
XNBackgroundPixmap :: "backgroundPixmap"
XNFontSet :: "fontSet"
XNLineSpace :: "lineSpace"
XNCursor :: "cursor"

XNQueryIMValuesList :: "queryIMValuesList"
XNQueryICValuesList :: "queryICValuesList"
XNVisiblePosition :: "visiblePosition"
XNR6PreeditCallback :: "r6PreeditCallback"
XNStringConversionCallback :: "stringConversionCallback"
XNStringConversion :: "stringConversion"
XNResetState :: "resetState"
XNHotKey :: "hotKey"
XNHotKeyState :: "hotKeyState"
XNPreeditState :: "preeditState"
XNSeparatorofNestedList :: "separatorofNestedList"

XBufferOverflow		:: -1
XLookupNone		:: 1
XLookupChars		:: 2
XLookupKeySym		:: 3
XLookupBoth		:: 4

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom /usr/include/X11/keysymdef.h
 * \{ */

XK_VoidSymbol       : KeySym : 0xffffff  /* Void symbol */

/* XK_MISCELLANY */
/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

XK_BackSpace          : KeySym : 0xff08  /* Back space, back char */
XK_Tab                : KeySym : 0xff09
XK_Linefeed           : KeySym : 0xff0a  /* Linefeed, LF */
XK_Clear              : KeySym : 0xff0b
XK_Return             : KeySym : 0xff0d  /* Return, enter */
XK_Pause              : KeySym : 0xff13  /* Pause, hold */
XK_Scroll_Lock        : KeySym : 0xff14
XK_Sys_Req            : KeySym : 0xff15
XK_Escape             : KeySym : 0xff1b
XK_Delete             : KeySym : 0xffff  /* Delete, rubout */



/* International & multi-key character composition */

XK_Multi_key          : KeySym : 0xff20  /* Multi-key character compose */
XK_Codeinput          : KeySym : 0xff37
XK_SingleCandidate    : KeySym : 0xff3c
XK_MultipleCandidate  : KeySym : 0xff3d
XK_PreviousCandidate  : KeySym : 0xff3e

/* Japanese keyboard support */

XK_Kanji              : KeySym : 0xff21  /* Kanji, Kanji convert */
XK_Muhenkan           : KeySym : 0xff22  /* Cancel Conversion */
XK_Henkan_Mode        : KeySym : 0xff23  /* Start/Stop Conversion */
XK_Henkan             : KeySym : 0xff23  /* Alias for Henkan_Mode */
XK_Romaji             : KeySym : 0xff24  /* to Romaji */
XK_Hiragana           : KeySym : 0xff25  /* to Hiragana */
XK_Katakana           : KeySym : 0xff26  /* to Katakana */
XK_Hiragana_Katakana  : KeySym : 0xff27  /* Hiragana/Katakana toggle */
XK_Zenkaku            : KeySym : 0xff28  /* to Zenkaku */
XK_Hankaku            : KeySym : 0xff29  /* to Hankaku */
XK_Zenkaku_Hankaku    : KeySym : 0xff2a  /* Zenkaku/Hankaku toggle */
XK_Touroku            : KeySym : 0xff2b  /* Add to Dictionary */
XK_Massyo             : KeySym : 0xff2c  /* Delete from Dictionary */
XK_Kana_Lock          : KeySym : 0xff2d  /* Kana Lock */
XK_Kana_Shift         : KeySym : 0xff2e  /* Kana Shift */
XK_Eisu_Shift         : KeySym : 0xff2f  /* Alphanumeric Shift */
XK_Eisu_toggle        : KeySym : 0xff30  /* Alphanumeric toggle */
XK_Kanji_Bangou       : KeySym : 0xff37  /* Codeinput */
XK_Zen_Koho           : KeySym : 0xff3d  /* Multiple/All Candidate(s) */
XK_Mae_Koho           : KeySym : 0xff3e  /* Previous Candidate */

/* 0xff31 thru 0xff3f are under XK_KOREAN */

/* Cursor control & motion */

XK_Home               : KeySym : 0xff50
XK_Left               : KeySym : 0xff51  /* Move left, left arrow */
XK_Up                 : KeySym : 0xff52  /* Move up, up arrow */
XK_Right              : KeySym : 0xff53  /* Move right, right arrow */
XK_Down               : KeySym : 0xff54  /* Move down, down arrow */
XK_Prior              : KeySym : 0xff55  /* Prior, previous */
XK_Page_Up            : KeySym : 0xff55
XK_Next               : KeySym : 0xff56  /* Next */
XK_Page_Down          : KeySym : 0xff56
XK_End                : KeySym : 0xff57  /* EOL */
XK_Begin              : KeySym : 0xff58  /* BOL */


/* Misc functions */

XK_Select             : KeySym : 0xff60  /* Select, mark */
XK_Print              : KeySym : 0xff61
XK_Execute            : KeySym : 0xff62  /* Execute, run, do */
XK_Insert             : KeySym : 0xff63  /* Insert, insert here */
XK_Undo               : KeySym : 0xff65
XK_Redo               : KeySym : 0xff66  /* Redo, again */
XK_Menu               : KeySym : 0xff67
XK_Find               : KeySym : 0xff68  /* Find, search */
XK_Cancel             : KeySym : 0xff69  /* Cancel, stop, abort, exit */
XK_Help               : KeySym : 0xff6a  /* Help */
XK_Break              : KeySym : 0xff6b
XK_Mode_switch        : KeySym : 0xff7e  /* Character set switch */
XK_script_switch      : KeySym : 0xff7e  /* Alias for mode_switch */
XK_Num_Lock           : KeySym : 0xff7f

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

XK_KP_Space           : KeySym : 0xff80  /* Space */
XK_KP_Tab             : KeySym : 0xff89
XK_KP_Enter           : KeySym : 0xff8d  /* Enter */
XK_KP_F1              : KeySym : 0xff91  /* PF1, KP_A, ... */
XK_KP_F2              : KeySym : 0xff92
XK_KP_F3              : KeySym : 0xff93
XK_KP_F4              : KeySym : 0xff94
XK_KP_Home            : KeySym : 0xff95
XK_KP_Left            : KeySym : 0xff96
XK_KP_Up              : KeySym : 0xff97
XK_KP_Right           : KeySym : 0xff98
XK_KP_Down            : KeySym : 0xff99
XK_KP_Prior           : KeySym : 0xff9a
XK_KP_Page_Up         : KeySym : 0xff9a
XK_KP_Next            : KeySym : 0xff9b
XK_KP_Page_Down       : KeySym : 0xff9b
XK_KP_End             : KeySym : 0xff9c
XK_KP_Begin           : KeySym : 0xff9d
XK_KP_Insert          : KeySym : 0xff9e
XK_KP_Delete          : KeySym : 0xff9f
XK_KP_Equal           : KeySym : 0xffbd  /* Equals */
XK_KP_Multiply        : KeySym : 0xffaa
XK_KP_Add             : KeySym : 0xffab
XK_KP_Separator       : KeySym : 0xffac  /* Separator, often comma */
XK_KP_Subtract        : KeySym : 0xffad
XK_KP_Decimal         : KeySym : 0xffae
XK_KP_Divide          : KeySym : 0xffaf

XK_KP_0               : KeySym : 0xffb0
XK_KP_1               : KeySym : 0xffb1
XK_KP_2               : KeySym : 0xffb2
XK_KP_3               : KeySym : 0xffb3
XK_KP_4               : KeySym : 0xffb4
XK_KP_5               : KeySym : 0xffb5
XK_KP_6               : KeySym : 0xffb6
XK_KP_7               : KeySym : 0xffb7
XK_KP_8               : KeySym : 0xffb8
XK_KP_9               : KeySym : 0xffb9



/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

XK_F1                 : KeySym : 0xffbe
XK_F2                 : KeySym : 0xffbf
XK_F3                 : KeySym : 0xffc0
XK_F4                 : KeySym : 0xffc1
XK_F5                 : KeySym : 0xffc2
XK_F6                 : KeySym : 0xffc3
XK_F7                 : KeySym : 0xffc4
XK_F8                 : KeySym : 0xffc5
XK_F9                 : KeySym : 0xffc6
XK_F10                : KeySym : 0xffc7
XK_F11                : KeySym : 0xffc8
XK_L1                 : KeySym : 0xffc8
XK_F12                : KeySym : 0xffc9
XK_L2                 : KeySym : 0xffc9
XK_F13                : KeySym : 0xffca
XK_L3                 : KeySym : 0xffca
XK_F14                : KeySym : 0xffcb
XK_L4                 : KeySym : 0xffcb
XK_F15                : KeySym : 0xffcc
XK_L5                 : KeySym : 0xffcc
XK_F16                : KeySym : 0xffcd
XK_L6                 : KeySym : 0xffcd
XK_F17                : KeySym : 0xffce
XK_L7                 : KeySym : 0xffce
XK_F18                : KeySym : 0xffcf
XK_L8                 : KeySym : 0xffcf
XK_F19                : KeySym : 0xffd0
XK_L9                 : KeySym : 0xffd0
XK_F20                : KeySym : 0xffd1
XK_L10                : KeySym : 0xffd1
XK_F21                : KeySym : 0xffd2
XK_R1                 : KeySym : 0xffd2
XK_F22                : KeySym : 0xffd3
XK_R2                 : KeySym : 0xffd3
XK_F23                : KeySym : 0xffd4
XK_R3                 : KeySym : 0xffd4
XK_F24                : KeySym : 0xffd5
XK_R4                 : KeySym : 0xffd5
XK_F25                : KeySym : 0xffd6
XK_R5                 : KeySym : 0xffd6
XK_F26                : KeySym : 0xffd7
XK_R6                 : KeySym : 0xffd7
XK_F27                : KeySym : 0xffd8
XK_R7                 : KeySym : 0xffd8
XK_F28                : KeySym : 0xffd9
XK_R8                 : KeySym : 0xffd9
XK_F29                : KeySym : 0xffda
XK_R9                 : KeySym : 0xffda
XK_F30                : KeySym : 0xffdb
XK_R10                : KeySym : 0xffdb
XK_F31                : KeySym : 0xffdc
XK_R11                : KeySym : 0xffdc
XK_F32                : KeySym : 0xffdd
XK_R12                : KeySym : 0xffdd
XK_F33                : KeySym : 0xffde
XK_R13                : KeySym : 0xffde
XK_F34                : KeySym : 0xffdf
XK_R14                : KeySym : 0xffdf
XK_F35                : KeySym : 0xffe0
XK_R15                : KeySym : 0xffe0

/* Modifiers */

XK_Shift_L            : KeySym : 0xffe1  /* Left shift */
XK_Shift_R            : KeySym : 0xffe2  /* Right shift */
XK_Control_L          : KeySym : 0xffe3  /* Left control */
XK_Control_R          : KeySym : 0xffe4  /* Right control */
XK_Caps_Lock          : KeySym : 0xffe5  /* Caps lock */
XK_Shift_Lock         : KeySym : 0xffe6  /* Shift lock */

XK_Meta_L             : KeySym : 0xffe7  /* Left meta */
XK_Meta_R             : KeySym : 0xffe8  /* Right meta */
XK_Alt_L              : KeySym : 0xffe9  /* Left alt */
XK_Alt_R              : KeySym : 0xffea  /* Right alt */
XK_Super_L            : KeySym : 0xffeb  /* Left super */
XK_Super_R            : KeySym : 0xffec  /* Right super */
XK_Hyper_L            : KeySym : 0xffed  /* Left hyper */
XK_Hyper_R            : KeySym : 0xffee  /* Right hyper */

/*
 * Keys found on some "Internet" keyboards.
 */
XF86XK_Standby		: KeySym : 0x1008FF10   /* System into standby mode   */
XF86XK_AudioLowerVolume	: KeySym : 0x1008FF11   /* Volume control down        */
XF86XK_AudioMute	: KeySym : 0x1008FF12   /* Mute sound from the system */
XF86XK_AudioRaiseVolume	: KeySym : 0x1008FF13   /* Volume control up          */
XF86XK_AudioPlay	: KeySym : 0x1008FF14   /* Start playing of audio >   */
XF86XK_AudioStop	: KeySym : 0x1008FF15   /* Stop playing audio         */
XF86XK_AudioPrev	: KeySym : 0x1008FF16   /* Previous track             */
XF86XK_AudioNext	: KeySym : 0x1008FF17   /* Next track                 */
XF86XK_HomePage		: KeySym : 0x1008FF18   /* Display user's home page   */
XF86XK_Mail		: KeySym : 0x1008FF19   /* Invoke user's mail program */
XF86XK_Start		: KeySym : 0x1008FF1A   /* Start application          */
XF86XK_Search		: KeySym : 0x1008FF1B   /* Search                     */
XF86XK_AudioRecord	: KeySym : 0x1008FF1C   /* Record audio application   */

XF86XK_AudioForward   : KeySym : 0x1008FF97   /* fast-forward audio track    */
XF86XK_AudioRewind	  : KeySym : 0x1008FF3E   /* "rewind" audio track        */
/* XK_MISCELLANY */

/*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode U+0020..U+00FF)
 * Byte 3 = 0
 */
XK_space                      : KeySym : 0x0020  /* U+0020 SPACE */
XK_exclam                     : KeySym : 0x0021  /* U+0021 EXCLAMATION MARK */
XK_quotedbl                   : KeySym : 0x0022  /* U+0022 QUOTATION MARK */
XK_numbersign                 : KeySym : 0x0023  /* U+0023 NUMBER SIGN */
XK_dollar                     : KeySym : 0x0024  /* U+0024 DOLLAR SIGN */
XK_percent                    : KeySym : 0x0025  /* U+0025 PERCENT SIGN */
XK_ampersand                  : KeySym : 0x0026  /* U+0026 AMPERSAND */
XK_apostrophe                 : KeySym : 0x0027  /* U+0027 APOSTROPHE */
XK_quoteright                 : KeySym : 0x0027  /* deprecated */
XK_parenleft                  : KeySym : 0x0028  /* U+0028 LEFT PARENTHESIS */
XK_parenright                 : KeySym : 0x0029  /* U+0029 RIGHT PARENTHESIS */
XK_asterisk                   : KeySym : 0x002a  /* U+002A ASTERISK */
XK_plus                       : KeySym : 0x002b  /* U+002B PLUS SIGN */
XK_comma                      : KeySym : 0x002c  /* U+002C COMMA */
XK_minus                      : KeySym : 0x002d  /* U+002D HYPHEN-MINUS */
XK_period                     : KeySym : 0x002e  /* U+002E FULL STOP */
XK_slash                      : KeySym : 0x002f  /* U+002F SOLIDUS */
XK_0                          : KeySym : 0x0030  /* U+0030 DIGIT ZERO */
XK_1                          : KeySym : 0x0031  /* U+0031 DIGIT ONE */
XK_2                          : KeySym : 0x0032  /* U+0032 DIGIT TWO */
XK_3                          : KeySym : 0x0033  /* U+0033 DIGIT THREE */
XK_4                          : KeySym : 0x0034  /* U+0034 DIGIT FOUR */
XK_5                          : KeySym : 0x0035  /* U+0035 DIGIT FIVE */
XK_6                          : KeySym : 0x0036  /* U+0036 DIGIT SIX */
XK_7                          : KeySym : 0x0037  /* U+0037 DIGIT SEVEN */
XK_8                          : KeySym : 0x0038  /* U+0038 DIGIT EIGHT */
XK_9                          : KeySym : 0x0039  /* U+0039 DIGIT NINE */
XK_colon                      : KeySym : 0x003a  /* U+003A COLON */
XK_semicolon                  : KeySym : 0x003b  /* U+003B SEMICOLON */
XK_less                       : KeySym : 0x003c  /* U+003C LESS-THAN SIGN */
XK_equal                      : KeySym : 0x003d  /* U+003D EQUALS SIGN */
XK_greater                    : KeySym : 0x003e  /* U+003E GREATER-THAN SIGN */
XK_question                   : KeySym : 0x003f  /* U+003F QUESTION MARK */
XK_at                         : KeySym : 0x0040  /* U+0040 COMMERCIAL AT */
XK_A                          : KeySym : 0x0041  /* U+0041 LATIN CAPITAL LETTER A */
XK_B                          : KeySym : 0x0042  /* U+0042 LATIN CAPITAL LETTER B */
XK_C                          : KeySym : 0x0043  /* U+0043 LATIN CAPITAL LETTER C */
XK_D                          : KeySym : 0x0044  /* U+0044 LATIN CAPITAL LETTER D */
XK_E                          : KeySym : 0x0045  /* U+0045 LATIN CAPITAL LETTER E */
XK_F                          : KeySym : 0x0046  /* U+0046 LATIN CAPITAL LETTER F */
XK_G                          : KeySym : 0x0047  /* U+0047 LATIN CAPITAL LETTER G */
XK_H                          : KeySym : 0x0048  /* U+0048 LATIN CAPITAL LETTER H */
XK_I                          : KeySym : 0x0049  /* U+0049 LATIN CAPITAL LETTER I */
XK_J                          : KeySym : 0x004a  /* U+004A LATIN CAPITAL LETTER J */
XK_K                          : KeySym : 0x004b  /* U+004B LATIN CAPITAL LETTER K */
XK_L                          : KeySym : 0x004c  /* U+004C LATIN CAPITAL LETTER L */
XK_M                          : KeySym : 0x004d  /* U+004D LATIN CAPITAL LETTER M */
XK_N                          : KeySym : 0x004e  /* U+004E LATIN CAPITAL LETTER N */
XK_O                          : KeySym : 0x004f  /* U+004F LATIN CAPITAL LETTER O */
XK_P                          : KeySym : 0x0050  /* U+0050 LATIN CAPITAL LETTER P */
XK_Q                          : KeySym : 0x0051  /* U+0051 LATIN CAPITAL LETTER Q */
XK_R                          : KeySym : 0x0052  /* U+0052 LATIN CAPITAL LETTER R */
XK_S                          : KeySym : 0x0053  /* U+0053 LATIN CAPITAL LETTER S */
XK_T                          : KeySym : 0x0054  /* U+0054 LATIN CAPITAL LETTER T */
XK_U                          : KeySym : 0x0055  /* U+0055 LATIN CAPITAL LETTER U */
XK_V                          : KeySym : 0x0056  /* U+0056 LATIN CAPITAL LETTER V */
XK_W                          : KeySym : 0x0057  /* U+0057 LATIN CAPITAL LETTER W */
XK_X                          : KeySym : 0x0058  /* U+0058 LATIN CAPITAL LETTER X */
XK_Y                          : KeySym : 0x0059  /* U+0059 LATIN CAPITAL LETTER Y */
XK_Z                          : KeySym : 0x005a  /* U+005A LATIN CAPITAL LETTER Z */
XK_bracketleft                : KeySym : 0x005b  /* U+005B LEFT SQUARE BRACKET */
XK_backslash                  : KeySym : 0x005c  /* U+005C REVERSE SOLIDUS */
XK_bracketright               : KeySym : 0x005d  /* U+005D RIGHT SQUARE BRACKET */
XK_asciicircum                : KeySym : 0x005e  /* U+005E CIRCUMFLEX ACCENT */
XK_underscore                 : KeySym : 0x005f  /* U+005F LOW LINE */
XK_grave                      : KeySym : 0x0060  /* U+0060 GRAVE ACCENT */
XK_quoteleft                  : KeySym : 0x0060  /* deprecated */
XK_a                          : KeySym : 0x0061  /* U+0061 LATIN SMALL LETTER A */
XK_b                          : KeySym : 0x0062  /* U+0062 LATIN SMALL LETTER B */
XK_c                          : KeySym : 0x0063  /* U+0063 LATIN SMALL LETTER C */
XK_d                          : KeySym : 0x0064  /* U+0064 LATIN SMALL LETTER D */
XK_e                          : KeySym : 0x0065  /* U+0065 LATIN SMALL LETTER E */
XK_f                          : KeySym : 0x0066  /* U+0066 LATIN SMALL LETTER F */
XK_g                          : KeySym : 0x0067  /* U+0067 LATIN SMALL LETTER G */
XK_h                          : KeySym : 0x0068  /* U+0068 LATIN SMALL LETTER H */
XK_i                          : KeySym : 0x0069  /* U+0069 LATIN SMALL LETTER I */
XK_j                          : KeySym : 0x006a  /* U+006A LATIN SMALL LETTER J */
XK_k                          : KeySym : 0x006b  /* U+006B LATIN SMALL LETTER K */
XK_l                          : KeySym : 0x006c  /* U+006C LATIN SMALL LETTER L */
XK_m                          : KeySym : 0x006d  /* U+006D LATIN SMALL LETTER M */
XK_n                          : KeySym : 0x006e  /* U+006E LATIN SMALL LETTER N */
XK_o                          : KeySym : 0x006f  /* U+006F LATIN SMALL LETTER O */
XK_p                          : KeySym : 0x0070  /* U+0070 LATIN SMALL LETTER P */
XK_q                          : KeySym : 0x0071  /* U+0071 LATIN SMALL LETTER Q */
XK_r                          : KeySym : 0x0072  /* U+0072 LATIN SMALL LETTER R */
XK_s                          : KeySym : 0x0073  /* U+0073 LATIN SMALL LETTER S */
XK_t                          : KeySym : 0x0074  /* U+0074 LATIN SMALL LETTER T */
XK_u                          : KeySym : 0x0075  /* U+0075 LATIN SMALL LETTER U */
XK_v                          : KeySym : 0x0076  /* U+0076 LATIN SMALL LETTER V */
XK_w                          : KeySym : 0x0077  /* U+0077 LATIN SMALL LETTER W */
XK_x                          : KeySym : 0x0078  /* U+0078 LATIN SMALL LETTER X */
XK_y                          : KeySym : 0x0079  /* U+0079 LATIN SMALL LETTER Y */
XK_z                          : KeySym : 0x007a  /* U+007A LATIN SMALL LETTER Z */
XK_braceleft                  : KeySym : 0x007b  /* U+007B LEFT CURLY BRACKET */
XK_bar                        : KeySym : 0x007c  /* U+007C VERTICAL LINE */
XK_braceright                 : KeySym : 0x007d  /* U+007D RIGHT CURLY BRACKET */
XK_asciitilde                 : KeySym : 0x007e  /* U+007E TILDE */

XK_nobreakspace               : KeySym : 0x00a0  /* U+00A0 NO-BREAK SPACE */
XK_exclamdown                 : KeySym : 0x00a1  /* U+00A1 INVERTED EXCLAMATION MARK */
XK_cent                       : KeySym : 0x00a2  /* U+00A2 CENT SIGN */
XK_sterling                   : KeySym : 0x00a3  /* U+00A3 POUND SIGN */
XK_currency                   : KeySym : 0x00a4  /* U+00A4 CURRENCY SIGN */
XK_yen                        : KeySym : 0x00a5  /* U+00A5 YEN SIGN */
XK_brokenbar                  : KeySym : 0x00a6  /* U+00A6 BROKEN BAR */
XK_section                    : KeySym : 0x00a7  /* U+00A7 SECTION SIGN */
XK_diaeresis                  : KeySym : 0x00a8  /* U+00A8 DIAERESIS */
XK_copyright                  : KeySym : 0x00a9  /* U+00A9 COPYRIGHT SIGN */
XK_ordfeminine                : KeySym : 0x00aa  /* U+00AA FEMININE ORDINAL INDICATOR */
XK_guillemotleft              : KeySym : 0x00ab  /* U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */
XK_notsign                    : KeySym : 0x00ac  /* U+00AC NOT SIGN */
XK_hyphen                     : KeySym : 0x00ad  /* U+00AD SOFT HYPHEN */
XK_registered                 : KeySym : 0x00ae  /* U+00AE REGISTERED SIGN */
XK_macron                     : KeySym : 0x00af  /* U+00AF MACRON */
XK_degree                     : KeySym : 0x00b0  /* U+00B0 DEGREE SIGN */
XK_plusminus                  : KeySym : 0x00b1  /* U+00B1 PLUS-MINUS SIGN */
XK_twosuperior                : KeySym : 0x00b2  /* U+00B2 SUPERSCRIPT TWO */
XK_threesuperior              : KeySym : 0x00b3  /* U+00B3 SUPERSCRIPT THREE */
XK_acute                      : KeySym : 0x00b4  /* U+00B4 ACUTE ACCENT */
XK_mu                         : KeySym : 0x00b5  /* U+00B5 MICRO SIGN */
XK_paragraph                  : KeySym : 0x00b6  /* U+00B6 PILCROW SIGN */
XK_periodcentered             : KeySym : 0x00b7  /* U+00B7 MIDDLE DOT */
XK_cedilla                    : KeySym : 0x00b8  /* U+00B8 CEDILLA */
XK_onesuperior                : KeySym : 0x00b9  /* U+00B9 SUPERSCRIPT ONE */
XK_masculine                  : KeySym : 0x00ba  /* U+00BA MASCULINE ORDINAL INDICATOR */
XK_guillemotright             : KeySym : 0x00bb  /* U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */
XK_onequarter                 : KeySym : 0x00bc  /* U+00BC VULGAR FRACTION ONE QUARTER */
XK_onehalf                    : KeySym : 0x00bd  /* U+00BD VULGAR FRACTION ONE HALF */
XK_threequarters              : KeySym : 0x00be  /* U+00BE VULGAR FRACTION THREE QUARTERS */
XK_questiondown               : KeySym : 0x00bf  /* U+00BF INVERTED QUESTION MARK */
XK_Agrave                     : KeySym : 0x00c0  /* U+00C0 LATIN CAPITAL LETTER A WITH GRAVE */
XK_Aacute                     : KeySym : 0x00c1  /* U+00C1 LATIN CAPITAL LETTER A WITH ACUTE */
XK_Acircumflex                : KeySym : 0x00c2  /* U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX */
XK_Atilde                     : KeySym : 0x00c3  /* U+00C3 LATIN CAPITAL LETTER A WITH TILDE */
XK_Adiaeresis                 : KeySym : 0x00c4  /* U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS */
XK_Aring                      : KeySym : 0x00c5  /* U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE */
XK_AE                         : KeySym : 0x00c6  /* U+00C6 LATIN CAPITAL LETTER AE */
XK_Ccedilla                   : KeySym : 0x00c7  /* U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA */
XK_Egrave                     : KeySym : 0x00c8  /* U+00C8 LATIN CAPITAL LETTER E WITH GRAVE */
XK_Eacute                     : KeySym : 0x00c9  /* U+00C9 LATIN CAPITAL LETTER E WITH ACUTE */
XK_Ecircumflex                : KeySym : 0x00ca  /* U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX */
XK_Ediaeresis                 : KeySym : 0x00cb  /* U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS */
XK_Igrave                     : KeySym : 0x00cc  /* U+00CC LATIN CAPITAL LETTER I WITH GRAVE */
XK_Iacute                     : KeySym : 0x00cd  /* U+00CD LATIN CAPITAL LETTER I WITH ACUTE */
XK_Icircumflex                : KeySym : 0x00ce  /* U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX */
XK_Idiaeresis                 : KeySym : 0x00cf  /* U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS */
XK_ETH                        : KeySym : 0x00d0  /* U+00D0 LATIN CAPITAL LETTER ETH */
XK_Eth                        : KeySym : 0x00d0  /* deprecated */
XK_Ntilde                     : KeySym : 0x00d1  /* U+00D1 LATIN CAPITAL LETTER N WITH TILDE */
XK_Ograve                     : KeySym : 0x00d2  /* U+00D2 LATIN CAPITAL LETTER O WITH GRAVE */
XK_Oacute                     : KeySym : 0x00d3  /* U+00D3 LATIN CAPITAL LETTER O WITH ACUTE */
XK_Ocircumflex                : KeySym : 0x00d4  /* U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX */
XK_Otilde                     : KeySym : 0x00d5  /* U+00D5 LATIN CAPITAL LETTER O WITH TILDE */
XK_Odiaeresis                 : KeySym : 0x00d6  /* U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS */
XK_multiply                   : KeySym : 0x00d7  /* U+00D7 MULTIPLICATION SIGN */
XK_Oslash                     : KeySym : 0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
XK_Ooblique                   : KeySym : 0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
XK_Ugrave                     : KeySym : 0x00d9  /* U+00D9 LATIN CAPITAL LETTER U WITH GRAVE */
XK_Uacute                     : KeySym : 0x00da  /* U+00DA LATIN CAPITAL LETTER U WITH ACUTE */
XK_Ucircumflex                : KeySym : 0x00db  /* U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX */
XK_Udiaeresis                 : KeySym : 0x00dc  /* U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS */
XK_Yacute                     : KeySym : 0x00dd  /* U+00DD LATIN CAPITAL LETTER Y WITH ACUTE */
XK_THORN                      : KeySym : 0x00de  /* U+00DE LATIN CAPITAL LETTER THORN */
XK_Thorn                      : KeySym : 0x00de  /* deprecated */
XK_ssharp                     : KeySym : 0x00df  /* U+00DF LATIN SMALL LETTER SHARP S */
XK_agrave                     : KeySym : 0x00e0  /* U+00E0 LATIN SMALL LETTER A WITH GRAVE */
XK_aacute                     : KeySym : 0x00e1  /* U+00E1 LATIN SMALL LETTER A WITH ACUTE */
XK_acircumflex                : KeySym : 0x00e2  /* U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX */
XK_atilde                     : KeySym : 0x00e3  /* U+00E3 LATIN SMALL LETTER A WITH TILDE */
XK_adiaeresis                 : KeySym : 0x00e4  /* U+00E4 LATIN SMALL LETTER A WITH DIAERESIS */
XK_aring                      : KeySym : 0x00e5  /* U+00E5 LATIN SMALL LETTER A WITH RING ABOVE */
XK_ae                         : KeySym : 0x00e6  /* U+00E6 LATIN SMALL LETTER AE */
XK_ccedilla                   : KeySym : 0x00e7  /* U+00E7 LATIN SMALL LETTER C WITH CEDILLA */
XK_egrave                     : KeySym : 0x00e8  /* U+00E8 LATIN SMALL LETTER E WITH GRAVE */
XK_eacute                     : KeySym : 0x00e9  /* U+00E9 LATIN SMALL LETTER E WITH ACUTE */
XK_ecircumflex                : KeySym : 0x00ea  /* U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX */
XK_ediaeresis                 : KeySym : 0x00eb  /* U+00EB LATIN SMALL LETTER E WITH DIAERESIS */
XK_igrave                     : KeySym : 0x00ec  /* U+00EC LATIN SMALL LETTER I WITH GRAVE */
XK_iacute                     : KeySym : 0x00ed  /* U+00ED LATIN SMALL LETTER I WITH ACUTE */
XK_icircumflex                : KeySym : 0x00ee  /* U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX */
XK_idiaeresis                 : KeySym : 0x00ef  /* U+00EF LATIN SMALL LETTER I WITH DIAERESIS */
XK_eth                        : KeySym : 0x00f0  /* U+00F0 LATIN SMALL LETTER ETH */
XK_ntilde                     : KeySym : 0x00f1  /* U+00F1 LATIN SMALL LETTER N WITH TILDE */
XK_ograve                     : KeySym : 0x00f2  /* U+00F2 LATIN SMALL LETTER O WITH GRAVE */
XK_oacute                     : KeySym : 0x00f3  /* U+00F3 LATIN SMALL LETTER O WITH ACUTE */
XK_ocircumflex                : KeySym : 0x00f4  /* U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX */
XK_otilde                     : KeySym : 0x00f5  /* U+00F5 LATIN SMALL LETTER O WITH TILDE */
XK_odiaeresis                 : KeySym : 0x00f6  /* U+00F6 LATIN SMALL LETTER O WITH DIAERESIS */
XK_division                   : KeySym : 0x00f7  /* U+00F7 DIVISION SIGN */
XK_oslash                     : KeySym : 0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
XK_ooblique                   : KeySym : 0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
XK_ugrave                     : KeySym : 0x00f9  /* U+00F9 LATIN SMALL LETTER U WITH GRAVE */
XK_uacute                     : KeySym : 0x00fa  /* U+00FA LATIN SMALL LETTER U WITH ACUTE */
XK_ucircumflex                : KeySym : 0x00fb  /* U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX */
XK_udiaeresis                 : KeySym : 0x00fc  /* U+00FC LATIN SMALL LETTER U WITH DIAERESIS */
XK_yacute                     : KeySym : 0x00fd  /* U+00FD LATIN SMALL LETTER Y WITH ACUTE */
XK_thorn                      : KeySym : 0x00fe  /* U+00FE LATIN SMALL LETTER THORN */
XK_ydiaeresis                 : KeySym : 0x00ff  /* U+00FF LATIN SMALL LETTER Y WITH DIAERESIS */
/* XK_LATIN1 */

/* XK_XKB_KEYS */
XK_ISO_Left_Tab                : KeySym : 0xfe20
/* XK_XKB_KEYS */

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions pour les images.
 * \{ */

XDestroyImage :: fonc (ximage: *XImage) -> z32
{
    retourne ximage.f.destroy_image(ximage)
}

XGetPixel :: fonc (ximage: *XImage, x: z32, y: z32) -> n64
{
    retourne ximage.f.get_pixel(ximage, x, y)
}

XPutPixel :: fonc (ximage: *XImage, x: z32, y: z32, pixel: n64) -> z32
{
    retourne ximage.f.put_pixel(ximage, x, y, pixel)
}

XSubImage :: fonc (ximage: *XImage, x: z32, y: z32, width: n32, height: n32) -> *XImage
{
    retourne ximage.f.sub_image(ximage, x, y, width, height)
}

XAddPixel :: fonc (ximage: *XImage, value: z64) -> z32
{
    retourne ximage.f.add_pixel(ximage, value)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Fonctions externes.
 * \{ */

XComposeStatus :: struct #externe

XLookupString :: fonc (xkey_event: *XKeyEvent, buffer_return: *z8, bytes_buffer: z32, keysym_ret: *KeySym, status_in_out: *XComposeStatus) -> z32 #externe libX11

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Conversion d'évènements
 * \{ */

initialise_évènement_depuis_xmotion_event :: fonc (xmotion_event: *XMotionEvent, résultat: *Évènement)
{
    init_de(Évènement)(résultat)

    état: ÉtatSouris
    état.où.x = xmotion_event.x
    état.où.y = xmotion_event.y
    état.modificateur = convertis_modificateurs_clavier(xmotion_event.state)

    résultat.type = TypeÉvènement.Souris
    résultat.état_souris = état
    résultat.action_souris = ActionSouris.DÉPLACÉE
    résultat.bouton_souris = BoutonSouris.AUCUN
}

initialise_évènement_depuis_xbutton_event :: fonc (xbutton_event: *XButtonEvent, résultat: *Évènement)
{
    init_de(Évènement)(résultat)
 
    état: ÉtatSouris
    état.où.x = xbutton_event.x
    état.où.y = xbutton_event.y
    état.modificateur = convertis_modificateurs_clavier(xbutton_event.state)

    résultat.type = TypeÉvènement.Souris
    résultat.état_souris = état
    résultat.action_souris = si xbutton_event.type == ButtonPress {
        ActionSouris.PRESSÉE
    }
    sinon {
        assert(xbutton_event.type == ButtonRelease)
        ActionSouris.RELACHÉE
    }
    résultat.bouton_souris = si xbutton_event.button == Button1 {
        BoutonSouris.PRIMAIRE
    }
    sinon si xbutton_event.button == Button2 {
        BoutonSouris.MOLETTE
    }
    sinon si xbutton_event.button == Button3 {
        BoutonSouris.CONTEXTUEL
    }
    sinon si xbutton_event.button == Button4 && xbutton_event.type == ButtonPress {
        résultat.action_souris = ActionSouris.ROULEMENT
        résultat.delta_souris = -1
        BoutonSouris.MOLETTE
    }
    sinon si xbutton_event.button == Button5 && xbutton_event.type == ButtonPress {
        résultat.action_souris = ActionSouris.ROULEMENT
        résultat.delta_souris = 1
        BoutonSouris.MOLETTE
    }
    sinon {
        BoutonSouris.AUCUN
    }
}

initialise_évènement_depuis_xkey_event :: fonc (xkey_event: *XKeyEvent, est_répétée: bool, résultat: *Évènement)
{
    init_de(Évènement)(résultat)

    résultat.type = TypeÉvènement.Clavier
    résultat.touche_pressée = xkey_event.type == KeyPress
    résultat.est_répétée = est_répétée
    résultat.code_scan_natif = xkey_event.keycode

    keysym := XLookupKeysym(xkey_event, 0)
    résultat.clé_virtuelle_native = keysym comme n32
   
    ascii: z8
    key_sym_str: KeySym
    saufsi XLookupString(xkey_event, *ascii, 1, *key_sym_str, nul) {
        ascii = '\0';
    }

    // verrouillage_casse est LockMask
    // alt_gr est Mod5Mask
    verrouillage_numérique_est_actif := (xkey_event.state & Mod2Mask comme n32) != 0

    /* Seule une sélection de touches passe par XLookupKeysym, les autres par XLookupString. */
    résultat.touche = touche_clavier_depuis_keysym(keysym, verrouillage_numérique_est_actif)
    discr résultat.touche {
        ALT_DROITE,
        ALT_GAUCHE,
        MAJUSCULE_DROITE,
        MAJUSCULE_GAUCHE,
        CONTROLE_DROITE,
        CONTROLE_GAUCHE,
        SYSTÈME_DROITE,
        SYSTÈME_GAUCHE,
        HYPER_DROITE,
        HYPER_GAUCHE,
        _0,
        _1,
        _2,
        _3,
        _4,
        _5,
        _6,
        _7,
        _8,
        _9,
        PAVÉ_NUM_0,
        PAVÉ_NUM_1,
        PAVÉ_NUM_2,
        PAVÉ_NUM_3,
        PAVÉ_NUM_4,
        PAVÉ_NUM_5,
        PAVÉ_NUM_6,
        PAVÉ_NUM_7,
        PAVÉ_NUM_8,
        PAVÉ_NUM_9,
        PAVÉ_NUM_POINT,
        PAVÉ_NUM_ENTRÉE,
        PAVÉ_NUM_PLUS,
        PAVÉ_NUM_MOINS,
        PAVÉ_NUM_ASTÉRISQUE,
        PAVÉ_NUM_SLASH,
        PAVÉ_NUM_INSÈRE,
        PAVÉ_NUM_FIN,
        PAVÉ_NUM_BAS,
        PAVÉ_NUM_PAGE_BAS,
        PAVÉ_NUM_GAUCHE,
        PAVÉ_NUM_DROITE,
        PAVÉ_NUM_DÉBUT,
        PAVÉ_NUM_HAUT,
        PAVÉ_NUM_PAGE_HAUT,
        PAVÉ_NUM_SUPPR {}
        sinon {
            touche := touche_clavier_depuis_keysym(key_sym_str, verrouillage_numérique_est_actif)
            si touche != ToucheClavier.INCONNUE {
                résultat.touche = touche
            }
        }
    }

    si (xkey_event.state & ShiftMask comme n32) != 0 {
        résultat.modificateurs.MAJUSCULE = vrai
    }

    si (xkey_event.state & ControlMask comme n32) != 0 {
        résultat.modificateurs.CONTROL = vrai
    }

    si (xkey_event.state & Mod1Mask comme n32) != 0 {
        résultat.modificateurs.ALT = vrai
    }

    résultat.modificateurs = convertis_modificateurs_clavier(xkey_event.state)
    résultat.modificateurs_natifs = xkey_event.state

    // texte: chaine
    // compte: z32
}

convertis_modificateurs_clavier :: fonc (state: n32) -> ModificateurClavier
{
    résultat: ModificateurClavier
    si (state & ShiftMask comme n32) != 0 {
        résultat.MAJUSCULE = vrai
    }

    si (state & ControlMask comme n32) != 0 {
        résultat.CONTROL = vrai
    }

    si (state & Mod1Mask comme n32) != 0 {
        résultat.ALT = vrai
    }
    retourne résultat
}

/* Media keys in some keyboards and laptops with XFree86/XORG. */
AVEC_XF86KEYSYM :: vrai

touche_clavier_depuis_keysym :: fonc (key: KeySym, verrouillage_numérique_est_actif: bool) -> ToucheClavier
{
    si key >= XK_A && key <= XK_Z {
        retourne ((key - XK_A) comme z32 + ToucheClavier.A comme z32) comme ToucheClavier
    }

    si key >= XK_a && key <= XK_z {
        retourne ((key - XK_a) comme z32 + ToucheClavier.A comme z32) comme ToucheClavier
    }

    si key >= XK_0 && key <= XK_9 {
        retourne ((key - XK_0) comme z32 + ToucheClavier._0 comme z32) comme ToucheClavier
    }

    si key >= XK_F1 && key <= XK_F24 {
        retourne ((key - XK_F1) comme z32 + ToucheClavier.F1 comme z32) comme ToucheClavier
    }

    si key == XK_parenleft { retourne ToucheClavier.PARENTHÈSE_GAUCHE }
    si key == XK_parenright { retourne ToucheClavier.PARENTHÈSE_DROITE }
    si key == XK_ampersand { retourne ToucheClavier.ESPERLUETTE }
    si key == XK_eacute { retourne ToucheClavier.E_ACCENT_AIGÜE }
    si key == XK_egrave { retourne ToucheClavier.E_ACCENT_GRAVE }
    si key == XK_underscore { retourne ToucheClavier.TIRET_BAS }
    si key == XK_ccedilla { retourne ToucheClavier.C_CÉDILLE }
    si key == XK_agrave { retourne ToucheClavier.A_ACCENT_GRAVE }
    si key == XK_quotedbl { retourne ToucheClavier.GUILLEMET_ANGLAIS }
    si key == XK_colon { retourne ToucheClavier.DOUBLE_POINT }
    si key == XK_exclam { retourne ToucheClavier.EXCLAMATION }
    si key == XK_ugrave { retourne ToucheClavier.U_ACCENT_GRAVE }
    si key == XK_asterisk { retourne ToucheClavier.ASTÉRISQUE }
    si key == XK_dollar { retourne ToucheClavier.DOLLAR }
    si key == XK_less { retourne ToucheClavier.INFÉRIEUR }

    si key == XK_BackSpace { retourne ToucheClavier.EFFACE }
    si key == XK_Tab { retourne ToucheClavier.TAB }
    si key == XK_ISO_Left_Tab { retourne ToucheClavier.TAB }
    si key == XK_Return { retourne ToucheClavier.ENTRÉE }
    si key == XK_Escape { retourne ToucheClavier.ÉCHAPPE }
    si key == XK_space { retourne ToucheClavier.ESPACE }

    si key == XK_Linefeed { retourne ToucheClavier.ENTRÉE }
    si key == XK_semicolon { retourne ToucheClavier.POINT_VIRGULE }
    si key == XK_period { retourne ToucheClavier.POINT }
    si key == XK_comma { retourne ToucheClavier.VIRGULE }
    si key == XK_quoteleft { retourne ToucheClavier.APOSTROPHE }
    si key == XK_quoteright { retourne ToucheClavier.APOSTROPHE }
    si key == XK_quoteleft { retourne ToucheClavier.ACCENT_GRAVE }
    si key == XK_minus { retourne ToucheClavier.MOINS }
    si key == XK_plus { retourne ToucheClavier.PLUS }
    si key == XK_slash { retourne ToucheClavier.SLASH }
    si key == XK_backslash { retourne ToucheClavier.BACK_SLASH }
    si key == XK_equal { retourne ToucheClavier.ÉGAL }
    si key == XK_bracketleft { retourne ToucheClavier.CROCHET_OUVRANT }
    si key == XK_bracketright { retourne ToucheClavier.CROCHET_FERMANT }
    si key == XK_Pause { retourne ToucheClavier.PAUSE }

    si key == XK_Shift_L { retourne ToucheClavier.MAJUSCULE_GAUCHE }
    si key == XK_Shift_R { retourne ToucheClavier.MAJUSCULE_DROITE }
    si key == XK_Control_L { retourne ToucheClavier.CONTROLE_GAUCHE }
    si key == XK_Control_R { retourne ToucheClavier.CONTROLE_DROITE }
    si key == XK_Alt_L { retourne ToucheClavier.ALT_GAUCHE }
    si key == XK_Alt_R { retourne ToucheClavier.ALT_DROITE }
    si key == XK_Super_L { retourne ToucheClavier.SYSTÈME_GAUCHE }
    si key == XK_Super_R { retourne ToucheClavier.SYSTÈME_DROITE }
    si key == XK_Hyper_L { retourne ToucheClavier.HYPER_GAUCHE }
    si key == XK_Hyper_R { retourne ToucheClavier.HYPER_DROITE }

    si key == XK_Insert { retourne ToucheClavier.INSÉRER }
    si key == XK_Delete { retourne ToucheClavier.SUPPRIMER }
    si key == XK_Home { retourne ToucheClavier.DÉBUT }
    si key == XK_End { retourne ToucheClavier.FIN }
    si key == XK_Page_Up { retourne ToucheClavier.PAGE_HAUT }
    si key == XK_Page_Down { retourne ToucheClavier.PAGE_BAS }

    si key == XK_Left { retourne ToucheClavier.FLÈCHE_GAUCHE }
    si key == XK_Right { retourne ToucheClavier.FLÈCHE_DROITE }
    si key == XK_Up { retourne ToucheClavier.FLÈCHE_HAUT }
    si key == XK_Down { retourne ToucheClavier.FLÈCHE_BAS }

    si key == XK_Caps_Lock { retourne ToucheClavier.VERROUILLAGE_CASSE }
    si key == XK_Scroll_Lock { retourne ToucheClavier.ARRÊT_DÉFILAGE }
    si key == XK_Num_Lock { retourne ToucheClavier.VERROUILLAGE_NUMÉRIQUE }
    si key == XK_Menu { retourne ToucheClavier.APPLICATION }

    /* Évènement pavé numérique. */

    si key == XK_KP_0 { retourne ToucheClavier.PAVÉ_NUM_0 }
    si key == XK_KP_1 { retourne ToucheClavier.PAVÉ_NUM_1 }
    si key == XK_KP_2 { retourne ToucheClavier.PAVÉ_NUM_2 }
    si key == XK_KP_3 { retourne ToucheClavier.PAVÉ_NUM_3 }
    si key == XK_KP_4 { retourne ToucheClavier.PAVÉ_NUM_4 }
    si key == XK_KP_5 { retourne ToucheClavier.PAVÉ_NUM_5 }
    si key == XK_KP_6 { retourne ToucheClavier.PAVÉ_NUM_6 }
    si key == XK_KP_7 { retourne ToucheClavier.PAVÉ_NUM_7 }
    si key == XK_KP_8 { retourne ToucheClavier.PAVÉ_NUM_8 }
    si key == XK_KP_9 { retourne ToucheClavier.PAVÉ_NUM_9 }
    si key == XK_KP_Decimal { retourne ToucheClavier.PAVÉ_NUM_POINT }

    si verrouillage_numérique_est_actif {
        si key == XK_KP_Insert { retourne ToucheClavier.PAVÉ_NUM_0 }
        si key == XK_KP_End { retourne ToucheClavier.PAVÉ_NUM_1 }
        si key == XK_KP_Down { retourne ToucheClavier.PAVÉ_NUM_2 }
        si key == XK_KP_Page_Down { retourne ToucheClavier.PAVÉ_NUM_3 }
        si key == XK_KP_Left { retourne ToucheClavier.PAVÉ_NUM_4 }
        si key == XK_KP_Begin { retourne ToucheClavier.PAVÉ_NUM_5 } // xxx
        si key == XK_KP_Right { retourne ToucheClavier.PAVÉ_NUM_6 }
        si key == XK_KP_Home { retourne ToucheClavier.PAVÉ_NUM_7 }
        si key == XK_KP_Up { retourne ToucheClavier.PAVÉ_NUM_8 }
        si key == XK_KP_Page_Up { retourne ToucheClavier.PAVÉ_NUM_9 }
        si key == XK_KP_Delete { retourne ToucheClavier.PAVÉ_NUM_SUPPR }
    }
    sinon {
        si key == XK_KP_Insert { retourne ToucheClavier.PAVÉ_NUM_INSÈRE }
        si key == XK_KP_End { retourne ToucheClavier.PAVÉ_NUM_FIN }
        si key == XK_KP_Down { retourne ToucheClavier.PAVÉ_NUM_BAS }
        si key == XK_KP_Page_Down { retourne ToucheClavier.PAVÉ_NUM_PAGE_BAS }
        si key == XK_KP_Left { retourne ToucheClavier.PAVÉ_NUM_GAUCHE }
        si key == XK_KP_Begin { retourne ToucheClavier.PAVÉ_NUM_5 } // xxx
        si key == XK_KP_Right { retourne ToucheClavier.PAVÉ_NUM_DROITE }
        si key == XK_KP_Home { retourne ToucheClavier.PAVÉ_NUM_DÉBUT }
        si key == XK_KP_Up { retourne ToucheClavier.PAVÉ_NUM_HAUT }
        si key == XK_KP_Page_Up { retourne ToucheClavier.PAVÉ_NUM_PAGE_HAUT }
        si key == XK_KP_Delete { retourne ToucheClavier.PAVÉ_NUM_SUPPR }
    }

    si key == XK_KP_Enter { retourne ToucheClavier.PAVÉ_NUM_ENTRÉE }
    si key == XK_KP_Add { retourne ToucheClavier.PAVÉ_NUM_PLUS }
    si key == XK_KP_Subtract { retourne ToucheClavier.PAVÉ_NUM_MOINS }
    si key == XK_KP_Multiply { retourne ToucheClavier.PAVÉ_NUM_ASTÉRISQUE }
    si key == XK_KP_Divide { retourne ToucheClavier.PAVÉ_NUM_SLASH }

    #si AVEC_XF86KEYSYM {
        si key == XF86XK_AudioPlay { retourne ToucheClavier.LECTURE_MÉDIA }
        si key == XF86XK_AudioStop { retourne ToucheClavier.PAUSE_MÉDIA }
        si key == XF86XK_AudioPrev { retourne ToucheClavier.MÉDIA_PRÉCÉDENT }
        si key == XF86XK_AudioRewind { retourne ToucheClavier.RECULE_MÉDIA }
        si key == XF86XK_AudioNext { retourne ToucheClavier.MÉDIA_SUIVANT }
        si key == XF86XK_AudioForward { retourne ToucheClavier.AVANCE_MÉDIA }
    }

    retourne ToucheClavier.INCONNUE
}

/** \} */

#portée_fichier

/* ------------------------------------------------------------------------- */
/** \nom Test pour se connecter directement au serveur X.
 * \{ */

importe Fondation
importe POSIX
importe Sérialisation
importe SysFichier

AUTH_ENTRY_FAMILY_LOCAL : n16 : 1
AUTH_ENTRY_MAGIC_COOKIE :: "MIT-MAGIC-COOKIE-1"

AuthToken :: [16]n8

AuthEntry :: struct {
	family: n16
	auth_name: []octet
	auth_data: []octet
}

donne_chemin_fichier_xauthority :: fonc () -> CheminFichier
{
	chemin_env := chaine_environnement("XAUTHORITY")
    si chemin_env {
        retourne CheminFichier(chemin_env)
    }

    répertoire_personnel := chemin_répertoire_personnel()
    saufsi répertoire_personnel.possède_valeur() {
        retourne CheminFichier()
    }

    retourne répertoire_personnel.Quelque / ".Xauthority"
}

load_x11_auth_token :: fonc () -> Optionnel(AuthToken)
{
    chemin := donne_chemin_fichier_xauthority()
    saufsi fichier_existe(chemin) {
        retourne
    }
    diffère détruit_chemin(chemin)

    imprime("%\n", chemin.chn)

    contenu := contenu_fichier_binaire(chemin)
    si contenu.taille == 0 {
        retourne
    }
    diffère déloge(contenu)

    tampon : []octet = contenu

	boucle {
        si tampon.taille == 0 {
            arrête
        }

		auth_entry: AuthEntry
        auth_entry, tampon = read_x11_auth_entry(tampon)

        imprime("tampon.taille\n", auth_entry)

        si auth_entry.family != AUTH_ENTRY_FAMILY_LOCAL {
            continue
        }

        cookie := chaine_depuis_tranche_octets(auth_entry.auth_name)
        si cookie != AUTH_ENTRY_MAGIC_COOKIE {
            continue
        }

        si auth_entry.auth_data.taille != taille_de(AuthToken) comme z64 {
            continue
        }

        auth_token := mémoire(auth_entry.auth_data.pointeur comme *AuthToken)
        retourne auth_token
	}
}

read_x11_auth_entry :: fonc (tampon: []octet) -> AuthEntry, []octet
{
	entry := AuthEntry()

    entry.family, tampon = lis_petit_boutisme(tampon, n16)

    imprime("entry.family : %, tampon.taille %\n", entry.family, tampon.taille)

    taille_adresse: n16
    taille_adresse, tampon = lis_grand_boutisme(tampon, n16)

    adresse: []octet
    adresse.pointeur = tampon.pointeur
    adresse.taille = taille_adresse comme z64
    tampon = avance(tampon, taille_adresse comme z64)

    imprime("taille_adresse : %, tampon.taille %\n", taille_adresse, tampon.taille)

    taille_display_number: n16
    taille_display_number, tampon = lis_grand_boutisme(tampon, n16)

    display_number: []octet
    display_number.pointeur = tampon.pointeur
    display_number.taille = taille_display_number comme z64
    tampon = avance(tampon, taille_display_number comme z64)

    taille_auth_name: n16
    taille_auth_name, tampon = lis_grand_boutisme(tampon, n16)

    auth_name: []octet
    auth_name.pointeur = tampon.pointeur
    auth_name.taille = taille_auth_name comme z64
    tampon = avance(tampon, taille_auth_name comme z64)

    entry.auth_name = auth_name

    taille_auth_data: n16
    taille_auth_data, tampon = lis_grand_boutisme(tampon, n16)

    auth_data: []octet
    auth_data.pointeur = tampon.pointeur
    auth_data.taille = taille_auth_data comme z64
    tampon = avance(tampon, taille_auth_data comme z64)

    entry.auth_data = auth_data

    retourne entry, tampon
}

/** \} */
