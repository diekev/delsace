charge "interface"

/* ------------------------------------------------------------------------- */
/** \nom Définitions et macros définis par X.h
 * \{ */

None : z64 :                 0	/* universal null resource or null atom */

ParentRelative : z64 :       1	/* background pixmap in CreateWindow
				    and ChangeWindowAttributes */

CopyFromParent : z64 :       0	/* border pixmap in CreateWindow
				       and ChangeWindowAttributes
				   special VisualID and special window
				       class passed to CreateWindow */

PointerWindow : z64 :        0	/* destination window in SendEvent */
InputFocus : z64 :           1	/* destination window in SendEvent */

PointerRoot : z64 :          1	/* focus window in SetInputFocus */

AnyPropertyType : z64 :      0	/* special Atom, passed to GetProperty */

AnyKey : z64 :		     0	/* special Key Code, passed to GrabKey */

AnyButton : z64 :            0	/* special Button Code, passed to GrabButton */

AllTemporary : z64 :         0	/* special Resource ID passed to KillClient */

CurrentTime : z64 :          0	/* special Time */

NoSymbol : z64 :	     0	/* special KeySym */

/*****************************************************************
 * EVENT DEFINITIONS
 *****************************************************************/

/* Input Event Masks. Used as event-mask window attribute and as arguments
   to Grab requests.  Not to be confused with event names.  */

NoEventMask : z64 :			0
KeyPressMask : z64 :			(1<<0)
KeyReleaseMask : z64 :			(1<<1)
ButtonPressMask : z64 :			(1<<2)
ButtonReleaseMask : z64 :		(1<<3)
EnterWindowMask : z64 :			(1<<4)
LeaveWindowMask : z64 :			(1<<5)
PointerMotionMask : z64 :		(1<<6)
PointerMotionHintMask : z64 :		(1<<7)
Button1MotionMask : z64 :		(1<<8)
Button2MotionMask : z64 :		(1<<9)
Button3MotionMask : z64 :		(1<<10)
Button4MotionMask : z64 :		(1<<11)
Button5MotionMask : z64 :		(1<<12)
ButtonMotionMask : z64 :		(1<<13)
KeymapStateMask : z64 :			(1<<14)
ExposureMask : z64 :			(1<<15)
VisibilityChangeMask : z64 :		(1<<16)
StructureNotifyMask : z64 :		(1<<17)
ResizeRedirectMask : z64 :		(1<<18)
SubstructureNotifyMask : z64 :		(1<<19)
SubstructureRedirectMask : z64 :	(1<<20)
FocusChangeMask : z64 :			(1<<21)
PropertyChangeMask : z64 :		(1<<22)
ColormapChangeMask : z64 :		(1<<23)
OwnerGrabButtonMask : z64 :		(1<<24)

/* Event names.  Used in "type" field in XEvent structures.  Not to be
confused with event masks above.  They start from 2 because 0 and 1
are reserved in the protocol for errors and replies. */

KeyPress ::		2
KeyRelease ::		3
ButtonPress ::		4
ButtonRelease ::		5
MotionNotify ::		6
EnterNotify ::		7
LeaveNotify ::		8
FocusIn ::			9
FocusOut ::		10
KeymapNotify ::		11
Expose ::			12
GraphicsExpose ::		13
NoExpose ::		14
VisibilityNotify ::	15
CreateNotify ::		16
DestroyNotify ::		17
UnmapNotify ::		18
MapNotify ::		19
MapRequest ::		20
ReparentNotify ::		21
ConfigureNotify ::		22
ConfigureRequest ::	23
GravityNotify ::		24
ResizeRequest ::		25
CirculateNotify ::		26
CirculateRequest ::	27
PropertyNotify ::		28
SelectionClear ::		29
SelectionRequest ::	30
SelectionNotify ::		31
ColormapNotify ::		32
ClientMessage ::		33
MappingNotify ::		34
GenericEvent ::		35
LASTEvent ::		36	/* must be bigger than any event # */


/* Key masks. Used as modifiers to GrabButton and GrabKey, results of QueryPointer,
   state in various key-, mouse-, and button-related events. */

ShiftMask ::		(1<<0)
LockMask ::		(1<<1)
ControlMask ::		(1<<2)
Mod1Mask ::		(1<<3)
Mod2Mask ::		(1<<4)
Mod3Mask ::		(1<<5)
Mod4Mask ::		(1<<6)
Mod5Mask ::		(1<<7)

/* modifier names.  Used to build a SetModifierMapping request or
   to read a GetModifierMapping request.  These correspond to the
   masks defined above. */
ShiftMapIndex ::		0
LockMapIndex ::		1
ControlMapIndex ::		2
Mod1MapIndex ::		3
Mod2MapIndex ::		4
Mod3MapIndex ::		5
Mod4MapIndex ::		6
Mod5MapIndex ::		7


/* button masks.  Used in same manner as Key masks above. Not to be confused
   with button names below. */

Button1Mask ::		(1<<8)
Button2Mask ::		(1<<9)
Button3Mask ::		(1<<10)
Button4Mask ::		(1<<11)
Button5Mask ::		(1<<12)

AnyModifier ::		(1<<15)  /* used in GrabButton, GrabKey */


/* button names. Used as arguments to GrabButton and as detail in ButtonPress
   and ButtonRelease events.  Not to be confused with button masks above.
   Note that 0 is already defined above as "AnyButton".  */

Button1 ::			1
Button2 ::			2
Button3 ::			3
Button4 ::			4
Button5 ::			5

/* Notify modes */

NotifyNormal ::		0
NotifyGrab ::		1
NotifyUngrab ::		2
NotifyWhileGrabbed ::	3

NotifyHint ::		1	/* for MotionNotify events */

/* Notify detail */

NotifyAncestor ::		0
NotifyVirtual ::		1
NotifyInferior ::		2
NotifyNonlinear ::		3
NotifyNonlinearVirtual ::	4
NotifyPointer ::		5
NotifyPointerRoot ::	6
NotifyDetailNone ::	7

/* Visibility notify */

VisibilityUnobscured ::		0
VisibilityPartiallyObscured ::	1
VisibilityFullyObscured ::		2

/* Circulation request */

PlaceOnTop ::		0
PlaceOnBottom ::		1

/* protocol families */

FamilyInternet ::		0	/* IPv4 */
FamilyDECnet ::		1
FamilyChaos ::		2
FamilyInternet6 ::		6	/* IPv6 */

/* authentication families not tied to a specific protocol */
FamilyServerInterpreted :: 5

/* Property notification */

PropertyNewValue ::	0
PropertyDelete ::		1

/* Color Map notification */

ColormapUninstalled ::	0
ColormapInstalled ::	1

/* GrabPointer, GrabButton, GrabKeyboard, GrabKey Modes */

GrabModeSync ::		0
GrabModeAsync ::		1

/* GrabPointer, GrabKeyboard reply status */

GrabSuccess ::		0
AlreadyGrabbed ::		1
GrabInvalidTime ::		2
GrabNotViewable ::		3
GrabFrozen ::		4

/* AllowEvents modes */

AsyncPointer ::		0
SyncPointer ::		1
ReplayPointer ::		2
AsyncKeyboard ::		3
SyncKeyboard ::		4
ReplayKeyboard ::		5
AsyncBoth ::		6
SyncBoth ::		7

/* Used in SetInputFocus, GetInputFocus */

RevertToNone ::		None comme z32
RevertToPointerRoot ::	PointerRoot comme z32
RevertToParent ::		2

/*****************************************************************
 * ERROR CODES
 *****************************************************************/

Success ::		   0	/* everything's okay */
BadRequest ::	   1	/* bad request code */
BadValue ::	   2	/* int parameter out of range */
BadWindow ::	   3	/* parameter not a Window */
BadPixmap ::	   4	/* parameter not a Pixmap */
BadAtom ::		   5	/* parameter not an Atom */
BadCursor ::	   6	/* parameter not a Cursor */
BadFont ::		   7	/* parameter not a Font */
BadMatch ::	   8	/* parameter mismatch */
BadDrawable ::	   9	/* parameter not a Pixmap or Window */
BadAccess ::	  10	/* depending on context:
				 - key/button already grabbed
				 - attempt to free an illegal
				   cmap entry
				- attempt to store into a read-only
				   color map entry.
 				- attempt to modify the access control
				   list from other than the local host.
				*/
BadAlloc ::	  11	/* insufficient resources */
BadColor ::	  12	/* no such colormap */
BadGC ::		  13	/* parameter not a GC */
BadIDChoice ::	  14	/* choice not in range or already used */
BadName ::		  15	/* font or color name doesn't exist */
BadLength ::	  16	/* Request length incorrect */
BadImplementation :: 17	/* server is defective */

FirstExtensionError ::	128
LastExtensionError ::	255

/*****************************************************************
 * WINDOW DEFINITIONS
 *****************************************************************/

/* Window classes used by CreateWindow */
/* Note that CopyFromParent is already defined as 0 above */

InputOutput ::		1
InputOnly ::		2

/* Window attributes for CreateWindow and ChangeWindowAttributes */

CWBackPixmap : z64 :		(1<<0)
CWBackPixel : z64 :		(1<<1)
CWBorderPixmap : z64 :		(1<<2)
CWBorderPixel : z64 :           (1<<3)
CWBitGravity : z64 :		(1<<4)
CWWinGravity : z64 :		(1<<5)
CWBackingStore : z64 :          (1<<6)
CWBackingPlanes : z64 :	        (1<<7)
CWBackingPixel : z64 :	        (1<<8)
CWOverrideRedirect : z64 :	(1<<9)
CWSaveUnder : z64 :		(1<<10)
CWEventMask : z64 :		(1<<11)
CWDontPropagate : z64 :	        (1<<12)
CWColormap : z64 :		(1<<13)
CWCursor : z64 :	        (1<<14)

/* ConfigureWindow structure */

CWX ::			(1<<0)
CWY ::			(1<<1)
CWWidth ::			(1<<2)
CWHeight ::		(1<<3)
CWBorderWidth ::		(1<<4)
CWSibling ::		(1<<5)
CWStackMode ::		(1<<6)


/* Bit Gravity */

ForgetGravity ::		0
NorthWestGravity ::	1
NorthGravity ::		2
NorthEastGravity ::	3
WestGravity ::		4
CenterGravity ::		5
EastGravity ::		6
SouthWestGravity ::	7
SouthGravity ::		8
SouthEastGravity ::	9
StaticGravity ::		10

/* Window gravity + bit gravity above */

UnmapGravity ::		0

/* Used in CreateWindow for backing-store hint */

NotUseful ::               0
WhenMapped ::              1
Always ::                  2

/* Used in GetWindowAttributes reply */

IsUnmapped ::		0
IsUnviewable ::		1
IsViewable ::		2

/* Used in ChangeSaveSet */

SetModeInsert ::           0
SetModeDelete ::           1

/* Used in ChangeCloseDownMode */

DestroyAll ::              0
RetainPermanent ::         1
RetainTemporary ::         2

/* Window stacking method (in configureWindow) */

Above ::                   0
Below ::                   1
TopIf ::                   2
BottomIf ::                3
Opposite ::                4

/* Circulation direction */

RaiseLowest ::             0
LowerHighest ::            1

/* Property modes */

PropModeReplace ::         0
PropModePrepend ::         1
PropModeAppend ::          2

/*****************************************************************
 * GRAPHICS DEFINITIONS
 *****************************************************************/

/* graphics functions, as in GC.alu */

GXclear ::			0x0		/* 0 */
GXand ::			0x1		/* src AND dst */
GXandReverse ::		0x2		/* src AND NOT dst */
GXcopy ::			0x3		/* src */
GXandInverted ::		0x4		/* NOT src AND dst */
GXnoop ::			0x5		/* dst */
GXxor ::			0x6		/* src XOR dst */
GXor ::			0x7		/* src OR dst */
GXnor ::			0x8		/* NOT src AND NOT dst */
GXequiv ::			0x9		/* NOT src XOR dst */
GXinvert ::		0xa		/* NOT dst */
GXorReverse ::		0xb		/* src OR NOT dst */
GXcopyInverted ::		0xc		/* NOT src */
GXorInverted ::		0xd		/* NOT src OR dst */
GXnand ::			0xe		/* NOT src OR NOT dst */
GXset ::			0xf		/* 1 */

/* LineStyle */

LineSolid ::		0
LineOnOffDash ::		1
LineDoubleDash ::		2

/* capStyle */

CapNotLast ::		0
CapButt ::			1
CapRound ::		2
CapProjecting ::		3

/* joinStyle */

JoinMiter ::		0
JoinRound ::		1
JoinBevel ::		2

/* fillStyle */

FillSolid ::		0
FillTiled ::		1
FillStippled ::		2
FillOpaqueStippled ::	3

/* fillRule */

EvenOddRule ::		0
WindingRule ::		1

/* subwindow mode */

ClipByChildren ::		0
IncludeInferiors ::	1

/* SetClipRectangles ordering */

Unsorted ::		0
YSorted ::			1
YXSorted ::		2
YXBanded ::		3

/* CoordinateMode for drawing routines */

CoordModeOrigin ::		0	/* relative to the origin */
CoordModePrevious ::       1	/* relative to previous point */

/* Polygon shapes */

Complex ::			0	/* paths may intersect */
Nonconvex ::		1	/* no paths intersect, but not convex */
Convex ::			2	/* wholly convex */

/* Arc modes for PolyFillArc */

ArcChord ::		0	/* join endpoints of arc */
ArcPieSlice ::		1	/* join endpoints to center of arc */

/* GC components: masks used in CreateGC, CopyGC, ChangeGC, OR'ed into
   GC.stateChanges */

GCFunction : z64 :              (1<<0)
GCPlaneMask : z64 :             (1<<1)
GCForeground : z64 :            (1<<2)
GCBackground : z64 :            (1<<3)
GCLineWidth : z64 :             (1<<4)
GCLineStyle : z64 :             (1<<5)
GCCapStyle : z64 :              (1<<6)
GCJoinStyle : z64 :		(1<<7)
GCFillStyle : z64 :		(1<<8)
GCFillRule : z64 :		(1<<9)
GCTile : z64 :			(1<<10)
GCStipple : z64 :		(1<<11)
GCTileStipXOrigin : z64 :	(1<<12)
GCTileStipYOrigin : z64 :	(1<<13)
GCFont : z64 : 			(1<<14)
GCSubwindowMode : z64 :		(1<<15)
GCGraphicsExposures : z64 :     (1<<16)
GCClipXOrigin : z64 :		(1<<17)
GCClipYOrigin : z64 :		(1<<18)
GCClipMask : z64 :		(1<<19)
GCDashOffset : z64 :		(1<<20)
GCDashList : z64 :		(1<<21)
GCArcMode : z64 :		(1<<22)

GCLastBit ::		22
/*****************************************************************
 * FONTS
 *****************************************************************/

/* used in QueryFont -- draw direction */

FontLeftToRight ::		0
FontRightToLeft ::		1

FontChange ::		255

/*****************************************************************
 *  IMAGING
 *****************************************************************/

/* ImageFormat -- PutImage, GetImage */

XYBitmap ::		0	/* depth 1, XYFormat */
XYPixmap ::		1	/* depth == drawable depth */
ZPixmap ::			2	/* depth == drawable depth */

/*****************************************************************
 *  COLOR MAP STUFF
 *****************************************************************/

/* For CreateColormap */

AllocNone ::		0	/* create map with no entries */
AllocAll ::		1	/* allocate entire map writeable */


/* Flags used in StoreNamedColor, StoreColors */

DoRed ::			(1<<0)
DoGreen ::			(1<<1)
DoBlue ::			(1<<2)

/*****************************************************************
 * CURSOR STUFF
 *****************************************************************/

/* QueryBestSize Class */

CursorShape ::		0	/* largest size that can be displayed */
TileShape ::		1	/* size tiled fastest */
StippleShape ::		2	/* size stippled fastest */

/*****************************************************************
 * KEYBOARD/POINTER STUFF
 *****************************************************************/

AutoRepeatModeOff ::	0
AutoRepeatModeOn ::	1
AutoRepeatModeDefault ::	2

LedModeOff ::		0
LedModeOn ::		1

/* masks for ChangeKeyboardControl */

KBKeyClickPercent : z64 :	(1<<0)
KBBellPercent : z64 :		(1<<1)
KBBellPitch : z64 :		(1<<2)
KBBellDuration : z64 :		(1<<3)
KBLed : z64 :			(1<<4)
KBLedMode : z64 :		(1<<5)
KBKey : z64 :			(1<<6)
KBAutoRepeatMode : z64 :	(1<<7)

MappingSuccess ::     	0
MappingBusy ::        	1
MappingFailed ::		2

MappingModifier ::		0
MappingKeyboard ::		1
MappingPointer ::		2

/*****************************************************************
 * SCREEN SAVER STUFF
 *****************************************************************/

DontPreferBlanking ::	0
PreferBlanking ::		1
DefaultBlanking ::		2

DisableScreenSaver ::	0
DisableScreenInterval ::	0

DontAllowExposures ::	0
AllowExposures ::		1
DefaultExposures ::	2

/* for ForceScreenSaver */

ScreenSaverReset :: 0
ScreenSaverActive :: 1

/*****************************************************************
 * HOSTS AND CONNECTIONS
 *****************************************************************/

/* for ChangeHosts */

HostInsert ::		0
HostDelete ::		1

/* for ChangeAccessControl */

EnableAccess ::		1
DisableAccess ::		0

/* Display classes  used in opening the connection
 * Note that the statically allocated ones are even numbered and the
 * dynamically changeable ones are odd numbered */

StaticGray ::		0
GrayScale ::		1
StaticColor ::		2
PseudoColor ::		3
TrueColor ::		4
DirectColor ::		5


/* Byte order  used in imageByteOrder and bitmapBitOrder */

LSBFirst ::		0
MSBFirst ::		1

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Définitions et macros définis par Xlib.h
 * \{ */

XlibSpecificationRelease :: 6

QueuedAlready :: 0
QueuedAfterReading :: 1
QueuedAfterFlush :: 2

// #define ConnectionNumber(dpy) 	(((_XPrivDisplay)(dpy))->fd)

RootWindow :: fonc (display: *Display, parent: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, parent).root
}

DefaultScreen :: fonc (display: *Display) -> z32 #enligne
{
    retourne XDefaultScreen(display)
}

// #define DefaultRootWindow(dpy) 	(ScreenOfDisplay(dpy,DefaultScreen(dpy))->root)
// #define DefaultVisual(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_visual)

DefaultGC :: fonc (display: *Display, s: z32) -> *_XGC #enligne
{
    retourne XScreenOfDisplay(display, s).default_gc
}

BlackPixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).black_pixel
}

WhitePixel :: fonc (display: *Display, s: z32) -> n64 #enligne
{
    retourne XScreenOfDisplay(display, s).white_pixel
}

// #define AllPlanes 		((unsigned long)~0L)
// #define QLength(dpy) 		(((_XPrivDisplay)(dpy))->qlen)
// #define DisplayWidth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->width)
// #define DisplayHeight(dpy, scr) (ScreenOfDisplay(dpy,scr)->height)
// #define DisplayWidthMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mwidth)
// #define DisplayHeightMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mheight)
// #define DisplayPlanes(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_depth)
// #define DisplayCells(dpy, scr) 	(DefaultVisual(dpy,scr)->map_entries)
// #define ScreenCount(dpy) 	(((_XPrivDisplay)(dpy))->nscreens)
// #define ServerVendor(dpy) 	(((_XPrivDisplay)(dpy))->vendor)
// #define ProtocolVersion(dpy) 	(((_XPrivDisplay)(dpy))->proto_major_version)
// #define ProtocolRevision(dpy) 	(((_XPrivDisplay)(dpy))->proto_minor_version)
// #define VendorRelease(dpy) 	(((_XPrivDisplay)(dpy))->release)
// #define DisplayString(dpy) 	(((_XPrivDisplay)(dpy))->display_name)
// #define DefaultDepth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->root_depth)
// #define DefaultColormap(dpy, scr)(ScreenOfDisplay(dpy,scr)->cmap)
// #define BitmapUnit(dpy) 	(((_XPrivDisplay)(dpy))->bitmap_unit)
// #define BitmapBitOrder(dpy) 	(((_XPrivDisplay)(dpy))->bitmap_bit_order)
// #define BitmapPad(dpy) 		(((_XPrivDisplay)(dpy))->bitmap_pad)
// #define ImageByteOrder(dpy) 	(((_XPrivDisplay)(dpy))->byte_order)
// #define NextRequest(dpy)	(((_XPrivDisplay)(dpy))->request + 1)
// #define LastKnownRequestProcessed(dpy)	(((_XPrivDisplay)(dpy))->last_request_read)

// /* macros for screen oriented applications (toolkit) */
// #define ScreenOfDisplay(dpy, scr)(&((_XPrivDisplay)(dpy))->screens[scr])
// #define DefaultScreenOfDisplay(dpy) ScreenOfDisplay(dpy,DefaultScreen(dpy))
// #define DisplayOfScreen(s)	((s)->display)
// #define RootWindowOfScreen(s)	((s)->root)
// #define BlackPixelOfScreen(s)	((s)->black_pixel)
// #define WhitePixelOfScreen(s)	((s)->white_pixel)
// #define DefaultColormapOfScreen(s)((s)->cmap)
// #define DefaultDepthOfScreen(s)	((s)->root_depth)
// #define DefaultGCOfScreen(s)	((s)->default_gc)
// #define DefaultVisualOfScreen(s)((s)->root_visual)
// #define WidthOfScreen(s)	((s)->width)
// #define HeightOfScreen(s)	((s)->height)
// #define WidthMMOfScreen(s)	((s)->mwidth)
// #define HeightMMOfScreen(s)	((s)->mheight)
// #define PlanesOfScreen(s)	((s)->root_depth)
// #define CellsOfScreen(s)	(DefaultVisualOfScreen((s))->map_entries)
// #define MinCmapsOfScreen(s)	((s)->min_maps)
// #define MaxCmapsOfScreen(s)	((s)->max_maps)
// #define DoesSaveUnders(s)	((s)->save_unders)
// #define DoesBackingStore(s)	((s)->backing_store)
// #define EventMaskOfScreen(s)	((s)->root_input_mask)

/** \} */

#portée_fichier

/* ------------------------------------------------------------------------- */
/** \nom Test pour se connecter directement au serveur X.
 * \{ */

importe Fondation
importe POSIX
importe Sérialisation
importe SysFichier

AUTH_ENTRY_FAMILY_LOCAL : n16 : 1
AUTH_ENTRY_MAGIC_COOKIE :: "MIT-MAGIC-COOKIE-1"

AuthToken :: [16]n8

AuthEntry :: struct {
	family: n16
	auth_name: []octet
	auth_data: []octet
}

donne_chemin_fichier_xauthority :: fonc () -> CheminFichier
{
	chemin_env := chaine_environnement("XAUTHORITY")
    si chemin_env {
        retourne CheminFichier(chemin_env)
    }

    répertoire_personnel := chemin_répertoire_personnel()
    saufsi répertoire_personnel.possède_valeur() {
        retourne CheminFichier()
    }

    retourne répertoire_personnel.Quelque / ".Xauthority"
}

load_x11_auth_token :: fonc () -> Optionnel(AuthToken)
{
    chemin := donne_chemin_fichier_xauthority()
    saufsi fichier_existe(chemin) {
        retourne
    }
    diffère détruit_chemin(chemin)

    imprime("%\n", chemin.chn)

    contenu := contenu_fichier_binaire(chemin)
    si contenu.taille == 0 {
        retourne
    }
    diffère déloge(contenu)

    tampon : []octet = contenu

	boucle {
        si tampon.taille == 0 {
            arrête
        }

		auth_entry: AuthEntry
        auth_entry, tampon = read_x11_auth_entry(tampon)

        imprime("tampon.taille\n", auth_entry)

        si auth_entry.family != AUTH_ENTRY_FAMILY_LOCAL {
            continue
        }

        cookie := chaine_depuis_tranche_octets(auth_entry.auth_name)
        si cookie != AUTH_ENTRY_MAGIC_COOKIE {
            continue
        }

        si auth_entry.auth_data.taille != taille_de(AuthToken) comme z64 {
            continue
        }

        auth_token := mémoire(auth_entry.auth_data.pointeur comme *AuthToken)
        retourne auth_token
	}
}

read_x11_auth_entry :: fonc (tampon: []octet) -> AuthEntry, []octet
{
	entry := AuthEntry()

    entry.family, tampon = lis_petit_boutisme(tampon, n16)

    imprime("entry.family : %, tampon.taille %\n", entry.family, tampon.taille)

    taille_adresse: n16
    taille_adresse, tampon = lis_grand_boutisme(tampon, n16)

    adresse: []octet
    adresse.pointeur = tampon.pointeur
    adresse.taille = taille_adresse comme z64
    tampon = avance(tampon, taille_adresse comme z64)

    imprime("taille_adresse : %, tampon.taille %\n", taille_adresse, tampon.taille)

    taille_display_number: n16
    taille_display_number, tampon = lis_grand_boutisme(tampon, n16)

    display_number: []octet
    display_number.pointeur = tampon.pointeur
    display_number.taille = taille_display_number comme z64
    tampon = avance(tampon, taille_display_number comme z64)

    taille_auth_name: n16
    taille_auth_name, tampon = lis_grand_boutisme(tampon, n16)

    auth_name: []octet
    auth_name.pointeur = tampon.pointeur
    auth_name.taille = taille_auth_name comme z64
    tampon = avance(tampon, taille_auth_name comme z64)

    entry.auth_name = auth_name

    taille_auth_data: n16
    taille_auth_data, tampon = lis_grand_boutisme(tampon, n16)

    auth_data: []octet
    auth_data.pointeur = tampon.pointeur
    auth_data.taille = taille_auth_data comme z64
    tampon = avance(tampon, taille_auth_data comme z64)

    entry.auth_data = auth_data

    retourne entry, tampon
}

/** \} */
