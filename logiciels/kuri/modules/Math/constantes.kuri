Constantes :: struct ($T: type_de_données) {
    E : T : 2.718281828459045235360287471352662498 /* e */
    LOG2E : T : 1.442695040888963407359924681001892137 /* log_2 e */
    LOG10E : T : 0.434294481903251827651128918916605082 /* log_10 e */
    LN2 : T : 0.693147180559945309417232121458176568 /* log_e 2 */
    LN10 : T : 2.302585092994045684017991454684364208 /* log_e 10 */
    TAU : T : 6.283185307179586476925286766559005768 /* tau */
    PI : T : 3.141592653589793238462643383279502884 /* pi */
    PI_2 : T : 1.570796326794896619231321691639751442 /* pi/2 */
    PI_4 : T : 0.785398163397448309615660845819875721 /* pi/4 */
    _1_PI : T : 0.318309886183790671537767526745028724 /* 1/pi */
    _2_PI : T : 0.636619772367581343075535053490057448 /* 2/pi */
    _2_SQRTPI : T : 1.128379167095512573896158903121545172 /* 2/sqrt(pi) */
    SQRT2 : T : 1.414213562373095048801688724209698079 /* sqrt(2) */
    SQRT1_2 : T : 0.707106781186547524400844362104849039 /* 1/sqrt(2) */
    PHI : T : 1.618033988749894848204586834365638117 /* Nombre d'or */
    PHI_INV : T : 0.618033988749894848204586834365638117 /* 1 / Nombre d'or */
}

/* --------------------------------------------------------- */

Degrés :: #opaque $T
Radians :: #opaque $T

vers_degrés :: fonc (a: Radians($T)) -> Degrés(T) #enligne
{
    retourne Degrés(a comme T * 180.0 / Constantes(T).PI)
}

// À FAIRE(langage) : collision entre polymorphes
vers_degrés :: fonc (a: r32) -> r32 #enligne
{
    retourne a * 180.0 / Constantes(r32).PI
}

vers_radians :: fonc (a: Degrés($T)) -> Radians(T) #enligne
{
    retourne Radians(a comme T * Constantes(T).PI / 180.0)
}

// À FAIRE(langage) : collision entre polymorphes
vers_radians :: fonc (a: r32) -> r32 #enligne
{
    retourne a * Constantes(r32).PI / 180.0
}

/* Retourne des degrés entre 0 et 360. Par exemple, si les degrés == 360, retourne 10. */
normalise :: fonc (d: Degrés($T)) -> Degrés(T) #enligne
{
    v := d comme T
    v /= 360.0
    _, fraction := part_entière_et_fraction(v)
    retourne Degrés(fraction * 360.0)
}

infinité_négative :: fonc ($T: type_de_données) -> T
{
    #si T == r32 {
        R32_INFINITÉ_NÉGATIVE :: 0rff800000
        retourne R32_INFINITÉ_NÉGATIVE
    }
    sinon si T == r64 {
        R64_INFINITÉ_NÉGATIVE :: 0rfff0000000000000
        retourne R64_INFINITÉ_NÉGATIVE
    }
    sinon {
        panique("infinité_négative non-implémentée")
    }
}

infinité_positive :: fonc ($T: type_de_données) -> T
{
    #si T == r32 {
        R32_INFINITÉ :: 0r7f800000
        retourne R32_INFINITÉ
    }
    sinon si T == r64 {
        R64_INFINITÉ :: 0r7ff0000000000000
        retourne R64_INFINITÉ
    }
    sinon {
        panique("infinité_positive non-implémentée")
    }
}
