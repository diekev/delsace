// https://www.evanmiller.org/how-not-to-sort-by-average-rating.html
// reference : https://github.com/reddit-archive/reddit/blob/753b17407e9a9dca09558526805922de24133d53/r2/r2/lib/db/_sorts.pyx
interval_confiance_wilson :: fonc (positifs: z32, total: z32, confiance: r32) -> r32
{
    si total == 0 {
        retourne 0.0
    }

    n := total comme r32

    z := 1.281551565545 // p_distribution_normale(1.0 - (1.0 - confiance) / 2.0) avec confiance = 0.8
    p := (positifs comme r32) / n

    gauche := p + (z * z) / (2.0 * n)
    droite := z * racine_carrée(p * (1.0 - p) / n + (z * z / (4.0 * n) / n)) comme r32
    sous   := 1.0 + (z * z) / n

    // retourne (gauche + droite) / sous ;; pour la limite haute
    retourne (gauche - droite) / sous

    // (phat + z*z/(2*n) - z * Math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n)
}

/* Retourne la valeur P d'une distribution normale.
 *
 * Dérivé de l'implémentation de Ruby, trouvé ici :
 * - https://stackoverflow.com/questions/6116770/whats-the-equivalent-of-rubys-pnormaldist-statistics-function-in-haskell
 *
 * Publication originale en Japonais :
 * - https://www.jstage.jst.go.jp/article/jappstat1971/22/1/22_1_13/_pdf
 */
p_distribution_normale :: fonc (qn: r32) -> r32
{
    b := [1.570796288, 0.03706987906, -0.0008364353589, -0.0002250947176, 0.000006841218299, 0.000005824238515, -0.00000104527497, 0.00000008360937017, -0.000000003231081277,
        0.00000000003657763036, 0.0000000000006936233982
    ]

    si (qn < 0.0 || 1.0 < qn) {
        // @erreur
        retourne 0.0
    }

    si (qn == 0.5) {
        retourne 0.0
    }

    w1 := qn

    si (qn > 0.5) {
        w1 = 1.0 - w1
    }

    w3 := -log(4.0 * w1 * (1.0 - w1))

    w1 = b[0];

    pour 1 ... b.taille - 1 {
        w1 += b[it] * pow(w3, it comme r64) comme r32
    }

    si (qn > 0.5) {
        retourne sqrt(w1 * w3) comme r32
    }

    retourne -sqrt(w1 * w3) comme r32
}

moyenne_arithmétique :: fonc (données: []$T) -> T
{
    résultat : T

    si données.taille == 0 {
        retourne résultat
    }

    si données.taille == 1 {
        retourne données[0]
    }

    pour données {
        résultat += it
    }

    résultat /= données.taille comme T

    retourne résultat
}

moyenne_géométrique :: fonc (données: []$T) -> T
{
    résultat : T

    si données.taille == 0 {
        retourne résultat
    }

    si données.taille == 1 {
        retourne données[0]
    }

    résultat = 1.0

    pour données {
        résultat *= it
    }

    si résultat == 0.0 {
        retourne 0.0
    }

    résultat = puissance(résultat, données.taille comme T)

    retourne résultat
}

moyenne_quadratique :: fonc (données: []$T) -> T
{
    résultat : T

    si données.taille == 0 {
        retourne résultat
    }

    si données.taille == 1 {
        retourne données[0]
    }

    pour données {
        résultat = it * it
    }

    si résultat == 0.0 {
        retourne 0.0
    }

    facteur := 1.0 / données.taille comme T
    retourne racine_carrée(facteur * résultat)
}

moyenne_harmonique :: fonc (données: []$T) -> T
{
    résultat : T

    si données.taille == 0 {
        retourne résultat
    }

    si données.taille == 1 {
        résultat = données[0]

        si résultat == 0 {
            retourne 0
        }

        retourne 1.0 / résultat
    }

    pour données {
        si it != 0 {
            résultat += 1.0 / résultat
        }
    }

    si résultat == 0 {
        retourne résultat
    }

    retourne données.taille comme T / résultat
}

TypeMoyenne :: énum {
    Arithmétique
    Géométrique
    Harmonique
    Quadratique
}

moyenne :: fonc (données: []$T, type_moyenne: TypeMoyenne) -> T
{
    discr type_moyenne {
        Arithmétique {
            retourne moyenne_arithmétique(données)
        }
        Géométrique {
            retourne moyenne_géométrique(données)
        }
        Harmonique {
            retourne moyenne_harmonique(données)
        }
        Quadratique {
            retourne moyenne_quadratique(données)
        }
    }

    retourne 0 comme T
}

/* Ajourne une moyenne précalculée avec une nouvelle valeur. */
ajourne_moyenne :: fonc (m: $T, n: z64, valeur: T, type_moyenne: TypeMoyenne) -> T
{
    si n <= 0 {
        retourne 0
    }

    n_réel := n comme T

    discr type_moyenne {
        Arithmétique {
            retourne ((m * n_réel) + valeur) / (n_réel + 1)
        }
        Géométrique {
            retourne ((m * n_réel) * valeur) / (n_réel + 1)
        }
        Harmonique {
            retourne (n_réel + 1) / ((m * n_réel) + (1.0 / valeur))
        }
        Quadratique {
            retourne racine_carrée(((m * n_réel) + valeur * valeur) / (n_réel + 1))
        }
    }

    retourne 0
}

moyenne_quasi_arithmétique :: fonc (données: []$T, primitive: fonc(T)(T), dérivée: fonc(T)(T)) -> T
{
    si données.taille == 0 {
        retourne 0.0
    }

    si données.taille == 1 {
        retourne f(données[0])
    }

    résultat : T

    pour données {
        résultat += primitive(it)
    }

    si résultat == 0 {
        retourne 0
    }

    retourne dérivée(résultat / données.taille comme T)
}

variance :: fonc (données: []$T) -> T
{
    m := moyenne_arithmétique(données)
    retourne variance(données, m)
}

variance :: fonc (données: []$T, m: T) -> T
{
    si données.taille == 0 {
        retourne 0
    }

    résultat : T

    pour données {
        résultat += it * it
    }

    retourne résultat / données.taille comme T - m * m
}

covariance :: fonc (données1: []$T, données2: []T) -> T
{
    esp1 := moyenne_arithmétique(données1)
    esp2 := moyenne_arithmétique(données2)
    retourne covariance(données1, esp1, données1, esp2)
}

covariance :: fonc (données1: []$T, esp1: T, données2: []T, esp2: T) -> T, z64
{
    taille := min(données1.taille, données2.taille)

	résultat : T

	pour i dans 0 ... taille - 1 {
		résultat += (données1[i] - esp1) * (données2[i] - esp2)
	}

	résultat /= taille comme T
	retourne résultat, taille
}

calcule_table_occurences :: fonc (données: []octet) -> [256]z32
{
    table_occurence : [256]z32

    pour & table_occurence {
        it = 0
    }

    pour données {
        table_occurence[it comme n8] += 1
    }

    retourne table_occurence
}

calcule_entropie_de_shannon :: fonc (données: []octet) -> r32
{
    table_occurence := calcule_table_occurences(données)

    entropie := 0.0

    pour table_occurence {
        si it == 0 {
            continue
        }

        Pi := it comme r32 / données.taille comme r32
        entropie += Pi * log(Pi)
    }

    retourne -entropie
}

// https://dridk.me/shannon-entropy.html
calcule_entropie_de_shannon_croisée :: fonc (données1: []octet, données2: []octet) -> r32
{
    table_occurence1 := calcule_table_occurences(données1)
    table_occurence2 := calcule_table_occurences(données2)

    entropie := 0.0

    pour 0 ... 255 {
        it1 := table_occurence1[it]
        it2 := table_occurence2[it]

        si it1 == 0 || it2 == 0 {
            continue
        }

        Pi := it1 comme r32 / données1.taille comme r32
        Qi := it2 comme r32 / données2.taille comme r32

        entropie += Pi * log(Qi)
    }

    retourne -entropie
}
