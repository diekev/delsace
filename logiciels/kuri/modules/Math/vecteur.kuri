importe Fondation

// ------------------------------------
// vecteurs de nombres réels

/* ------------------------------------------------------------------------- */
/* Vecteur 2D
 * \{ */

Vec2 :: struct {
    x := 0.0 @mutable
    y := 0.0 @mutable
}

new_Vec2_pour_python :: fonc (vec: *Vec2, x: r32, y: r32) -> bool
{
    vec.x = x
    vec.y = y
    retourne vrai
} @Python "new"

str_Vec2_pour_python :: fonc (v: *Vec2) -> chaine
{
    retourne imprime_chaine("Vec2(%, %)", v.x, v.y)
} @Python "str"

opérateur - :: fonc (u: Vec2) -> Vec2
{
    retourne Vec2(-u.x, -u.y)
}

opérateur * :: fonc (v1: Vec2, v2: Vec2) -> Vec2
{
    résultat := v1
    multiplie_vn_vn(*résultat.x, *v2.x, 2)
    retourne résultat
}

opérateur * :: fonc (v1: Vec2, v: r32) -> Vec2
{
    résultat: Vec2
    si v != 0.0 {
        résultat = v1
        multiplie_vn_s(*résultat.x, v, 2)
    }
    retourne résultat
}

opérateur / :: fonc (v1: Vec2, v2: Vec2) -> Vec2
{
    résultat : Vec2 = v1
    divise_vn_vn(*résultat.x, *v2.x, 2)
    retourne résultat
}

opérateur / :: fonc (v1: Vec2, v: r32) -> Vec2
{
    résultat : Vec2 = v1
    divise_vn_s(*résultat.x, v, 2)
    retourne résultat
}

opérateur / :: fonc (v: r32, v1: Vec2) -> Vec2
{
    résultat : Vec2 = v1
    réciproque_vn_s(*résultat.x, v, 2)
    retourne résultat
}

opérateur + :: fonc (v1: Vec2, v2: Vec2) -> Vec2
{
    résultat : Vec2 = v1
    ajoute_vn_vn(*résultat.x, *v2.x, 2)
    retourne résultat
}

opérateur + :: fonc (v1: Vec2, v: r32) -> Vec2
{
    résultat : Vec2 = v1
    ajoute_vn_s(*résultat.x, v, 2)
    retourne résultat
}

opérateur - :: fonc (v1: Vec2, v2: Vec2) -> Vec2
{
    résultat : Vec2 = v1
    soustrait_vn_vn(*résultat.x, *v2.x, 2)
    retourne résultat
}

opérateur - :: fonc (v1: Vec2, v: r32) -> Vec2
{
    résultat : Vec2 = v1
    ajoute_vn_s(*résultat.x, -v, 2)
    retourne résultat
}

opérateur == :: fonc (v1: Vec2, v2: Vec2) -> bool
{
    retourne sont_égaux_vn_vn(*v1.x, *v2.x, 2)
}

opérateur == :: fonc (v1: Vec2, s: r32) -> bool
{
    retourne sont_égaux_vn_s(*v1.x, s, 2)
}

opérateur != :: fonc (v0: Vec2, v1: Vec2) -> bool
{
    retourne !(v0 == v1)
}

opérateur < :: fonc (v1: Vec2, s: r32) -> bool
{
    retourne est_inférieur_vn_s(*v1.x, s, 2)
}

opérateur > :: fonc (v1: Vec2, s: r32) -> bool
{
    retourne est_supérieur_vn_s(*v1.x, s, 2)
}

opérateur < :: fonc (v1: Vec2, v2: Vec2) -> bool
{
    retourne est_inférieur_vn_vn(*v1.x, *v2.x, 2)
}

opérateur <= :: fonc (v1: Vec2, v2: Vec2) -> bool
{
    retourne est_inférieur_ou_égal_vn_vn(*v1.x, *v2.x, 2)
}

opérateur > :: fonc (v1: Vec2, v2: Vec2) -> bool
{
    retourne est_supérieur_vn_vn(*v1.x, *v2.x, 2)
}

opérateur >= :: fonc (v1: Vec2, v2: Vec2) -> bool
{
    retourne est_supérieur_ou_égal_vn_vn(*v1.x, *v2.x, 2)
}

produit_scalaire :: fonc (u: Vec2, v: Vec2) -> r32
{
    retourne u.x * v.x + u.y * v.y
}

produit_vectoriel :: fonc (u: Vec2, v: Vec2) -> r32
{
    retourne u.x * v.y - u.y * v.x
}

longueur :: fonc (u: Vec2, v: Vec2) -> r32
{
    retourne longueur(u - v)
}

longueur :: fonc (u: Vec2) -> r32
{
    retourne racine_carrée(produit_scalaire(u, u))
}

longueur_carrée :: fonc (u: Vec2, v: Vec2) -> r32
{
    w := v - u
    retourne produit_scalaire(w, w)
}

// projection vectorielle
projette :: fonc (a: Vec2, b: Vec2) -> Vec2
{
    retourne produit_scalaire(a, b) / produit_scalaire(b, b) * b
}

// rejection vectorielle, a1 doit être une projection
rejette :: fonc (a1: Vec2, a: Vec2) -> Vec2
{
    retourne a - a1
}

angle_entre :: fonc (a: Vec2, b: Vec2) -> r32
{
    a = normalise(a)
    b = normalise(b)

    /* Plus précis que arccosinus(produit_scalaire(a, b)). */
    si produit_scalaire(a, b) >= 0.0 {
        retourne 2.0 * arc_sinus_borné(longueur(a, b) * 0.5)
    }

    b2 := -b
    retourne Constantes(r32).PI - 2.0 * arc_sinus_borné(longueur(a, b2) * 0.5)
}

normalise :: fonc (v: Vec2) -> Vec2
{
    l := longueur(v)
    retourne v / l
}

/* \} */

/* ------------------------------------------------------------------------- */
/* Vecteur 3D
 * \{ */

// À considérer: opérateurs de bases si la structure ne contient que des scalaires
Vec3 :: struct {
    x: r32 @mutable
    y: r32 @mutable
    z: r32 @mutable
}

Point3 :: #opaque Vec3
Norm3 :: #opaque Vec3

new_Vec3_pour_python :: fonc (vec: *Vec3) -> bool
{
    init_de(Vec3)(vec)
    retourne vrai
} @Python "new"

opérateur [] :: fonc (v: Vec3, index: z64) -> r32
{
    retourne (*v.x)[index]
}

opérateur - :: fonc (v: Vec3) -> Vec3
{
    retourne Vec3(x = -v.x, y = -v.y, z = -v.z)
}

opérateur * :: fonc (v1: Vec3, v2: Vec3) -> Vec3
{
    résultat := v1
    multiplie_vn_vn(*résultat.x, *v2.x, 3)
    retourne résultat
}

opérateur * :: fonc (v1: Vec3, v: r32) -> Vec3
{
    résultat: Vec3
    si v != 0.0 {
        résultat = v1
        multiplie_vn_s(*résultat.x, v, 3)
    }
    retourne résultat
}

opérateur / :: fonc (v1: Vec3, v2: Vec3) -> Vec3
{
    résultat : Vec3 = v1
    divise_vn_vn(*résultat.x, *v2.x, 3)
    retourne résultat
}

opérateur / :: fonc (v1: Vec3, v: r32) -> Vec3
{
    résultat : Vec3 = v1
    divise_vn_s(*résultat.x, v, 3)
    retourne résultat
}

opérateur / :: fonc (v: r32, v1: Vec3) -> Vec3
{
    résultat : Vec3 = v1
    réciproque_vn_s(*résultat.x, v, 3)
    retourne résultat
}

opérateur + :: fonc (v1: Vec3, v2: Vec3) -> Vec3
{
    résultat : Vec3 = v1
    ajoute_vn_vn(*résultat.x, *v2.x, 3)
    retourne résultat
}

opérateur + :: fonc (v1: Vec3, v: r32) -> Vec3
{
    résultat : Vec3 = v1
    ajoute_vn_s(*résultat.x, v, 3)
    retourne résultat
}

opérateur - :: fonc (v1: Vec3, v2: Vec3) -> Vec3
{
    résultat : Vec3 = v1
    soustrait_vn_vn(*résultat.x, *v2.x, 3)
    retourne résultat
}

opérateur - :: fonc (v1: Vec3, v: r32) -> Vec3
{
    résultat : Vec3 = v1
    ajoute_vn_s(*résultat.x, -v, 3)
    retourne résultat
}

opérateur == :: fonc (u: Vec3, v: Vec3) -> bool
{
    retourne sont_égaux_vn_vn(*u.x, *v.x, 3)
}

opérateur == :: fonc (u: Vec3, s: r32) -> bool
{
    retourne sont_égaux_vn_s(*u.x, s, 3)
}

opérateur != :: fonc (v0: Vec3, v1: Vec3) -> bool
{
    retourne !(v0 == v1)
}

opérateur < :: fonc (u: Vec3, s: r32) -> bool
{
    retourne est_inférieur_vn_s(*u.x, s, 3)
}

opérateur > :: fonc (u: Vec3, s: r32) -> bool
{
    retourne est_supérieur_vn_s(*u.x, s, 3)
}

opérateur < :: fonc (u: Vec3, v: Vec3) -> bool
{
    retourne est_inférieur_vn_vn(*u.x, *v.x, 3)
}

opérateur <= :: fonc (u: Vec3, v: Vec3) -> bool
{
    retourne est_inférieur_ou_égal_vn_vn(*u.x, *v.x, 3)
}

opérateur > :: fonc (u: Vec3, v: Vec3) -> bool
{
    retourne est_supérieur_vn_vn(*u.x, *v.x, 3)
}

opérateur >= :: fonc (u: Vec3, v: Vec3) -> bool
{
    retourne est_supérieur_ou_égal_vn_vn(*u.x, *v.x, 3)
}

produit_scalaire :: fonc (u: Vec3, v: Vec3) -> r32 #enligne
{
    retourne u.x * v.x + u.y * v.y + u.z * v.z
}

longueur :: fonc (u: Vec3) -> r32 #enligne
{
    retourne racine_carrée(u.x * u.x + u.y * u.y + u.z * u.z)
}

longueur_carrée :: fonc (u: Vec3) -> r32 #enligne
{
    retourne produit_scalaire(u, u)
}

produit_vectoriel :: fonc (u: Vec3, v: Vec3) -> Vec3 #enligne
{
    résultat : Vec3 = ---
    résultat.x = u.y * v.z - u.z * v.y
    résultat.y = u.z * v.x - u.x * v.z
    résultat.z = u.x * v.y - u.y * v.x
    retourne résultat
}

produit_en_croix :: fonc (u: Vec3, v: Vec3) -> Vec3 #enligne
{
    retourne produit_vectoriel(u, v)
}

calcul_normal :: fonc (a: Vec3, b: Vec3) -> Norm3 #enligne
{
    résultat := produit_en_croix(a, b)
    retourne Norm3(résultat)
}

calcul_normal_normalisé :: fonc (a: Vec3, b: Vec3) -> Norm3 #enligne
{
    nor := calcul_normal(a, b)
    l := longueur(nor comme Vec3)
    si l != 0.0 {
        nor.x /= l
        nor.y /= l
        nor.z /= l
    }
    retourne nor
}

normalise :: fonc (v: Vec3) -> Vec3 #enligne
{
    l := longueur(v)
    retourne v / l
}

normalise_retourne_longueur :: fonc (v: Vec3) -> Vec3, r32 #enligne
{
    l := longueur(v)
    retourne v / l, l
}

// Calcul des coordonnées UV depuis une vecteur de direction (I) et d'un
// vecteur normal (N) pour échantillonner une capmat.
calcul_uv_capmat :: fonc (I: Vec3, N: Vec3, inversé: bool) -> Vec2
{
    // Création rapide d'une base orthonormale
    a := 1.0 / (1.0 + I.z)
    b := -I.x * I.y * a
    b1 := Vec3(1.0 - I.x * I.x * a, b, -I.x)
    b2 := Vec3(b, 1.0 - I.y * I.y * a, -I.y)

    uv_capmat := Vec2(x = produit_scalaire(b1, N), y = produit_scalaire(b2, N))

    si inversé {
        uv_capmat.x = -uv_capmat.x
    }

    uv_capmat.x *= 0.496
    uv_capmat.y *= 0.496

    uv_capmat.x += 0.5
    uv_capmat.y += 0.5

    retourne uv_capmat
}

// -------------------------------------------------------------------------

interp_linéaire :: fonc (v0: Vec3, t: r32, v1: Vec3) -> Vec3
{
    retourne (1.0 - t) * v0 + t * v1
}

/* Calcule la déclinaison du vecteur en degrés. */
déclinaison :: fonc (v: Vec3) -> Degrés(r32)
{
    retourne vers_degrés(Radians(arc_tangeante2(racine_carrée(v.x * v.x + v.y * v.y), v.z)))
}

/* \} */

/* ------------------------------------------------------------------------- */
/* Vecteur 4D
 * \{ */

Vec4 :: struct {
    x := 0.0 @mutable
    y := 0.0 @mutable
    z := 0.0 @mutable
    w := 0.0 @mutable
}

opérateur - :: fonc (u: Vec4) -> Vec4
{
    retourne Vec4(-u.x, -u.y, -u.z, -u.w)
}

opérateur * :: fonc (v1: Vec4, v2: Vec4) -> Vec4
{
    résultat := v1
    multiplie_vn_vn(*résultat.x, *v2.x, 4)
    retourne résultat
}

opérateur * :: fonc (v1: Vec4, v: r32) -> Vec4
{
    résultat : Vec4 = v1
    si v != 0.0 {
        résultat = v1
        multiplie_vn_s(*résultat.x, v, 4)
    }
    retourne résultat
}

opérateur / :: fonc (v1: Vec4, v2: Vec4) -> Vec4
{
    résultat : Vec4 = v1
    divise_vn_vn(*résultat.x, *v2.x, 4)
    retourne résultat
}

opérateur / :: fonc (v1: Vec4, v: r32) -> Vec4
{
    résultat : Vec4 = v1
    divise_vn_s(*résultat.x, v, 4)
    retourne résultat
}

opérateur / :: fonc (v: r32, v1: Vec4) -> Vec4
{
    résultat : Vec4 = v1
    réciproque_vn_s(*résultat.x, v, 4)
    retourne résultat
}

opérateur + :: fonc (v1: Vec4, v2: Vec4) -> Vec4
{
    résultat : Vec4 = v1
    ajoute_vn_vn(*résultat.x, *v2.x, 4)
    retourne résultat
}

opérateur + :: fonc (v1: Vec4, v: r32) -> Vec4
{
    résultat : Vec4 = v1
    ajoute_vn_s(*résultat.x, v, 4)
    retourne résultat
}

opérateur - :: fonc (v1: Vec4, v2: Vec4) -> Vec4
{
    résultat : Vec4 = v1
    soustrait_vn_vn(*résultat.x, *v2.x, 4)
    retourne résultat
}

opérateur - :: fonc (v1: Vec4, v: r32) -> Vec4
{
    résultat : Vec4 = v1
    ajoute_vn_s(*résultat.x, -v, 4)
    retourne résultat
}

opérateur == :: fonc (u: Vec4, v: Vec4) -> bool
{
    retourne sont_égaux_vn_vn(*u.x, *v.x, 4)
}

opérateur == :: fonc (u: Vec4, s: r32) -> bool
{
    retourne sont_égaux_vn_s(*u.x, s, 4)
}

opérateur != :: fonc (v0: Vec4, v1: Vec4) -> bool
{
    retourne !(v0 == v1)
}

opérateur < :: fonc (u: Vec4, s: r32) -> bool
{
    retourne est_inférieur_vn_s(*u.x, s, 4)
}

opérateur > :: fonc (u: Vec4, s: r32) -> bool
{
    retourne est_supérieur_vn_s(*u.x, s, 4)
}

opérateur < :: fonc (u: Vec4, v: Vec4) -> bool
{
    retourne est_inférieur_vn_vn(*u.x, *v.x, 4)
}

opérateur <= :: fonc (u: Vec4, v: Vec4) -> bool
{
    retourne est_inférieur_ou_égal_vn_vn(*u.x, *v.x, 4)
}

opérateur > :: fonc (u: Vec4, v: Vec4) -> bool
{
    retourne est_supérieur_vn_vn(*u.x, *v.x, 4)
}

opérateur >= :: fonc (u: Vec4, v: Vec4) -> bool
{
    retourne est_supérieur_ou_égal_vn_vn(*u.x, *v.x, 4)
}

/* \} */

/* ------------------------------------------------------------------------- */
/* Utilitaires
 * \{ */

ajoute_vn_vn :: fonc (dst: *$T, src: *T, n: z32) #enligne
{
    pour n {
        dst[it] += src[it]
    }
}

ajoute_vn_s :: fonc (dst: *$T, src: T, n: z32) #enligne
{
    pour n {
        dst[it] += src
    }
}

soustrait_vn_vn :: fonc (dst: *$T, src: *T, n: z32) #enligne
{
    pour n {
        dst[it] -= src[it]
    }
}

multiplie_vn_vn :: fonc (dst: *$T, src: *T, n: z32) #enligne
{
    pour n {
        dst[it] *= src[it]
    }
}

multiplie_vn_s :: fonc (dst: *$T, src: T, n: z32) #enligne
{
    pour n {
        dst[it] *= src
    }
}

divise_vn_vn :: fonc (dst: *$T, src: *T, n: z32) #enligne
{
    pour n {
        si src[it] != 0.0 {
            dst[it] /= src[it]
        }
    }
}

divise_vn_s :: fonc (dst: *$T, src: T, n: z32) #enligne
{
    si src == 0.0 {
        retourne
    }

    pour n {
        dst[it] /= src
    }
}

réciproque_vn_s :: fonc (dst: *$T, src: T, n: z32) #enligne
{
    si src == 0.0 {
        retourne
    }

    pour n {
        dst[it] = src / dst[it]
    }
}

sont_égaux_vn_vn :: fonc (v1: *$T, v2: *T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] == v2[it] {
            retourne faux
        }
    }
    retourne vrai
}

sont_égaux_vn_s :: fonc (v1: *$T, s: T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] == s {
            retourne faux
        }
    }
    retourne vrai
}

est_inférieur_vn_s :: fonc (v1: *$T, s: T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] < s {
            retourne faux
        }
    }
    retourne vrai
}

est_supérieur_vn_s :: fonc (v1: *$T, s: T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] > s {
            retourne faux
        }
    }
    retourne vrai
}

est_inférieur_vn_vn :: fonc (v1: *$T, v2: *T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] < v2[it] {
            retourne faux
        }
    }
    retourne vrai
}

est_inférieur_ou_égal_vn_vn :: fonc (v1: *$T, v2: *T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] <= v2[it] {
            retourne faux
        }
    }
    retourne vrai
}

est_supérieur_vn_vn :: fonc (v1: *$T, v2: *T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] > v2[it] {
            retourne faux
        }
    }
    retourne vrai
}

est_supérieur_ou_égal_vn_vn :: fonc (v1: *$T, v2: *T, n: z32) -> bool #enligne
{
    pour n {
        saufsi v1[it] >= v2[it] {
            retourne faux
        }
    }
    retourne vrai
}

/* \} */

// ------------------------------------
// vecteurs de nombres entiers relatifs

Vec2z :: struct {
    x := 0
    y := 0
}

Vec3z :: struct {
    x := 0
    y := 0
    z := 0
}

Vec4z :: struct {
    x := 0
    y := 0
    z := 0
    w := 0
}

/* ------------------------------------------------------------------------- */
/** \nom Fonctions auxilliaires.
 * \{ */

/* Retourne la position sur une sphère de rayon `r` des coordonnées <u, v>
 * données. `u` doit être entre [-PI, PI], et `v` [-PI/2, PI/2].
 * La sphère est défini pour un système de coordonnées où Y est vertical. */
position_sphérique :: fonc (u: r32, v: r32, r := 1.0) -> Vec3 #enligne
{
    retourne Vec3(cosinus(u) * sinus(v) * r, cosinus(v) * r, sinus(u) * sinus(v) * r)
}

/** } */
