importe Compilatrice
importe CréationFenêtre
importe BoiteFlexible
importe Chaine
importe Couleur
importe Ensemble
importe Fondation
importe Image
importe Krypto
importe Math
importe OpenGL
importe PeintureInterface
importe Périphériques
importe Typographie
importe StatHüs
importe Qt
importe Triage

importe POSIX

principale :: fonc ()
{
    // extrémité := crée_extrémité_serveuse(faux)
    // détruit_extrémité(extrémité)

    serveuse: Serveuse
    // serveuse.extrémité = extrémité
    serveuse.fonte = crée_fonte("/home/kevin/Documents/fontes/Alegreya-Regular.ttf", 60.0)
    serveuse.petite_fonte = crée_fonte("/home/kevin/Documents/fontes/Alegreya-Regular.ttf", 20.0)

    fenêtre := crée_fenêtre(800, 600, "Serveuse", vrai, 1)

    crée_local_server(*serveuse, donne_qt_window(fenêtre))

    doit_fermer := faux

    tantque !doit_fermer {
        évènements := ajourne_évènements_fenêtre(fenêtre)

        largeur, hauteur := donne_taille_fenêtre(fenêtre)

        pour évènements {
            si it.type == TypeÉvènement.Fermeture {
                doit_fermer = vrai
                arrête
            }

            gère_évènement(*serveuse.emboiteuse, it)
        }

        dessine_fenêtre(*serveuse, largeur, hauteur)

        permute_tampons_fenêtre(fenêtre)
    }
}

/* ------------------------------------------------------------------------- */
/** \nom Serveuse
 * \{ */

Serveuse :: struct {
    // extrémité: Extrémité(faux)
    fonte: *Fonte
    petite_fonte: *Fonte
    emboiteuse: Emboiteuse
    peintre: *Peintre

    connexion_reçue: bool
    données_reçues: [..]octet
    état_mémoire: ÉtatMémoire

    dessine_allocations := vrai
}

dessine_fenêtre :: fonc (empl serveuse: *Serveuse, largeur: z32, hauteur: z32)
{
    marque := donne_marque_stockage_temporaire()
    diffère définis_marque_stockage_temporaire(marque)

    taille_canevas := Taille(largeur = Largeur(largeur), hauteur = Hauteur(hauteur))
    saufsi peintre {
        peintre = crée_peintre_igumi(taille_canevas)
    }

    peintre.définis_taille_canevas(taille_canevas)
    peintre.efface_cible_rendu(CouleurRVBA(1.0, 1.0, 1.0, 1.0))

    commandes := crée_interface(serveuse, largeur, hauteur)
    dessine_commandes(peintre, *commandes)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Allocation
 * \{ */

InfoTraceAllocation :: struct {
    utilisateurs: z32
    id: z64
    traces: [..]TraceAllocation
}

compare_info_trace_allocations :: fonc (a: *InfoTraceAllocation, b: *InfoTraceAllocation) -> z32
{
    /* Triage décroissant. */
    retourne b.utilisateurs - a.utilisateurs
}

Allocation :: struct {
    id: chaine
    adresse: z64
    taille: z64

    // indice dans ÉtatMémoire.messages
    messages: [..]z64

    traces: [..]*InfoTraceAllocation
}

ÉtatMémoire :: struct {
    allocations: [..]Allocation
    messages: [..]MessageInfoAllocations
    traces: [..]*InfoTraceAllocation
    traces_triées: [..]*InfoTraceAllocation
    condensats_traces: [..]Condensat

    mémoire_utilisée: z64

    allocation_sélectionnée := -1
    trace_sélectionnée := -1

    les_traces_sont_triées := faux
}

ajoute_message :: fonc (état: *ÉtatMémoire, message: MessageInfoAllocations)
{
    trace := donne_trace_pour_message(état, message)
    utilisateurs := trace.utilisateurs

    tableau_ajoute(*état.messages, message)

    si message.ancienne_adresse != 0 {
        si message.entête.type == TypeMessage.Délogement {
            supprime_allocation(état, message.ancienne_adresse)
            état.mémoire_utilisée -= message.taille
            retourne
        }

        alloc := trouve_allocation(état, message.ancienne_adresse)
        assert(alloc != nul)
        alloc.adresse = message.nouvelle_adresse
        état.mémoire_utilisée -= alloc.taille
        alloc.taille = message.taille

        tableau_ajoute(*alloc.messages, état.messages.taille - 1)
        trace.utilisateurs += 1
        tableau_ajoute(*alloc.traces, trace)
        état.mémoire_utilisée += message.taille
    }
    sinon {
        alloc := ajoute_allocation(état, message.nouvelle_adresse, message.taille)
        état.mémoire_utilisée += message.taille
        tableau_ajoute(*alloc.messages, état.messages.taille - 1)
        trace.utilisateurs += 1
        tableau_ajoute(*alloc.traces, trace)
    }

    si utilisateurs != trace.utilisateurs || état.traces.taille != état.traces_triées.taille {
        si état.traces.taille != état.traces_triées.taille {
            tableau_ajoute(*état.traces_triées, trace)
        }

        état.les_traces_sont_triées = faux
    }
}

trouve_allocation :: fonc (état: *ÉtatMémoire, adresse: z64) -> *Allocation
{
    pour * état.allocations {
        si it.adresse == adresse {
            retourne it
        }
    }
    retourne nul
}

supprime_allocation :: fonc (état: *ÉtatMémoire, adresse: z64)
{
    pour * état.allocations {
        si it.adresse == adresse {
            pour trace dans it.traces {
                trace.utilisateurs -= 1
            }

            déloge(it.id)
            déloge(it.messages)
            déloge(it.traces)
            tableau_supprime_indice(*état.allocations, indice_it)
            si état.allocations.taille == 0 || indice_it == état.allocation_sélectionnée {
                état.allocation_sélectionnée = -1
            }
            sinon si état.allocation_sélectionnée > indice_it {
                état.allocation_sélectionnée -= 1
            }
            arrête
        }
    }
}

ajoute_allocation :: fonc (état: *ÉtatMémoire, adresse: z64, taille: z64) -> *Allocation
{
    résultat := tableau_ajoute_élément(*état.allocations)
    résultat.adresse = adresse
    résultat.taille = taille
    résultat.id = imprime_chaine("%", résultat)
    retourne résultat
}

donne_trace_pour_message :: fonc (état: *ÉtatMémoire, message: MessageInfoAllocations) -> *InfoTraceAllocation
{
    condensat := donne_condensat(message)

    indice := ensemble_possède_retourne_indice(état.condensats_traces, condensat)
    si indice != -1 {
        détruit_données(*condensat)
        déloge(message.traces)
        retourne état.traces[indice]
    }

    indice = ensemble_ajoute_retourne_indice(*état.condensats_traces, condensat)

    résultat := loge(InfoTraceAllocation)

    résultat.traces = message.traces
    message.traces.taille = 0
    message.traces.pointeur = nul
    message.traces.capacité = 0

    pour * résultat.traces {
        it.nom = copie_chaine(it.nom)
        it.texte = copie_chaine(it.texte)
        it.fichier = copie_chaine(it.fichier)
    }

    tableau_insère_indice(*état.traces, résultat, indice)

    pour état.traces {
        it.id = indice_it
    }

    retourne résultat
}

donne_condensat :: fonc (message: MessageInfoAllocations) -> Condensat
{
    sha256 := crée_sha256()
    diffère détruit(sha256)

    pour * message.traces {
        ajourne(sha256, it.nom)
        ajourne(sha256, it.texte)
        ajourne(sha256, it.fichier)
    }

    retourne donne_condensat(sha256)
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom LocalServer
 * \{ */

RappelsLocalServer :: struct {
    empl base: QT_Rappels_LocalServer

    serveuse: *Serveuse
}

crée_local_server :: fonc (serveuse: *Serveuse, window: *QT_Window)
{
    résultat := QT_loge_rappel(RappelsLocalServer)
    résultat.serveuse = serveuse
    résultat.sur_connexion = local_server_sur_connection
    résultat.sur_lecture = local_server_sur_lecture

    si remove(ChaineC(CHEMIN_SOCKET.pointeur)) == -1 && lis_errno() != ENOENT {
        imprime("Impossible de supprimer le fichier : '%'\n", CHEMIN_SOCKET)
        exit(1)
    }

    server := QT_local_server_cree(résultat, window)
    saufsi QT_local_server_listen(server, vers_qt(CHEMIN_SOCKET)) {
        imprime("Impossible d'écouter la prise\n")
    }
}

local_server_sur_connection :: fonc (rappels: *RappelsLocalServer, connexion: *QT_LocalSocket @inutilisée)
{
    serveuse := rappels.serveuse
    serveuse.connexion_reçue = vrai
    serveuse.données_reçues.taille = 0
}

local_server_sur_lecture :: fonc (rappels_server: *RappelsLocalServer, connexion: *QT_LocalSocket)
{
    serveuse := rappels_server.serveuse

    tantque QT_local_socket_is_valid(connexion) {
        tampon: [1024]z8
        taille_lue := QT_local_socket_read(connexion, *tampon[0], 1024)
        si taille_lue == 0 {
            arrête
        }

        si taille_lue == -1 {
            serveuse.connexion_reçue = faux
            arrête
        }

        ancienne_taille := serveuse.données_reçues.taille
        tableau_redimensionne(serveuse.données_reçues, serveuse.données_reçues.taille + taille_lue)
        copie_mem_nonsur(src = *tampon[0], dst = serveuse.données_reçues.pointeur + ancienne_taille, taille = taille_lue)
    }

    si serveuse.données_reçues {
        message: MessageInfoAllocations

        données : []octet = serveuse.données_reçues

        tantque données.taille > 0 {
            init_de(MessageInfoAllocations)(*message)

            taille_lue := désérialise_type(message, données)
            ajoute_message(*serveuse.état_mémoire, message)
            données.pointeur += taille_lue
            données.taille -= taille_lue
        }

        serveuse.données_reçues.taille = 0
    }
}

/** \} */

PEAU1 := CouleurRVBA(0.776, 0.580, 0.467, 1.0)
PEAU2 := CouleurRVBA(0.878, 0.770, 0.675, 1.0)
PEAU_OMBRE := CouleurRVBA(0.094, 0.024, 0.0, 1.0)

crée_interface :: fonc (serveuse: *Serveuse, largeur: z32, hauteur: z32) -> CommandesDeRendu
{
    emboiteuse := *serveuse.emboiteuse

    commence_disposition(emboiteuse, largeur, hauteur)

    dispose_rectangle()
    {
        définis_arrière_plan(PEAU2)
        définis_disposition(cotation = Cotation(CROISSANTE(), CROISSANTE()))
        dessine_état_mémoire(serveuse)
    }
    termine_rectangle()

    retourne termine_disposition(emboiteuse)
}

dessine_état_mémoire :: fonc (serveuse: *Serveuse)
{
    si serveuse.connexion_reçue == faux && serveuse.données_reçues.taille == 0 {
        dispose_rectangle()
        {
            définis_disposition(cotation = Cotation(CROISSANTE(), CROISSANTE()), rembourrage = RembourrageUniforme(8.0), alignement_horizontal = AlignementEnfant.Milieu, alignement_vertical = AlignementEnfant.Milieu, séparation_enfant = 8.0)
            dispose_texte("En attente d'une connexion...", ConfigurationTexte(serveuse.fonte, PEAU_OMBRE))
        }
        termine_rectangle()
        retourne
    }

    dispose_rectangle()
    {
        définis_arrière_plan(PEAU1)
        définis_disposition(cotation = Cotation(FIXE(300), CROISSANTE()), direction = Direction.Verticale, rembourrage = RembourrageUniforme(8.0), séparation_enfant = 8.0)

        dispose_texte("Connexion établie !", ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        texte := si serveuse.état_mémoire.messages.taille > 1 {
            imprime_chaine_temp("% messages reçus", serveuse.état_mémoire.messages.taille)
        }
        sinon {
            imprime_chaine_temp("% message reçu", serveuse.état_mémoire.messages.taille)
        }
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        nombre_d_allocations := serveuse.état_mémoire.allocations.taille
        texte = si nombre_d_allocations > 1 {
            imprime_chaine_temp("% allocations", nombre_d_allocations)
        }
        sinon {
            imprime_chaine_temp("% allocation", nombre_d_allocations)
        }
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        texte = imprime_chaine_temp("mémoire utilisée % octets", serveuse.état_mémoire.mémoire_utilisée)
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        texte = imprime_chaine_temp("% traces", serveuse.état_mémoire.traces.taille)
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        texte = imprime_chaine_temp("% condensats", serveuse.état_mémoire.condensats_traces.taille)
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        texte = imprime_chaine_temp("% traces triées", serveuse.état_mémoire.traces_triées.taille)
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))

        dispose_séparateur_horizontal(20)

        dispose_bouton(serveuse, "Allocations", sur_sélection_affichage_alloc_ou_traces, 0)
        dispose_bouton(serveuse, "Traces", sur_sélection_affichage_alloc_ou_traces, 1)
    }
    termine_rectangle()

    dispose_rectangle()
    {
        définis_disposition(cotation = Cotation(hauteur = CROISSANTE()), direction = Direction.Verticale, rembourrage = RembourrageUniforme(8.0), séparation_enfant = 8.0)
        ajoute_défilage(ConfigurationDéfilage(vertical = vrai))

        si serveuse.dessine_allocations {
            pour > * serveuse.état_mémoire.allocations {
                si indice_it >= 20 {
                    arrête
                }

                dispose_rectangle(id = it.id)
                {
                    définis_arrière_plan(PEAU1)
                    définis_disposition(rembourrage = RembourrageUniforme(8.0), séparation_enfant = 8.0)

                    trace := it.traces[0]

                    sur_clic_souris(définis_allocation_sélectionnée, serveuse, (serveuse.état_mémoire.allocations.taille - indice_it) comme z32 - 1)

                    texte := imprime_chaine_temp("% octets dans '%'", it.taille, trace.traces[0].nom)
                    dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
                }
                termine_rectangle()
            }
        }
        sinon {
            saufsi serveuse.état_mémoire.les_traces_sont_triées {
                tri_rapide(serveuse.état_mémoire.traces_triées, compare_info_trace_allocations)
                serveuse.état_mémoire.les_traces_sont_triées = vrai
            }

            pour * serveuse.état_mémoire.traces_triées {
                si indice_it >= 20 {
                    arrête
                }
                indice_effectif := indice_it comme z32

                condensat := serveuse.état_mémoire.condensats_traces[it.id]

                dispose_rectangle(id = condensat.donne_chaine())
                {
                    définis_arrière_plan(PEAU1)
                    définis_disposition(rembourrage = RembourrageUniforme(8.0), séparation_enfant = 8.0)

                    sur_clic_souris(définis_trace_sélectionnée, serveuse, indice_effectif)

                    texte := imprime_chaine_temp("% allocations dans '%'", it.utilisateurs, it.traces[0].nom)
                    dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
                }
                termine_rectangle()
            }
        }
    }
    termine_rectangle()

    si serveuse.dessine_allocations {
        allocation_sélectionnée := serveuse.état_mémoire.allocation_sélectionnée
        si allocation_sélectionnée == -1 {
            retourne
        }

        allocation := serveuse.état_mémoire.allocations[allocation_sélectionnée]
        trace := allocation.traces[0]
        condensat := serveuse.état_mémoire.condensats_traces[trace.id]
        dessine_trace(serveuse, trace, condensat)
    }
    sinon {
        trace_sélectionnée := serveuse.état_mémoire.trace_sélectionnée
        si trace_sélectionnée == -1 {
            retourne
        }
        trace := serveuse.état_mémoire.traces_triées[trace_sélectionnée]
        condensat := serveuse.état_mémoire.condensats_traces[trace.id]
        dessine_trace(serveuse, trace, condensat)
    }
}

dessine_trace :: fonc (serveuse: *Serveuse, trace: *InfoTraceAllocation, condensat: Condensat)
{
    dispose_rectangle(id = "Vue Traces")
    {
        définis_disposition(cotation = Cotation(hauteur = CROISSANTE()), direction = Direction.Verticale, rembourrage = RembourrageUniforme(8.0), séparation_enfant = 8.0)
        ajoute_défilage(ConfigurationDéfilage(vertical = vrai))

        hex := condensat.donne_chaine_hex()
        dispose_texte(imprime_chaine_temp("Condensat : %", hex), ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
        déloge(hex)

        pour trace.traces {
            dispose_texte(it.fichier, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
            dispose_texte(it.texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
        }
    }
    termine_rectangle()   
}

dispose_bouton :: fonc (serveuse: *Serveuse, texte: chaine, rappel_sur_clic: fonc(*rien, ClicSouris, n64, z32)(rien), indice: z32)
{
    dispose_rectangle(id = texte)
    {
        définis_arrière_plan(PEAU2)
        définis_disposition(cotation = Cotation(CROISSANTE()), rembourrage = RembourrageUniforme(8.0), alignement_horizontal = AlignementEnfant.Milieu)
        sur_pression_souris(rappel_sur_clic, serveuse, indice)
        dispose_texte(texte, ConfigurationTexte(serveuse.petite_fonte, PEAU_OMBRE))
    }
    termine_rectangle()
}

sur_sélection_affichage_alloc_ou_traces :: fonc (serveuse: *Serveuse, souris: ClicSouris @inutilisée, id: n64 @inutilisée, indice: z32)
{
    si indice == 0 {
        serveuse.dessine_allocations = vrai
    }
    sinon si indice == 1 {
        serveuse.dessine_allocations = faux
    }
}

définis_allocation_sélectionnée :: fonc (serveuse: *Serveuse, souris: ClicSouris @inutilisée, id: n64 @inutilisée, indice: z32)
{
    assert(indice >= 0)
    assert(indice < serveuse.état_mémoire.allocations.taille)

    serveuse.état_mémoire.allocation_sélectionnée = indice
}

définis_trace_sélectionnée :: fonc (serveuse: *Serveuse, souris: ClicSouris @inutilisée, id: n64 @inutilisée, indice: z32)
{
    assert(indice >= 0)
    assert(indice < serveuse.état_mémoire.traces_triées.taille)

    serveuse.état_mémoire.trace_sélectionnée = indice
}
