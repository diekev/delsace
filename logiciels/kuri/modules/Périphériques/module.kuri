/* Module servant à définir des types et routines pour les périphériques
 * de l'ordinateur (souris, clavier, etc.). */

importe Math
importe MIME

/* ------------------------------------------------------------------------- */
/** \nom TypeCurseurSystème.
 * \{ */

TypeCurseurSystème :: énum {
    /* Curseur invisible, nul. */
    VIERGE
    /* Curseur en forme de flèche (défaut sur la plupart des systèmes). */
    FLÈCHE
    /* Curseur en forme de I pour indiquer une insertion de texte. */
    TEXTE
    /* Curseur indiquant d'attendre sur une tâche. */
    ATTENTE
    /* Curseur en forme de cible. */
    CROIX
    /* Flèche avec une attente. */
    FLÈCHE_AVEC_ATTENTE
    /* Double flèche diagonale pointant nord-ouest sud-est. */
    FLÈCHE_DOUBLE_NOSE
    /* Double flèche diagonale pointant nord-est sud-ouest. */
    FLÈCHE_DOUBLE_NESO
    /* Double flèche horizontale. */
    FLÈCHE_DOUBLE_HORIZONTALE
    /* Double flèche verticale. */
    FLÈCHE_DOUBLE_VERTICALE
    /* Superposition de toutes les doubles flèches. */
    FLÈCHE_DOUBLE_TOUT
    /* Curseur indiquant que quelque chose est interdit. */
    INTERDIT
    /* Curseur représentant une main ouverte. */
    MAIN_OUVERTE
    /* Curseur représentant une main fermée. */
    MAIN_FERMÉE
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom ClicSouris
 * \{ */

ModificateurClavier :: énum_drapeau {
    COMMANDE_OS
    CONTROL
    MAJUSCULE
    OPTION
    ALT
}

ÉtatSouris :: struct {
    quand: z64 // le temps où l'état a été enregistré
    où: Point2D(z32) // là où la souris se trouve
    modificateur: ModificateurClavier
}

ActionSouris :: énum {
    PRESSÉE
    RELACHÉE
    DÉPLACÉE
    ROULEMENT
    DOUBLE_CLIC
}

BoutonSouris :: énum {
    AUCUN
    PRIMAIRE
    CONTEXTUEL
    TERTIAIRE
    AVANT
    ARRIÈRE

    GAUCHE :: PRIMAIRE
    DROIT :: CONTEXTUEL
    MOLETTE :: TERTIAIRE
}

ClicSouris :: struct {
    état: ÉtatSouris
    action: ActionSouris
    bouton: BoutonSouris
    /* Delta pour la molette. */
    delta: z32
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom RaccourcisClavier
 * \{ */

InfoToucheClavier :: struct {
    type: ToucheClavier
    texte: chaine
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom RaccourcisClavier
 * \{ */

RaccourcisClavier :: struct {
    clé: ToucheClavier
    modificateur: ModificateurClavier
}

opérateur == :: (a: RaccourcisClavier, b: RaccourcisClavier) -> bool
{
    retourne a.clé == b.clé && a.modificateur == b.modificateur
}

ctrl :: fonc (clé: ToucheClavier) -> RaccourcisClavier
{
    résultat: RaccourcisClavier
    résultat.modificateur = ModificateurClavier.CONTROL
    résultat.clé = clé
    retourne résultat
}

ctrl_maj :: fonc (clé: ToucheClavier) -> RaccourcisClavier
{
    résultat: RaccourcisClavier
    résultat.modificateur.CONTROL = vrai
    résultat.modificateur.MAJUSCULE = vrai
    résultat.clé = clé
    retourne résultat
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Clavier
 * \{ */

ToucheClavier :: énum {
    INCONNUE

    A
    B
    C
    D
    E
    F
    G
    H
    I
    J
    K
    L
    M
    N
    O
    P
    Q
    R
    S
    T
    U
    V
    W
    Y
    X
    Z

    _0
    _1
    _2
    _3
    _4
    _5
    _6
    _7
    _8
    _9

    ENTRÉE
    EFFACE
    ÉCHAPPE
    TAB

    VIRGULE
    ESPACE
    POINT_VIRGULE
    DOUBLE_POINT
    POINT_EXCLAMATION

    FLÈCHE_GAUCHE
    FLÈCHE_DROITE
    FLÈCHE_HAUT
    FLÈCHE_BAS

    PAGE_HAUT
    PAGE_BAS
    DÉBUT
    FIN
    INSÉRER
    SUPPRIMER

    F1
    F2
    F3
    F4
    F5
    F6
    F7
    F8
    F9
    F10
    F11
    F12
    F13
    F14
    F15
    F16
    F17
    F18
    F19
    F20
    F21
    F22
    F23
    F24
    F25
    F26
    F27
    F28
    F29
    F30
    F31
    F32
    F33
    F34
    F35
}

__caractères_clé_clavier: [ToucheClavier.nombre_éléments]z8 = ---
__caractères_clé_clavier_initialisés := faux

caractère_pour_clé_clavier :: fonc (clé_clavier: ToucheClavier) -> z8
{
    saufsi __caractères_clé_clavier_initialisés {
        initialise_caractères_clé_clavier()
        __caractères_clé_clavier_initialisés = vrai
    }

    retourne __caractères_clé_clavier[clé_clavier]
}

initialise_caractères_clé_clavier :: fonc ()
{
    __caractères_clé_clavier[ToucheClavier.INCONNUE] = 0

    __caractères_clé_clavier[ToucheClavier.A] = 'a'
    __caractères_clé_clavier[ToucheClavier.B] = 'b'
    __caractères_clé_clavier[ToucheClavier.C] = 'c'
    __caractères_clé_clavier[ToucheClavier.D] = 'd'
    __caractères_clé_clavier[ToucheClavier.E] = 'e'
    __caractères_clé_clavier[ToucheClavier.F] = 'f'
    __caractères_clé_clavier[ToucheClavier.G] = 'g'
    __caractères_clé_clavier[ToucheClavier.H] = 'h'
    __caractères_clé_clavier[ToucheClavier.I] = 'i'
    __caractères_clé_clavier[ToucheClavier.J] = 'j'
    __caractères_clé_clavier[ToucheClavier.K] = 'k'
    __caractères_clé_clavier[ToucheClavier.L] = 'l'
    __caractères_clé_clavier[ToucheClavier.M] = 'm'
    __caractères_clé_clavier[ToucheClavier.N] = 'n'
    __caractères_clé_clavier[ToucheClavier.O] = 'o'
    __caractères_clé_clavier[ToucheClavier.P] = 'p'
    __caractères_clé_clavier[ToucheClavier.Q] = 'q'
    __caractères_clé_clavier[ToucheClavier.R] = 'r'
    __caractères_clé_clavier[ToucheClavier.S] = 's'
    __caractères_clé_clavier[ToucheClavier.T] = 't'
    __caractères_clé_clavier[ToucheClavier.U] = 'u'
    __caractères_clé_clavier[ToucheClavier.V] = 'v'
    __caractères_clé_clavier[ToucheClavier.W] = 'w'
    __caractères_clé_clavier[ToucheClavier.X] = 'x'
    __caractères_clé_clavier[ToucheClavier.Y] = 'y'
    __caractères_clé_clavier[ToucheClavier.Z] = 'z'

    __caractères_clé_clavier[ToucheClavier._0] = '0'
    __caractères_clé_clavier[ToucheClavier._1] = '1'
    __caractères_clé_clavier[ToucheClavier._2] = '2'
    __caractères_clé_clavier[ToucheClavier._3] = '3'
    __caractères_clé_clavier[ToucheClavier._4] = '4'
    __caractères_clé_clavier[ToucheClavier._5] = '5'
    __caractères_clé_clavier[ToucheClavier._6] = '6'
    __caractères_clé_clavier[ToucheClavier._7] = '7'
    __caractères_clé_clavier[ToucheClavier._8] = '8'
    __caractères_clé_clavier[ToucheClavier._9] = '9'

    __caractères_clé_clavier[ToucheClavier.ENTRÉE] = '\n'
    __caractères_clé_clavier[ToucheClavier.EFFACE] = 0
    __caractères_clé_clavier[ToucheClavier.ÉCHAPPE] = 0
    __caractères_clé_clavier[ToucheClavier.TAB] = '\t'
    __caractères_clé_clavier[ToucheClavier.ESPACE] = ' '

    __caractères_clé_clavier[ToucheClavier.VIRGULE] = ','
    __caractères_clé_clavier[ToucheClavier.POINT_VIRGULE] = ';'
    __caractères_clé_clavier[ToucheClavier.DOUBLE_POINT] = ':'
    __caractères_clé_clavier[ToucheClavier.POINT_EXCLAMATION] = '!'
}

/** \} */

/* ------------------------------------------------------------------------- */
/** \nom Évènement
 * \{ */

TypeÉvènement :: énum {
    NonInitialisé
    Fermeture
    Souris
    Clavier
    DragAndDrop
    // Tablette
    // Window
    // Molette séparée de souris ?
    // Entrée texte séparée de clavier hors IME ?
}

Évènement :: struct {
    type: TypeÉvènement

    /* Pour les évènements souris. */
    état_souris: ÉtatSouris
    action_souris: ActionSouris
    bouton_souris: BoutonSouris
    /* Delta pour la molette. */
    delta_souris: z32

    /* Pour les évènements clavier. */
    touche: ToucheClavier
    modificateurs: ModificateurClavier
    touche_pressée: bool
    est_répétée: bool
    texte: chaine
    compte: z32
    code_scan_natif: n32
    modificateurs_natifs: n32
    clé_virtuelle_native: n32

    /* Mimes pour un Drop */
    mimes: [..]DonnéesMime
}

donne_clic_souris :: fonc (empl évènement: &Évènement) -> ClicSouris
{
    clic: ClicSouris = ---
    clic.état = état_souris
    clic.action = action_souris
    clic.bouton = bouton_souris
    clic.delta = delta_souris
    retourne clic
}

initialise_depuis_clic :: fonc (évènement: *Évènement, clic: ClicSouris)
{
    évènement.type = TypeÉvènement.Souris
    évènement.état_souris = clic.état
    évènement.bouton_souris = clic.bouton
    évènement.delta_souris = clic.delta
    évènement.action_souris = clic.action
}

/** \} */
