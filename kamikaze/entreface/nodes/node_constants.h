/****************************************************************************
**
* *Copyright (C) 2014
**
* *This file is generated by the Magus toolkit
**
* *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* *"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* *LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* *A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* *OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* *LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* *DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* *THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* *(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* *OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#pragma once

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wuseless-cast"
#pragma GCC diagnostic ignored "-Weffc++"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#include <QGraphicsItem>
#pragma GCC diagnostic pop

/* Enums */
enum Alignment {
	ALIGNED_LEFT,
	ALIGNED_RIGHT,
	ALIGNED_CENTER
};

/* Types */
static constexpr auto NODE_KEY_GRAPHIC_ITEM_TYPE = 1;
static constexpr auto NODE_KEY_GRAPHIC_ITEM_SUBTYPE = 2;
static constexpr auto NODE_VALUE_TYPE_NODE = 2;
static constexpr auto NODE_VALUE_TYPE_NODE_BODY = 3;
static constexpr auto NODE_VALUE_TYPE_HEADER_ICON = 4;
static constexpr auto NODE_VALUE_TYPE_ACTION_1_ICON = 5;
static constexpr auto NODE_VALUE_TYPE_ACTION_2_ICON = 6;
static constexpr auto NODE_VALUE_TYPE_PORT = 7;
static constexpr auto NODE_VALUE_TYPE_HEADER_TITLE = 8;
static constexpr auto NODE_VALUE_TYPE_CONNECTION = 9;
static constexpr auto NODE_VALUE_SUBTYPE_OBJECT = 10;

static inline bool check_type(QGraphicsItem *item, int key_type, int node_type)
{
	if (item->data(key_type).isValid()) {
		return item->data(key_type).toInt() == node_type;
	}

	return false;
}

static inline bool is_object_node(QGraphicsItem *item)
{
	return check_type(item, NODE_KEY_GRAPHIC_ITEM_SUBTYPE, NODE_VALUE_SUBTYPE_OBJECT);
}

static inline bool is_node(QGraphicsItem *item)
{
	return check_type(item, NODE_KEY_GRAPHIC_ITEM_TYPE, NODE_VALUE_TYPE_NODE);
}

static inline bool is_connexion(QGraphicsItem *item)
{
	return check_type(item, NODE_KEY_GRAPHIC_ITEM_TYPE, NODE_VALUE_TYPE_CONNECTION);
}
